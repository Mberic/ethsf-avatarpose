var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject2(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject2(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject2);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f)
        i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject2) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject2(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve2, reject2) {
        v = o[n](v), settle(resolve2, reject2, v.done, v.value);
      });
    };
  }
  function settle(resolve2, reject2, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve2({ value: v2, done: d });
    }, reject2);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner)
      dispose = function() {
        try {
          inner.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1)
          return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async)
            return s |= 2, Promise.resolve(result).then(next, function(e) {
              fail(e);
              return next();
            });
        } else
          s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1)
      return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/ethers/lib.commonjs/_version.js
var require_version = __commonJS({
  "node_modules/ethers/lib.commonjs/_version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.version = void 0;
    exports2.version = "6.13.5";
  }
});

// node_modules/ethers/lib.commonjs/utils/properties.js
var require_properties = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/properties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineProperties = exports2.resolveProperties = void 0;
    function checkType(value, type, name) {
      const types = type.split("|").map((t) => t.trim());
      for (let i = 0; i < types.length; i++) {
        switch (type) {
          case "any":
            return;
          case "bigint":
          case "boolean":
          case "number":
          case "string":
            if (typeof value === type) {
              return;
            }
        }
      }
      const error = new Error(`invalid value for type ${type}`);
      error.code = "INVALID_ARGUMENT";
      error.argument = `value.${name}`;
      error.value = value;
      throw error;
    }
    async function resolveProperties(value) {
      const keys = Object.keys(value);
      const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
      return results.reduce((accum, v, index) => {
        accum[keys[index]] = v;
        return accum;
      }, {});
    }
    exports2.resolveProperties = resolveProperties;
    function defineProperties(target, values, types) {
      for (let key in values) {
        let value = values[key];
        const type = types ? types[key] : null;
        if (type) {
          checkType(value, type, key);
        }
        Object.defineProperty(target, key, { enumerable: true, value, writable: false });
      }
    }
    exports2.defineProperties = defineProperties;
  }
});

// node_modules/ethers/lib.commonjs/utils/errors.js
var require_errors = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertPrivate = exports2.assertNormalize = exports2.assertArgumentCount = exports2.assertArgument = exports2.assert = exports2.makeError = exports2.isCallException = exports2.isError = void 0;
    var _version_js_1 = require_version();
    var properties_js_1 = require_properties();
    function stringify(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[ " + value.map(stringify).join(", ") + " ]";
      }
      if (value instanceof Uint8Array) {
        const HEX = "0123456789abcdef";
        let result = "0x";
        for (let i = 0; i < value.length; i++) {
          result += HEX[value[i] >> 4];
          result += HEX[value[i] & 15];
        }
        return result;
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return stringify(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
          return BigInt(value).toString();
        case "number":
          return value.toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
        }
      }
      return `[ COULD NOT SERIALIZE ]`;
    }
    function isError(error, code) {
      return error && error.code === code;
    }
    exports2.isError = isError;
    function isCallException(error) {
      return isError(error, "CALL_EXCEPTION");
    }
    exports2.isCallException = isCallException;
    function makeError(message, code, info) {
      let shortMessage = message;
      {
        const details = [];
        if (info) {
          if ("message" in info || "code" in info || "name" in info) {
            throw new Error(`value will overwrite populated values: ${stringify(info)}`);
          }
          for (const key in info) {
            if (key === "shortMessage") {
              continue;
            }
            const value = info[key];
            details.push(key + "=" + stringify(value));
          }
        }
        details.push(`code=${code}`);
        details.push(`version=${_version_js_1.version}`);
        if (details.length) {
          message += " (" + details.join(", ") + ")";
        }
      }
      let error;
      switch (code) {
        case "INVALID_ARGUMENT":
          error = new TypeError(message);
          break;
        case "NUMERIC_FAULT":
        case "BUFFER_OVERRUN":
          error = new RangeError(message);
          break;
        default:
          error = new Error(message);
      }
      (0, properties_js_1.defineProperties)(error, { code });
      if (info) {
        Object.assign(error, info);
      }
      if (error.shortMessage == null) {
        (0, properties_js_1.defineProperties)(error, { shortMessage });
      }
      return error;
    }
    exports2.makeError = makeError;
    function assert(check, message, code, info) {
      if (!check) {
        throw makeError(message, code, info);
      }
    }
    exports2.assert = assert;
    function assertArgument(check, message, name, value) {
      assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
    }
    exports2.assertArgument = assertArgument;
    function assertArgumentCount(count, expectedCount, message) {
      if (message == null) {
        message = "";
      }
      if (message) {
        message = ": " + message;
      }
      assert(count >= expectedCount, "missing argument" + message, "MISSING_ARGUMENT", {
        count,
        expectedCount
      });
      assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
        count,
        expectedCount
      });
    }
    exports2.assertArgumentCount = assertArgumentCount;
    var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad");
        }
        ;
        if (form === "NFD") {
          const check = String.fromCharCode(233).normalize("NFD");
          const expected = String.fromCharCode(101, 769);
          if (check !== expected) {
            throw new Error("broken");
          }
        }
        accum.push(form);
      } catch (error) {
      }
      return accum;
    }, []);
    function assertNormalize(form) {
      assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
        operation: "String.prototype.normalize",
        info: { form }
      });
    }
    exports2.assertNormalize = assertNormalize;
    function assertPrivate(givenGuard, guard, className) {
      if (className == null) {
        className = "";
      }
      if (givenGuard !== guard) {
        let method = className, operation = "new";
        if (className) {
          method += ".";
          operation += " " + className;
        }
        assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
          operation
        });
      }
    }
    exports2.assertPrivate = assertPrivate;
  }
});

// node_modules/ethers/lib.commonjs/utils/data.js
var require_data = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/data.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zeroPadBytes = exports2.zeroPadValue = exports2.stripZerosLeft = exports2.dataSlice = exports2.dataLength = exports2.concat = exports2.hexlify = exports2.isBytesLike = exports2.isHexString = exports2.getBytesCopy = exports2.getBytes = void 0;
    var errors_js_1 = require_errors();
    function _getBytes(value, name, copy) {
      if (value instanceof Uint8Array) {
        if (copy) {
          return new Uint8Array(value);
        }
        return value;
      }
      if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
        const result = new Uint8Array((value.length - 2) / 2);
        let offset = 2;
        for (let i = 0; i < result.length; i++) {
          result[i] = parseInt(value.substring(offset, offset + 2), 16);
          offset += 2;
        }
        return result;
      }
      (0, errors_js_1.assertArgument)(false, "invalid BytesLike value", name || "value", value);
    }
    function getBytes(value, name) {
      return _getBytes(value, name, false);
    }
    exports2.getBytes = getBytes;
    function getBytesCopy(value, name) {
      return _getBytes(value, name, true);
    }
    exports2.getBytesCopy = getBytesCopy;
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (typeof length === "number" && value.length !== 2 + 2 * length) {
        return false;
      }
      if (length === true && value.length % 2 !== 0) {
        return false;
      }
      return true;
    }
    exports2.isHexString = isHexString;
    function isBytesLike(value) {
      return isHexString(value, true) || value instanceof Uint8Array;
    }
    exports2.isBytesLike = isBytesLike;
    var HexCharacters = "0123456789abcdef";
    function hexlify(data) {
      const bytes = getBytes(data);
      let result = "0x";
      for (let i = 0; i < bytes.length; i++) {
        const v = bytes[i];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    exports2.hexlify = hexlify;
    function concat(datas) {
      return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
    }
    exports2.concat = concat;
    function dataLength(data) {
      if (isHexString(data, true)) {
        return (data.length - 2) / 2;
      }
      return getBytes(data).length;
    }
    exports2.dataLength = dataLength;
    function dataSlice(data, start, end) {
      const bytes = getBytes(data);
      if (end != null && end > bytes.length) {
        (0, errors_js_1.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
          buffer: bytes,
          length: bytes.length,
          offset: end
        });
      }
      return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
    }
    exports2.dataSlice = dataSlice;
    function stripZerosLeft(data) {
      let bytes = hexlify(data).substring(2);
      while (bytes.startsWith("00")) {
        bytes = bytes.substring(2);
      }
      return "0x" + bytes;
    }
    exports2.stripZerosLeft = stripZerosLeft;
    function zeroPad(data, length, left) {
      const bytes = getBytes(data);
      (0, errors_js_1.assert)(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
        buffer: new Uint8Array(bytes),
        length,
        offset: length + 1
      });
      const result = new Uint8Array(length);
      result.fill(0);
      if (left) {
        result.set(bytes, length - bytes.length);
      } else {
        result.set(bytes, 0);
      }
      return hexlify(result);
    }
    function zeroPadValue(data, length) {
      return zeroPad(data, length, true);
    }
    exports2.zeroPadValue = zeroPadValue;
    function zeroPadBytes(data, length) {
      return zeroPad(data, length, false);
    }
    exports2.zeroPadBytes = zeroPadBytes;
  }
});

// node_modules/ethers/lib.commonjs/utils/maths.js
var require_maths = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/maths.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toQuantity = exports2.toBeArray = exports2.toBeHex = exports2.toNumber = exports2.getNumber = exports2.toBigInt = exports2.getUint = exports2.getBigInt = exports2.mask = exports2.toTwos = exports2.fromTwos = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var maxValue = 9007199254740991;
    function fromTwos(_value, _width) {
      const value = getUint(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      (0, errors_js_1.assert)(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
        operation: "fromTwos",
        fault: "overflow",
        value: _value
      });
      if (value >> width - BN_1) {
        const mask2 = (BN_1 << width) - BN_1;
        return -((~value & mask2) + BN_1);
      }
      return value;
    }
    exports2.fromTwos = fromTwos;
    function toTwos(_value, _width) {
      let value = getBigInt(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      const limit = BN_1 << width - BN_1;
      if (value < BN_0) {
        value = -value;
        (0, errors_js_1.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
        const mask2 = (BN_1 << width) - BN_1;
        return (~value & mask2) + BN_1;
      } else {
        (0, errors_js_1.assert)(value < limit, "too high", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
      }
      return value;
    }
    exports2.toTwos = toTwos;
    function mask(_value, _bits) {
      const value = getUint(_value, "value");
      const bits = BigInt(getNumber(_bits, "bits"));
      return value & (BN_1 << bits) - BN_1;
    }
    exports2.mask = mask;
    function getBigInt(value, name) {
      switch (typeof value) {
        case "bigint":
          return value;
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return BigInt(value);
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            if (value[0] === "-" && value[1] !== "-") {
              return -BigInt(value.substring(1));
            }
            return BigInt(value);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
    }
    exports2.getBigInt = getBigInt;
    function getUint(value, name) {
      const result = getBigInt(value, name);
      (0, errors_js_1.assert)(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
        fault: "overflow",
        operation: "getUint",
        value
      });
      return result;
    }
    exports2.getUint = getUint;
    var Nibbles = "0123456789abcdef";
    function toBigInt(value) {
      if (value instanceof Uint8Array) {
        let result = "0x0";
        for (const v of value) {
          result += Nibbles[v >> 4];
          result += Nibbles[v & 15];
        }
        return BigInt(result);
      }
      return getBigInt(value);
    }
    exports2.toBigInt = toBigInt;
    function getNumber(value, name) {
      switch (typeof value) {
        case "bigint":
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return Number(value);
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return value;
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            return getNumber(BigInt(value), name);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid numeric value", name || "value", value);
    }
    exports2.getNumber = getNumber;
    function toNumber(value) {
      return getNumber(toBigInt(value));
    }
    exports2.toNumber = toNumber;
    function toBeHex(_value, _width) {
      const value = getUint(_value, "value");
      let result = value.toString(16);
      if (_width == null) {
        if (result.length % 2) {
          result = "0" + result;
        }
      } else {
        const width = getNumber(_width, "width");
        (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
          operation: "toBeHex",
          fault: "overflow",
          value: _value
        });
        while (result.length < width * 2) {
          result = "0" + result;
        }
      }
      return "0x" + result;
    }
    exports2.toBeHex = toBeHex;
    function toBeArray(_value) {
      const value = getUint(_value, "value");
      if (value === BN_0) {
        return new Uint8Array([]);
      }
      let hex = value.toString(16);
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      const result = new Uint8Array(hex.length / 2);
      for (let i = 0; i < result.length; i++) {
        const offset = i * 2;
        result[i] = parseInt(hex.substring(offset, offset + 2), 16);
      }
      return result;
    }
    exports2.toBeArray = toBeArray;
    function toQuantity(value) {
      let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray(value)).substring(2);
      while (result.startsWith("0")) {
        result = result.substring(1);
      }
      if (result === "") {
        result = "0";
      }
      return "0x" + result;
    }
    exports2.toQuantity = toQuantity;
  }
});

// node_modules/ethers/lib.commonjs/utils/base58.js
var require_base58 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base58.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeBase58 = exports2.encodeBase58 = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var maths_js_1 = require_maths();
    var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    var Lookup = null;
    function getAlpha(letter) {
      if (Lookup == null) {
        Lookup = {};
        for (let i = 0; i < Alphabet.length; i++) {
          Lookup[Alphabet[i]] = BigInt(i);
        }
      }
      const result = Lookup[letter];
      (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
      return result;
    }
    var BN_0 = BigInt(0);
    var BN_58 = BigInt(58);
    function encodeBase58(_value) {
      const bytes = (0, data_js_1.getBytes)(_value);
      let value = (0, maths_js_1.toBigInt)(bytes);
      let result = "";
      while (value) {
        result = Alphabet[Number(value % BN_58)] + result;
        value /= BN_58;
      }
      for (let i = 0; i < bytes.length; i++) {
        if (bytes[i]) {
          break;
        }
        result = Alphabet[0] + result;
      }
      return result;
    }
    exports2.encodeBase58 = encodeBase58;
    function decodeBase58(value) {
      let result = BN_0;
      for (let i = 0; i < value.length; i++) {
        result *= BN_58;
        result += getAlpha(value[i]);
      }
      return result;
    }
    exports2.decodeBase58 = decodeBase58;
  }
});

// node_modules/ethers/lib.commonjs/utils/base64.js
var require_base64 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeBase64 = exports2.decodeBase64 = void 0;
    var data_js_1 = require_data();
    function decodeBase64(value) {
      return (0, data_js_1.getBytesCopy)(Buffer.from(value, "base64"));
    }
    exports2.decodeBase64 = decodeBase64;
    function encodeBase64(data) {
      return Buffer.from((0, data_js_1.getBytes)(data)).toString("base64");
    }
    exports2.encodeBase64 = encodeBase64;
  }
});

// node_modules/ethers/lib.commonjs/utils/events.js
var require_events = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/events.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventPayload = void 0;
    var properties_js_1 = require_properties();
    var EventPayload = class {
      /**
       *  The event filter.
       */
      filter;
      /**
       *  The **EventEmitterable**.
       */
      emitter;
      #listener;
      /**
       *  Create a new **EventPayload** for %%emitter%% with
       *  the %%listener%% and for %%filter%%.
       */
      constructor(emitter, listener, filter) {
        this.#listener = listener;
        (0, properties_js_1.defineProperties)(this, { emitter, filter });
      }
      /**
       *  Unregister the triggered listener for future events.
       */
      async removeListener() {
        if (this.#listener == null) {
          return;
        }
        await this.emitter.off(this.filter, this.#listener);
      }
    };
    exports2.EventPayload = EventPayload;
  }
});

// node_modules/ethers/lib.commonjs/utils/utf8.js
var require_utf8 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/utf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8CodePoints = exports2.toUtf8String = exports2.toUtf8Bytes = exports2.Utf8ErrorFuncs = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
      (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
        let i = 0;
        for (let o = offset + 1; o < bytes.length; o++) {
          if (bytes[o] >> 6 !== 2) {
            break;
          }
          i++;
        }
        return i;
      }
      if (reason === "OVERRUN") {
        return bytes.length - offset - 1;
      }
      return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      if (reason === "OVERLONG") {
        (0, errors_js_1.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
        output.push(badCodepoint);
        return 0;
      }
      output.push(65533);
      return ignoreFunc(reason, offset, bytes, output, badCodepoint);
    }
    exports2.Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
    function getUtf8CodePoints(_bytes, onError) {
      if (onError == null) {
        onError = exports2.Utf8ErrorFuncs.error;
      }
      const bytes = (0, data_js_1.getBytes)(_bytes, "bytes");
      const result = [];
      let i = 0;
      while (i < bytes.length) {
        const c = bytes[i++];
        if (c >> 7 === 0) {
          result.push(c);
          continue;
        }
        let extraLength = null;
        let overlongMask = null;
        if ((c & 224) === 192) {
          extraLength = 1;
          overlongMask = 127;
        } else if ((c & 240) === 224) {
          extraLength = 2;
          overlongMask = 2047;
        } else if ((c & 248) === 240) {
          extraLength = 3;
          overlongMask = 65535;
        } else {
          if ((c & 192) === 128) {
            i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
          } else {
            i += onError("BAD_PREFIX", i - 1, bytes, result);
          }
          continue;
        }
        if (i - 1 + extraLength >= bytes.length) {
          i += onError("OVERRUN", i - 1, bytes, result);
          continue;
        }
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for (let j = 0; j < extraLength; j++) {
          let nextChar = bytes[i];
          if ((nextChar & 192) != 128) {
            i += onError("MISSING_CONTINUE", i, bytes, result);
            res = null;
            break;
          }
          ;
          res = res << 6 | nextChar & 63;
          i++;
        }
        if (res === null) {
          continue;
        }
        if (res > 1114111) {
          i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res >= 55296 && res <= 57343) {
          i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res <= overlongMask) {
          i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        result.push(res);
      }
      return result;
    }
    function toUtf8Bytes(str, form) {
      (0, errors_js_1.assertArgument)(typeof str === "string", "invalid string value", "str", str);
      if (form != null) {
        (0, errors_js_1.assertNormalize)(form);
        str = str.normalize(form);
      }
      let result = [];
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          result.push(c);
        } else if (c < 2048) {
          result.push(c >> 6 | 192);
          result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
          i++;
          const c2 = str.charCodeAt(i);
          (0, errors_js_1.assertArgument)(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
          const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
          result.push(pair >> 18 | 240);
          result.push(pair >> 12 & 63 | 128);
          result.push(pair >> 6 & 63 | 128);
          result.push(pair & 63 | 128);
        } else {
          result.push(c >> 12 | 224);
          result.push(c >> 6 & 63 | 128);
          result.push(c & 63 | 128);
        }
      }
      return new Uint8Array(result);
    }
    exports2.toUtf8Bytes = toUtf8Bytes;
    function _toUtf8String(codePoints) {
      return codePoints.map((codePoint) => {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
      }).join("");
    }
    function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    exports2.toUtf8String = toUtf8String;
    function toUtf8CodePoints(str, form) {
      return getUtf8CodePoints(toUtf8Bytes(str, form));
    }
    exports2.toUtf8CodePoints = toUtf8CodePoints;
  }
});

// node_modules/ethers/lib.commonjs/utils/geturl.js
var require_geturl = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/geturl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUrl = exports2.createGetUrl = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http_1 = tslib_1.__importDefault(require("http"));
    var https_1 = tslib_1.__importDefault(require("https"));
    var zlib_1 = require("zlib");
    var errors_js_1 = require_errors();
    var data_js_1 = require_data();
    function createGetUrl(options) {
      async function getUrl2(req, signal) {
        (0, errors_js_1.assert)(signal == null || !signal.cancelled, "request cancelled before sending", "CANCELLED");
        const protocol = req.url.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
          info: { protocol },
          operation: "request"
        });
        (0, errors_js_1.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
          operation: "request"
        });
        const method = req.method;
        const headers = Object.assign({}, req.headers);
        const reqOptions = { method, headers };
        if (options) {
          if (options.agent) {
            reqOptions.agent = options.agent;
          }
        }
        let abort = null;
        try {
          abort = new AbortController();
          reqOptions.abort = abort.signal;
        } catch (e) {
          console.log(e);
        }
        const request = (protocol === "http" ? http_1.default : https_1.default).request(req.url, reqOptions);
        request.setTimeout(req.timeout);
        const body = req.body;
        if (body) {
          request.write(Buffer.from(body));
        }
        request.end();
        return new Promise((resolve2, reject2) => {
          if (signal) {
            signal.addListener(() => {
              if (abort) {
                abort.abort();
              }
              reject2((0, errors_js_1.makeError)("request cancelled", "CANCELLED"));
            });
          }
          request.on("timeout", () => {
            reject2((0, errors_js_1.makeError)("request timeout", "TIMEOUT"));
          });
          request.once("response", (resp) => {
            const statusCode = resp.statusCode || 0;
            const statusMessage = resp.statusMessage || "";
            const headers2 = Object.keys(resp.headers || {}).reduce((accum, name) => {
              let value = resp.headers[name] || "";
              if (Array.isArray(value)) {
                value = value.join(", ");
              }
              accum[name] = value;
              return accum;
            }, {});
            let body2 = null;
            resp.on("data", (chunk) => {
              if (signal) {
                try {
                  signal.checkSignal();
                } catch (error) {
                  return reject2(error);
                }
              }
              if (body2 == null) {
                body2 = chunk;
              } else {
                const newBody = new Uint8Array(body2.length + chunk.length);
                newBody.set(body2, 0);
                newBody.set(chunk, body2.length);
                body2 = newBody;
              }
            });
            resp.on("end", () => {
              if (headers2["content-encoding"] === "gzip" && body2) {
                body2 = (0, data_js_1.getBytes)((0, zlib_1.gunzipSync)(body2));
              }
              resolve2({ statusCode, statusMessage, headers: headers2, body: body2 });
            });
            resp.on("error", (error) => {
              error.response = { statusCode, statusMessage, headers: headers2, body: body2 };
              reject2(error);
            });
          });
          request.on("error", (error) => {
            reject2(error);
          });
        });
      }
      return getUrl2;
    }
    exports2.createGetUrl = createGetUrl;
    var defaultGetUrl = createGetUrl({});
    async function getUrl(req, signal) {
      return defaultGetUrl(req, signal);
    }
    exports2.getUrl = getUrl;
  }
});

// node_modules/ethers/lib.commonjs/utils/fetch.js
var require_fetch = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fetch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FetchResponse = exports2.FetchRequest = exports2.FetchCancelSignal = void 0;
    var base64_js_1 = require_base64();
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var properties_js_1 = require_properties();
    var utf8_js_1 = require_utf8();
    var geturl_js_1 = require_geturl();
    var MAX_ATTEMPTS = 12;
    var SLOT_INTERVAL = 250;
    var defaultGetUrlFunc = (0, geturl_js_1.createGetUrl)();
    var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
    var reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
    var locked = false;
    async function dataGatewayFunc(url, signal) {
      try {
        const match = url.match(reData);
        if (!match) {
          throw new Error("invalid data");
        }
        return new FetchResponse(200, "OK", {
          "content-type": match[1] || "text/plain"
        }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));
      } catch (error) {
        return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
      }
    }
    function getIpfsGatewayFunc(baseUrl) {
      async function gatewayIpfs(url, signal) {
        try {
          const match = url.match(reIpfs);
          if (!match) {
            throw new Error("invalid link");
          }
          return new FetchRequest(`${baseUrl}${match[2]}`);
        } catch (error) {
          return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
        }
      }
      return gatewayIpfs;
    }
    var Gateways = {
      "data": dataGatewayFunc,
      "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
    };
    var fetchSignals = /* @__PURE__ */ new WeakMap();
    var FetchCancelSignal = class {
      #listeners;
      #cancelled;
      constructor(request) {
        this.#listeners = [];
        this.#cancelled = false;
        fetchSignals.set(request, () => {
          if (this.#cancelled) {
            return;
          }
          this.#cancelled = true;
          for (const listener of this.#listeners) {
            setTimeout(() => {
              listener();
            }, 0);
          }
          this.#listeners = [];
        });
      }
      addListener(listener) {
        (0, errors_js_1.assert)(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
          operation: "fetchCancelSignal.addCancelListener"
        });
        this.#listeners.push(listener);
      }
      get cancelled() {
        return this.#cancelled;
      }
      checkSignal() {
        (0, errors_js_1.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
      }
    };
    exports2.FetchCancelSignal = FetchCancelSignal;
    function checkSignal(signal) {
      if (signal == null) {
        throw new Error("missing signal; should not happen");
      }
      signal.checkSignal();
      return signal;
    }
    var FetchRequest = class _FetchRequest {
      #allowInsecure;
      #gzip;
      #headers;
      #method;
      #timeout;
      #url;
      #body;
      #bodyType;
      #creds;
      // Hooks
      #preflight;
      #process;
      #retry;
      #signal;
      #throttle;
      #getUrlFunc;
      /**
       *  The fetch URL to request.
       */
      get url() {
        return this.#url;
      }
      set url(url) {
        this.#url = String(url);
      }
      /**
       *  The fetch body, if any, to send as the request body. //(default: null)//
       *
       *  When setting a body, the intrinsic ``Content-Type`` is automatically
       *  set and will be used if **not overridden** by setting a custom
       *  header.
       *
       *  If %%body%% is null, the body is cleared (along with the
       *  intrinsic ``Content-Type``).
       *
       *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
       *  ``text/plain``.
       *
       *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
       *  ``application/octet-stream``.
       *
       *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
       *  set to ``application/json``.
       */
      get body() {
        if (this.#body == null) {
          return null;
        }
        return new Uint8Array(this.#body);
      }
      set body(body) {
        if (body == null) {
          this.#body = void 0;
          this.#bodyType = void 0;
        } else if (typeof body === "string") {
          this.#body = (0, utf8_js_1.toUtf8Bytes)(body);
          this.#bodyType = "text/plain";
        } else if (body instanceof Uint8Array) {
          this.#body = body;
          this.#bodyType = "application/octet-stream";
        } else if (typeof body === "object") {
          this.#body = (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body));
          this.#bodyType = "application/json";
        } else {
          throw new Error("invalid body");
        }
      }
      /**
       *  Returns true if the request has a body.
       */
      hasBody() {
        return this.#body != null;
      }
      /**
       *  The HTTP method to use when requesting the URI. If no method
       *  has been explicitly set, then ``GET`` is used if the body is
       *  null and ``POST`` otherwise.
       */
      get method() {
        if (this.#method) {
          return this.#method;
        }
        if (this.hasBody()) {
          return "POST";
        }
        return "GET";
      }
      set method(method) {
        if (method == null) {
          method = "";
        }
        this.#method = String(method).toUpperCase();
      }
      /**
       *  The headers that will be used when requesting the URI. All
       *  keys are lower-case.
       *
       *  This object is a copy, so any changes will **NOT** be reflected
       *  in the ``FetchRequest``.
       *
       *  To set a header entry, use the ``setHeader`` method.
       */
      get headers() {
        const headers = Object.assign({}, this.#headers);
        if (this.#creds) {
          headers["authorization"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(this.#creds))}`;
        }
        ;
        if (this.allowGzip) {
          headers["accept-encoding"] = "gzip";
        }
        if (headers["content-type"] == null && this.#bodyType) {
          headers["content-type"] = this.#bodyType;
        }
        if (this.body) {
          headers["content-length"] = String(this.body.length);
        }
        return headers;
      }
      /**
       *  Get the header for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Set the header for %%key%% to %%value%%. All values are coerced
       *  to a string.
       */
      setHeader(key, value) {
        this.#headers[String(key).toLowerCase()] = String(value);
      }
      /**
       *  Clear all headers, resetting all intrinsic headers.
       */
      clearHeaders() {
        this.#headers = {};
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The value that will be sent for the ``Authorization`` header.
       *
       *  To set the credentials, use the ``setCredentials`` method.
       */
      get credentials() {
        return this.#creds || null;
      }
      /**
       *  Sets an ``Authorization`` for %%username%% with %%password%%.
       */
      setCredentials(username, password) {
        (0, errors_js_1.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
        this.#creds = `${username}:${password}`;
      }
      /**
       *  Enable and request gzip-encoded responses. The response will
       *  automatically be decompressed. //(default: true)//
       */
      get allowGzip() {
        return this.#gzip;
      }
      set allowGzip(value) {
        this.#gzip = !!value;
      }
      /**
       *  Allow ``Authentication`` credentials to be sent over insecure
       *  channels. //(default: false)//
       */
      get allowInsecureAuthentication() {
        return !!this.#allowInsecure;
      }
      set allowInsecureAuthentication(value) {
        this.#allowInsecure = !!value;
      }
      /**
       *  The timeout (in milliseconds) to wait for a complete response.
       *  //(default: 5 minutes)//
       */
      get timeout() {
        return this.#timeout;
      }
      set timeout(timeout) {
        (0, errors_js_1.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
        this.#timeout = timeout;
      }
      /**
       *  This function is called prior to each request, for example
       *  during a redirection or retry in case of server throttling.
       *
       *  This offers an opportunity to populate headers or update
       *  content before sending a request.
       */
      get preflightFunc() {
        return this.#preflight || null;
      }
      set preflightFunc(preflight) {
        this.#preflight = preflight;
      }
      /**
       *  This function is called after each response, offering an
       *  opportunity to provide client-level throttling or updating
       *  response data.
       *
       *  Any error thrown in this causes the ``send()`` to throw.
       *
       *  To schedule a retry attempt (assuming the maximum retry limit
       *  has not been reached), use [[response.throwThrottleError]].
       */
      get processFunc() {
        return this.#process || null;
      }
      set processFunc(process2) {
        this.#process = process2;
      }
      /**
       *  This function is called on each retry attempt.
       */
      get retryFunc() {
        return this.#retry || null;
      }
      set retryFunc(retry) {
        this.#retry = retry;
      }
      /**
       *  This function is called to fetch content from HTTP and
       *  HTTPS URLs and is platform specific (e.g. nodejs vs
       *  browsers).
       *
       *  This is by default the currently registered global getUrl
       *  function, which can be changed using [[registerGetUrl]].
       *  If this has been set, setting is to ``null`` will cause
       *  this FetchRequest (and any future clones) to revert back to
       *  using the currently registered global getUrl function.
       *
       *  Setting this is generally not necessary, but may be useful
       *  for developers that wish to intercept requests or to
       *  configurege a proxy or other agent.
       */
      get getUrlFunc() {
        return this.#getUrlFunc || defaultGetUrlFunc;
      }
      set getUrlFunc(value) {
        this.#getUrlFunc = value;
      }
      /**
       *  Create a new FetchRequest instance with default values.
       *
       *  Once created, each property may be set before issuing a
       *  ``.send()`` to make the request.
       */
      constructor(url) {
        this.#url = String(url);
        this.#allowInsecure = false;
        this.#gzip = true;
        this.#headers = {};
        this.#method = "";
        this.#timeout = 3e5;
        this.#throttle = {
          slotInterval: SLOT_INTERVAL,
          maxAttempts: MAX_ATTEMPTS
        };
        this.#getUrlFunc = null;
      }
      toString() {
        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : "null"}>`;
      }
      /**
       *  Update the throttle parameters used to determine maximum
       *  attempts and exponential-backoff properties.
       */
      setThrottleParams(params) {
        if (params.slotInterval != null) {
          this.#throttle.slotInterval = params.slotInterval;
        }
        if (params.maxAttempts != null) {
          this.#throttle.maxAttempts = params.maxAttempts;
        }
      }
      async #send(attempt, expires, delay, _request, _response) {
        if (attempt >= this.#throttle.maxAttempts) {
          return _response.makeServerError("exceeded maximum retry limit");
        }
        (0, errors_js_1.assert)(getTime() <= expires, "timeout", "TIMEOUT", {
          operation: "request.send",
          reason: "timeout",
          request: _request
        });
        if (delay > 0) {
          await wait(delay);
        }
        let req = this.clone();
        const scheme = (req.url.split(":")[0] || "").toLowerCase();
        if (scheme in Gateways) {
          const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
          if (result instanceof FetchResponse) {
            let response2 = result;
            if (this.processFunc) {
              checkSignal(_request.#signal);
              try {
                response2 = await this.processFunc(req, response2);
              } catch (error) {
                if (error.throttle == null || typeof error.stall !== "number") {
                  response2.makeServerError("error in post-processing function", error).assertOk();
                }
              }
            }
            return response2;
          }
          req = result;
        }
        if (this.preflightFunc) {
          req = await this.preflightFunc(req);
        }
        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));
        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
        if (response.statusCode === 301 || response.statusCode === 302) {
          try {
            const location = response.headers.location || "";
            return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
          } catch (error) {
          }
          return response;
        } else if (response.statusCode === 429) {
          if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
            const retryAfter = response.headers["retry-after"];
            let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
            if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
              delay2 = parseInt(retryAfter);
            }
            return req.clone().#send(attempt + 1, expires, delay2, _request, response);
          }
        }
        if (this.processFunc) {
          checkSignal(_request.#signal);
          try {
            response = await this.processFunc(req, response);
          } catch (error) {
            if (error.throttle == null || typeof error.stall !== "number") {
              response.makeServerError("error in post-processing function", error).assertOk();
            }
            let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
            ;
            if (error.stall >= 0) {
              delay2 = error.stall;
            }
            return req.clone().#send(attempt + 1, expires, delay2, _request, response);
          }
        }
        return response;
      }
      /**
       *  Resolves to the response by sending the request.
       */
      send() {
        (0, errors_js_1.assert)(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
        this.#signal = new FetchCancelSignal(this);
        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
      }
      /**
       *  Cancels the inflight response, causing a ``CANCELLED``
       *  error to be rejected from the [[send]].
       */
      cancel() {
        (0, errors_js_1.assert)(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
        const signal = fetchSignals.get(this);
        if (!signal) {
          throw new Error("missing signal; should not happen");
        }
        signal();
      }
      /**
       *  Returns a new [[FetchRequest]] that represents the redirection
       *  to %%location%%.
       */
      redirect(location) {
        const current = this.url.split(":")[0].toLowerCase();
        const target = location.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
          operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
        });
        const req = new _FetchRequest(location);
        req.method = "GET";
        req.allowGzip = this.allowGzip;
        req.timeout = this.timeout;
        req.#headers = Object.assign({}, this.#headers);
        if (this.#body) {
          req.#body = new Uint8Array(this.#body);
        }
        req.#bodyType = this.#bodyType;
        return req;
      }
      /**
       *  Create a new copy of this request.
       */
      clone() {
        const clone = new _FetchRequest(this.url);
        clone.#method = this.#method;
        if (this.#body) {
          clone.#body = this.#body;
        }
        clone.#bodyType = this.#bodyType;
        clone.#headers = Object.assign({}, this.#headers);
        clone.#creds = this.#creds;
        if (this.allowGzip) {
          clone.allowGzip = true;
        }
        clone.timeout = this.timeout;
        if (this.allowInsecureAuthentication) {
          clone.allowInsecureAuthentication = true;
        }
        clone.#preflight = this.#preflight;
        clone.#process = this.#process;
        clone.#retry = this.#retry;
        clone.#throttle = Object.assign({}, this.#throttle);
        clone.#getUrlFunc = this.#getUrlFunc;
        return clone;
      }
      /**
       *  Locks all static configuration for gateways and FetchGetUrlFunc
       *  registration.
       */
      static lockConfig() {
        locked = true;
      }
      /**
       *  Get the current Gateway function for %%scheme%%.
       */
      static getGateway(scheme) {
        return Gateways[scheme.toLowerCase()] || null;
      }
      /**
       *  Use the %%func%% when fetching URIs using %%scheme%%.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGateway(scheme, func) {
        scheme = scheme.toLowerCase();
        if (scheme === "http" || scheme === "https") {
          throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
        }
        if (locked) {
          throw new Error("gateways locked");
        }
        Gateways[scheme] = func;
      }
      /**
       *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGetUrl(getUrl) {
        if (locked) {
          throw new Error("gateways locked");
        }
        defaultGetUrlFunc = getUrl;
      }
      /**
       *  Creates a getUrl function that fetches content from HTTP and
       *  HTTPS URLs.
       *
       *  The available %%options%% are dependent on the platform
       *  implementation of the default getUrl function.
       *
       *  This is not generally something that is needed, but is useful
       *  when trying to customize simple behaviour when fetching HTTP
       *  content.
       */
      static createGetUrlFunc(options) {
        return (0, geturl_js_1.createGetUrl)(options);
      }
      /**
       *  Creates a function that can "fetch" data URIs.
       *
       *  Note that this is automatically done internally to support
       *  data URIs, so it is not necessary to register it.
       *
       *  This is not generally something that is needed, but may
       *  be useful in a wrapper to perfom custom data URI functionality.
       */
      static createDataGateway() {
        return dataGatewayFunc;
      }
      /**
       *  Creates a function that will fetch IPFS (unvalidated) from
       *  a custom gateway baseUrl.
       *
       *  The default IPFS gateway used internally is
       *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
       */
      static createIpfsGatewayFunc(baseUrl) {
        return getIpfsGatewayFunc(baseUrl);
      }
    };
    exports2.FetchRequest = FetchRequest;
    var FetchResponse = class _FetchResponse {
      #statusCode;
      #statusMessage;
      #headers;
      #body;
      #request;
      #error;
      toString() {
        return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : "null"}>`;
      }
      /**
       *  The response status code.
       */
      get statusCode() {
        return this.#statusCode;
      }
      /**
       *  The response status message.
       */
      get statusMessage() {
        return this.#statusMessage;
      }
      /**
       *  The response headers. All keys are lower-case.
       */
      get headers() {
        return Object.assign({}, this.#headers);
      }
      /**
       *  The response body, or ``null`` if there was no body.
       */
      get body() {
        return this.#body == null ? null : new Uint8Array(this.#body);
      }
      /**
       *  The response body as a UTF-8 encoded string, or the empty
       *  string (i.e. ``""``) if there was no body.
       *
       *  An error is thrown if the body is invalid UTF-8 data.
       */
      get bodyText() {
        try {
          return this.#body == null ? "" : (0, utf8_js_1.toUtf8String)(this.#body);
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
            operation: "bodyText",
            info: { response: this }
          });
        }
      }
      /**
       *  The response body, decoded as JSON.
       *
       *  An error is thrown if the body is invalid JSON-encoded data
       *  or if there was no body.
       */
      get bodyJson() {
        try {
          return JSON.parse(this.bodyText);
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
            operation: "bodyJson",
            info: { response: this }
          });
        }
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      constructor(statusCode, statusMessage, headers, body, request) {
        this.#statusCode = statusCode;
        this.#statusMessage = statusMessage;
        this.#headers = Object.keys(headers).reduce((accum, k) => {
          accum[k.toLowerCase()] = String(headers[k]);
          return accum;
        }, {});
        this.#body = body == null ? null : new Uint8Array(body);
        this.#request = request || null;
        this.#error = { message: "" };
      }
      /**
       *  Return a Response with matching headers and body, but with
       *  an error status code (i.e. 599) and %%message%% with an
       *  optional %%error%%.
       */
      makeServerError(message, error) {
        let statusMessage;
        if (!message) {
          message = `${this.statusCode} ${this.statusMessage}`;
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
        } else {
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
        }
        const response = new _FetchResponse(599, statusMessage, this.headers, this.body, this.#request || void 0);
        response.#error = { message, error };
        return response;
      }
      /**
       *  If called within a [request.processFunc](FetchRequest-processFunc)
       *  call, causes the request to retry as if throttled for %%stall%%
       *  milliseconds.
       */
      throwThrottleError(message, stall) {
        if (stall == null) {
          stall = -1;
        } else {
          (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
        }
        const error = new Error(message || "throttling requests");
        (0, properties_js_1.defineProperties)(error, { stall, throttle: true });
        throw error;
      }
      /**
       *  Get the header value for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Returns true if the response has a body.
       */
      hasBody() {
        return this.#body != null;
      }
      /**
       *  The request made for this response.
       */
      get request() {
        return this.#request;
      }
      /**
       *  Returns true if this response was a success statusCode.
       */
      ok() {
        return this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300;
      }
      /**
       *  Throws a ``SERVER_ERROR`` if this response is not ok.
       */
      assertOk() {
        if (this.ok()) {
          return;
        }
        let { message, error } = this.#error;
        if (message === "") {
          message = `server response ${this.statusCode} ${this.statusMessage}`;
        }
        let requestUrl = null;
        if (this.request) {
          requestUrl = this.request.url;
        }
        let responseBody = null;
        try {
          if (this.#body) {
            responseBody = (0, utf8_js_1.toUtf8String)(this.#body);
          }
        } catch (e) {
        }
        (0, errors_js_1.assert)(false, message, "SERVER_ERROR", {
          request: this.request || "unknown request",
          response: this,
          error,
          info: {
            requestUrl,
            responseBody,
            responseStatus: `${this.statusCode} ${this.statusMessage}`
          }
        });
      }
    };
    exports2.FetchResponse = FetchResponse;
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function unpercent(value) {
      return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
        return String.fromCharCode(parseInt(code, 16));
      }));
    }
    function wait(delay) {
      return new Promise((resolve2) => setTimeout(resolve2, delay));
    }
  }
});

// node_modules/ethers/lib.commonjs/utils/fixednumber.js
var require_fixednumber = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fixednumber.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FixedNumber = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var maths_js_1 = require_maths();
    var properties_js_1 = require_properties();
    var BN_N1 = BigInt(-1);
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_5 = BigInt(5);
    var _guard = {};
    var Zeros = "0000";
    while (Zeros.length < 80) {
      Zeros += Zeros;
    }
    function getTens(decimals) {
      let result = Zeros;
      while (result.length < decimals) {
        result += result;
      }
      return BigInt("1" + result.substring(0, decimals));
    }
    function checkValue(val, format, safeOp) {
      const width = BigInt(format.width);
      if (format.signed) {
        const limit = BN_1 << width - BN_1;
        (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        if (val > BN_0) {
          val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);
        } else {
          val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);
        }
      } else {
        const limit = BN_1 << width;
        (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        val = (val % limit + limit) % limit & limit - BN_1;
      }
      return val;
    }
    function getFormat(value) {
      if (typeof value === "number") {
        value = `fixed128x${value}`;
      }
      let signed = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") {
        } else if (value === "ufixed") {
          signed = false;
        } else {
          const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          (0, errors_js_1.assertArgument)(match, "invalid fixed format", "format", value);
          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        const v = value;
        const check = (key, type, defaultValue) => {
          if (v[key] == null) {
            return defaultValue;
          }
          (0, errors_js_1.assertArgument)(typeof v[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
          return v[key];
        };
        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      (0, errors_js_1.assertArgument)(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
      (0, errors_js_1.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
      const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      return { signed, width, decimals, name };
    }
    function toString(val, decimals) {
      let negative = "";
      if (val < BN_0) {
        negative = "-";
        val *= BN_N1;
      }
      let str = val.toString();
      if (decimals === 0) {
        return negative + str;
      }
      while (str.length <= decimals) {
        str = Zeros + str;
      }
      const index = str.length - decimals;
      str = str.substring(0, index) + "." + str.substring(index);
      while (str[0] === "0" && str[1] !== ".") {
        str = str.substring(1);
      }
      while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
        str = str.substring(0, str.length - 1);
      }
      return negative + str;
    }
    var FixedNumber = class _FixedNumber {
      /**
       *  The specific fixed-point arithmetic field for this value.
       */
      format;
      #format;
      // The actual value (accounting for decimals)
      #val;
      // A base-10 value to multiple values by to maintain the magnitude
      #tens;
      /**
       *  This is a property so console.log shows a human-meaningful value.
       *
       *  @private
       */
      _value;
      // Use this when changing this file to get some typing info,
      // but then switch to any to mask the internal type
      //constructor(guard: any, value: bigint, format: _FixedFormat) {
      /**
       *  @private
       */
      constructor(guard, value, format) {
        (0, errors_js_1.assertPrivate)(guard, _guard, "FixedNumber");
        this.#val = value;
        this.#format = format;
        const _value = toString(value, format.decimals);
        (0, properties_js_1.defineProperties)(this, { format: format.name, _value });
        this.#tens = getTens(format.decimals);
      }
      /**
       *  If true, negative values are permitted, otherwise only
       *  positive values and zero are allowed.
       */
      get signed() {
        return this.#format.signed;
      }
      /**
       *  The number of bits available to store the value.
       */
      get width() {
        return this.#format.width;
      }
      /**
       *  The number of decimal places in the fixed-point arithment field.
       */
      get decimals() {
        return this.#format.decimals;
      }
      /**
       *  The value as an integer, based on the smallest unit the
       *  [[decimals]] allow.
       */
      get value() {
        return this.#val;
      }
      #checkFormat(other) {
        (0, errors_js_1.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
      }
      #checkValue(val, safeOp) {
        val = checkValue(val, this.#format, safeOp);
        return new _FixedNumber(_guard, val, this.#format);
      }
      #add(o, safeOp) {
        this.#checkFormat(o);
        return this.#checkValue(this.#val + o.#val, safeOp);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%, ignoring overflow.
       */
      addUnsafe(other) {
        return this.#add(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      add(other) {
        return this.#add(other, "add");
      }
      #sub(o, safeOp) {
        this.#checkFormat(o);
        return this.#checkValue(this.#val - o.#val, safeOp);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%, ignoring overflow.
       */
      subUnsafe(other) {
        return this.#sub(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      sub(other) {
        return this.#sub(other, "sub");
      }
      #mul(o, safeOp) {
        this.#checkFormat(o);
        return this.#checkValue(this.#val * o.#val / this.#tens, safeOp);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%, ignoring overflow and underflow (precision loss).
       */
      mulUnsafe(other) {
        return this.#mul(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      mul(other) {
        return this.#mul(other, "mul");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs or if underflow (precision loss) occurs.
       */
      mulSignal(other) {
        this.#checkFormat(other);
        const value = this.#val * other.#val;
        (0, errors_js_1.assert)(value % this.#tens === BN_0, "precision lost during signalling mul", "NUMERIC_FAULT", {
          operation: "mulSignal",
          fault: "underflow",
          value: this
        });
        return this.#checkValue(value / this.#tens, "mulSignal");
      }
      #div(o, safeOp) {
        (0, errors_js_1.assert)(o.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
          operation: "div",
          fault: "divide-by-zero",
          value: this
        });
        this.#checkFormat(o);
        return this.#checkValue(this.#val * this.#tens / o.#val, safeOp);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      divUnsafe(other) {
        return this.#div(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      div(other) {
        return this.#div(other, "div");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
       *  (precision loss) occurs.
       */
      divSignal(other) {
        (0, errors_js_1.assert)(other.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
          operation: "div",
          fault: "divide-by-zero",
          value: this
        });
        this.#checkFormat(other);
        const value = this.#val * this.#tens;
        (0, errors_js_1.assert)(value % other.#val === BN_0, "precision lost during signalling div", "NUMERIC_FAULT", {
          operation: "divSignal",
          fault: "underflow",
          value: this
        });
        return this.#checkValue(value / other.#val, "divSignal");
      }
      /**
       *  Returns a comparison result between %%this%% and %%other%%.
       *
       *  This is suitable for use in sorting, where ``-1`` implies %%this%%
       *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
       *  both are equal.
       */
      cmp(other) {
        let a = this.value, b = other.value;
        const delta = this.decimals - other.decimals;
        if (delta > 0) {
          b *= getTens(delta);
        } else if (delta < 0) {
          a *= getTens(-delta);
        }
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      /**
       *  Returns true if %%other%% is equal to %%this%%.
       */
      eq(other) {
        return this.cmp(other) === 0;
      }
      /**
       *  Returns true if %%other%% is less than to %%this%%.
       */
      lt(other) {
        return this.cmp(other) < 0;
      }
      /**
       *  Returns true if %%other%% is less than or equal to %%this%%.
       */
      lte(other) {
        return this.cmp(other) <= 0;
      }
      /**
       *  Returns true if %%other%% is greater than to %%this%%.
       */
      gt(other) {
        return this.cmp(other) > 0;
      }
      /**
       *  Returns true if %%other%% is greater than or equal to %%this%%.
       */
      gte(other) {
        return this.cmp(other) >= 0;
      }
      /**
       *  Returns a new [[FixedNumber]] which is the largest **integer**
       *  that is less than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      floor() {
        let val = this.#val;
        if (this.#val < BN_0) {
          val -= this.#tens - BN_1;
        }
        val = this.#val / this.#tens * this.#tens;
        return this.#checkValue(val, "floor");
      }
      /**
       *  Returns a new [[FixedNumber]] which is the smallest **integer**
       *  that is greater than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      ceiling() {
        let val = this.#val;
        if (this.#val > BN_0) {
          val += this.#tens - BN_1;
        }
        val = this.#val / this.#tens * this.#tens;
        return this.#checkValue(val, "ceiling");
      }
      /**
       *  Returns a new [[FixedNumber]] with the decimal component
       *  rounded up on ties at %%decimals%% places.
       */
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        if (decimals >= this.decimals) {
          return this;
        }
        const delta = this.decimals - decimals;
        const bump = BN_5 * getTens(delta - 1);
        let value = this.value + bump;
        const tens = getTens(delta);
        value = value / tens * tens;
        checkValue(value, this.#format, "round");
        return new _FixedNumber(_guard, value, this.#format);
      }
      /**
       *  Returns true if %%this%% is equal to ``0``.
       */
      isZero() {
        return this.#val === BN_0;
      }
      /**
       *  Returns true if %%this%% is less than ``0``.
       */
      isNegative() {
        return this.#val < BN_0;
      }
      /**
       *  Returns the string representation of %%this%%.
       */
      toString() {
        return this._value;
      }
      /**
       *  Returns a float approximation.
       *
       *  Due to IEEE 754 precission (or lack thereof), this function
       *  can only return an approximation and most values will contain
       *  rounding errors.
       */
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      /**
       *  Return a new [[FixedNumber]] with the same value but has had
       *  its field set to %%format%%.
       *
       *  This will throw if the value cannot fit into %%format%%.
       */
      toFormat(format) {
        return _FixedNumber.fromString(this.toString(), format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% divided by
       *  %%decimal%% places with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
       *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
       *  or underflow (precision loss).
       */
      static fromValue(_value, _decimals, _format) {
        const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);
        const format = getFormat(_format);
        let value = (0, maths_js_1.getBigInt)(_value, "value");
        const delta = decimals - format.decimals;
        if (delta > 0) {
          const tens = getTens(delta);
          (0, errors_js_1.assert)(value % tens === BN_0, "value loses precision for format", "NUMERIC_FAULT", {
            operation: "fromValue",
            fault: "underflow",
            value: _value
          });
          value /= tens;
        } else if (delta < 0) {
          value *= getTens(-delta);
        }
        checkValue(value, format, "fromValue");
        return new _FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%%, either due to overflow or underflow (precision loss).
       */
      static fromString(_value, _format) {
        const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
        (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
        const format = getFormat(_format);
        let whole = match[2] || "0", decimal = match[3] || "";
        while (decimal.length < format.decimals) {
          decimal += Zeros;
        }
        (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
          operation: "fromString",
          fault: "underflow",
          value: _value
        });
        decimal = decimal.substring(0, format.decimals);
        const value = BigInt(match[1] + whole + decimal);
        checkValue(value, format, "fromString");
        return new _FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] with the big-endian representation
       *  %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%% due to overflow.
       */
      static fromBytes(_value, _format) {
        let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, "value"));
        const format = getFormat(_format);
        if (format.signed) {
          value = (0, maths_js_1.fromTwos)(value, format.width);
        }
        checkValue(value, format, "fromBytes");
        return new _FixedNumber(_guard, value, format);
      }
    };
    exports2.FixedNumber = FixedNumber;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-decode.js
var require_rlp_decode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-decode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeRlp = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var data_js_2 = require_data();
    function hexlifyByte(value) {
      let result = value.toString(16);
      while (result.length < 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function unarrayifyInteger(data, offset, length) {
      let result = 0;
      for (let i = 0; i < length; i++) {
        result = result * 256 + data[offset + i];
      }
      return result;
    }
    function _decodeChildren(data, offset, childOffset, length) {
      const result = [];
      while (childOffset < offset + 1 + length) {
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        (0, errors_js_1.assert)(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
          buffer: data,
          length,
          offset
        });
      }
      return { consumed: 1 + length, result };
    }
    function _decode(data, offset) {
      (0, errors_js_1.assert)(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
        buffer: data,
        length: 0,
        offset: 1
      });
      const checkOffset = (offset2) => {
        (0, errors_js_1.assert)(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
          buffer: data,
          length: data.length,
          offset: offset2
        });
      };
      if (data[offset] >= 248) {
        const lengthLength = data[offset] - 247;
        checkOffset(offset + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        checkOffset(offset + 1 + lengthLength + length);
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      } else if (data[offset] >= 192) {
        const length = data[offset] - 192;
        checkOffset(offset + 1 + length);
        return _decodeChildren(data, offset, offset + 1, length);
      } else if (data[offset] >= 184) {
        const lengthLength = data[offset] - 183;
        checkOffset(offset + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        checkOffset(offset + 1 + lengthLength + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return { consumed: 1 + lengthLength + length, result };
      } else if (data[offset] >= 128) {
        const length = data[offset] - 128;
        checkOffset(offset + 1 + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset + 1, offset + 1 + length));
        return { consumed: 1 + length, result };
      }
      return { consumed: 1, result: hexlifyByte(data[offset]) };
    }
    function decodeRlp(_data) {
      const data = (0, data_js_2.getBytes)(_data, "data");
      const decoded = _decode(data, 0);
      (0, errors_js_1.assertArgument)(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
      return decoded.result;
    }
    exports2.decodeRlp = decodeRlp;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-encode.js
var require_rlp_encode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-encode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeRlp = void 0;
    var data_js_1 = require_data();
    function arrayifyInteger(value) {
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value >>= 8;
      }
      return result;
    }
    function _encode(object) {
      if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function(child) {
          payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
          payload.unshift(192 + payload.length);
          return payload;
        }
        const length2 = arrayifyInteger(payload.length);
        length2.unshift(247 + length2.length);
        return length2.concat(payload);
      }
      const data = Array.prototype.slice.call((0, data_js_1.getBytes)(object, "object"));
      if (data.length === 1 && data[0] <= 127) {
        return data;
      } else if (data.length <= 55) {
        data.unshift(128 + data.length);
        return data;
      }
      const length = arrayifyInteger(data.length);
      length.unshift(183 + length.length);
      return length.concat(data);
    }
    var nibbles = "0123456789abcdef";
    function encodeRlp(object) {
      let result = "0x";
      for (const v of _encode(object)) {
        result += nibbles[v >> 4];
        result += nibbles[v & 15];
      }
      return result;
    }
    exports2.encodeRlp = encodeRlp;
  }
});

// node_modules/ethers/lib.commonjs/utils/units.js
var require_units = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/units.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEther = exports2.formatEther = exports2.parseUnits = exports2.formatUnits = void 0;
    var errors_js_1 = require_errors();
    var fixednumber_js_1 = require_fixednumber();
    var maths_js_1 = require_maths();
    var names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
    function formatUnits(value, unit) {
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
    }
    exports2.formatUnits = formatUnits;
    function parseUnits(value, unit) {
      (0, errors_js_1.assertArgument)(typeof value === "string", "value must be a string", "value", value);
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromString(value, { decimals, width: 512 }).value;
    }
    exports2.parseUnits = parseUnits;
    function formatEther(wei) {
      return formatUnits(wei, 18);
    }
    exports2.formatEther = formatEther;
    function parseEther(ether) {
      return parseUnits(ether, 18);
    }
    exports2.parseEther = parseEther;
  }
});

// node_modules/ethers/lib.commonjs/utils/uuid.js
var require_uuid = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/uuid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uuidV4 = void 0;
    var data_js_1 = require_data();
    function uuidV4(randomBytes) {
      const bytes = (0, data_js_1.getBytes)(randomBytes, "randomBytes");
      bytes[6] = bytes[6] & 15 | 64;
      bytes[8] = bytes[8] & 63 | 128;
      const value = (0, data_js_1.hexlify)(bytes);
      return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34)
      ].join("-");
    }
    exports2.uuidV4 = uuidV4;
  }
});

// node_modules/ethers/lib.commonjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8String = exports2.toUtf8CodePoints = exports2.toUtf8Bytes = exports2.parseUnits = exports2.formatUnits = exports2.parseEther = exports2.formatEther = exports2.encodeRlp = exports2.decodeRlp = exports2.defineProperties = exports2.resolveProperties = exports2.toQuantity = exports2.toBeArray = exports2.toBeHex = exports2.toNumber = exports2.toBigInt = exports2.getUint = exports2.getNumber = exports2.getBigInt = exports2.mask = exports2.toTwos = exports2.fromTwos = exports2.FixedNumber = exports2.FetchCancelSignal = exports2.FetchResponse = exports2.FetchRequest = exports2.EventPayload = exports2.makeError = exports2.assertNormalize = exports2.assertPrivate = exports2.assertArgumentCount = exports2.assertArgument = exports2.assert = exports2.isError = exports2.isCallException = exports2.zeroPadBytes = exports2.zeroPadValue = exports2.stripZerosLeft = exports2.dataSlice = exports2.dataLength = exports2.concat = exports2.hexlify = exports2.isBytesLike = exports2.isHexString = exports2.getBytesCopy = exports2.getBytes = exports2.encodeBase64 = exports2.decodeBase64 = exports2.encodeBase58 = exports2.decodeBase58 = void 0;
    exports2.uuidV4 = exports2.Utf8ErrorFuncs = void 0;
    var base58_js_1 = require_base58();
    Object.defineProperty(exports2, "decodeBase58", { enumerable: true, get: function() {
      return base58_js_1.decodeBase58;
    } });
    Object.defineProperty(exports2, "encodeBase58", { enumerable: true, get: function() {
      return base58_js_1.encodeBase58;
    } });
    var base64_js_1 = require_base64();
    Object.defineProperty(exports2, "decodeBase64", { enumerable: true, get: function() {
      return base64_js_1.decodeBase64;
    } });
    Object.defineProperty(exports2, "encodeBase64", { enumerable: true, get: function() {
      return base64_js_1.encodeBase64;
    } });
    var data_js_1 = require_data();
    Object.defineProperty(exports2, "getBytes", { enumerable: true, get: function() {
      return data_js_1.getBytes;
    } });
    Object.defineProperty(exports2, "getBytesCopy", { enumerable: true, get: function() {
      return data_js_1.getBytesCopy;
    } });
    Object.defineProperty(exports2, "isHexString", { enumerable: true, get: function() {
      return data_js_1.isHexString;
    } });
    Object.defineProperty(exports2, "isBytesLike", { enumerable: true, get: function() {
      return data_js_1.isBytesLike;
    } });
    Object.defineProperty(exports2, "hexlify", { enumerable: true, get: function() {
      return data_js_1.hexlify;
    } });
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return data_js_1.concat;
    } });
    Object.defineProperty(exports2, "dataLength", { enumerable: true, get: function() {
      return data_js_1.dataLength;
    } });
    Object.defineProperty(exports2, "dataSlice", { enumerable: true, get: function() {
      return data_js_1.dataSlice;
    } });
    Object.defineProperty(exports2, "stripZerosLeft", { enumerable: true, get: function() {
      return data_js_1.stripZerosLeft;
    } });
    Object.defineProperty(exports2, "zeroPadValue", { enumerable: true, get: function() {
      return data_js_1.zeroPadValue;
    } });
    Object.defineProperty(exports2, "zeroPadBytes", { enumerable: true, get: function() {
      return data_js_1.zeroPadBytes;
    } });
    var errors_js_1 = require_errors();
    Object.defineProperty(exports2, "isCallException", { enumerable: true, get: function() {
      return errors_js_1.isCallException;
    } });
    Object.defineProperty(exports2, "isError", { enumerable: true, get: function() {
      return errors_js_1.isError;
    } });
    Object.defineProperty(exports2, "assert", { enumerable: true, get: function() {
      return errors_js_1.assert;
    } });
    Object.defineProperty(exports2, "assertArgument", { enumerable: true, get: function() {
      return errors_js_1.assertArgument;
    } });
    Object.defineProperty(exports2, "assertArgumentCount", { enumerable: true, get: function() {
      return errors_js_1.assertArgumentCount;
    } });
    Object.defineProperty(exports2, "assertPrivate", { enumerable: true, get: function() {
      return errors_js_1.assertPrivate;
    } });
    Object.defineProperty(exports2, "assertNormalize", { enumerable: true, get: function() {
      return errors_js_1.assertNormalize;
    } });
    Object.defineProperty(exports2, "makeError", { enumerable: true, get: function() {
      return errors_js_1.makeError;
    } });
    var events_js_1 = require_events();
    Object.defineProperty(exports2, "EventPayload", { enumerable: true, get: function() {
      return events_js_1.EventPayload;
    } });
    var fetch_js_1 = require_fetch();
    Object.defineProperty(exports2, "FetchRequest", { enumerable: true, get: function() {
      return fetch_js_1.FetchRequest;
    } });
    Object.defineProperty(exports2, "FetchResponse", { enumerable: true, get: function() {
      return fetch_js_1.FetchResponse;
    } });
    Object.defineProperty(exports2, "FetchCancelSignal", { enumerable: true, get: function() {
      return fetch_js_1.FetchCancelSignal;
    } });
    var fixednumber_js_1 = require_fixednumber();
    Object.defineProperty(exports2, "FixedNumber", { enumerable: true, get: function() {
      return fixednumber_js_1.FixedNumber;
    } });
    var maths_js_1 = require_maths();
    Object.defineProperty(exports2, "fromTwos", { enumerable: true, get: function() {
      return maths_js_1.fromTwos;
    } });
    Object.defineProperty(exports2, "toTwos", { enumerable: true, get: function() {
      return maths_js_1.toTwos;
    } });
    Object.defineProperty(exports2, "mask", { enumerable: true, get: function() {
      return maths_js_1.mask;
    } });
    Object.defineProperty(exports2, "getBigInt", { enumerable: true, get: function() {
      return maths_js_1.getBigInt;
    } });
    Object.defineProperty(exports2, "getNumber", { enumerable: true, get: function() {
      return maths_js_1.getNumber;
    } });
    Object.defineProperty(exports2, "getUint", { enumerable: true, get: function() {
      return maths_js_1.getUint;
    } });
    Object.defineProperty(exports2, "toBigInt", { enumerable: true, get: function() {
      return maths_js_1.toBigInt;
    } });
    Object.defineProperty(exports2, "toNumber", { enumerable: true, get: function() {
      return maths_js_1.toNumber;
    } });
    Object.defineProperty(exports2, "toBeHex", { enumerable: true, get: function() {
      return maths_js_1.toBeHex;
    } });
    Object.defineProperty(exports2, "toBeArray", { enumerable: true, get: function() {
      return maths_js_1.toBeArray;
    } });
    Object.defineProperty(exports2, "toQuantity", { enumerable: true, get: function() {
      return maths_js_1.toQuantity;
    } });
    var properties_js_1 = require_properties();
    Object.defineProperty(exports2, "resolveProperties", { enumerable: true, get: function() {
      return properties_js_1.resolveProperties;
    } });
    Object.defineProperty(exports2, "defineProperties", { enumerable: true, get: function() {
      return properties_js_1.defineProperties;
    } });
    var rlp_decode_js_1 = require_rlp_decode();
    Object.defineProperty(exports2, "decodeRlp", { enumerable: true, get: function() {
      return rlp_decode_js_1.decodeRlp;
    } });
    var rlp_encode_js_1 = require_rlp_encode();
    Object.defineProperty(exports2, "encodeRlp", { enumerable: true, get: function() {
      return rlp_encode_js_1.encodeRlp;
    } });
    var units_js_1 = require_units();
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return units_js_1.formatEther;
    } });
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return units_js_1.parseEther;
    } });
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return units_js_1.formatUnits;
    } });
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return units_js_1.parseUnits;
    } });
    var utf8_js_1 = require_utf8();
    Object.defineProperty(exports2, "toUtf8Bytes", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports2, "toUtf8CodePoints", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports2, "toUtf8String", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8String;
    } });
    Object.defineProperty(exports2, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return utf8_js_1.Utf8ErrorFuncs;
    } });
    var uuid_js_1 = require_uuid();
    Object.defineProperty(exports2, "uuidV4", { enumerable: true, get: function() {
      return uuid_js_1.uuidV4;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js
var require_abstract_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Reader = exports2.Writer = exports2.Coder = exports2.checkResultErrors = exports2.Result = exports2.WordSize = void 0;
    var index_js_1 = require_utils();
    exports2.WordSize = 32;
    var Padding = new Uint8Array(exports2.WordSize);
    var passProperties = ["then"];
    var _guard = {};
    var resultNames = /* @__PURE__ */ new WeakMap();
    function getNames(result) {
      return resultNames.get(result);
    }
    function setNames(result, names) {
      resultNames.set(result, names);
    }
    function throwError(name, error) {
      const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
      wrapped.error = error;
      throw wrapped;
    }
    function toObject(names, items, deep) {
      if (names.indexOf(null) >= 0) {
        return items.map((item, index) => {
          if (item instanceof Result) {
            return toObject(getNames(item), item, deep);
          }
          return item;
        });
      }
      return names.reduce((accum, name, index) => {
        let item = items.getValue(name);
        if (!(name in accum)) {
          if (deep && item instanceof Result) {
            item = toObject(getNames(item), item, deep);
          }
          accum[name] = item;
        }
        return accum;
      }, {});
    }
    var Result = class _Result extends Array {
      // No longer used; but cannot be removed as it will remove the
      // #private field from the .d.ts which may break backwards
      // compatibility
      #names;
      /**
       *  @private
       */
      constructor(...args) {
        const guard = args[0];
        let items = args[1];
        let names = (args[2] || []).slice();
        let wrap = true;
        if (guard !== _guard) {
          items = args;
          names = [];
          wrap = false;
        }
        super(items.length);
        items.forEach((item, index) => {
          this[index] = item;
        });
        const nameCounts = names.reduce((accum, name) => {
          if (typeof name === "string") {
            accum.set(name, (accum.get(name) || 0) + 1);
          }
          return accum;
        }, /* @__PURE__ */ new Map());
        setNames(this, Object.freeze(items.map((item, index) => {
          const name = names[index];
          if (name != null && nameCounts.get(name) === 1) {
            return name;
          }
          return null;
        })));
        this.#names = [];
        if (this.#names == null) {
          void this.#names;
        }
        if (!wrap) {
          return;
        }
        Object.freeze(this);
        const proxy = new Proxy(this, {
          get: (target, prop, receiver) => {
            if (typeof prop === "string") {
              if (prop.match(/^[0-9]+$/)) {
                const index = (0, index_js_1.getNumber)(prop, "%index");
                if (index < 0 || index >= this.length) {
                  throw new RangeError("out of result range");
                }
                const item = target[index];
                if (item instanceof Error) {
                  throwError(`index ${index}`, item);
                }
                return item;
              }
              if (passProperties.indexOf(prop) >= 0) {
                return Reflect.get(target, prop, receiver);
              }
              const value = target[prop];
              if (value instanceof Function) {
                return function(...args2) {
                  return value.apply(this === receiver ? target : this, args2);
                };
              } else if (!(prop in target)) {
                return target.getValue.apply(this === receiver ? target : this, [prop]);
              }
            }
            return Reflect.get(target, prop, receiver);
          }
        });
        setNames(proxy, getNames(this));
        return proxy;
      }
      /**
       *  Returns the Result as a normal Array. If %%deep%%, any children
       *  which are Result objects are also converted to a normal Array.
       *
       *  This will throw if there are any outstanding deferred
       *  errors.
       */
      toArray(deep) {
        const result = [];
        this.forEach((item, index) => {
          if (item instanceof Error) {
            throwError(`index ${index}`, item);
          }
          if (deep && item instanceof _Result) {
            item = item.toArray(deep);
          }
          result.push(item);
        });
        return result;
      }
      /**
       *  Returns the Result as an Object with each name-value pair. If
       *  %%deep%%, any children which are Result objects are also
       *  converted to an Object.
       *
       *  This will throw if any value is unnamed, or if there are
       *  any outstanding deferred errors.
       */
      toObject(deep) {
        const names = getNames(this);
        return names.reduce((accum, name, index) => {
          (0, index_js_1.assert)(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
            operation: "toObject()"
          });
          return toObject(names, this, deep);
        }, {});
      }
      /**
       *  @_ignore
       */
      slice(start, end) {
        if (start == null) {
          start = 0;
        }
        if (start < 0) {
          start += this.length;
          if (start < 0) {
            start = 0;
          }
        }
        if (end == null) {
          end = this.length;
        }
        if (end < 0) {
          end += this.length;
          if (end < 0) {
            end = 0;
          }
        }
        if (end > this.length) {
          end = this.length;
        }
        const _names = getNames(this);
        const result = [], names = [];
        for (let i = start; i < end; i++) {
          result.push(this[i]);
          names.push(_names[i]);
        }
        return new _Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */
      filter(callback, thisArg) {
        const _names = getNames(this);
        const result = [], names = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          if (callback.call(thisArg, item, i, this)) {
            result.push(item);
            names.push(_names[i]);
          }
        }
        return new _Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */
      map(callback, thisArg) {
        const result = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          result.push(callback.call(thisArg, item, i, this));
        }
        return result;
      }
      /**
       *  Returns the value for %%name%%.
       *
       *  Since it is possible to have a key whose name conflicts with
       *  a method on a [[Result]] or its superclass Array, or any
       *  JavaScript keyword, this ensures all named values are still
       *  accessible by name.
       */
      getValue(name) {
        const index = getNames(this).indexOf(name);
        if (index === -1) {
          return void 0;
        }
        const value = this[index];
        if (value instanceof Error) {
          throwError(`property ${JSON.stringify(name)}`, value.error);
        }
        return value;
      }
      /**
       *  Creates a new [[Result]] for %%items%% with each entry
       *  also accessible by its corresponding name in %%keys%%.
       */
      static fromItems(items, keys) {
        return new _Result(_guard, items, keys);
      }
    };
    exports2.Result = Result;
    function checkResultErrors(result) {
      const errors = [];
      const checkErrors = function(path, object) {
        if (!Array.isArray(object)) {
          return;
        }
        for (let key in object) {
          const childPath = path.slice();
          childPath.push(key);
          try {
            checkErrors(childPath, object[key]);
          } catch (error) {
            errors.push({ path: childPath, error });
          }
        }
      };
      checkErrors([], result);
      return errors;
    }
    exports2.checkResultErrors = checkResultErrors;
    function getValue(value) {
      let bytes = (0, index_js_1.toBeArray)(value);
      (0, index_js_1.assert)(bytes.length <= exports2.WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: exports2.WordSize, offset: bytes.length });
      if (bytes.length !== exports2.WordSize) {
        bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding.slice(bytes.length % exports2.WordSize), bytes]));
      }
      return bytes;
    }
    var Coder = class {
      // The coder name:
      //   - address, uint256, tuple, array, etc.
      name;
      // The fully expanded type, including composite types:
      //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
      type;
      // The localName bound in the signature, in this example it is "baz":
      //   - tuple(address foo, uint bar) baz
      localName;
      // Whether this type is dynamic:
      //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
      //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
      dynamic;
      constructor(name, type, localName, dynamic) {
        (0, index_js_1.defineProperties)(this, { name, type, localName, dynamic }, {
          name: "string",
          type: "string",
          localName: "string",
          dynamic: "boolean"
        });
      }
      _throwError(message, value) {
        (0, index_js_1.assertArgument)(false, message, this.localName, value);
      }
    };
    exports2.Coder = Coder;
    var Writer = class {
      // An array of WordSize lengthed objects to concatenation
      #data;
      #dataLength;
      constructor() {
        this.#data = [];
        this.#dataLength = 0;
      }
      get data() {
        return (0, index_js_1.concat)(this.#data);
      }
      get length() {
        return this.#dataLength;
      }
      #writeData(data) {
        this.#data.push(data);
        this.#dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this.#writeData((0, index_js_1.getBytesCopy)(writer.data));
      }
      // Arrayish item; pad on the right to *nearest* WordSize
      writeBytes(value) {
        let bytes = (0, index_js_1.getBytesCopy)(value);
        const paddingOffset = bytes.length % exports2.WordSize;
        if (paddingOffset) {
          bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes, Padding.slice(paddingOffset)]));
        }
        return this.#writeData(bytes);
      }
      // Numeric item; pad on the left *to* WordSize
      writeValue(value) {
        return this.#writeData(getValue(value));
      }
      // Inserts a numeric place-holder, returning a callback that can
      // be used to asjust the value later
      writeUpdatableValue() {
        const offset = this.#data.length;
        this.#data.push(Padding);
        this.#dataLength += exports2.WordSize;
        return (value) => {
          this.#data[offset] = getValue(value);
        };
      }
    };
    exports2.Writer = Writer;
    var Reader = class _Reader {
      // Allows incomplete unpadded data to be read; otherwise an error
      // is raised if attempting to overrun the buffer. This is required
      // to deal with an old Solidity bug, in which event data for
      // external (not public thoguh) was tightly packed.
      allowLoose;
      #data;
      #offset;
      #bytesRead;
      #parent;
      #maxInflation;
      constructor(data, allowLoose, maxInflation) {
        (0, index_js_1.defineProperties)(this, { allowLoose: !!allowLoose });
        this.#data = (0, index_js_1.getBytesCopy)(data);
        this.#bytesRead = 0;
        this.#parent = null;
        this.#maxInflation = maxInflation != null ? maxInflation : 1024;
        this.#offset = 0;
      }
      get data() {
        return (0, index_js_1.hexlify)(this.#data);
      }
      get dataLength() {
        return this.#data.length;
      }
      get consumed() {
        return this.#offset;
      }
      get bytes() {
        return new Uint8Array(this.#data);
      }
      #incrementBytesRead(count) {
        if (this.#parent) {
          return this.#parent.#incrementBytesRead(count);
        }
        this.#bytesRead += count;
        (0, index_js_1.assert)(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
          buffer: (0, index_js_1.getBytesCopy)(this.#data),
          offset: this.#offset,
          length: count,
          info: {
            bytesRead: this.#bytesRead,
            dataLength: this.dataLength
          }
        });
      }
      #peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / exports2.WordSize) * exports2.WordSize;
        if (this.#offset + alignedLength > this.#data.length) {
          if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
            alignedLength = length;
          } else {
            (0, index_js_1.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
              buffer: (0, index_js_1.getBytesCopy)(this.#data),
              length: this.#data.length,
              offset: this.#offset + alignedLength
            });
          }
        }
        return this.#data.slice(this.#offset, this.#offset + alignedLength);
      }
      // Create a sub-reader with the same underlying data, but offset
      subReader(offset) {
        const reader = new _Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
        reader.#parent = this;
        return reader;
      }
      // Read bytes
      readBytes(length, loose) {
        let bytes = this.#peekBytes(0, length, !!loose);
        this.#incrementBytesRead(length);
        this.#offset += bytes.length;
        return bytes.slice(0, length);
      }
      // Read a numeric values
      readValue() {
        return (0, index_js_1.toBigInt)(this.readBytes(exports2.WordSize));
      }
      readIndex() {
        return (0, index_js_1.toNumber)(this.readBytes(exports2.WordSize));
      }
    };
    exports2.Reader = Reader;
  }
});

// node_modules/ethers/lib.commonjs/crypto/crypto.js
var require_crypto = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = exports2.pbkdf2Sync = exports2.createHmac = exports2.createHash = void 0;
    var crypto_1 = require("crypto");
    Object.defineProperty(exports2, "createHash", { enumerable: true, get: function() {
      return crypto_1.createHash;
    } });
    Object.defineProperty(exports2, "createHmac", { enumerable: true, get: function() {
      return crypto_1.createHmac;
    } });
    Object.defineProperty(exports2, "pbkdf2Sync", { enumerable: true, get: function() {
      return crypto_1.pbkdf2Sync;
    } });
    Object.defineProperty(exports2, "randomBytes", { enumerable: true, get: function() {
      return crypto_1.randomBytes;
    } });
  }
});

// node_modules/ethers/lib.commonjs/crypto/hmac.js
var require_hmac = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/hmac.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.computeHmac = void 0;
    var crypto_js_1 = require_crypto();
    var index_js_1 = require_utils();
    var locked = false;
    var _computeHmac = function(algorithm, key, data) {
      return (0, crypto_js_1.createHmac)(algorithm, key).update(data).digest();
    };
    var __computeHmac = _computeHmac;
    function computeHmac(algorithm, _key, _data) {
      const key = (0, index_js_1.getBytes)(_key, "key");
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__computeHmac(algorithm, key, data));
    }
    exports2.computeHmac = computeHmac;
    computeHmac._ = _computeHmac;
    computeHmac.lock = function() {
      locked = true;
    };
    computeHmac.register = function(func) {
      if (locked) {
        throw new Error("computeHmac is locked");
      }
      __computeHmac = func;
    };
    Object.freeze(computeHmac);
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.output = exports2.exists = exports2.hash = exports2.bytes = exports2.bool = exports2.number = void 0;
    function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
    }
    exports2.number = number;
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`Expected boolean, not ${b}`);
    }
    exports2.bool = bool;
    function bytes(b, ...lengths) {
      if (!(b instanceof Uint8Array))
        throw new Error("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    exports2.bytes = bytes;
    function hash(hash2) {
      if (typeof hash2 !== "function" || typeof hash2.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(hash2.outputLen);
      number(hash2.blockLen);
    }
    exports2.hash = hash;
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports2.exists = exists;
    function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports2.output = output;
    var assert = { number, bool, bytes, hash, exists, output };
    exports2.default = assert;
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.add5L = exports2.add5H = exports2.add4H = exports2.add4L = exports2.add3H = exports2.add3L = exports2.add = exports2.rotlBL = exports2.rotlBH = exports2.rotlSL = exports2.rotlSH = exports2.rotr32L = exports2.rotr32H = exports2.rotrBL = exports2.rotrBH = exports2.rotrSL = exports2.rotrSH = exports2.shrSL = exports2.shrSH = exports2.toBig = exports2.split = exports2.fromBig = void 0;
    var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    var _32n = /* @__PURE__ */ BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    exports2.fromBig = fromBig;
    function split(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports2.split = split;
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports2.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports2.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports2.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports2.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports2.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports2.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports2.rotr32L = rotr32L;
    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
    exports2.rotlSH = rotlSH;
    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
    exports2.rotlSL = rotlSL;
    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports2.rotlBH = rotlBH;
    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports2.rotlBL = rotlBL;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports2.add = add;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports2.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports2.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports2.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports2.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports2.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports2.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports2.default = u64;
  }
});

// node_modules/@noble/hashes/cryptoNode.js
var require_cryptoNode = __commonJS({
  "node_modules/@noble/hashes/cryptoNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crypto = void 0;
    var nc = require("node:crypto");
    exports2.crypto = nc && typeof nc === "object" && "webcrypto" in nc ? nc.webcrypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils2 = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = exports2.wrapXOFConstructorWithOpts = exports2.wrapConstructorWithOpts = exports2.wrapConstructor = exports2.checkOpts = exports2.Hash = exports2.concatBytes = exports2.toBytes = exports2.utf8ToBytes = exports2.asyncLoop = exports2.nextTick = exports2.hexToBytes = exports2.bytesToHex = exports2.isLE = exports2.rotr = exports2.createView = exports2.u32 = exports2.u8 = void 0;
    var crypto_1 = require_cryptoNode();
    var u8a = (a) => a instanceof Uint8Array;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.u8 = u8;
    var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports2.u32 = u32;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports2.rotr = rotr;
    exports2.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports2.isLE)
      throw new Error("Non little-endian hardware is not supported");
    var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports2.bytesToHex = bytesToHex;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports2.hexToBytes = hexToBytes;
    var nextTick = async () => {
    };
    exports2.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports2.nextTick)();
        ts += diff;
      }
    }
    exports2.asyncLoop = asyncLoop;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports2.utf8ToBytes = utf8ToBytes;
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      if (!u8a(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
      return data;
    }
    exports2.toBytes = toBytes2;
    function concatBytes(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports2.concatBytes = concatBytes;
    var Hash = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports2.Hash = Hash;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports2.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports2.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports2.randomBytes = randomBytes;
  }
});

// node_modules/@noble/hashes/sha3.js
var require_sha3 = __commonJS({
  "node_modules/@noble/hashes/sha3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shake256 = exports2.shake128 = exports2.keccak_512 = exports2.keccak_384 = exports2.keccak_256 = exports2.keccak_224 = exports2.sha3_512 = exports2.sha3_384 = exports2.sha3_256 = exports2.sha3_224 = exports2.Keccak = exports2.keccakP = void 0;
    var _assert_js_1 = require_assert();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils2();
    var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
    var _0n = /* @__PURE__ */ BigInt(0);
    var _1n = /* @__PURE__ */ BigInt(1);
    var _2n = /* @__PURE__ */ BigInt(2);
    var _7n = /* @__PURE__ */ BigInt(7);
    var _256n = /* @__PURE__ */ BigInt(256);
    var _0x71n = /* @__PURE__ */ BigInt(113);
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
    var rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
    }
    exports2.keccakP = keccakP;
    var Keccak = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports2.Keccak = Keccak;
    var gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
    exports2.sha3_224 = gen(6, 144, 224 / 8);
    exports2.sha3_256 = gen(6, 136, 256 / 8);
    exports2.sha3_384 = gen(6, 104, 384 / 8);
    exports2.sha3_512 = gen(6, 72, 512 / 8);
    exports2.keccak_224 = gen(1, 144, 224 / 8);
    exports2.keccak_256 = gen(1, 136, 256 / 8);
    exports2.keccak_384 = gen(1, 104, 384 / 8);
    exports2.keccak_512 = gen(1, 72, 512 / 8);
    var genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports2.shake128 = genShake(31, 168, 128 / 8);
    exports2.shake256 = genShake(31, 136, 256 / 8);
  }
});

// node_modules/ethers/lib.commonjs/crypto/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/keccak.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.keccak256 = void 0;
    var sha3_1 = require_sha3();
    var index_js_1 = require_utils();
    var locked = false;
    var _keccak256 = function(data) {
      return (0, sha3_1.keccak_256)(data);
    };
    var __keccak256 = _keccak256;
    function keccak256(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__keccak256(data));
    }
    exports2.keccak256 = keccak256;
    keccak256._ = _keccak256;
    keccak256.lock = function() {
      locked = true;
    };
    keccak256.register = function(func) {
      if (locked) {
        throw new TypeError("keccak256 is locked");
      }
      __keccak256 = func;
    };
    Object.freeze(keccak256);
  }
});

// node_modules/@noble/hashes/_sha2.js
var require_sha2 = __commonJS({
  "node_modules/@noble/hashes/_sha2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SHA2 = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils2();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    var SHA2 = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports2.SHA2 = SHA2;
  }
});

// node_modules/@noble/hashes/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/@noble/hashes/ripemd160.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = exports2.RIPEMD160 = void 0;
    var _sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils2();
    var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
    var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j of [idxL, idxR])
        j.push(j[i].map((k) => Rho[k]));
    var shifts = /* @__PURE__ */ [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
    var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
    var Kl = /* @__PURE__ */ new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = /* @__PURE__ */ new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    var rotl = (word, shift) => word << shift | word >>> 32 - shift;
    function f(group, x, y, z) {
      if (group === 0)
        return x ^ y ^ z;
      else if (group === 1)
        return x & y | ~x & z;
      else if (group === 2)
        return (x | ~y) ^ z;
      else if (group === 3)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    var BUF = /* @__PURE__ */ new Uint32Array(16);
    var RIPEMD160 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          BUF[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr = idxR[group];
          const sl = shiftsL[group], sr = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports2.RIPEMD160 = RIPEMD160;
    exports2.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  }
});

// node_modules/ethers/lib.commonjs/crypto/ripemd160.js
var require_ripemd1602 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/ripemd160.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = void 0;
    var ripemd160_1 = require_ripemd160();
    var index_js_1 = require_utils();
    var locked = false;
    var _ripemd160 = function(data) {
      return (0, ripemd160_1.ripemd160)(data);
    };
    var __ripemd160 = _ripemd160;
    function ripemd160(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__ripemd160(data));
    }
    exports2.ripemd160 = ripemd160;
    ripemd160._ = _ripemd160;
    ripemd160.lock = function() {
      locked = true;
    };
    ripemd160.register = function(func) {
      if (locked) {
        throw new TypeError("ripemd160 is locked");
      }
      __ripemd160 = func;
    };
    Object.freeze(ripemd160);
  }
});

// node_modules/ethers/lib.commonjs/crypto/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/pbkdf2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pbkdf2 = void 0;
    var crypto_js_1 = require_crypto();
    var index_js_1 = require_utils();
    var locked = false;
    var _pbkdf2 = function(password, salt, iterations, keylen, algo) {
      return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);
    };
    var __pbkdf2 = _pbkdf2;
    function pbkdf2(_password, _salt, iterations, keylen, algo) {
      const password = (0, index_js_1.getBytes)(_password, "password");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));
    }
    exports2.pbkdf2 = pbkdf2;
    pbkdf2._ = _pbkdf2;
    pbkdf2.lock = function() {
      locked = true;
    };
    pbkdf2.register = function(func) {
      if (locked) {
        throw new Error("pbkdf2 is locked");
      }
      __pbkdf2 = func;
    };
    Object.freeze(pbkdf2);
  }
});

// node_modules/ethers/lib.commonjs/crypto/random.js
var require_random = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/random.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = void 0;
    var crypto_js_1 = require_crypto();
    var locked = false;
    var _randomBytes = function(length) {
      return new Uint8Array((0, crypto_js_1.randomBytes)(length));
    };
    var __randomBytes = _randomBytes;
    function randomBytes(length) {
      return __randomBytes(length);
    }
    exports2.randomBytes = randomBytes;
    randomBytes._ = _randomBytes;
    randomBytes.lock = function() {
      locked = true;
    };
    randomBytes.register = function(func) {
      if (locked) {
        throw new Error("randomBytes is locked");
      }
      __randomBytes = func;
    };
    Object.freeze(randomBytes);
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha224 = exports2.sha256 = void 0;
    var _sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils2();
    var Chi = (a, b, c) => a & b ^ ~a & c;
    var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    var SHA256_K = /* @__PURE__ */ new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var IV = /* @__PURE__ */ new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    var SHA256 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 32, 8, false);
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + Maj(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports2.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports2.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac2 = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hmac = exports2.HMAC = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils2();
    var HMAC = class extends utils_js_1.Hash {
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports2.HMAC = HMAC;
    var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    exports2.hmac = hmac;
    exports2.hmac.create = (hash, key) => new HMAC(hash, key);
  }
});

// node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf22 = __commonJS({
  "node_modules/@noble/hashes/pbkdf2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pbkdf2Async = exports2.pbkdf2 = void 0;
    var _assert_js_1 = require_assert();
    var hmac_js_1 = require_hmac2();
    var utils_js_1 = require_utils2();
    function pbkdf2Init(hash, _password, _salt, _opts) {
      (0, _assert_js_1.hash)(hash);
      const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, _assert_js_1.number)(c);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_js_1.hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u.fill(0);
      return DK;
    }
    function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports2.pbkdf2 = pbkdf2;
    async function pbkdf2Async(hash, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports2.pbkdf2Async = pbkdf2Async;
  }
});

// node_modules/@noble/hashes/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/@noble/hashes/scrypt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scryptAsync = exports2.scrypt = void 0;
    var _assert_js_1 = require_assert();
    var sha256_js_1 = require_sha256();
    var pbkdf2_js_1 = require_pbkdf22();
    var utils_js_1 = require_utils2();
    var rotl = (a, b) => a << b | a >>> 32 - b;
    function XorAndSalsa(prev, pi, input, ii, out, oi) {
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      for (let i = 0; i < 8; i += 2) {
        x04 ^= rotl(x00 + x12 | 0, 7);
        x08 ^= rotl(x04 + x00 | 0, 9);
        x12 ^= rotl(x08 + x04 | 0, 13);
        x00 ^= rotl(x12 + x08 | 0, 18);
        x09 ^= rotl(x05 + x01 | 0, 7);
        x13 ^= rotl(x09 + x05 | 0, 9);
        x01 ^= rotl(x13 + x09 | 0, 13);
        x05 ^= rotl(x01 + x13 | 0, 18);
        x14 ^= rotl(x10 + x06 | 0, 7);
        x02 ^= rotl(x14 + x10 | 0, 9);
        x06 ^= rotl(x02 + x14 | 0, 13);
        x10 ^= rotl(x06 + x02 | 0, 18);
        x03 ^= rotl(x15 + x11 | 0, 7);
        x07 ^= rotl(x03 + x15 | 0, 9);
        x11 ^= rotl(x07 + x03 | 0, 13);
        x15 ^= rotl(x11 + x07 | 0, 18);
        x01 ^= rotl(x00 + x03 | 0, 7);
        x02 ^= rotl(x01 + x00 | 0, 9);
        x03 ^= rotl(x02 + x01 | 0, 13);
        x00 ^= rotl(x03 + x02 | 0, 18);
        x06 ^= rotl(x05 + x04 | 0, 7);
        x07 ^= rotl(x06 + x05 | 0, 9);
        x04 ^= rotl(x07 + x06 | 0, 13);
        x05 ^= rotl(x04 + x07 | 0, 18);
        x11 ^= rotl(x10 + x09 | 0, 7);
        x08 ^= rotl(x11 + x10 | 0, 9);
        x09 ^= rotl(x08 + x11 | 0, 13);
        x10 ^= rotl(x09 + x08 | 0, 18);
        x12 ^= rotl(x15 + x14 | 0, 7);
        x13 ^= rotl(x12 + x15 | 0, 9);
        x14 ^= rotl(x13 + x12 | 0, 13);
        x15 ^= rotl(x14 + x13 | 0, 18);
      }
      out[oi++] = y00 + x00 | 0;
      out[oi++] = y01 + x01 | 0;
      out[oi++] = y02 + x02 | 0;
      out[oi++] = y03 + x03 | 0;
      out[oi++] = y04 + x04 | 0;
      out[oi++] = y05 + x05 | 0;
      out[oi++] = y06 + x06 | 0;
      out[oi++] = y07 + x07 | 0;
      out[oi++] = y08 + x08 | 0;
      out[oi++] = y09 + x09 | 0;
      out[oi++] = y10 + x10 | 0;
      out[oi++] = y11 + x11 | 0;
      out[oi++] = y12 + x12 | 0;
      out[oi++] = y13 + x13 | 0;
      out[oi++] = y14 + x14 | 0;
      out[oi++] = y15 + x15 | 0;
    }
    function BlockMix(input, ii, out, oi, r) {
      let head = oi + 0;
      let tail = oi + 16 * r;
      for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
      for (let i = 0; i < r; i++, head += 16, ii += 16) {
        XorAndSalsa(out, tail, input, ii, out, head);
        if (i > 0)
          tail += 16;
        XorAndSalsa(out, head, input, ii += 16, out, tail);
      }
    }
    function scryptInit(password, salt, _opts) {
      const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      (0, _assert_js_1.number)(N);
      (0, _assert_js_1.number)(r);
      (0, _assert_js_1.number)(p);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      (0, _assert_js_1.number)(maxmem);
      if (onProgress !== void 0 && typeof onProgress !== "function")
        throw new Error("progressCb should be function");
      const blockSize = 128 * r;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
        throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      }
      if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
        throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      }
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = (0, utils_js_1.u32)(B);
      const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
      const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
      let blockMixCb = () => {
      };
      if (onProgress) {
        const totalBlockMix = 2 * N * p;
        const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
          blockMixCnt++;
          if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
            onProgress(blockMixCnt / totalBlockMix);
        };
      }
      return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput(password, dkLen, B, V, tmp) {
      const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
    }
    function scrypt(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi + i];
        for (let i = 0, pos = 0; i < N - 1; i++) {
          BlockMix(V, pos, V, pos += blockSize32, r);
          blockMixCb();
        }
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
        blockMixCb();
        for (let i = 0; i < N; i++) {
          const j = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r);
          blockMixCb();
        }
      }
      return scryptOutput(password, dkLen, B, V, tmp);
    }
    exports2.scrypt = scrypt;
    async function scryptAsync(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi + i];
        let pos = 0;
        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {
          BlockMix(V, pos, V, pos += blockSize32, r);
          blockMixCb();
        });
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
        blockMixCb();
        await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {
          const j = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r);
          blockMixCb();
        });
      }
      return scryptOutput(password, dkLen, B, V, tmp);
    }
    exports2.scryptAsync = scryptAsync;
  }
});

// node_modules/ethers/lib.commonjs/crypto/scrypt.js
var require_scrypt2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/scrypt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scryptSync = exports2.scrypt = void 0;
    var scrypt_1 = require_scrypt();
    var index_js_1 = require_utils();
    var lockedSync = false;
    var lockedAsync = false;
    var _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
      return await (0, scrypt_1.scryptAsync)(passwd, salt, { N, r, p, dkLen, onProgress });
    };
    var _scryptSync = function(passwd, salt, N, r, p, dkLen) {
      return (0, scrypt_1.scrypt)(passwd, salt, { N, r, p, dkLen });
    };
    var __scryptAsync = _scryptAsync;
    var __scryptSync = _scryptSync;
    async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
    }
    exports2.scrypt = scrypt;
    scrypt._ = _scryptAsync;
    scrypt.lock = function() {
      lockedAsync = true;
    };
    scrypt.register = function(func) {
      if (lockedAsync) {
        throw new Error("scrypt is locked");
      }
      __scryptAsync = func;
    };
    Object.freeze(scrypt);
    function scryptSync(_passwd, _salt, N, r, p, dkLen) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));
    }
    exports2.scryptSync = scryptSync;
    scryptSync._ = _scryptSync;
    scryptSync.lock = function() {
      lockedSync = true;
    };
    scryptSync.register = function(func) {
      if (lockedSync) {
        throw new Error("scryptSync is locked");
      }
      __scryptSync = func;
    };
    Object.freeze(scryptSync);
  }
});

// node_modules/ethers/lib.commonjs/crypto/sha2.js
var require_sha22 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/sha2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha512 = exports2.sha256 = void 0;
    var crypto_js_1 = require_crypto();
    var index_js_1 = require_utils();
    var _sha256 = function(data) {
      return (0, crypto_js_1.createHash)("sha256").update(data).digest();
    };
    var _sha512 = function(data) {
      return (0, crypto_js_1.createHash)("sha512").update(data).digest();
    };
    var __sha256 = _sha256;
    var __sha512 = _sha512;
    var locked256 = false;
    var locked512 = false;
    function sha256(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__sha256(data));
    }
    exports2.sha256 = sha256;
    sha256._ = _sha256;
    sha256.lock = function() {
      locked256 = true;
    };
    sha256.register = function(func) {
      if (locked256) {
        throw new Error("sha256 is locked");
      }
      __sha256 = func;
    };
    Object.freeze(sha256);
    function sha512(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__sha512(data));
    }
    exports2.sha512 = sha512;
    sha512._ = _sha512;
    sha512.lock = function() {
      locked512 = true;
    };
    sha512.register = function(func) {
      if (locked512) {
        throw new Error("sha512 is locked");
      }
      __sha512 = func;
    };
    Object.freeze(sha256);
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils3 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateObject = exports2.createHmacDrbg = exports2.bitMask = exports2.bitSet = exports2.bitGet = exports2.bitLen = exports2.utf8ToBytes = exports2.equalBytes = exports2.concatBytes = exports2.ensureBytes = exports2.numberToVarBytesBE = exports2.numberToBytesLE = exports2.numberToBytesBE = exports2.bytesToNumberLE = exports2.bytesToNumberBE = exports2.hexToBytes = exports2.hexToNumber = exports2.numberToHexUnpadded = exports2.bytesToHex = void 0;
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var u8a = (a) => a instanceof Uint8Array;
    var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports2.bytesToHex = bytesToHex;
    function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    exports2.numberToHexUnpadded = numberToHexUnpadded;
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    exports2.hexToNumber = hexToNumber;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports2.hexToBytes = hexToBytes;
    function bytesToNumberBE(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    exports2.bytesToNumberBE = bytesToNumberBE;
    function bytesToNumberLE(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    exports2.bytesToNumberLE = bytesToNumberLE;
    function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    exports2.numberToBytesBE = numberToBytesBE;
    function numberToBytesLE(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    exports2.numberToBytesLE = numberToBytesLE;
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    exports2.numberToVarBytesBE = numberToVarBytesBE;
    function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (u8a(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    exports2.ensureBytes = ensureBytes;
    function concatBytes(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports2.concatBytes = concatBytes;
    function equalBytes(b1, b2) {
      if (b1.length !== b2.length)
        return false;
      for (let i = 0; i < b1.length; i++)
        if (b1[i] !== b2[i])
          return false;
      return true;
    }
    exports2.equalBytes = equalBytes;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports2.utf8ToBytes = utf8ToBytes;
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
      return len;
    }
    exports2.bitLen = bitLen;
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n;
    }
    exports2.bitGet = bitGet;
    var bitSet = (n, pos, value) => {
      return n | (value ? _1n : _0n) << BigInt(pos);
    };
    exports2.bitSet = bitSet;
    var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
    exports2.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n()) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    exports2.createHmacDrbg = createHmacDrbg;
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
    exports2.validateObject = validateObject;
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapHashToField = exports2.getMinHashLength = exports2.getFieldBytesLength = exports2.hashToPrivateScalar = exports2.FpSqrtEven = exports2.FpSqrtOdd = exports2.Field = exports2.nLength = exports2.FpIsSquare = exports2.FpDiv = exports2.FpInvertBatch = exports2.FpPow = exports2.validateField = exports2.isNegativeLE = exports2.FpSqrt = exports2.tonelliShanks = exports2.invert = exports2.pow2 = exports2.pow = exports2.mod = void 0;
    var utils_js_1 = require_utils3();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod(a, b) {
      const result = a % b;
      return result >= _0n ? result : b + result;
    }
    exports2.mod = mod;
    function pow(num, power, modulo) {
      if (modulo <= _0n || power < _0n)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n)
        return _0n;
      let res = _1n;
      while (power > _0n) {
        if (power & _1n)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
      }
      return res;
    }
    exports2.pow = pow;
    function pow2(x, power, modulo) {
      let res = x;
      while (power-- > _0n) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    exports2.pow2 = pow2;
    function invert(number, modulo) {
      if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n, y = _1n, u = _1n, v = _0n;
      while (a !== _0n) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n)
        throw new Error("invert: does not exist");
      return mod(x, modulo);
    }
    exports2.invert = invert;
    function tonelliShanks(P) {
      const legendreC = (P - _1n) / _2n;
      let Q, S, Z;
      for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
        ;
      for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n) / _2n;
      return function tonelliSlow(Fp, n) {
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
        let x = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge = Fp.pow(g, _1n << BigInt(r - m - 1));
          g = Fp.sqr(ge);
          x = Fp.mul(x, ge);
          b = Fp.mul(b, g);
          r = m;
        }
        return x;
      };
    }
    exports2.tonelliShanks = tonelliShanks;
    function FpSqrt(P) {
      if (P % _4n === _3n) {
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n);
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n), v);
          const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n === _9n) {
      }
      return tonelliShanks(P);
    }
    exports2.FpSqrt = FpSqrt;
    var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
    exports2.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    exports2.validateField = validateField;
    function FpPow(f, num, power) {
      if (power < _0n)
        throw new Error("Expected power > 0");
      if (power === _0n)
        return f.ONE;
      if (power === _1n)
        return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n) {
        if (power & _1n)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
      }
      return p;
    }
    exports2.FpPow = FpPow;
    function FpInvertBatch(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
      }, inverted);
      return tmp;
    }
    exports2.FpInvertBatch = FpInvertBatch;
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
    }
    exports2.FpDiv = FpDiv;
    function FpIsSquare(f) {
      const legendreConst = (f.ORDER - _1n) / _2n;
      return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    exports2.FpIsSquare = FpIsSquare;
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    exports2.nLength = nLength;
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n <= num && num < ORDER;
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num) => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
          return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
      });
      return Object.freeze(f);
    }
    exports2.Field = Field;
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? root : Fp.neg(root);
    }
    exports2.FpSqrtOdd = FpSqrtOdd;
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? Fp.neg(root) : root;
    }
    exports2.FpSqrtEven = FpSqrtEven;
    function hashToPrivateScalar(hash, groupOrder, isLE = false) {
      hash = (0, utils_js_1.ensureBytes)("privateHash", hash);
      const hashLen = hash.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
      return mod(num, groupOrder - _1n) + _1n;
    }
    exports2.hashToPrivateScalar = hashToPrivateScalar;
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    exports2.getFieldBytesLength = getFieldBytesLength;
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    exports2.getMinHashLength = getMinHashLength;
    function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod(num, fieldOrder - _1n) + _1n;
      return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
    exports2.mapHashToField = mapHashToField;
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateBasic = exports2.wNAF = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils3();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n) {
            if (n & _1n)
              p = p.add(d);
            d = d.double();
            n >>= _1n;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P, precomputesMap, n, transform) {
          const W = P._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1) {
              precomputesMap.set(P, transform(comp));
            }
          }
          return this.wNAF(W, comp, n);
        }
      };
    }
    exports2.wNAF = wNAF;
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    exports2.validateBasic = validateBasic;
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapToCurveSimpleSWU = exports2.SWUFpSqrtRatio = exports2.weierstrass = exports2.weierstrassPoints = exports2.DER = void 0;
    var mod = require_modular();
    var ut = require_utils3();
    var utils_js_1 = require_utils3();
    var curve_js_1 = require_curve();
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports2.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports2.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports2.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        if (!(data instanceof Uint8Array))
          throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports2.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports2.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (key instanceof Uint8Array)
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point.ZERO;
          return new Point(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point.ZERO;
          if (n === _0n)
            return I;
          assertGE(n);
          if (n === _1n)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point = p;
            fake = f;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point.BASE;
          const mul = (P, a2) => a2 === _0n || a2 === _1n || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    exports2.weierstrassPoints = weierstrassPoints;
    function validateOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y = Fp.sqrt(y2);
            const isYOdd = (y & _1n) === _1n;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports2.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports2.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod.getMinHashLength(CURVE.n);
          return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        const num = ut.bytesToNumberBE(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null) {
          const e = ent === true ? randomBytes(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point.BASE.multiply(k).toAffine();
          const r = modN(q.x);
          if (r === _0n)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || sg instanceof Uint8Array) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports2.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r * is);
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R)
          return false;
        const v = modN(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils
      };
    }
    exports2.weierstrass = weierstrass;
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n;
      for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
      const c1 = l;
      const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
      const c2 = (q - _1n) / _2n_pow_c1;
      const c3 = (c2 - _1n) / _2n;
      const c4 = _2n_pow_c1 - _1n;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n) / _2n);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n; i--) {
          let tv52 = i - _2n;
          tv52 = _2n << tv52 - _1n;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    exports2.SWUFpSqrtRatio = SWUFpSqrtRatio;
    function mapToCurveSimpleSWU(Fp, opts) {
      mod.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
    exports2.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createHasher = exports2.isogenyMap = exports2.hash_to_field = exports2.expand_message_xof = exports2.expand_message_xmd = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils3();
    function validateDST(dst) {
      if (dst instanceof Uint8Array)
        return dst;
      if (typeof dst === "string")
        return (0, utils_js_1.utf8ToBytes)(dst);
      throw new Error("DST must be Uint8Array or string");
    }
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function isBytes(item) {
      if (!(item instanceof Uint8Array))
        throw new Error("Uint8Array expected");
    }
    function isNum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      isBytes(msg);
      isBytes(DST);
      isNum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    exports2.expand_message_xmd = expand_message_xmd;
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      isBytes(msg);
      isBytes(DST);
      isNum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    exports2.expand_message_xof = expand_message_xof;
    function hash_to_field(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash, expand, DST: _DST } = options;
      isBytes(msg);
      isNum(count);
      const DST = validateDST(_DST);
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    exports2.hash_to_field = hash_to_field;
    function isogenyMap(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    exports2.isogenyMap = isogenyMap;
    function createHasher(Point, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point.fromAffine(mapToCurve(u[0]));
          const u1 = Point.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
    exports2.createHasher = createHasher;
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCurve = exports2.getHash = void 0;
    var hmac_1 = require_hmac2();
    var utils_1 = require_utils2();
    var weierstrass_js_1 = require_weierstrass();
    function getHash(hash) {
      return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    exports2.getHash = getHash;
    function createCurve(curveDef, defHash) {
      const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
      return Object.freeze({ ...create(defHash), create });
    }
    exports2.createCurve = createCurve;
  }
});

// node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@noble/curves/secp256k1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeToCurve = exports2.hashToCurve = exports2.schnorr = exports2.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils2();
    var modular_js_1 = require_modular();
    var weierstrass_js_1 = require_weierstrass();
    var utils_js_1 = require_utils3();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var _shortw_utils_js_1 = require_shortw_utils();
    var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports2.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      b: BigInt(7),
      Fp,
      n: secp256k1N,
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n = BigInt(0);
    var fe = (x) => typeof x === "bigint" && _0n < x && x < secp256k1P;
    var ge = (x) => typeof x === "bigint" && _0n < x && x < secp256k1N;
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point) => point.toRawBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
    var modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
    var Point = exports2.secp256k1.ProjectivePoint;
    var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports2.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n !== _0n)
        y = modP(-y);
      const p = new Point(x, y, _1n);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m);
        const R = GmulAdd(P, s, modN(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports2.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports2.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    var htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports2.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports2.hashToCurve = (() => htf.hashToCurve)();
    exports2.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/ethers/lib.commonjs/constants/addresses.js
var require_addresses = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/addresses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZeroAddress = void 0;
    exports2.ZeroAddress = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/hashes.js
var require_hashes = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/hashes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZeroHash = void 0;
    exports2.ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/numbers.js
var require_numbers = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/numbers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.N = void 0;
    exports2.N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    exports2.WeiPerEther = BigInt("1000000000000000000");
    exports2.MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports2.MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
    exports2.MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/ethers/lib.commonjs/constants/strings.js
var require_strings = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/strings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessagePrefix = exports2.EtherSymbol = void 0;
    exports2.EtherSymbol = "\u039E";
    exports2.MessagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/ethers/lib.commonjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessagePrefix = exports2.EtherSymbol = exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.N = exports2.ZeroHash = exports2.ZeroAddress = void 0;
    var addresses_js_1 = require_addresses();
    Object.defineProperty(exports2, "ZeroAddress", { enumerable: true, get: function() {
      return addresses_js_1.ZeroAddress;
    } });
    var hashes_js_1 = require_hashes();
    Object.defineProperty(exports2, "ZeroHash", { enumerable: true, get: function() {
      return hashes_js_1.ZeroHash;
    } });
    var numbers_js_1 = require_numbers();
    Object.defineProperty(exports2, "N", { enumerable: true, get: function() {
      return numbers_js_1.N;
    } });
    Object.defineProperty(exports2, "WeiPerEther", { enumerable: true, get: function() {
      return numbers_js_1.WeiPerEther;
    } });
    Object.defineProperty(exports2, "MaxUint256", { enumerable: true, get: function() {
      return numbers_js_1.MaxUint256;
    } });
    Object.defineProperty(exports2, "MinInt256", { enumerable: true, get: function() {
      return numbers_js_1.MinInt256;
    } });
    Object.defineProperty(exports2, "MaxInt256", { enumerable: true, get: function() {
      return numbers_js_1.MaxInt256;
    } });
    var strings_js_1 = require_strings();
    Object.defineProperty(exports2, "EtherSymbol", { enumerable: true, get: function() {
      return strings_js_1.EtherSymbol;
    } });
    Object.defineProperty(exports2, "MessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.MessagePrefix;
    } });
  }
});

// node_modules/ethers/lib.commonjs/crypto/signature.js
var require_signature = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Signature = void 0;
    var index_js_1 = require_constants();
    var index_js_2 = require_utils();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_2 = BigInt(2);
    var BN_27 = BigInt(27);
    var BN_28 = BigInt(28);
    var BN_35 = BigInt(35);
    var _guard = {};
    function toUint256(value) {
      return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);
    }
    var Signature = class _Signature {
      #r;
      #s;
      #v;
      #networkV;
      /**
       *  The ``r`` value for a signautre.
       *
       *  This represents the ``x`` coordinate of a "reference" or
       *  challenge point, from which the ``y`` can be computed.
       */
      get r() {
        return this.#r;
      }
      set r(value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, "invalid r", "value", value);
        this.#r = (0, index_js_2.hexlify)(value);
      }
      /**
       *  The ``s`` value for a signature.
       */
      get s() {
        return this.#s;
      }
      set s(_value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, "invalid s", "value", _value);
        const value = (0, index_js_2.hexlify)(_value);
        (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
        this.#s = value;
      }
      /**
       *  The ``v`` value for a signature.
       *
       *  Since a given ``x`` value for ``r`` has two possible values for
       *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
       *  values to use.
       *
       *  It is normalized to the values ``27`` or ``28`` for legacy
       *  purposes.
       */
      get v() {
        return this.#v;
      }
      set v(value) {
        const v = (0, index_js_2.getNumber)(value, "value");
        (0, index_js_2.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
        this.#v = v;
      }
      /**
       *  The EIP-155 ``v`` for legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get networkV() {
        return this.#networkV;
      }
      /**
       *  The chain ID for EIP-155 legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get legacyChainId() {
        const v = this.networkV;
        if (v == null) {
          return null;
        }
        return _Signature.getChainId(v);
      }
      /**
       *  The ``yParity`` for the signature.
       *
       *  See ``v`` for more details on how this value is used.
       */
      get yParity() {
        return this.v === 27 ? 0 : 1;
      }
      /**
       *  The [[link-eip-2098]] compact representation of the ``yParity``
       *  and ``s`` compacted into a single ``bytes32``.
       */
      get yParityAndS() {
        const yParityAndS = (0, index_js_2.getBytes)(this.s);
        if (this.yParity) {
          yParityAndS[0] |= 128;
        }
        return (0, index_js_2.hexlify)(yParityAndS);
      }
      /**
       *  The [[link-eip-2098]] compact representation.
       */
      get compactSerialized() {
        return (0, index_js_2.concat)([this.r, this.yParityAndS]);
      }
      /**
       *  The serialized representation.
       */
      get serialized() {
        return (0, index_js_2.concat)([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
      }
      /**
       *  @private
       */
      constructor(guard, r, s, v) {
        (0, index_js_2.assertPrivate)(guard, _guard, "Signature");
        this.#r = r;
        this.#s = s;
        this.#v = v;
        this.#networkV = null;
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
      }
      /**
       *  Returns a new identical [[Signature]].
       */
      clone() {
        const clone = new _Signature(_guard, this.r, this.s, this.v);
        if (this.networkV) {
          clone.#networkV = this.networkV;
        }
        return clone;
      }
      /**
       *  Returns a representation that is compatible with ``JSON.stringify``.
       */
      toJSON() {
        const networkV = this.networkV;
        return {
          _type: "signature",
          networkV: networkV != null ? networkV.toString() : null,
          r: this.r,
          s: this.s,
          v: this.v
        };
      }
      /**
       *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
       *
       *  @example:
       *    Signature.getChainId(45)
       *    //_result:
       *
       *    Signature.getChainId(46)
       *    //_result:
       */
      static getChainId(v) {
        const bv = (0, index_js_2.getBigInt)(v, "v");
        if (bv == BN_27 || bv == BN_28) {
          return BN_0;
        }
        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid EIP-155 v", "v", v);
        return (bv - BN_35) / BN_2;
      }
      /**
       *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
       *
       *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
       *  property to include the chain ID.
       *
       *  @example:
       *    Signature.getChainIdV(5, 27)
       *    //_result:
       *
       *    Signature.getChainIdV(5, 28)
       *    //_result:
       *
       */
      static getChainIdV(chainId, v) {
        return (0, index_js_2.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);
      }
      /**
       *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
       *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
       *
       *  @example:
       *    // The values 0 and 1 imply v is actually yParity
       *    Signature.getNormalizedV(0)
       *    //_result:
       *
       *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
       *    Signature.getNormalizedV(27)
       *    //_result:
       *
       *    // Legacy EIP-155 transaction (i.e. >= 35)
       *    Signature.getNormalizedV(46)
       *    //_result:
       *
       *    // Invalid values throw
       *    Signature.getNormalizedV(5)
       *    //_error:
       */
      static getNormalizedV(v) {
        const bv = (0, index_js_2.getBigInt)(v);
        if (bv === BN_0 || bv === BN_27) {
          return 27;
        }
        if (bv === BN_1 || bv === BN_28) {
          return 28;
        }
        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid v", "v", v);
        return bv & BN_1 ? 27 : 28;
      }
      /**
       *  Creates a new [[Signature]].
       *
       *  If no %%sig%% is provided, a new [[Signature]] is created
       *  with default values.
       *
       *  If %%sig%% is a string, it is parsed.
       */
      static from(sig) {
        function assertError(check, message) {
          (0, index_js_2.assertArgument)(check, message, "signature", sig);
        }
        ;
        if (sig == null) {
          return new _Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);
        }
        if (typeof sig === "string") {
          const bytes = (0, index_js_2.getBytes)(sig, "signature");
          if (bytes.length === 64) {
            const r2 = (0, index_js_2.hexlify)(bytes.slice(0, 32));
            const s2 = bytes.slice(32, 64);
            const v2 = s2[0] & 128 ? 28 : 27;
            s2[0] &= 127;
            return new _Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
          }
          if (bytes.length === 65) {
            const r2 = (0, index_js_2.hexlify)(bytes.slice(0, 32));
            const s2 = bytes.slice(32, 64);
            assertError((s2[0] & 128) === 0, "non-canonical s");
            const v2 = _Signature.getNormalizedV(bytes[64]);
            return new _Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
          }
          assertError(false, "invalid raw signature length");
        }
        if (sig instanceof _Signature) {
          return sig.clone();
        }
        const _r = sig.r;
        assertError(_r != null, "missing r");
        const r = toUint256(_r);
        const s = function(s2, yParityAndS) {
          if (s2 != null) {
            return toUint256(s2);
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            const bytes = (0, index_js_2.getBytes)(yParityAndS);
            bytes[0] &= 127;
            return (0, index_js_2.hexlify)(bytes);
          }
          assertError(false, "missing s");
        }(sig.s, sig.yParityAndS);
        assertError(((0, index_js_2.getBytes)(s)[0] & 128) == 0, "non-canonical s");
        const { networkV, v } = function(_v, yParityAndS, yParity) {
          if (_v != null) {
            const v2 = (0, index_js_2.getBigInt)(_v);
            return {
              networkV: v2 >= BN_35 ? v2 : void 0,
              v: _Signature.getNormalizedV(v2)
            };
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            return { v: (0, index_js_2.getBytes)(yParityAndS)[0] & 128 ? 28 : 27 };
          }
          if (yParity != null) {
            switch ((0, index_js_2.getNumber)(yParity, "sig.yParity")) {
              case 0:
                return { v: 27 };
              case 1:
                return { v: 28 };
            }
            assertError(false, "invalid yParity");
          }
          assertError(false, "missing v");
        }(sig.v, sig.yParityAndS, sig.yParity);
        const result = new _Signature(_guard, r, s, v);
        if (networkV) {
          result.#networkV = networkV;
        }
        assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
        return result;
      }
    };
    exports2.Signature = Signature;
  }
});

// node_modules/ethers/lib.commonjs/crypto/signing-key.js
var require_signing_key = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signing-key.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SigningKey = void 0;
    var secp256k1_1 = require_secp256k1();
    var index_js_1 = require_utils();
    var signature_js_1 = require_signature();
    var SigningKey = class _SigningKey {
      #privateKey;
      /**
       *  Creates a new **SigningKey** for %%privateKey%%.
       */
      constructor(privateKey) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
        this.#privateKey = (0, index_js_1.hexlify)(privateKey);
      }
      /**
       *  The private key.
       */
      get privateKey() {
        return this.#privateKey;
      }
      /**
       *  The uncompressed public key.
       *
       * This will always begin with the prefix ``0x04`` and be 132
       * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
       */
      get publicKey() {
        return _SigningKey.computePublicKey(this.#privateKey);
      }
      /**
       *  The compressed public key.
       *
       *  This will always begin with either the prefix ``0x02`` or ``0x03``
       *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
       *  nibbles)
       */
      get compressedPublicKey() {
        return _SigningKey.computePublicKey(this.#privateKey, true);
      }
      /**
       *  Return the signature of the signed %%digest%%.
       */
      sign(digest) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(this.#privateKey), {
          lowS: true
        });
        return signature_js_1.Signature.from({
          r: (0, index_js_1.toBeHex)(sig.r, 32),
          s: (0, index_js_1.toBeHex)(sig.s, 32),
          v: sig.recovery ? 28 : 27
        });
      }
      /**
       *  Returns the [[link-wiki-ecdh]] shared secret between this
       *  private key and the %%other%% key.
       *
       *  The %%other%% key may be any type of key, a raw public key,
       *  a compressed/uncompressed pubic key or aprivate key.
       *
       *  Best practice is usually to use a cryptographic hash on the
       *  returned value before using it as a symetric secret.
       *
       *  @example:
       *    sign1 = new SigningKey(id("some-secret-1"))
       *    sign2 = new SigningKey(id("some-secret-2"))
       *
       *    // Notice that privA.computeSharedSecret(pubB)...
       *    sign1.computeSharedSecret(sign2.publicKey)
       *    //_result:
       *
       *    // ...is equal to privB.computeSharedSecret(pubA).
       *    sign2.computeSharedSecret(sign1.publicKey)
       *    //_result:
       */
      computeSharedSecret(other) {
        const pubKey = _SigningKey.computePublicKey(other);
        return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(this.#privateKey), (0, index_js_1.getBytes)(pubKey), false));
      }
      /**
       *  Compute the public key for %%key%%, optionally %%compressed%%.
       *
       *  The %%key%% may be any type of key, a raw public key, a
       *  compressed/uncompressed public key or private key.
       *
       *  @example:
       *    sign = new SigningKey(id("some-secret"));
       *
       *    // Compute the uncompressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey)
       *    //_result:
       *
       *    // Compute the compressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey, true)
       *    //_result:
       *
       *    // Compute the uncompressed public key
       *    SigningKey.computePublicKey(sign.publicKey, false);
       *    //_result:
       *
       *    // Compute the Compressed a public key
       *    SigningKey.computePublicKey(sign.publicKey, true);
       *    //_result:
       */
      static computePublicKey(key, compressed) {
        let bytes = (0, index_js_1.getBytes)(key, "key");
        if (bytes.length === 32) {
          const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes, !!compressed);
          return (0, index_js_1.hexlify)(pubKey);
        }
        if (bytes.length === 64) {
          const pub = new Uint8Array(65);
          pub[0] = 4;
          pub.set(bytes, 1);
          bytes = pub;
        }
        const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes);
        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));
      }
      /**
       *  Returns the public key for the private key which produced the
       *  %%signature%% for the given %%digest%%.
       *
       *  @example:
       *    key = new SigningKey(id("some-secret"))
       *    digest = id("hello world")
       *    sig = key.sign(digest)
       *
       *    // Notice the signer public key...
       *    key.publicKey
       *    //_result:
       *
       *    // ...is equal to the recovered public key
       *    SigningKey.recoverPublicKey(digest, sig)
       *    //_result:
       *
       */
      static recoverPublicKey(digest, signature) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = signature_js_1.Signature.from(signature);
        let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s])));
        secpSig = secpSig.addRecoveryBit(sig.yParity);
        const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));
        (0, index_js_1.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature);
        return "0x" + pubKey.toHex(false);
      }
      /**
       *  Returns the point resulting from adding the ellipic curve points
       *  %%p0%% and %%p1%%.
       *
       *  This is not a common function most developers should require, but
       *  can be useful for certain privacy-specific techniques.
       *
       *  For example, it is used by [[HDNodeWallet]] to compute child
       *  addresses from parent public keys and chain codes.
       */
      static addPoints(p0, p1, compressed) {
        const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));
        const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));
        return "0x" + pub0.add(pub1).toHex(!!compressed);
      }
    };
    exports2.SigningKey = SigningKey;
  }
});

// node_modules/ethers/lib.commonjs/crypto/index.js
var require_crypto2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lock = exports2.Signature = exports2.SigningKey = exports2.scryptSync = exports2.scrypt = exports2.pbkdf2 = exports2.sha512 = exports2.sha256 = exports2.ripemd160 = exports2.keccak256 = exports2.randomBytes = exports2.computeHmac = void 0;
    var hmac_js_1 = require_hmac();
    Object.defineProperty(exports2, "computeHmac", { enumerable: true, get: function() {
      return hmac_js_1.computeHmac;
    } });
    var keccak_js_1 = require_keccak();
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return keccak_js_1.keccak256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var pbkdf2_js_1 = require_pbkdf2();
    Object.defineProperty(exports2, "pbkdf2", { enumerable: true, get: function() {
      return pbkdf2_js_1.pbkdf2;
    } });
    var random_js_1 = require_random();
    Object.defineProperty(exports2, "randomBytes", { enumerable: true, get: function() {
      return random_js_1.randomBytes;
    } });
    var scrypt_js_1 = require_scrypt2();
    Object.defineProperty(exports2, "scrypt", { enumerable: true, get: function() {
      return scrypt_js_1.scrypt;
    } });
    Object.defineProperty(exports2, "scryptSync", { enumerable: true, get: function() {
      return scrypt_js_1.scryptSync;
    } });
    var sha2_js_1 = require_sha22();
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha2_js_1.sha256;
    } });
    Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
      return sha2_js_1.sha512;
    } });
    var signing_key_js_1 = require_signing_key();
    Object.defineProperty(exports2, "SigningKey", { enumerable: true, get: function() {
      return signing_key_js_1.SigningKey;
    } });
    var signature_js_1 = require_signature();
    Object.defineProperty(exports2, "Signature", { enumerable: true, get: function() {
      return signature_js_1.Signature;
    } });
    function lock() {
      hmac_js_1.computeHmac.lock();
      keccak_js_1.keccak256.lock();
      pbkdf2_js_1.pbkdf2.lock();
      random_js_1.randomBytes.lock();
      ripemd160_js_1.ripemd160.lock();
      scrypt_js_1.scrypt.lock();
      scrypt_js_1.scryptSync.lock();
      sha2_js_1.sha256.lock();
      sha2_js_1.sha512.lock();
      random_js_1.randomBytes.lock();
    }
    exports2.lock = lock;
  }
});

// node_modules/ethers/lib.commonjs/address/address.js
var require_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getIcapAddress = exports2.getAddress = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var BN_0 = BigInt(0);
    var BN_36 = BigInt(36);
    function getChecksumAddress(address) {
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for (let i = 0; i < 40; i++) {
        expanded[i] = chars[i].charCodeAt(0);
      }
      const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));
      for (let i = 0; i < 40; i += 2) {
        if (hashed[i >> 1] >> 4 >= 8) {
          chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 15) >= 8) {
          chars[i + 1] = chars[i + 1].toUpperCase();
        }
      }
      return "0x" + chars.join("");
    }
    var ibanLookup = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    var safeDigits = 15;
    function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c) => {
        return ibanLookup[c];
      }).join("");
      while (expanded.length >= safeDigits) {
        let block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum = String(98 - parseInt(expanded, 10) % 97);
      while (checksum.length < 2) {
        checksum = "0" + checksum;
      }
      return checksum;
    }
    var Base36 = function() {
      ;
      const result = {};
      for (let i = 0; i < 36; i++) {
        const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
        result[key] = BigInt(i);
      }
      return result;
    }();
    function fromBase36(value) {
      value = value.toLowerCase();
      let result = BN_0;
      for (let i = 0; i < value.length; i++) {
        result = result * BN_36 + Base36[value[i]];
      }
      return result;
    }
    function getAddress(address) {
      (0, index_js_2.assertArgument)(typeof address === "string", "invalid address", "address", address);
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        if (!address.startsWith("0x")) {
          address = "0x" + address;
        }
        const result = getChecksumAddress(address);
        (0, index_js_2.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
        return result;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        (0, index_js_2.assertArgument)(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
        let result = fromBase36(address.substring(4)).toString(16);
        while (result.length < 40) {
          result = "0" + result;
        }
        return getChecksumAddress("0x" + result);
      }
      (0, index_js_2.assertArgument)(false, "invalid address", "address", address);
    }
    exports2.getAddress = getAddress;
    function getIcapAddress(address) {
      let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
      while (base36.length < 30) {
        base36 = "0" + base36;
      }
      return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    exports2.getIcapAddress = getIcapAddress;
  }
});

// node_modules/ethers/lib.commonjs/address/contract-address.js
var require_contract_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/contract-address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCreate2Address = exports2.getCreateAddress = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var address_js_1 = require_address();
    function getCreateAddress(tx) {
      const from = (0, address_js_1.getAddress)(tx.from);
      const nonce = (0, index_js_2.getBigInt)(tx.nonce, "tx.nonce");
      let nonceHex = nonce.toString(16);
      if (nonceHex === "0") {
        nonceHex = "0x";
      } else if (nonceHex.length % 2) {
        nonceHex = "0x0" + nonceHex;
      } else {
        nonceHex = "0x" + nonceHex;
      }
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));
    }
    exports2.getCreateAddress = getCreateAddress;
    function getCreate2Address(_from, _salt, _initCodeHash) {
      const from = (0, address_js_1.getAddress)(_from);
      const salt = (0, index_js_2.getBytes)(_salt, "salt");
      const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, "initCodeHash");
      (0, index_js_2.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
      (0, index_js_2.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)(["0xff", from, salt, initCodeHash])), 12));
    }
    exports2.getCreate2Address = getCreate2Address;
  }
});

// node_modules/ethers/lib.commonjs/address/checks.js
var require_checks = __commonJS({
  "node_modules/ethers/lib.commonjs/address/checks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAddress = exports2.isAddress = exports2.isAddressable = void 0;
    var index_js_1 = require_utils();
    var address_js_1 = require_address();
    function isAddressable(value) {
      return value && typeof value.getAddress === "function";
    }
    exports2.isAddressable = isAddressable;
    function isAddress(value) {
      try {
        (0, address_js_1.getAddress)(value);
        return true;
      } catch (error) {
      }
      return false;
    }
    exports2.isAddress = isAddress;
    async function checkAddress(target, promise) {
      const result = await promise;
      if (result == null || result === "0x0000000000000000000000000000000000000000") {
        (0, index_js_1.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
        (0, index_js_1.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
      }
      return (0, address_js_1.getAddress)(result);
    }
    function resolveAddress(target, resolver) {
      if (typeof target === "string") {
        if (target.match(/^0x[0-9a-f]{40}$/i)) {
          return (0, address_js_1.getAddress)(target);
        }
        (0, index_js_1.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
        return checkAddress(target, resolver.resolveName(target));
      } else if (isAddressable(target)) {
        return checkAddress(target, target.getAddress());
      } else if (target && typeof target.then === "function") {
        return checkAddress(target, target);
      }
      (0, index_js_1.assertArgument)(false, "unsupported addressable value", "target", target);
    }
    exports2.resolveAddress = resolveAddress;
  }
});

// node_modules/ethers/lib.commonjs/address/index.js
var require_address2 = __commonJS({
  "node_modules/ethers/lib.commonjs/address/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAddress = exports2.isAddress = exports2.isAddressable = exports2.getCreate2Address = exports2.getCreateAddress = exports2.getIcapAddress = exports2.getAddress = void 0;
    var address_js_1 = require_address();
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return address_js_1.getAddress;
    } });
    Object.defineProperty(exports2, "getIcapAddress", { enumerable: true, get: function() {
      return address_js_1.getIcapAddress;
    } });
    var contract_address_js_1 = require_contract_address();
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return contract_address_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return contract_address_js_1.getCreate2Address;
    } });
    var checks_js_1 = require_checks();
    Object.defineProperty(exports2, "isAddressable", { enumerable: true, get: function() {
      return checks_js_1.isAddressable;
    } });
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return checks_js_1.isAddress;
    } });
    Object.defineProperty(exports2, "resolveAddress", { enumerable: true, get: function() {
      return checks_js_1.resolveAddress;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/typed.js
var require_typed = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/typed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Typed = void 0;
    var index_js_1 = require_utils();
    var _gaurd = {};
    function n(value, width) {
      let signed = false;
      if (width < 0) {
        signed = true;
        width *= -1;
      }
      return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
    }
    function b(value, size) {
      return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
    }
    var _typedSymbol = Symbol.for("_ethers_typed");
    var Typed = class _Typed {
      /**
       *  The type, as a Solidity-compatible type.
       */
      type;
      /**
       *  The actual value.
       */
      value;
      #options;
      /**
       *  @_ignore:
       */
      _typedSymbol;
      /**
       *  @_ignore:
       */
      constructor(gaurd, type, value, options) {
        if (options == null) {
          options = null;
        }
        (0, index_js_1.assertPrivate)(_gaurd, gaurd, "Typed");
        (0, index_js_1.defineProperties)(this, { _typedSymbol, type, value });
        this.#options = options;
        this.format();
      }
      /**
       *  Format the type as a Human-Readable type.
       */
      format() {
        if (this.type === "array") {
          throw new Error("");
        } else if (this.type === "dynamicArray") {
          throw new Error("");
        } else if (this.type === "tuple") {
          return `tuple(${this.value.map((v) => v.format()).join(",")})`;
        }
        return this.type;
      }
      /**
       *  The default value returned by this type.
       */
      defaultValue() {
        return 0;
      }
      /**
       *  The minimum value for numeric types.
       */
      minValue() {
        return 0;
      }
      /**
       *  The maximum value for numeric types.
       */
      maxValue() {
        return 0;
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
       */
      isBigInt() {
        return !!this.type.match(/^u?int[0-9]+$/);
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
       */
      isData() {
        return this.type.startsWith("bytes");
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
       */
      isString() {
        return this.type === "string";
      }
      /**
       *  Returns the tuple name, if this is a tuple. Throws otherwise.
       */
      get tupleName() {
        if (this.type !== "tuple") {
          throw TypeError("not a tuple");
        }
        return this.#options;
      }
      // Returns the length of this type as an array
      // - `null` indicates the length is unforced, it could be dynamic
      // - `-1` indicates the length is dynamic
      // - any other value indicates it is a static array and is its length
      /**
       *  Returns the length of the array type or ``-1`` if it is dynamic.
       *
       *  Throws if the type is not an array.
       */
      get arrayLength() {
        if (this.type !== "array") {
          throw TypeError("not an array");
        }
        if (this.#options === true) {
          return -1;
        }
        if (this.#options === false) {
          return this.value.length;
        }
        return null;
      }
      /**
       *  Returns a new **Typed** of %%type%% with the %%value%%.
       */
      static from(type, value) {
        return new _Typed(_gaurd, type, value);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static uint8(v) {
        return n(v, 8);
      }
      /**
       *  Return a new ``uint16`` type for %%v%%.
       */
      static uint16(v) {
        return n(v, 16);
      }
      /**
       *  Return a new ``uint24`` type for %%v%%.
       */
      static uint24(v) {
        return n(v, 24);
      }
      /**
       *  Return a new ``uint32`` type for %%v%%.
       */
      static uint32(v) {
        return n(v, 32);
      }
      /**
       *  Return a new ``uint40`` type for %%v%%.
       */
      static uint40(v) {
        return n(v, 40);
      }
      /**
       *  Return a new ``uint48`` type for %%v%%.
       */
      static uint48(v) {
        return n(v, 48);
      }
      /**
       *  Return a new ``uint56`` type for %%v%%.
       */
      static uint56(v) {
        return n(v, 56);
      }
      /**
       *  Return a new ``uint64`` type for %%v%%.
       */
      static uint64(v) {
        return n(v, 64);
      }
      /**
       *  Return a new ``uint72`` type for %%v%%.
       */
      static uint72(v) {
        return n(v, 72);
      }
      /**
       *  Return a new ``uint80`` type for %%v%%.
       */
      static uint80(v) {
        return n(v, 80);
      }
      /**
       *  Return a new ``uint88`` type for %%v%%.
       */
      static uint88(v) {
        return n(v, 88);
      }
      /**
       *  Return a new ``uint96`` type for %%v%%.
       */
      static uint96(v) {
        return n(v, 96);
      }
      /**
       *  Return a new ``uint104`` type for %%v%%.
       */
      static uint104(v) {
        return n(v, 104);
      }
      /**
       *  Return a new ``uint112`` type for %%v%%.
       */
      static uint112(v) {
        return n(v, 112);
      }
      /**
       *  Return a new ``uint120`` type for %%v%%.
       */
      static uint120(v) {
        return n(v, 120);
      }
      /**
       *  Return a new ``uint128`` type for %%v%%.
       */
      static uint128(v) {
        return n(v, 128);
      }
      /**
       *  Return a new ``uint136`` type for %%v%%.
       */
      static uint136(v) {
        return n(v, 136);
      }
      /**
       *  Return a new ``uint144`` type for %%v%%.
       */
      static uint144(v) {
        return n(v, 144);
      }
      /**
       *  Return a new ``uint152`` type for %%v%%.
       */
      static uint152(v) {
        return n(v, 152);
      }
      /**
       *  Return a new ``uint160`` type for %%v%%.
       */
      static uint160(v) {
        return n(v, 160);
      }
      /**
       *  Return a new ``uint168`` type for %%v%%.
       */
      static uint168(v) {
        return n(v, 168);
      }
      /**
       *  Return a new ``uint176`` type for %%v%%.
       */
      static uint176(v) {
        return n(v, 176);
      }
      /**
       *  Return a new ``uint184`` type for %%v%%.
       */
      static uint184(v) {
        return n(v, 184);
      }
      /**
       *  Return a new ``uint192`` type for %%v%%.
       */
      static uint192(v) {
        return n(v, 192);
      }
      /**
       *  Return a new ``uint200`` type for %%v%%.
       */
      static uint200(v) {
        return n(v, 200);
      }
      /**
       *  Return a new ``uint208`` type for %%v%%.
       */
      static uint208(v) {
        return n(v, 208);
      }
      /**
       *  Return a new ``uint216`` type for %%v%%.
       */
      static uint216(v) {
        return n(v, 216);
      }
      /**
       *  Return a new ``uint224`` type for %%v%%.
       */
      static uint224(v) {
        return n(v, 224);
      }
      /**
       *  Return a new ``uint232`` type for %%v%%.
       */
      static uint232(v) {
        return n(v, 232);
      }
      /**
       *  Return a new ``uint240`` type for %%v%%.
       */
      static uint240(v) {
        return n(v, 240);
      }
      /**
       *  Return a new ``uint248`` type for %%v%%.
       */
      static uint248(v) {
        return n(v, 248);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint256(v) {
        return n(v, 256);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint(v) {
        return n(v, 256);
      }
      /**
       *  Return a new ``int8`` type for %%v%%.
       */
      static int8(v) {
        return n(v, -8);
      }
      /**
       *  Return a new ``int16`` type for %%v%%.
       */
      static int16(v) {
        return n(v, -16);
      }
      /**
       *  Return a new ``int24`` type for %%v%%.
       */
      static int24(v) {
        return n(v, -24);
      }
      /**
       *  Return a new ``int32`` type for %%v%%.
       */
      static int32(v) {
        return n(v, -32);
      }
      /**
       *  Return a new ``int40`` type for %%v%%.
       */
      static int40(v) {
        return n(v, -40);
      }
      /**
       *  Return a new ``int48`` type for %%v%%.
       */
      static int48(v) {
        return n(v, -48);
      }
      /**
       *  Return a new ``int56`` type for %%v%%.
       */
      static int56(v) {
        return n(v, -56);
      }
      /**
       *  Return a new ``int64`` type for %%v%%.
       */
      static int64(v) {
        return n(v, -64);
      }
      /**
       *  Return a new ``int72`` type for %%v%%.
       */
      static int72(v) {
        return n(v, -72);
      }
      /**
       *  Return a new ``int80`` type for %%v%%.
       */
      static int80(v) {
        return n(v, -80);
      }
      /**
       *  Return a new ``int88`` type for %%v%%.
       */
      static int88(v) {
        return n(v, -88);
      }
      /**
       *  Return a new ``int96`` type for %%v%%.
       */
      static int96(v) {
        return n(v, -96);
      }
      /**
       *  Return a new ``int104`` type for %%v%%.
       */
      static int104(v) {
        return n(v, -104);
      }
      /**
       *  Return a new ``int112`` type for %%v%%.
       */
      static int112(v) {
        return n(v, -112);
      }
      /**
       *  Return a new ``int120`` type for %%v%%.
       */
      static int120(v) {
        return n(v, -120);
      }
      /**
       *  Return a new ``int128`` type for %%v%%.
       */
      static int128(v) {
        return n(v, -128);
      }
      /**
       *  Return a new ``int136`` type for %%v%%.
       */
      static int136(v) {
        return n(v, -136);
      }
      /**
       *  Return a new ``int144`` type for %%v%%.
       */
      static int144(v) {
        return n(v, -144);
      }
      /**
       *  Return a new ``int52`` type for %%v%%.
       */
      static int152(v) {
        return n(v, -152);
      }
      /**
       *  Return a new ``int160`` type for %%v%%.
       */
      static int160(v) {
        return n(v, -160);
      }
      /**
       *  Return a new ``int168`` type for %%v%%.
       */
      static int168(v) {
        return n(v, -168);
      }
      /**
       *  Return a new ``int176`` type for %%v%%.
       */
      static int176(v) {
        return n(v, -176);
      }
      /**
       *  Return a new ``int184`` type for %%v%%.
       */
      static int184(v) {
        return n(v, -184);
      }
      /**
       *  Return a new ``int92`` type for %%v%%.
       */
      static int192(v) {
        return n(v, -192);
      }
      /**
       *  Return a new ``int200`` type for %%v%%.
       */
      static int200(v) {
        return n(v, -200);
      }
      /**
       *  Return a new ``int208`` type for %%v%%.
       */
      static int208(v) {
        return n(v, -208);
      }
      /**
       *  Return a new ``int216`` type for %%v%%.
       */
      static int216(v) {
        return n(v, -216);
      }
      /**
       *  Return a new ``int224`` type for %%v%%.
       */
      static int224(v) {
        return n(v, -224);
      }
      /**
       *  Return a new ``int232`` type for %%v%%.
       */
      static int232(v) {
        return n(v, -232);
      }
      /**
       *  Return a new ``int240`` type for %%v%%.
       */
      static int240(v) {
        return n(v, -240);
      }
      /**
       *  Return a new ``int248`` type for %%v%%.
       */
      static int248(v) {
        return n(v, -248);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int256(v) {
        return n(v, -256);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int(v) {
        return n(v, -256);
      }
      /**
       *  Return a new ``bytes1`` type for %%v%%.
       */
      static bytes1(v) {
        return b(v, 1);
      }
      /**
       *  Return a new ``bytes2`` type for %%v%%.
       */
      static bytes2(v) {
        return b(v, 2);
      }
      /**
       *  Return a new ``bytes3`` type for %%v%%.
       */
      static bytes3(v) {
        return b(v, 3);
      }
      /**
       *  Return a new ``bytes4`` type for %%v%%.
       */
      static bytes4(v) {
        return b(v, 4);
      }
      /**
       *  Return a new ``bytes5`` type for %%v%%.
       */
      static bytes5(v) {
        return b(v, 5);
      }
      /**
       *  Return a new ``bytes6`` type for %%v%%.
       */
      static bytes6(v) {
        return b(v, 6);
      }
      /**
       *  Return a new ``bytes7`` type for %%v%%.
       */
      static bytes7(v) {
        return b(v, 7);
      }
      /**
       *  Return a new ``bytes8`` type for %%v%%.
       */
      static bytes8(v) {
        return b(v, 8);
      }
      /**
       *  Return a new ``bytes9`` type for %%v%%.
       */
      static bytes9(v) {
        return b(v, 9);
      }
      /**
       *  Return a new ``bytes10`` type for %%v%%.
       */
      static bytes10(v) {
        return b(v, 10);
      }
      /**
       *  Return a new ``bytes11`` type for %%v%%.
       */
      static bytes11(v) {
        return b(v, 11);
      }
      /**
       *  Return a new ``bytes12`` type for %%v%%.
       */
      static bytes12(v) {
        return b(v, 12);
      }
      /**
       *  Return a new ``bytes13`` type for %%v%%.
       */
      static bytes13(v) {
        return b(v, 13);
      }
      /**
       *  Return a new ``bytes14`` type for %%v%%.
       */
      static bytes14(v) {
        return b(v, 14);
      }
      /**
       *  Return a new ``bytes15`` type for %%v%%.
       */
      static bytes15(v) {
        return b(v, 15);
      }
      /**
       *  Return a new ``bytes16`` type for %%v%%.
       */
      static bytes16(v) {
        return b(v, 16);
      }
      /**
       *  Return a new ``bytes17`` type for %%v%%.
       */
      static bytes17(v) {
        return b(v, 17);
      }
      /**
       *  Return a new ``bytes18`` type for %%v%%.
       */
      static bytes18(v) {
        return b(v, 18);
      }
      /**
       *  Return a new ``bytes19`` type for %%v%%.
       */
      static bytes19(v) {
        return b(v, 19);
      }
      /**
       *  Return a new ``bytes20`` type for %%v%%.
       */
      static bytes20(v) {
        return b(v, 20);
      }
      /**
       *  Return a new ``bytes21`` type for %%v%%.
       */
      static bytes21(v) {
        return b(v, 21);
      }
      /**
       *  Return a new ``bytes22`` type for %%v%%.
       */
      static bytes22(v) {
        return b(v, 22);
      }
      /**
       *  Return a new ``bytes23`` type for %%v%%.
       */
      static bytes23(v) {
        return b(v, 23);
      }
      /**
       *  Return a new ``bytes24`` type for %%v%%.
       */
      static bytes24(v) {
        return b(v, 24);
      }
      /**
       *  Return a new ``bytes25`` type for %%v%%.
       */
      static bytes25(v) {
        return b(v, 25);
      }
      /**
       *  Return a new ``bytes26`` type for %%v%%.
       */
      static bytes26(v) {
        return b(v, 26);
      }
      /**
       *  Return a new ``bytes27`` type for %%v%%.
       */
      static bytes27(v) {
        return b(v, 27);
      }
      /**
       *  Return a new ``bytes28`` type for %%v%%.
       */
      static bytes28(v) {
        return b(v, 28);
      }
      /**
       *  Return a new ``bytes29`` type for %%v%%.
       */
      static bytes29(v) {
        return b(v, 29);
      }
      /**
       *  Return a new ``bytes30`` type for %%v%%.
       */
      static bytes30(v) {
        return b(v, 30);
      }
      /**
       *  Return a new ``bytes31`` type for %%v%%.
       */
      static bytes31(v) {
        return b(v, 31);
      }
      /**
       *  Return a new ``bytes32`` type for %%v%%.
       */
      static bytes32(v) {
        return b(v, 32);
      }
      /**
       *  Return a new ``address`` type for %%v%%.
       */
      static address(v) {
        return new _Typed(_gaurd, "address", v);
      }
      /**
       *  Return a new ``bool`` type for %%v%%.
       */
      static bool(v) {
        return new _Typed(_gaurd, "bool", !!v);
      }
      /**
       *  Return a new ``bytes`` type for %%v%%.
       */
      static bytes(v) {
        return new _Typed(_gaurd, "bytes", v);
      }
      /**
       *  Return a new ``string`` type for %%v%%.
       */
      static string(v) {
        return new _Typed(_gaurd, "string", v);
      }
      /**
       *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
       */
      static array(v, dynamic) {
        throw new Error("not implemented yet");
        return new _Typed(_gaurd, "array", v, dynamic);
      }
      /**
       *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
       */
      static tuple(v, name) {
        throw new Error("not implemented yet");
        return new _Typed(_gaurd, "tuple", v, name);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static overrides(v) {
        return new _Typed(_gaurd, "overrides", Object.assign({}, v));
      }
      /**
       *  Returns true only if %%value%% is a [[Typed]] instance.
       */
      static isTyped(value) {
        return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
      }
      /**
       *  If the value is a [[Typed]] instance, validates the underlying value
       *  and returns it, otherwise returns value directly.
       *
       *  This is useful for functions that with to accept either a [[Typed]]
       *  object or values.
       */
      static dereference(value, type) {
        if (_Typed.isTyped(value)) {
          if (value.type !== type) {
            throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
          }
          return value.value;
        }
        return value;
      }
    };
    exports2.Typed = Typed;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/address.js
var require_address3 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddressCoder = void 0;
    var index_js_1 = require_address2();
    var maths_js_1 = require_maths();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var AddressCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, _value) {
        let value = typed_js_1.Typed.dereference(_value, "string");
        try {
          value = (0, index_js_1.getAddress)(value);
        } catch (error) {
          return this._throwError(error.message, _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));
      }
    };
    exports2.AddressCoder = AddressCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/anonymous.js
var require_anonymous = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/anonymous.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AnonymousCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var AnonymousCoder = class extends abstract_coder_js_1.Coder {
      coder;
      constructor(coder) {
        super(coder.name, coder.type, "_", coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
    exports2.AnonymousCoder = AnonymousCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/array.js
var require_array = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ArrayCoder = exports2.unpack = exports2.pack = void 0;
    var index_js_1 = require_utils();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var anonymous_js_1 = require_anonymous();
    function pack(writer, coders, values) {
      let arrayValues = [];
      if (Array.isArray(values)) {
        arrayValues = values;
      } else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder) => {
          const name = coder.localName;
          (0, index_js_1.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          (0, index_js_1.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          unique[name] = true;
          return values[name];
        });
      } else {
        (0, index_js_1.assertArgument)(false, "invalid tuple value", "tuple", values);
      }
      (0, index_js_1.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
      let staticWriter = new abstract_coder_js_1.Writer();
      let dynamicWriter = new abstract_coder_js_1.Writer();
      let updateFuncs = [];
      coders.forEach((coder, index) => {
        let value = arrayValues[index];
        if (coder.dynamic) {
          let dynamicOffset = dynamicWriter.length;
          coder.encode(dynamicWriter, value);
          let updateFunc = staticWriter.writeUpdatableValue();
          updateFuncs.push((baseOffset) => {
            updateFunc(baseOffset + dynamicOffset);
          });
        } else {
          coder.encode(staticWriter, value);
        }
      });
      updateFuncs.forEach((func) => {
        func(staticWriter.length);
      });
      let length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
    }
    exports2.pack = pack;
    function unpack(reader, coders) {
      let values = [];
      let keys = [];
      let baseReader = reader.subReader(0);
      coders.forEach((coder) => {
        let value = null;
        if (coder.dynamic) {
          let offset = reader.readIndex();
          let offsetReader = baseReader.subReader(offset);
          try {
            value = coder.decode(offsetReader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        } else {
          try {
            value = coder.decode(reader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        }
        if (value == void 0) {
          throw new Error("investigate");
        }
        values.push(value);
        keys.push(coder.localName || null);
      });
      return abstract_coder_js_1.Result.fromItems(values, keys);
    }
    exports2.unpack = unpack;
    var ArrayCoder = class extends abstract_coder_js_1.Coder {
      coder;
      length;
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        (0, index_js_1.defineProperties)(this, { coder, length });
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "array");
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        (0, index_js_1.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readIndex();
          (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new anonymous_js_1.AnonymousCoder(this.coder));
        }
        return unpack(reader, coders);
      }
    };
    exports2.ArrayCoder = ArrayCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/boolean.js
var require_boolean = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/boolean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BooleanCoder = void 0;
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BooleanCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "bool");
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return !!reader.readValue();
      }
    };
    exports2.BooleanCoder = BooleanCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BytesCoder = exports2.DynamicBytesCoder = void 0;
    var index_js_1 = require_utils();
    var abstract_coder_js_1 = require_abstract_coder();
    var DynamicBytesCoder = class extends abstract_coder_js_1.Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = (0, index_js_1.getBytesCopy)(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readIndex(), true);
      }
    };
    exports2.DynamicBytesCoder = DynamicBytesCoder;
    var BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(super.decode(reader));
      }
    };
    exports2.BytesCoder = BytesCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js
var require_fixed_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FixedBytesCoder = void 0;
    var index_js_1 = require_utils();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var FixedBytesCoder = class extends abstract_coder_js_1.Coder {
      size;
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        (0, index_js_1.defineProperties)(this, { size }, { size: "number" });
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, _value) {
        let data = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));
        if (data.length !== this.size) {
          this._throwError("incorrect data length", _value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(reader.readBytes(this.size));
      }
    };
    exports2.FixedBytesCoder = FixedBytesCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/null.js
var require_null = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/null.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NullCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var Empty = new Uint8Array([]);
    var NullCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes(Empty);
      }
      decode(reader) {
        reader.readBytes(0);
        return null;
      }
    };
    exports2.NullCoder = NullCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/number.js
var require_number = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NumberCoder = void 0;
    var index_js_1 = require_utils();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var NumberCoder = class extends abstract_coder_js_1.Coder {
      size;
      signed;
      constructor(size, signed, localName) {
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        (0, index_js_1.defineProperties)(this, { size, signed }, { size: "number", signed: "boolean" });
      }
      defaultValue() {
        return 0;
      }
      encode(writer, _value) {
        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));
        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);
        if (this.signed) {
          let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);
          if (value > bounds || value < -(bounds + BN_1)) {
            this._throwError("value out-of-bounds", _value);
          }
          value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);
        } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {
          this._throwError("value out-of-bounds", _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);
        if (this.signed) {
          value = (0, index_js_1.fromTwos)(value, this.size * 8);
        }
        return value;
      }
    };
    exports2.NumberCoder = NumberCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/string.js
var require_string = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StringCoder = void 0;
    var utf8_js_1 = require_utf8();
    var typed_js_1 = require_typed();
    var bytes_js_1 = require_bytes();
    var StringCoder = class extends bytes_js_1.DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, _value) {
        return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, "string")));
      }
      decode(reader) {
        return (0, utf8_js_1.toUtf8String)(super.decode(reader));
      }
    };
    exports2.StringCoder = StringCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/tuple.js
var require_tuple = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/tuple.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TupleCoder = void 0;
    var properties_js_1 = require_properties();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var array_js_1 = require_array();
    var TupleCoder = class extends abstract_coder_js_1.Coder {
      coders;
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "tuple");
        return (0, array_js_1.pack)(writer, this.coders, value);
      }
      decode(reader) {
        return (0, array_js_1.unpack)(reader, this.coders);
      }
    };
    exports2.TupleCoder = TupleCoder;
  }
});

// node_modules/ethers/lib.commonjs/hash/id.js
var require_id = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/id.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.id = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    function id(value) {
      return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));
    }
    exports2.id = id;
  }
});

// node_modules/@adraffy/ens-normalize/dist/index.cjs
var require_dist = __commonJS({
  "node_modules/@adraffy/ens-normalize/dist/index.cjs"(exports2) {
    "use strict";
    var COMPRESSED$1 = "";
    var FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
    var NSM_MAX = 4;
    function decode_arithmetic(bytes) {
      let pos = 0;
      function u16() {
        return bytes[pos++] << 8 | bytes[pos++];
      }
      let symbol_count = u16();
      let total = 1;
      let acc = [0, 1];
      for (let i = 1; i < symbol_count; i++) {
        acc.push(total += u16());
      }
      let skip = u16();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
        if (read_width == 0) {
          read_buffer = read_buffer << 8 | bytes[pos++];
          read_width = 8;
        }
        return read_buffer >> --read_width & 1;
      }
      const N = 31;
      const FULL = 2 ** N;
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      let register = 0;
      for (let i = 0; i < N; i++)
        register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL;
      while (true) {
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while (end - start > 1) {
          let mid = start + end >>> 1;
          if (value < acc[mid]) {
            end = mid;
          } else {
            start = mid;
          }
        }
        if (start == 0)
          break;
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while (((a ^ b) & HALF) == 0) {
          register = register << 1 & MASK | read_bit();
          a = a << 1 & MASK;
          b = b << 1 & MASK | 1;
        }
        while (a & ~b & QRTR) {
          register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
          a = a << 1 ^ HALF;
          b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
      }
      let offset = symbol_count - 4;
      return symbols.map((x) => {
        switch (x - offset) {
          case 3:
            return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 2:
            return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 1:
            return offset + bytes[pos_payload++];
          default:
            return x - 1;
        }
      });
    }
    function read_payload(v) {
      let pos = 0;
      return () => v[pos++];
    }
    function read_compressed_payload(s) {
      return read_payload(decode_arithmetic(unsafe_atob(s)));
    }
    function unsafe_atob(s) {
      let lookup = [];
      [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
      let n = s.length;
      let ret = new Uint8Array(6 * n >> 3);
      for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
        carry = carry << 6 | lookup[s.charCodeAt(i)];
        width += 6;
        if (width >= 8) {
          ret[pos++] = carry >> (width -= 8);
        }
      }
      return ret;
    }
    function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
    }
    function read_deltas(n, next) {
      let v = Array(n);
      for (let i = 0, x = 0; i < n; i++)
        v[i] = x += signed(next());
      return v;
    }
    function read_sorted(next, prev = 0) {
      let ret = [];
      while (true) {
        let x = next();
        let n = next();
        if (!n)
          break;
        prev += x;
        for (let i = 0; i < n; i++) {
          ret.push(prev + i);
        }
        prev += n + 1;
      }
      return ret;
    }
    function read_sorted_arrays(next) {
      return read_array_while(() => {
        let v = read_sorted(next);
        if (v.length)
          return v;
      });
    }
    function read_mapped(next) {
      let ret = [];
      while (true) {
        let w = next();
        if (w == 0)
          break;
        ret.push(read_linear_table(w, next));
      }
      while (true) {
        let w = next() - 1;
        if (w < 0)
          break;
        ret.push(read_replacement_table(w, next));
      }
      return ret.flat();
    }
    function read_array_while(next) {
      let v = [];
      while (true) {
        let x = next(v.length);
        if (!x)
          break;
        v.push(x);
      }
      return v;
    }
    function read_transposed(n, w, next) {
      let m = Array(n).fill().map(() => []);
      for (let i = 0; i < w; i++) {
        read_deltas(n, next).forEach((x, j) => m[j].push(x));
      }
      return m;
    }
    function read_linear_table(w, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_array_while(next);
      let m = read_transposed(vN.length, 1 + w, next);
      return m.flatMap((v, i) => {
        let [x, ...ys] = v;
        return Array(vN[i]).fill().map((_, j) => {
          let j_dy = j * dy;
          return [x + j * dx, ys.map((y) => y + j_dy)];
        });
      });
    }
    function read_replacement_table(w, next) {
      let n = 1 + next();
      let m = read_transposed(n, 1 + w, next);
      return m.map((v) => [v[0], v.slice(1)]);
    }
    function read_trie(next) {
      let ret = [];
      let sorted = read_sorted(next);
      expand(decode([]), []);
      return ret;
      function decode(Q) {
        let S = next();
        let B = read_array_while(() => {
          let cps = read_sorted(next).map((i) => sorted[i]);
          if (cps.length)
            return decode(cps);
        });
        return { S, B, Q };
      }
      function expand({ S, B }, cps, saved) {
        if (S & 4 && saved === cps[cps.length - 1])
          return;
        if (S & 2)
          saved = cps[cps.length - 1];
        if (S & 1)
          ret.push(cps);
        for (let br of B) {
          for (let cp of br.Q) {
            expand(br, [...cps, cp], saved);
          }
        }
      }
    }
    function hex_cp(cp) {
      return cp.toString(16).toUpperCase().padStart(2, "0");
    }
    function quote_cp(cp) {
      return `{${hex_cp(cp)}}`;
    }
    function explode_cp(s) {
      let cps = [];
      for (let pos = 0, len = s.length; pos < len; ) {
        let cp = s.codePointAt(pos);
        pos += cp < 65536 ? 1 : 2;
        cps.push(cp);
      }
      return cps;
    }
    function str_from_cps(cps) {
      const chunk = 4096;
      let len = cps.length;
      if (len < chunk)
        return String.fromCodePoint(...cps);
      let buf = [];
      for (let i = 0; i < len; ) {
        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
      }
      return buf.join("");
    }
    function compare_arrays(a, b) {
      let n = a.length;
      let c = n - b.length;
      for (let i = 0; c == 0 && i < n; i++)
        c = a[i] - b[i];
      return c;
    }
    var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
    var S0 = 44032;
    var L0 = 4352;
    var V0 = 4449;
    var T0 = 4519;
    var L_COUNT = 19;
    var V_COUNT = 21;
    var T_COUNT = 28;
    var N_COUNT = V_COUNT * T_COUNT;
    var S_COUNT = L_COUNT * N_COUNT;
    var S1 = S0 + S_COUNT;
    var L1 = L0 + L_COUNT;
    var V1 = V0 + V_COUNT;
    var T1 = T0 + T_COUNT;
    function unpack_cc(packed) {
      return packed >> 24 & 255;
    }
    function unpack_cp(packed) {
      return packed & 16777215;
    }
    var SHIFTED_RANK;
    var EXCLUSIONS;
    var DECOMP;
    var RECOMP;
    function init$1() {
      let r = read_compressed_payload(COMPRESSED);
      SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
      EXCLUSIONS = new Set(read_sorted(r));
      DECOMP = /* @__PURE__ */ new Map();
      RECOMP = /* @__PURE__ */ new Map();
      for (let [cp, cps] of read_mapped(r)) {
        if (!EXCLUSIONS.has(cp) && cps.length == 2) {
          let [a, b] = cps;
          let bucket = RECOMP.get(a);
          if (!bucket) {
            bucket = /* @__PURE__ */ new Map();
            RECOMP.set(a, bucket);
          }
          bucket.set(b, cp);
        }
        DECOMP.set(cp, cps.reverse());
      }
    }
    function is_hangul(cp) {
      return cp >= S0 && cp < S1;
    }
    function compose_pair(a, b) {
      if (a >= L0 && a < L1 && b >= V0 && b < V1) {
        return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
      } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
        return a + (b - T0);
      } else {
        let recomp = RECOMP.get(a);
        if (recomp) {
          recomp = recomp.get(b);
          if (recomp) {
            return recomp;
          }
        }
        return -1;
      }
    }
    function decomposed(cps) {
      if (!SHIFTED_RANK)
        init$1();
      let ret = [];
      let buf = [];
      let check_order = false;
      function add(cp) {
        let cc = SHIFTED_RANK.get(cp);
        if (cc) {
          check_order = true;
          cp |= cc;
        }
        ret.push(cp);
      }
      for (let cp of cps) {
        while (true) {
          if (cp < 128) {
            ret.push(cp);
          } else if (is_hangul(cp)) {
            let s_index = cp - S0;
            let l_index = s_index / N_COUNT | 0;
            let v_index = s_index % N_COUNT / T_COUNT | 0;
            let t_index = s_index % T_COUNT;
            add(L0 + l_index);
            add(V0 + v_index);
            if (t_index > 0)
              add(T0 + t_index);
          } else {
            let mapped = DECOMP.get(cp);
            if (mapped) {
              buf.push(...mapped);
            } else {
              add(cp);
            }
          }
          if (!buf.length)
            break;
          cp = buf.pop();
        }
      }
      if (check_order && ret.length > 1) {
        let prev_cc = unpack_cc(ret[0]);
        for (let i = 1; i < ret.length; i++) {
          let cc = unpack_cc(ret[i]);
          if (cc == 0 || prev_cc <= cc) {
            prev_cc = cc;
            continue;
          }
          let j = i - 1;
          while (true) {
            let tmp = ret[j + 1];
            ret[j + 1] = ret[j];
            ret[j] = tmp;
            if (!j)
              break;
            prev_cc = unpack_cc(ret[--j]);
            if (prev_cc <= cc)
              break;
          }
          prev_cc = unpack_cc(ret[i]);
        }
      }
      return ret;
    }
    function composed_from_decomposed(v) {
      let ret = [];
      let stack = [];
      let prev_cp = -1;
      let prev_cc = 0;
      for (let packed of v) {
        let cc = unpack_cc(packed);
        let cp = unpack_cp(packed);
        if (prev_cp == -1) {
          if (cc == 0) {
            prev_cp = cp;
          } else {
            ret.push(cp);
          }
        } else if (prev_cc > 0 && prev_cc >= cc) {
          if (cc == 0) {
            ret.push(prev_cp, ...stack);
            stack.length = 0;
            prev_cp = cp;
          } else {
            stack.push(cp);
          }
          prev_cc = cc;
        } else {
          let composed = compose_pair(prev_cp, cp);
          if (composed >= 0) {
            prev_cp = composed;
          } else if (prev_cc == 0 && cc == 0) {
            ret.push(prev_cp);
            prev_cp = cp;
          } else {
            stack.push(cp);
            prev_cc = cc;
          }
        }
      }
      if (prev_cp >= 0) {
        ret.push(prev_cp, ...stack);
      }
      return ret;
    }
    function nfd(cps) {
      return decomposed(cps).map(unpack_cp);
    }
    function nfc(cps) {
      return composed_from_decomposed(decomposed(cps));
    }
    var HYPHEN = 45;
    var STOP = 46;
    var STOP_CH = ".";
    var FE0F = 65039;
    var UNIQUE_PH = 1;
    var Array_from = (x) => Array.from(x);
    function group_has_cp(g, cp) {
      return g.P.has(cp) || g.Q.has(cp);
    }
    var Emoji = class extends Array {
      get is_emoji() {
        return true;
      }
      // free tagging system
    };
    var MAPPED;
    var IGNORED;
    var CM;
    var NSM;
    var ESCAPE;
    var NFC_CHECK;
    var GROUPS;
    var WHOLE_VALID;
    var WHOLE_MAP;
    var VALID;
    var EMOJI_LIST;
    var EMOJI_ROOT;
    function init() {
      if (MAPPED)
        return;
      let r = read_compressed_payload(COMPRESSED$1);
      const read_sorted_array = () => read_sorted(r);
      const read_sorted_set = () => new Set(read_sorted_array());
      const set_add_many = (set, v) => v.forEach((x) => set.add(x));
      MAPPED = new Map(read_mapped(r));
      IGNORED = read_sorted_set();
      CM = read_sorted_array();
      NSM = new Set(read_sorted_array().map((i) => CM[i]));
      CM = new Set(CM);
      ESCAPE = read_sorted_set();
      NFC_CHECK = read_sorted_set();
      let chunks = read_sorted_arrays(r);
      let unrestricted = r();
      const read_chunked = () => {
        let set = /* @__PURE__ */ new Set();
        read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
        set_add_many(set, read_sorted_array());
        return set;
      };
      GROUPS = read_array_while((i) => {
        let N = read_array_while(r).map((x) => x + 96);
        if (N.length) {
          let R = i >= unrestricted;
          N[0] -= 32;
          N = str_from_cps(N);
          if (R)
            N = `Restricted[${N}]`;
          let P = read_chunked();
          let Q = read_chunked();
          let M = !r();
          return { N, P, Q, M, R };
        }
      });
      WHOLE_VALID = read_sorted_set();
      WHOLE_MAP = /* @__PURE__ */ new Map();
      let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
      wholes.forEach((cp, i) => {
        let d = r();
        let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
        w.V.push(cp);
        if (!WHOLE_VALID.has(cp)) {
          WHOLE_MAP.set(cp, w);
        }
      });
      for (let { V, M } of new Set(WHOLE_MAP.values())) {
        let recs = [];
        for (let cp of V) {
          let gs = GROUPS.filter((g) => group_has_cp(g, cp));
          let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
          if (!rec) {
            rec = { G: /* @__PURE__ */ new Set(), V: [] };
            recs.push(rec);
          }
          rec.V.push(cp);
          set_add_many(rec.G, gs);
        }
        let union = recs.flatMap((x) => Array_from(x.G));
        for (let { G, V: V2 } of recs) {
          let complement = new Set(union.filter((g) => !G.has(g)));
          for (let cp of V2) {
            M.set(cp, complement);
          }
        }
      }
      VALID = /* @__PURE__ */ new Set();
      let multi = /* @__PURE__ */ new Set();
      const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
      for (let g of GROUPS) {
        for (let cp of g.P)
          add_to_union(cp);
        for (let cp of g.Q)
          add_to_union(cp);
      }
      for (let cp of VALID) {
        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
          WHOLE_MAP.set(cp, UNIQUE_PH);
        }
      }
      set_add_many(VALID, nfd(VALID));
      EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
      EMOJI_ROOT = /* @__PURE__ */ new Map();
      for (let cps of EMOJI_LIST) {
        let prev = [EMOJI_ROOT];
        for (let cp of cps) {
          let next = prev.map((node) => {
            let child = node.get(cp);
            if (!child) {
              child = /* @__PURE__ */ new Map();
              node.set(cp, child);
            }
            return child;
          });
          if (cp === FE0F) {
            prev.push(...next);
          } else {
            prev = next;
          }
        }
        for (let x of prev) {
          x.V = cps;
        }
      }
    }
    function quoted_cp(cp) {
      return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
    }
    function bidi_qq(s) {
      return `"${s}"\u200E`;
    }
    function check_label_extension(cps) {
      if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
        throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
      }
    }
    function check_leading_underscore(cps) {
      const UNDERSCORE = 95;
      for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
        if (cps[--i] !== UNDERSCORE) {
          throw new Error("underscore allowed only at start");
        }
      }
    }
    function check_fenced(cps) {
      let cp = cps[0];
      let prev = FENCED.get(cp);
      if (prev)
        throw error_placement(`leading ${prev}`);
      let n = cps.length;
      let last = -1;
      for (let i = 1; i < n; i++) {
        cp = cps[i];
        let match = FENCED.get(cp);
        if (match) {
          if (last == i)
            throw error_placement(`${prev} + ${match}`);
          last = i + 1;
          prev = match;
        }
      }
      if (last == n)
        throw error_placement(`trailing ${prev}`);
    }
    function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
      let buf = [];
      if (is_combining_mark(cps[0]))
        buf.push("\u25CC");
      if (cps.length > max) {
        max >>= 1;
        cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
      }
      let prev = 0;
      let n = cps.length;
      for (let i = 0; i < n; i++) {
        let cp = cps[i];
        if (should_escape(cp)) {
          buf.push(str_from_cps(cps.slice(prev, i)));
          buf.push(quoter(cp));
          prev = i + 1;
        }
      }
      buf.push(str_from_cps(cps.slice(prev, n)));
      return buf.join("");
    }
    function is_combining_mark(cp) {
      init();
      return CM.has(cp);
    }
    function should_escape(cp) {
      init();
      return ESCAPE.has(cp);
    }
    function ens_emoji() {
      init();
      return EMOJI_LIST.map((x) => x.slice());
    }
    function ens_normalize_fragment(frag, decompose) {
      init();
      let nf = decompose ? nfd : nfc;
      return frag.split(STOP_CH).map((label) => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
    }
    function ens_normalize(name) {
      return flatten(split(name, nfc, filter_fe0f));
    }
    function ens_beautify(name) {
      let labels = split(name, nfc, (x) => x);
      for (let { type, output, error } of labels) {
        if (error)
          break;
        if (type !== "Greek")
          array_replace(output, 958, 926);
      }
      return flatten(labels);
    }
    function array_replace(v, a, b) {
      let prev = 0;
      while (true) {
        let next = v.indexOf(a, prev);
        if (next < 0)
          break;
        v[next] = b;
        prev = next + 1;
      }
    }
    function ens_split(name, preserve_emoji) {
      return split(name, nfc, preserve_emoji ? (x) => x.slice() : filter_fe0f);
    }
    function split(name, nf, ef) {
      if (!name)
        return [];
      init();
      let offset = 0;
      return name.split(STOP_CH).map((label) => {
        let input = explode_cp(label);
        let info = {
          input,
          offset
          // codepoint, not substring!
        };
        offset += input.length + 1;
        try {
          let tokens = info.tokens = tokens_from_str(input, nf, ef);
          let token_count = tokens.length;
          let type;
          if (!token_count) {
            throw new Error(`empty label`);
          }
          let norm = info.output = tokens.flat();
          check_leading_underscore(norm);
          let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
          if (!emoji && norm.every((cp) => cp < 128)) {
            check_label_extension(norm);
            type = "ASCII";
          } else {
            let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
            if (!chars.length) {
              type = "Emoji";
            } else {
              if (CM.has(norm[0]))
                throw error_placement("leading combining mark");
              for (let i = 1; i < token_count; i++) {
                let cps = tokens[i];
                if (!cps.is_emoji && CM.has(cps[0])) {
                  throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
                }
              }
              check_fenced(norm);
              let unique = Array_from(new Set(chars));
              let [g] = determine_group(unique);
              check_group(g, chars);
              check_whole(g, unique);
              type = g.N;
            }
          }
          info.type = type;
        } catch (err) {
          info.error = err;
        }
        return info;
      });
    }
    function check_whole(group, unique) {
      let maker;
      let shared = [];
      for (let cp of unique) {
        let whole = WHOLE_MAP.get(cp);
        if (whole === UNIQUE_PH)
          return;
        if (whole) {
          let set = whole.M.get(cp);
          maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
          if (!maker.length)
            return;
        } else {
          shared.push(cp);
        }
      }
      if (maker) {
        for (let g of maker) {
          if (shared.every((cp) => group_has_cp(g, cp))) {
            throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
          }
        }
      }
    }
    function determine_group(unique) {
      let groups = GROUPS;
      for (let cp of unique) {
        let gs = groups.filter((g) => group_has_cp(g, cp));
        if (!gs.length) {
          if (!GROUPS.some((g) => group_has_cp(g, cp))) {
            throw error_disallowed(cp);
          } else {
            throw error_group_member(groups[0], cp);
          }
        }
        groups = gs;
        if (gs.length == 1)
          break;
      }
      return groups;
    }
    function flatten(split2) {
      return split2.map(({ input, error, output }) => {
        if (error) {
          let msg = error.message;
          throw new Error(split2.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
        }
        return str_from_cps(output);
      }).join(STOP_CH);
    }
    function error_disallowed(cp) {
      return new Error(`disallowed character: ${quoted_cp(cp)}`);
    }
    function error_group_member(g, cp) {
      let quoted = quoted_cp(cp);
      let gg = GROUPS.find((g2) => g2.P.has(cp));
      if (gg) {
        quoted = `${gg.N} ${quoted}`;
      }
      return new Error(`illegal mixture: ${g.N} + ${quoted}`);
    }
    function error_placement(where) {
      return new Error(`illegal placement: ${where}`);
    }
    function check_group(g, cps) {
      for (let cp of cps) {
        if (!group_has_cp(g, cp)) {
          throw error_group_member(g, cp);
        }
      }
      if (g.M) {
        let decomposed2 = nfd(cps);
        for (let i = 1, e = decomposed2.length; i < e; i++) {
          if (NSM.has(decomposed2[i])) {
            let j = i + 1;
            for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
              for (let k = i; k < j; k++) {
                if (decomposed2[k] == cp) {
                  throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
                }
              }
            }
            if (j - i > NSM_MAX) {
              throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
            }
            i = j;
          }
        }
      }
    }
    function tokens_from_str(input, nf, ef) {
      let ret = [];
      let chars = [];
      input = input.slice().reverse();
      while (input.length) {
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
          if (chars.length) {
            ret.push(nf(chars));
            chars = [];
          }
          ret.push(ef(emoji));
        } else {
          let cp = input.pop();
          if (VALID.has(cp)) {
            chars.push(cp);
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              chars.push(...cps);
            } else if (!IGNORED.has(cp)) {
              throw error_disallowed(cp);
            }
          }
        }
      }
      if (chars.length) {
        ret.push(nf(chars));
      }
      return ret;
    }
    function filter_fe0f(cps) {
      return cps.filter((cp) => cp != FE0F);
    }
    function consume_emoji_reversed(cps, eaten) {
      let node = EMOJI_ROOT;
      let emoji;
      let pos = cps.length;
      while (pos) {
        node = node.get(cps[--pos]);
        if (!node)
          break;
        let { V } = node;
        if (V) {
          emoji = V;
          if (eaten)
            eaten.push(...cps.slice(pos).reverse());
          cps.length = pos;
        }
      }
      return emoji;
    }
    var TY_VALID = "valid";
    var TY_MAPPED = "mapped";
    var TY_IGNORED = "ignored";
    var TY_DISALLOWED = "disallowed";
    var TY_EMOJI = "emoji";
    var TY_NFC = "nfc";
    var TY_STOP = "stop";
    function ens_tokenize(name, {
      nf = true
      // collapse unnormalized runs into a single token
    } = {}) {
      init();
      let input = explode_cp(name).reverse();
      let eaten = [];
      let tokens = [];
      while (input.length) {
        let emoji = consume_emoji_reversed(input, eaten);
        if (emoji) {
          tokens.push({
            type: TY_EMOJI,
            emoji: emoji.slice(),
            // copy emoji
            input: eaten,
            cps: filter_fe0f(emoji)
          });
          eaten = [];
        } else {
          let cp = input.pop();
          if (cp == STOP) {
            tokens.push({ type: TY_STOP, cp });
          } else if (VALID.has(cp)) {
            tokens.push({ type: TY_VALID, cps: [cp] });
          } else if (IGNORED.has(cp)) {
            tokens.push({ type: TY_IGNORED, cp });
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              tokens.push({ type: TY_MAPPED, cp, cps: cps.slice() });
            } else {
              tokens.push({ type: TY_DISALLOWED, cp });
            }
          }
        }
      }
      if (nf) {
        for (let i = 0, start = -1; i < tokens.length; i++) {
          let token = tokens[i];
          if (is_valid_or_mapped(token.type)) {
            if (requires_check(token.cps)) {
              let end = i + 1;
              for (let pos = end; pos < tokens.length; pos++) {
                let { type, cps: cps2 } = tokens[pos];
                if (is_valid_or_mapped(type)) {
                  if (!requires_check(cps2))
                    break;
                  end = pos + 1;
                } else if (type !== TY_IGNORED) {
                  break;
                }
              }
              if (start < 0)
                start = i;
              let slice = tokens.slice(start, end);
              let cps0 = slice.flatMap((x) => is_valid_or_mapped(x.type) ? x.cps : []);
              let cps = nfc(cps0);
              if (compare_arrays(cps, cps0)) {
                tokens.splice(start, end - start, {
                  type: TY_NFC,
                  input: cps0,
                  // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps
                  cps,
                  tokens0: collapse_valid_tokens(slice),
                  tokens: ens_tokenize(str_from_cps(cps), { nf: false })
                });
                i = start;
              } else {
                i = end - 1;
              }
              start = -1;
            } else {
              start = i;
            }
          } else if (token.type !== TY_IGNORED) {
            start = -1;
          }
        }
      }
      return collapse_valid_tokens(tokens);
    }
    function is_valid_or_mapped(type) {
      return type == TY_VALID || type == TY_MAPPED;
    }
    function requires_check(cps) {
      return cps.some((cp) => NFC_CHECK.has(cp));
    }
    function collapse_valid_tokens(tokens) {
      for (let i = 0; i < tokens.length; i++) {
        if (tokens[i].type == TY_VALID) {
          let j = i + 1;
          while (j < tokens.length && tokens[j].type == TY_VALID)
            j++;
          tokens.splice(i, j - i, { type: TY_VALID, cps: tokens.slice(i, j).flatMap((x) => x.cps) });
        }
      }
      return tokens;
    }
    exports2.ens_beautify = ens_beautify;
    exports2.ens_emoji = ens_emoji;
    exports2.ens_normalize = ens_normalize;
    exports2.ens_normalize_fragment = ens_normalize_fragment;
    exports2.ens_split = ens_split;
    exports2.ens_tokenize = ens_tokenize;
    exports2.is_combining_mark = is_combining_mark;
    exports2.nfc = nfc;
    exports2.nfd = nfd;
    exports2.safe_str_from_cps = safe_str_from_cps;
    exports2.should_escape = should_escape;
  }
});

// node_modules/ethers/lib.commonjs/hash/namehash.js
var require_namehash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/namehash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var ens_normalize_1 = require_dist();
    var Zeros = new Uint8Array(32);
    Zeros.fill(0);
    function checkComponent(comp) {
      (0, index_js_2.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
      return comp;
    }
    function ensNameSplit(name) {
      const bytes = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));
      const comps = [];
      if (name.length === 0) {
        return comps;
      }
      let last = 0;
      for (let i = 0; i < bytes.length; i++) {
        const d = bytes[i];
        if (d === 46) {
          comps.push(checkComponent(bytes.slice(last, i)));
          last = i + 1;
        }
      }
      (0, index_js_2.assertArgument)(last < bytes.length, "invalid ENS name; empty component", "name", name);
      comps.push(checkComponent(bytes.slice(last)));
      return comps;
    }
    function ensNormalize(name) {
      try {
        if (name.length === 0) {
          throw new Error("empty label");
        }
        return (0, ens_normalize_1.ens_normalize)(name);
      } catch (error) {
        (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
      }
    }
    exports2.ensNormalize = ensNormalize;
    function isValidName(name) {
      try {
        return ensNameSplit(name).length !== 0;
      } catch (error) {
      }
      return false;
    }
    exports2.isValidName = isValidName;
    function namehash(name) {
      (0, index_js_2.assertArgument)(typeof name === "string", "invalid ENS name; not a string", "name", name);
      (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, "name", name);
      let result = Zeros;
      const comps = ensNameSplit(name);
      while (comps.length) {
        result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)(comps.pop())]));
      }
      return (0, index_js_2.hexlify)(result);
    }
    exports2.namehash = namehash;
    function dnsEncode(name, _maxLength) {
      const length = _maxLength != null ? _maxLength : 63;
      (0, index_js_2.assertArgument)(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
      return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp) => {
        (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
        const bytes = new Uint8Array(comp.length + 1);
        bytes.set(comp, 1);
        bytes[0] = bytes.length - 1;
        return bytes;
      }))) + "00";
    }
    exports2.dnsEncode = dnsEncode;
  }
});

// node_modules/ethers/lib.commonjs/transaction/accesslist.js
var require_accesslist = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/accesslist.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accessListify = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_utils();
    function accessSetify(addr, storageKeys) {
      return {
        address: (0, index_js_1.getAddress)(addr),
        storageKeys: storageKeys.map((storageKey, index) => {
          (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
          return storageKey.toLowerCase();
        })
      };
    }
    function accessListify(value) {
      if (Array.isArray(value)) {
        return value.map((set, index) => {
          if (Array.isArray(set)) {
            (0, index_js_2.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
            return accessSetify(set[0], set[1]);
          }
          (0, index_js_2.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
          return accessSetify(set.address, set.storageKeys);
        });
      }
      (0, index_js_2.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
      const result = Object.keys(value).map((addr) => {
        const storageKeys = value[addr].reduce((accum, storageKey) => {
          accum[storageKey] = true;
          return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
      });
      result.sort((a, b) => a.address.localeCompare(b.address));
      return result;
    }
    exports2.accessListify = accessListify;
  }
});

// node_modules/ethers/lib.commonjs/transaction/address.js
var require_address4 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverAddress = exports2.computeAddress = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    function computeAddress(key) {
      let pubkey;
      if (typeof key === "string") {
        pubkey = index_js_2.SigningKey.computePublicKey(key, false);
      } else {
        pubkey = key.publicKey;
      }
      return (0, index_js_1.getAddress)((0, index_js_2.keccak256)("0x" + pubkey.substring(4)).substring(26));
    }
    exports2.computeAddress = computeAddress;
    function recoverAddress(digest, signature) {
      return computeAddress(index_js_2.SigningKey.recoverPublicKey(digest, signature));
    }
    exports2.recoverAddress = recoverAddress;
  }
});

// node_modules/ethers/lib.commonjs/transaction/transaction.js
var require_transaction = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Transaction = void 0;
    var index_js_1 = require_address2();
    var addresses_js_1 = require_addresses();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_utils();
    var accesslist_js_1 = require_accesslist();
    var address_js_1 = require_address4();
    var BN_0 = BigInt(0);
    var BN_2 = BigInt(2);
    var BN_27 = BigInt(27);
    var BN_28 = BigInt(28);
    var BN_35 = BigInt(35);
    var BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var BLOB_SIZE = 4096 * 32;
    function getVersionedHash(version, hash) {
      let versioned = version.toString(16);
      while (versioned.length < 2) {
        versioned = "0" + versioned;
      }
      versioned += (0, index_js_2.sha256)(hash).substring(4);
      return "0x" + versioned;
    }
    function handleAddress(value) {
      if (value === "0x") {
        return null;
      }
      return (0, index_js_1.getAddress)(value);
    }
    function handleAccessList(value, param) {
      try {
        return (0, accesslist_js_1.accessListify)(value);
      } catch (error) {
        (0, index_js_3.assertArgument)(false, error.message, param, value);
      }
    }
    function handleNumber(_value, param) {
      if (_value === "0x") {
        return 0;
      }
      return (0, index_js_3.getNumber)(_value, param);
    }
    function handleUint(_value, param) {
      if (_value === "0x") {
        return BN_0;
      }
      const value = (0, index_js_3.getBigInt)(_value, param);
      (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
      return value;
    }
    function formatNumber(_value, name) {
      const value = (0, index_js_3.getBigInt)(_value, "value");
      const result = (0, index_js_3.toBeArray)(value);
      (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
      return result;
    }
    function formatAccessList(value) {
      return (0, accesslist_js_1.accessListify)(value).map((set) => [set.address, set.storageKeys]);
    }
    function formatHashes(value, param) {
      (0, index_js_3.assertArgument)(Array.isArray(value), `invalid ${param}`, "value", value);
      for (let i = 0; i < value.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
      }
      return value;
    }
    function _parseLegacy(data) {
      const fields = (0, index_js_3.decodeRlp)(data);
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
      const tx = {
        type: 0,
        nonce: handleNumber(fields[0], "nonce"),
        gasPrice: handleUint(fields[1], "gasPrice"),
        gasLimit: handleUint(fields[2], "gasLimit"),
        to: handleAddress(fields[3]),
        value: handleUint(fields[4], "value"),
        data: (0, index_js_3.hexlify)(fields[5]),
        chainId: BN_0
      };
      if (fields.length === 6) {
        return tx;
      }
      const v = handleUint(fields[6], "v");
      const r = handleUint(fields[7], "r");
      const s = handleUint(fields[8], "s");
      if (r === BN_0 && s === BN_0) {
        tx.chainId = v;
      } else {
        let chainId = (v - BN_35) / BN_2;
        if (chainId < BN_0) {
          chainId = BN_0;
        }
        tx.chainId = chainId;
        (0, index_js_3.assertArgument)(chainId !== BN_0 || (v === BN_27 || v === BN_28), "non-canonical legacy v", "v", fields[6]);
        tx.signature = index_js_2.Signature.from({
          r: (0, index_js_3.zeroPadValue)(fields[7], 32),
          s: (0, index_js_3.zeroPadValue)(fields[8], 32),
          v
        });
      }
      return tx;
    }
    function _serializeLegacy(tx, sig) {
      const fields = [
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data
      ];
      let chainId = BN_0;
      if (tx.chainId != BN_0) {
        chainId = (0, index_js_3.getBigInt)(tx.chainId, "tx.chainId");
        (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
      } else if (tx.signature) {
        const legacy = tx.signature.legacyChainId;
        if (legacy != null) {
          chainId = legacy;
        }
      }
      if (!sig) {
        if (chainId !== BN_0) {
          fields.push((0, index_js_3.toBeArray)(chainId));
          fields.push("0x");
          fields.push("0x");
        }
        return (0, index_js_3.encodeRlp)(fields);
      }
      let v = BigInt(27 + sig.yParity);
      if (chainId !== BN_0) {
        v = index_js_2.Signature.getChainIdV(chainId, sig.v);
      } else if (BigInt(sig.v) !== v) {
        (0, index_js_3.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
      }
      fields.push((0, index_js_3.toBeArray)(v));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
      return (0, index_js_3.encodeRlp)(fields);
    }
    function _parseEipSignature(tx, fields) {
      let yParity;
      try {
        yParity = handleNumber(fields[0], "yParity");
        if (yParity !== 0 && yParity !== 1) {
          throw new Error("bad yParity");
        }
      } catch (error) {
        (0, index_js_3.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
      }
      const r = (0, index_js_3.zeroPadValue)(fields[1], 32);
      const s = (0, index_js_3.zeroPadValue)(fields[2], 32);
      const signature = index_js_2.Signature.from({ r, s, yParity });
      tx.signature = signature;
    }
    function _parseEip1559(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 2,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList")
      };
      if (fields.length === 9) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(9));
      return tx;
    }
    function _serializeEip1559(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x02", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip2930(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 1,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        gasPrice: handleUint(fields[2], "gasPrice"),
        gasLimit: handleUint(fields[3], "gasLimit"),
        to: handleAddress(fields[4]),
        value: handleUint(fields[5], "value"),
        data: (0, index_js_3.hexlify)(fields[6]),
        accessList: handleAccessList(fields[7], "accessList")
      };
      if (fields.length === 8) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(8));
      return tx;
    }
    function _serializeEip2930(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "recoveryParam"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x01", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip4844(data) {
      let fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      let typeName = "3";
      let blobs = null;
      if (fields.length === 4 && Array.isArray(fields[0])) {
        typeName = "3 (network format)";
        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
        (0, index_js_3.assertArgument)(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
        (0, index_js_3.assertArgument)(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
        (0, index_js_3.assertArgument)(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
        (0, index_js_3.assertArgument)(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
        (0, index_js_3.assertArgument)(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
        blobs = [];
        for (let i = 0; i < fields[1].length; i++) {
          blobs.push({
            data: fBlobs[i],
            commitment: fCommits[i],
            proof: fProofs[i]
          });
        }
        fields = fields[0];
      }
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 3,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList"),
        maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
        blobVersionedHashes: fields[10]
      };
      if (blobs) {
        tx.blobs = blobs;
      }
      (0, index_js_3.assertArgument)(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
      (0, index_js_3.assertArgument)(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
      for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
      }
      if (fields.length === 11) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(11));
      return tx;
    }
    function _serializeEip4844(tx, sig, blobs) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || addresses_js_1.ZeroAddress,
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || []),
        formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
        formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
        if (blobs) {
          return (0, index_js_3.concat)([
            "0x03",
            (0, index_js_3.encodeRlp)([
              fields,
              blobs.map((b) => b.data),
              blobs.map((b) => b.commitment),
              blobs.map((b) => b.proof)
            ])
          ]);
        }
      }
      return (0, index_js_3.concat)(["0x03", (0, index_js_3.encodeRlp)(fields)]);
    }
    var Transaction = class _Transaction {
      #type;
      #to;
      #data;
      #nonce;
      #gasLimit;
      #gasPrice;
      #maxPriorityFeePerGas;
      #maxFeePerGas;
      #value;
      #chainId;
      #sig;
      #accessList;
      #maxFeePerBlobGas;
      #blobVersionedHashes;
      #kzg;
      #blobs;
      /**
       *  The transaction type.
       *
       *  If null, the type will be automatically inferred based on
       *  explicit properties.
       */
      get type() {
        return this.#type;
      }
      set type(value) {
        switch (value) {
          case null:
            this.#type = null;
            break;
          case 0:
          case "legacy":
            this.#type = 0;
            break;
          case 1:
          case "berlin":
          case "eip-2930":
            this.#type = 1;
            break;
          case 2:
          case "london":
          case "eip-1559":
            this.#type = 2;
            break;
          case 3:
          case "cancun":
          case "eip-4844":
            this.#type = 3;
            break;
          default:
            (0, index_js_3.assertArgument)(false, "unsupported transaction type", "type", value);
        }
      }
      /**
       *  The name of the transaction type.
       */
      get typeName() {
        switch (this.type) {
          case 0:
            return "legacy";
          case 1:
            return "eip-2930";
          case 2:
            return "eip-1559";
          case 3:
            return "eip-4844";
        }
        return null;
      }
      /**
       *  The ``to`` address for the transaction or ``null`` if the
       *  transaction is an ``init`` transaction.
       */
      get to() {
        const value = this.#to;
        if (value == null && this.type === 3) {
          return addresses_js_1.ZeroAddress;
        }
        return value;
      }
      set to(value) {
        this.#to = value == null ? null : (0, index_js_1.getAddress)(value);
      }
      /**
       *  The transaction nonce.
       */
      get nonce() {
        return this.#nonce;
      }
      set nonce(value) {
        this.#nonce = (0, index_js_3.getNumber)(value, "value");
      }
      /**
       *  The gas limit.
       */
      get gasLimit() {
        return this.#gasLimit;
      }
      set gasLimit(value) {
        this.#gasLimit = (0, index_js_3.getBigInt)(value);
      }
      /**
       *  The gas price.
       *
       *  On legacy networks this defines the fee that will be paid. On
       *  EIP-1559 networks, this should be ``null``.
       */
      get gasPrice() {
        const value = this.#gasPrice;
        if (value == null && (this.type === 0 || this.type === 1)) {
          return BN_0;
        }
        return value;
      }
      set gasPrice(value) {
        this.#gasPrice = value == null ? null : (0, index_js_3.getBigInt)(value, "gasPrice");
      }
      /**
       *  The maximum priority fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxPriorityFeePerGas() {
        const value = this.#maxPriorityFeePerGas;
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_0;
          }
          return null;
        }
        return value;
      }
      set maxPriorityFeePerGas(value) {
        this.#maxPriorityFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, "maxPriorityFeePerGas");
      }
      /**
       *  The maximum total fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxFeePerGas() {
        const value = this.#maxFeePerGas;
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_0;
          }
          return null;
        }
        return value;
      }
      set maxFeePerGas(value) {
        this.#maxFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerGas");
      }
      /**
       *  The transaction data. For ``init`` transactions this is the
       *  deployment code.
       */
      get data() {
        return this.#data;
      }
      set data(value) {
        this.#data = (0, index_js_3.hexlify)(value);
      }
      /**
       *  The amount of ether (in wei) to send in this transactions.
       */
      get value() {
        return this.#value;
      }
      set value(value) {
        this.#value = (0, index_js_3.getBigInt)(value, "value");
      }
      /**
       *  The chain ID this transaction is valid on.
       */
      get chainId() {
        return this.#chainId;
      }
      set chainId(value) {
        this.#chainId = (0, index_js_3.getBigInt)(value);
      }
      /**
       *  If signed, the signature for this transaction.
       */
      get signature() {
        return this.#sig || null;
      }
      set signature(value) {
        this.#sig = value == null ? null : index_js_2.Signature.from(value);
      }
      /**
       *  The access list.
       *
       *  An access list permits discounted (but pre-paid) access to
       *  bytecode and state variable access within contract execution.
       */
      get accessList() {
        const value = this.#accessList || null;
        if (value == null) {
          if (this.type === 1 || this.type === 2 || this.type === 3) {
            return [];
          }
          return null;
        }
        return value;
      }
      set accessList(value) {
        this.#accessList = value == null ? null : (0, accesslist_js_1.accessListify)(value);
      }
      /**
       *  The max fee per blob gas for Cancun transactions.
       */
      get maxFeePerBlobGas() {
        const value = this.#maxFeePerBlobGas;
        if (value == null && this.type === 3) {
          return BN_0;
        }
        return value;
      }
      set maxFeePerBlobGas(value) {
        this.#maxFeePerBlobGas = value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerBlobGas");
      }
      /**
       *  The BLOb versioned hashes for Cancun transactions.
       */
      get blobVersionedHashes() {
        let value = this.#blobVersionedHashes;
        if (value == null && this.type === 3) {
          return [];
        }
        return value;
      }
      set blobVersionedHashes(value) {
        if (value != null) {
          (0, index_js_3.assertArgument)(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
          value = value.slice();
          for (let i = 0; i < value.length; i++) {
            (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
          }
        }
        this.#blobVersionedHashes = value;
      }
      /**
       *  The BLObs for the Transaction, if any.
       *
       *  If ``blobs`` is non-``null``, then the [[seriailized]]
       *  will return the network formatted sidecar, otherwise it
       *  will return the standard [[link-eip-2718]] payload. The
       *  [[unsignedSerialized]] is unaffected regardless.
       *
       *  When setting ``blobs``, either fully valid [[Blob]] objects
       *  may be specified (i.e. correctly padded, with correct
       *  committments and proofs) or a raw [[BytesLike]] may
       *  be provided.
       *
       *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
       *  be already set. The blob will be correctly padded and the
       *  [[KzgLibrary]] will be used to compute the committment and
       *  proof for the blob.
       *
       *  A BLOb is a sequence of field elements, each of which must
       *  be within the BLS field modulo, so some additional processing
       *  may be required to encode arbitrary data to ensure each 32 byte
       *  field is within the valid range.
       *
       *  Setting this automatically populates [[blobVersionedHashes]],
       *  overwriting any existing values. Setting this to ``null``
       *  does **not** remove the [[blobVersionedHashes]], leaving them
       *  present.
       */
      get blobs() {
        if (this.#blobs == null) {
          return null;
        }
        return this.#blobs.map((b) => Object.assign({}, b));
      }
      set blobs(_blobs) {
        if (_blobs == null) {
          this.#blobs = null;
          return;
        }
        const blobs = [];
        const versionedHashes = [];
        for (let i = 0; i < _blobs.length; i++) {
          const blob = _blobs[i];
          if ((0, index_js_3.isBytesLike)(blob)) {
            (0, index_js_3.assert)(this.#kzg, "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
              operation: "set blobs()"
            });
            let data = (0, index_js_3.getBytes)(blob);
            (0, index_js_3.assertArgument)(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
            if (data.length !== BLOB_SIZE) {
              const padded = new Uint8Array(BLOB_SIZE);
              padded.set(data);
              data = padded;
            }
            const commit = this.#kzg.blobToKzgCommitment(data);
            const proof = (0, index_js_3.hexlify)(this.#kzg.computeBlobKzgProof(data, commit));
            blobs.push({
              data: (0, index_js_3.hexlify)(data),
              commitment: (0, index_js_3.hexlify)(commit),
              proof
            });
            versionedHashes.push(getVersionedHash(1, commit));
          } else {
            const commit = (0, index_js_3.hexlify)(blob.commitment);
            blobs.push({
              data: (0, index_js_3.hexlify)(blob.data),
              commitment: commit,
              proof: (0, index_js_3.hexlify)(blob.proof)
            });
            versionedHashes.push(getVersionedHash(1, commit));
          }
        }
        this.#blobs = blobs;
        this.#blobVersionedHashes = versionedHashes;
      }
      get kzg() {
        return this.#kzg;
      }
      set kzg(kzg) {
        this.#kzg = kzg;
      }
      /**
       *  Creates a new Transaction with default values.
       */
      constructor() {
        this.#type = null;
        this.#to = null;
        this.#nonce = 0;
        this.#gasLimit = BN_0;
        this.#gasPrice = null;
        this.#maxPriorityFeePerGas = null;
        this.#maxFeePerGas = null;
        this.#data = "0x";
        this.#value = BN_0;
        this.#chainId = BN_0;
        this.#sig = null;
        this.#accessList = null;
        this.#maxFeePerBlobGas = null;
        this.#blobVersionedHashes = null;
        this.#blobs = null;
        this.#kzg = null;
      }
      /**
       *  The transaction hash, if signed. Otherwise, ``null``.
       */
      get hash() {
        if (this.signature == null) {
          return null;
        }
        return (0, index_js_2.keccak256)(this.#getSerialized(true, false));
      }
      /**
       *  The pre-image hash of this transaction.
       *
       *  This is the digest that a [[Signer]] must sign to authorize
       *  this transaction.
       */
      get unsignedHash() {
        return (0, index_js_2.keccak256)(this.unsignedSerialized);
      }
      /**
       *  The sending address, if signed. Otherwise, ``null``.
       */
      get from() {
        if (this.signature == null) {
          return null;
        }
        return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);
      }
      /**
       *  The public key of the sender, if signed. Otherwise, ``null``.
       */
      get fromPublicKey() {
        if (this.signature == null) {
          return null;
        }
        return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
      }
      /**
       *  Returns true if signed.
       *
       *  This provides a Type Guard that properties requiring a signed
       *  transaction are non-null.
       */
      isSigned() {
        return this.signature != null;
      }
      #getSerialized(signed, sidecar) {
        (0, index_js_3.assert)(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
        const sig = signed ? this.signature : null;
        switch (this.inferType()) {
          case 0:
            return _serializeLegacy(this, sig);
          case 1:
            return _serializeEip2930(this, sig);
          case 2:
            return _serializeEip1559(this, sig);
          case 3:
            return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
        }
        (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      }
      /**
       *  The serialized transaction.
       *
       *  This throws if the transaction is unsigned. For the pre-image,
       *  use [[unsignedSerialized]].
       */
      get serialized() {
        return this.#getSerialized(true, true);
      }
      /**
       *  The transaction pre-image.
       *
       *  The hash of this is the digest which needs to be signed to
       *  authorize this transaction.
       */
      get unsignedSerialized() {
        return this.#getSerialized(false, false);
      }
      /**
       *  Return the most "likely" type; currently the highest
       *  supported transaction type.
       */
      inferType() {
        const types = this.inferTypes();
        if (types.indexOf(2) >= 0) {
          return 2;
        }
        return types.pop();
      }
      /**
       *  Validates the explicit properties and returns a list of compatible
       *  transaction types.
       */
      inferTypes() {
        const hasGasPrice = this.gasPrice != null;
        const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
        const hasAccessList = this.accessList != null;
        const hasBlob = this.#maxFeePerBlobGas != null || this.#blobVersionedHashes;
        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
          (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
        }
        (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
        (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
        const types = [];
        if (this.type != null) {
          types.push(this.type);
        } else {
          if (hasFee) {
            types.push(2);
          } else if (hasGasPrice) {
            types.push(1);
            if (!hasAccessList) {
              types.push(0);
            }
          } else if (hasAccessList) {
            types.push(1);
            types.push(2);
          } else if (hasBlob && this.to) {
            types.push(3);
          } else {
            types.push(0);
            types.push(1);
            types.push(2);
            types.push(3);
          }
        }
        types.sort();
        return types;
      }
      /**
       *  Returns true if this transaction is a legacy transaction (i.e.
       *  ``type === 0``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if this transaction is berlin hardform transaction (i.e.
       *  ``type === 1``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if this transaction is london hardform transaction (i.e.
       *  ``type === 2``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if this transaction is an [[link-eip-4844]] BLOB
       *  transaction.
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Create a copy of this transaciton.
       */
      clone() {
        return _Transaction.from(this);
      }
      /**
       *  Return a JSON-friendly object.
       */
      toJSON() {
        const s = (v) => {
          if (v == null) {
            return null;
          }
          return v.toString();
        };
        return {
          type: this.type,
          to: this.to,
          //            from: this.from,
          data: this.data,
          nonce: this.nonce,
          gasLimit: s(this.gasLimit),
          gasPrice: s(this.gasPrice),
          maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
          maxFeePerGas: s(this.maxFeePerGas),
          value: s(this.value),
          chainId: s(this.chainId),
          sig: this.signature ? this.signature.toJSON() : null,
          accessList: this.accessList
        };
      }
      /**
       *  Create a **Transaction** from a serialized transaction or a
       *  Transaction-like object.
       */
      static from(tx) {
        if (tx == null) {
          return new _Transaction();
        }
        if (typeof tx === "string") {
          const payload = (0, index_js_3.getBytes)(tx);
          if (payload[0] >= 127) {
            return _Transaction.from(_parseLegacy(payload));
          }
          switch (payload[0]) {
            case 1:
              return _Transaction.from(_parseEip2930(payload));
            case 2:
              return _Transaction.from(_parseEip1559(payload));
            case 3:
              return _Transaction.from(_parseEip4844(payload));
          }
          (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
        }
        const result = new _Transaction();
        if (tx.type != null) {
          result.type = tx.type;
        }
        if (tx.to != null) {
          result.to = tx.to;
        }
        if (tx.nonce != null) {
          result.nonce = tx.nonce;
        }
        if (tx.gasLimit != null) {
          result.gasLimit = tx.gasLimit;
        }
        if (tx.gasPrice != null) {
          result.gasPrice = tx.gasPrice;
        }
        if (tx.maxPriorityFeePerGas != null) {
          result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
        }
        if (tx.maxFeePerGas != null) {
          result.maxFeePerGas = tx.maxFeePerGas;
        }
        if (tx.maxFeePerBlobGas != null) {
          result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
        }
        if (tx.data != null) {
          result.data = tx.data;
        }
        if (tx.value != null) {
          result.value = tx.value;
        }
        if (tx.chainId != null) {
          result.chainId = tx.chainId;
        }
        if (tx.signature != null) {
          result.signature = index_js_2.Signature.from(tx.signature);
        }
        if (tx.accessList != null) {
          result.accessList = tx.accessList;
        }
        if (tx.blobVersionedHashes != null) {
          result.blobVersionedHashes = tx.blobVersionedHashes;
        }
        if (tx.kzg != null) {
          result.kzg = tx.kzg;
        }
        if (tx.blobs != null) {
          result.blobs = tx.blobs;
        }
        if (tx.hash != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
          (0, index_js_3.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
        }
        if (tx.from != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
          (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
        }
        return result;
      }
    };
    exports2.Transaction = Transaction;
  }
});

// node_modules/ethers/lib.commonjs/transaction/index.js
var require_transaction2 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Transaction = exports2.recoverAddress = exports2.computeAddress = exports2.accessListify = void 0;
    var accesslist_js_1 = require_accesslist();
    Object.defineProperty(exports2, "accessListify", { enumerable: true, get: function() {
      return accesslist_js_1.accessListify;
    } });
    var address_js_1 = require_address4();
    Object.defineProperty(exports2, "computeAddress", { enumerable: true, get: function() {
      return address_js_1.computeAddress;
    } });
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return address_js_1.recoverAddress;
    } });
    var transaction_js_1 = require_transaction();
    Object.defineProperty(exports2, "Transaction", { enumerable: true, get: function() {
      return transaction_js_1.Transaction;
    } });
  }
});

// node_modules/ethers/lib.commonjs/hash/message.js
var require_message = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/message.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyMessage = exports2.hashMessage = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_constants();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    function hashMessage(message) {
      if (typeof message === "string") {
        message = (0, index_js_4.toUtf8Bytes)(message);
      }
      return (0, index_js_1.keccak256)((0, index_js_4.concat)([
        (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),
        (0, index_js_4.toUtf8Bytes)(String(message.length)),
        message
      ]));
    }
    exports2.hashMessage = hashMessage;
    function verifyMessage(message, sig) {
      const digest = hashMessage(message);
      return (0, index_js_3.recoverAddress)(digest, sig);
    }
    exports2.verifyMessage = verifyMessage;
  }
});

// node_modules/ethers/lib.commonjs/hash/solidity.js
var require_solidity = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/solidity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.solidityPackedSha256 = exports2.solidityPackedKeccak256 = exports2.solidityPacked = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_utils();
    var regexBytes = new RegExp("^bytes([0-9]+)$");
    var regexNumber = new RegExp("^(u?int)([0-9]*)$");
    var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    function _pack(type, value, isArray) {
      switch (type) {
        case "address":
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));
        case "string":
          return (0, index_js_3.toUtf8Bytes)(value);
        case "bytes":
          return (0, index_js_3.getBytes)(value);
        case "bool":
          value = !!value ? "0x01" : "0x00";
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)(value);
      }
      let match = type.match(regexNumber);
      if (match) {
        let signed = match[1] === "int";
        let size = parseInt(match[2] || "256");
        (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
        if (isArray) {
          size = 256;
        }
        if (signed) {
          value = (0, index_js_3.toTwos)(value, size);
        }
        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));
      }
      match = type.match(regexBytes);
      if (match) {
        const size = parseInt(match[1]);
        (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
        (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type}`, "value", value);
        if (isArray) {
          return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));
        }
        return value;
      }
      match = type.match(regexArray);
      if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type}`, "value", value);
        const result = [];
        value.forEach(function(value2) {
          result.push(_pack(baseType, value2, true));
        });
        return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));
      }
      (0, index_js_3.assertArgument)(false, "invalid type", "type", type);
    }
    function solidityPacked(types, values) {
      (0, index_js_3.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
      const tight = [];
      types.forEach(function(type, index) {
        tight.push(_pack(type, values[index]));
      });
      return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));
    }
    exports2.solidityPacked = solidityPacked;
    function solidityPackedKeccak256(types, values) {
      return (0, index_js_2.keccak256)(solidityPacked(types, values));
    }
    exports2.solidityPackedKeccak256 = solidityPackedKeccak256;
    function solidityPackedSha256(types, values) {
      return (0, index_js_2.sha256)(solidityPacked(types, values));
    }
    exports2.solidityPackedSha256 = solidityPackedSha256;
  }
});

// node_modules/ethers/lib.commonjs/hash/typed-data.js
var require_typed_data = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/typed-data.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = exports2.TypedDataEncoder = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var id_js_1 = require_id();
    var padding = new Uint8Array(32);
    padding.fill(0);
    var BN__1 = BigInt(-1);
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
      const bytes = (0, index_js_4.getBytes)(value);
      const padOffset = bytes.length % 32;
      if (padOffset) {
        return (0, index_js_4.concat)([bytes, padding.slice(padOffset)]);
      }
      return (0, index_js_4.hexlify)(bytes);
    }
    var hexTrue = (0, index_js_4.toBeHex)(BN_1, 32);
    var hexFalse = (0, index_js_4.toBeHex)(BN_0, 32);
    var domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    var domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    function checkString(key) {
      return function(value) {
        (0, index_js_4.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        return value;
      };
    }
    var domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(_value) {
        const value = (0, index_js_4.getBigInt)(_value, "domain.chainId");
        (0, index_js_4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
        if (Number.isSafeInteger(value)) {
          return Number(value);
        }
        return (0, index_js_4.toQuantity)(value);
      },
      verifyingContract: function(value) {
        try {
          return (0, index_js_1.getAddress)(value).toLowerCase();
        } catch (error) {
        }
        (0, index_js_4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        const bytes = (0, index_js_4.getBytes)(value, "domain.salt");
        (0, index_js_4.assertArgument)(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
        return (0, index_js_4.hexlify)(bytes);
      }
    };
    function getBaseEncoder(type) {
      {
        const match = type.match(/^(u?)int(\d+)$/);
        if (match) {
          const signed = match[1] === "";
          const width = parseInt(match[2]);
          (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
          const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT256, signed ? width - 1 : width);
          const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;
          return function(_value) {
            const value = (0, index_js_4.getBigInt)(_value, "value");
            (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
            return (0, index_js_4.toBeHex)(signed ? (0, index_js_4.toTwos)(value, 256) : value, 32);
          };
        }
      }
      {
        const match = type.match(/^bytes(\d+)$/);
        if (match) {
          const width = parseInt(match[1]);
          (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
          return function(value) {
            const bytes = (0, index_js_4.getBytes)(value);
            (0, index_js_4.assertArgument)(bytes.length === width, `invalid length for ${type}`, "value", value);
            return hexPadRight(value);
          };
        }
      }
      switch (type) {
        case "address":
          return function(value) {
            return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);
          };
        case "bool":
          return function(value) {
            return !value ? hexFalse : hexTrue;
          };
        case "bytes":
          return function(value) {
            return (0, index_js_2.keccak256)(value);
          };
        case "string":
          return function(value) {
            return (0, id_js_1.id)(value);
          };
      }
      return null;
    }
    function encodeType(name, fields) {
      return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
    }
    function splitArray(type) {
      const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
      if (match) {
        return {
          base: match[1],
          index: match[2] + match[4],
          array: {
            base: match[1],
            prefix: match[1] + match[2],
            count: match[5] ? parseInt(match[5]) : -1
          }
        };
      }
      return { base: type };
    }
    var TypedDataEncoder = class _TypedDataEncoder {
      /**
       *  The primary type for the structured [[types]].
       *
       *  This is derived automatically from the [[types]], since no
       *  recursion is possible, once the DAG for the types is consturcted
       *  internally, the primary type must be the only remaining type with
       *  no parent nodes.
       */
      primaryType;
      #types;
      /**
       *  The types.
       */
      get types() {
        return JSON.parse(this.#types);
      }
      #fullTypes;
      #encoderCache;
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       *
       *  This performs all necessary checking that types are valid and
       *  do not violate the [[link-eip-712]] structural constraints as
       *  well as computes the [[primaryType]].
       */
      constructor(_types) {
        this.#fullTypes = /* @__PURE__ */ new Map();
        this.#encoderCache = /* @__PURE__ */ new Map();
        const links = /* @__PURE__ */ new Map();
        const parents = /* @__PURE__ */ new Map();
        const subtypes = /* @__PURE__ */ new Map();
        const types = {};
        Object.keys(_types).forEach((type) => {
          types[type] = _types[type].map(({ name, type: type2 }) => {
            let { base, index } = splitArray(type2);
            if (base === "int" && !_types["int"]) {
              base = "int256";
            }
            if (base === "uint" && !_types["uint"]) {
              base = "uint256";
            }
            return { name, type: base + (index || "") };
          });
          links.set(type, /* @__PURE__ */ new Set());
          parents.set(type, []);
          subtypes.set(type, /* @__PURE__ */ new Set());
        });
        this.#types = JSON.stringify(types);
        for (const name in types) {
          const uniqueNames = /* @__PURE__ */ new Set();
          for (const field of types[name]) {
            (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
            uniqueNames.add(field.name);
            const baseType = splitArray(field.type).base;
            (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
            const encoder = getBaseEncoder(baseType);
            if (encoder) {
              continue;
            }
            (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
            parents.get(baseType).push(name);
            links.get(name).add(baseType);
          }
        }
        const primaryTypes = Array.from(parents.keys()).filter((n) => parents.get(n).length === 0);
        (0, index_js_4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types);
        (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types);
        (0, index_js_4.defineProperties)(this, { primaryType: primaryTypes[0] });
        function checkCircular(type, found) {
          (0, index_js_4.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types);
          found.add(type);
          for (const child of links.get(type)) {
            if (!parents.has(child)) {
              continue;
            }
            checkCircular(child, found);
            for (const subtype of found) {
              subtypes.get(subtype).add(child);
            }
          }
          found.delete(type);
        }
        checkCircular(this.primaryType, /* @__PURE__ */ new Set());
        for (const [name, set] of subtypes) {
          const st = Array.from(set);
          st.sort();
          this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
        }
      }
      /**
       *  Returnthe encoder for the specific %%type%%.
       */
      getEncoder(type) {
        let encoder = this.#encoderCache.get(type);
        if (!encoder) {
          encoder = this.#getEncoder(type);
          this.#encoderCache.set(type, encoder);
        }
        return encoder;
      }
      #getEncoder(type) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return encoder;
          }
        }
        const array = splitArray(type).array;
        if (array) {
          const subtype = array.prefix;
          const subEncoder = this.getEncoder(subtype);
          return (value) => {
            (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
            let result = value.map(subEncoder);
            if (this.#fullTypes.has(subtype)) {
              result = result.map(index_js_2.keccak256);
            }
            return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));
          };
        }
        const fields = this.types[type];
        if (fields) {
          const encodedType = (0, id_js_1.id)(this.#fullTypes.get(type));
          return (value) => {
            const values = fields.map(({ name, type: type2 }) => {
              const result = this.getEncoder(type2)(value[name]);
              if (this.#fullTypes.has(type2)) {
                return (0, index_js_2.keccak256)(result);
              }
              return result;
            });
            values.unshift(encodedType);
            return (0, index_js_4.concat)(values);
          };
        }
        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
      }
      /**
       *  Return the full type for %%name%%.
       */
      encodeType(name) {
        const result = this.#fullTypes.get(name);
        (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
        return result;
      }
      /**
       *  Return the encoded %%value%% for the %%type%%.
       */
      encodeData(type, value) {
        return this.getEncoder(type)(value);
      }
      /**
       *  Returns the hash of %%value%% for the type of %%name%%.
       */
      hashStruct(name, value) {
        return (0, index_js_2.keccak256)(this.encodeData(name, value));
      }
      /**
       *  Return the fulled encoded %%value%% for the [[types]].
       */
      encode(value) {
        return this.encodeData(this.primaryType, value);
      }
      /**
       *  Return the hash of the fully encoded %%value%% for the [[types]].
       */
      hash(value) {
        return this.hashStruct(this.primaryType, value);
      }
      /**
       *  @_ignore:
       */
      _visit(type, value, callback) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return callback(type, value);
          }
        }
        const array = splitArray(type).array;
        if (array) {
          (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
          return value.map((v) => this._visit(array.prefix, v, callback));
        }
        const fields = this.types[type];
        if (fields) {
          return fields.reduce((accum, { name, type: type2 }) => {
            accum[name] = this._visit(type2, value[name], callback);
            return accum;
          }, {});
        }
        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
      }
      /**
       *  Call %%calback%% for each value in %%value%%, passing the type and
       *  component within %%value%%.
       *
       *  This is useful for replacing addresses or other transformation that
       *  may be desired on each component, based on its type.
       */
      visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
      }
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       */
      static from(types) {
        return new _TypedDataEncoder(types);
      }
      /**
       *  Return the primary type for %%types%%.
       */
      static getPrimaryType(types) {
        return _TypedDataEncoder.from(types).primaryType;
      }
      /**
       *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
       */
      static hashStruct(name, types, value) {
        return _TypedDataEncoder.from(types).hashStruct(name, value);
      }
      /**
       *  Return the domain hash for %%domain%%.
       */
      static hashDomain(domain) {
        const domainFields = [];
        for (const name in domain) {
          if (domain[name] == null) {
            continue;
          }
          const type = domainFieldTypes[name];
          (0, index_js_4.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
          domainFields.push({ name, type });
        }
        domainFields.sort((a, b) => {
          return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
        });
        return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
      }
      /**
       *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static encode(domain, types, value) {
        return (0, index_js_4.concat)([
          "0x1901",
          _TypedDataEncoder.hashDomain(domain),
          _TypedDataEncoder.from(types).hash(value)
        ]);
      }
      /**
       *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static hash(domain, types, value) {
        return (0, index_js_2.keccak256)(_TypedDataEncoder.encode(domain, types, value));
      }
      // Replaces all address types with ENS names with their looked up address
      /**
       * Resolves to the value from resolving all addresses in %%value%% for
       * %%types%% and the %%domain%%.
       */
      static async resolveNames(domain, types, value, resolveName) {
        domain = Object.assign({}, domain);
        for (const key in domain) {
          if (domain[key] == null) {
            delete domain[key];
          }
        }
        const ensCache = {};
        if (domain.verifyingContract && !(0, index_js_4.isHexString)(domain.verifyingContract, 20)) {
          ensCache[domain.verifyingContract] = "0x";
        }
        const encoder = _TypedDataEncoder.from(types);
        encoder.visit(value, (type, value2) => {
          if (type === "address" && !(0, index_js_4.isHexString)(value2, 20)) {
            ensCache[value2] = "0x";
          }
          return value2;
        });
        for (const name in ensCache) {
          ensCache[name] = await resolveName(name);
        }
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
          domain.verifyingContract = ensCache[domain.verifyingContract];
        }
        value = encoder.visit(value, (type, value2) => {
          if (type === "address" && ensCache[value2]) {
            return ensCache[value2];
          }
          return value2;
        });
        return { domain, value };
      }
      /**
       *  Returns the JSON-encoded payload expected by nodes which implement
       *  the JSON-RPC [[link-eip-712]] method.
       */
      static getPayload(domain, types, value) {
        _TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name) => {
          const value2 = domain[name];
          if (value2 == null) {
            return;
          }
          domainValues[name] = domainChecks[name](value2);
          domainTypes.push({ name, type: domainFieldTypes[name] });
        });
        const encoder = _TypedDataEncoder.from(types);
        types = encoder.types;
        const typesWithDomain = Object.assign({}, types);
        (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
        typesWithDomain.EIP712Domain = domainTypes;
        encoder.encode(value);
        return {
          types: typesWithDomain,
          domain: domainValues,
          primaryType: encoder.primaryType,
          message: encoder.visit(value, (type, value2) => {
            if (type.match(/^bytes(\d*)/)) {
              return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value2));
            }
            if (type.match(/^u?int/)) {
              return (0, index_js_4.getBigInt)(value2).toString();
            }
            switch (type) {
              case "address":
                return value2.toLowerCase();
              case "bool":
                return !!value2;
              case "string":
                (0, index_js_4.assertArgument)(typeof value2 === "string", "invalid string", "value", value2);
                return value2;
            }
            (0, index_js_4.assertArgument)(false, "unsupported type", "type", type);
          })
        };
      }
    };
    exports2.TypedDataEncoder = TypedDataEncoder;
    function verifyTypedData(domain, types, value, signature) {
      return (0, index_js_3.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);
    }
    exports2.verifyTypedData = verifyTypedData;
  }
});

// node_modules/ethers/lib.commonjs/hash/index.js
var require_hash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = exports2.TypedDataEncoder = exports2.solidityPackedSha256 = exports2.solidityPackedKeccak256 = exports2.solidityPacked = exports2.verifyMessage = exports2.hashMessage = exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = exports2.id = void 0;
    var id_js_1 = require_id();
    Object.defineProperty(exports2, "id", { enumerable: true, get: function() {
      return id_js_1.id;
    } });
    var namehash_js_1 = require_namehash();
    Object.defineProperty(exports2, "ensNormalize", { enumerable: true, get: function() {
      return namehash_js_1.ensNormalize;
    } });
    Object.defineProperty(exports2, "isValidName", { enumerable: true, get: function() {
      return namehash_js_1.isValidName;
    } });
    Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    Object.defineProperty(exports2, "dnsEncode", { enumerable: true, get: function() {
      return namehash_js_1.dnsEncode;
    } });
    var message_js_1 = require_message();
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return message_js_1.hashMessage;
    } });
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return message_js_1.verifyMessage;
    } });
    var solidity_js_1 = require_solidity();
    Object.defineProperty(exports2, "solidityPacked", { enumerable: true, get: function() {
      return solidity_js_1.solidityPacked;
    } });
    Object.defineProperty(exports2, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports2, "solidityPackedSha256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedSha256;
    } });
    var typed_data_js_1 = require_typed_data();
    Object.defineProperty(exports2, "TypedDataEncoder", { enumerable: true, get: function() {
      return typed_data_js_1.TypedDataEncoder;
    } });
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return typed_data_js_1.verifyTypedData;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/fragments.js
var require_fragments = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/fragments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StructFragment = exports2.FunctionFragment = exports2.FallbackFragment = exports2.ConstructorFragment = exports2.EventFragment = exports2.ErrorFragment = exports2.NamedFragment = exports2.Fragment = exports2.ParamType = void 0;
    var index_js_1 = require_utils();
    var index_js_2 = require_hash();
    function setify(items) {
      const result = /* @__PURE__ */ new Set();
      items.forEach((k) => result.add(k));
      return Object.freeze(result);
    }
    var _kwVisibDeploy = "external public payable override";
    var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
    var _kwVisib = "constant external internal payable private public pure view override";
    var KwVisib = setify(_kwVisib.split(" "));
    var _kwTypes = "constructor error event fallback function receive struct";
    var KwTypes = setify(_kwTypes.split(" "));
    var _kwModifiers = "calldata memory storage payable indexed";
    var KwModifiers = setify(_kwModifiers.split(" "));
    var _kwOther = "tuple returns";
    var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
    var Keywords = setify(_keywords.split(" "));
    var SimpleTokens = {
      "(": "OPEN_PAREN",
      ")": "CLOSE_PAREN",
      "[": "OPEN_BRACKET",
      "]": "CLOSE_BRACKET",
      ",": "COMMA",
      "@": "AT"
    };
    var regexWhitespacePrefix = new RegExp("^(\\s*)");
    var regexNumberPrefix = new RegExp("^([0-9]+)");
    var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
    var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
    var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
    var TokenString = class _TokenString {
      #offset;
      #tokens;
      get offset() {
        return this.#offset;
      }
      get length() {
        return this.#tokens.length - this.#offset;
      }
      constructor(tokens) {
        this.#offset = 0;
        this.#tokens = tokens.slice();
      }
      clone() {
        return new _TokenString(this.#tokens);
      }
      reset() {
        this.#offset = 0;
      }
      #subTokenString(from = 0, to = 0) {
        return new _TokenString(this.#tokens.slice(from, to).map((t) => {
          return Object.freeze(Object.assign({}, t, {
            match: t.match - from,
            linkBack: t.linkBack - from,
            linkNext: t.linkNext - from
          }));
        }));
      }
      // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
      popKeyword(allowed) {
        const top = this.peek();
        if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
          throw new Error(`expected keyword ${top.text}`);
        }
        return this.pop().text;
      }
      // Pops and returns the value of the next token if it is `type`; throws if out of tokens
      popType(type) {
        if (this.peek().type !== type) {
          const top = this.peek();
          throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
        }
        return this.pop().text;
      }
      // Pops and returns a "(" TOKENS ")"
      popParen() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = this.#subTokenString(this.#offset + 1, top.match + 1);
        this.#offset = top.match + 1;
        return result;
      }
      // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
      popParams() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = [];
        while (this.#offset < top.match - 1) {
          const link = this.peek().linkNext;
          result.push(this.#subTokenString(this.#offset + 1, link));
          this.#offset = link;
        }
        this.#offset = top.match + 1;
        return result;
      }
      // Returns the top Token, throwing if out of tokens
      peek() {
        if (this.#offset >= this.#tokens.length) {
          throw new Error("out-of-bounds");
        }
        return this.#tokens[this.#offset];
      }
      // Returns the next value, if it is a keyword in `allowed`
      peekKeyword(allowed) {
        const top = this.peekType("KEYWORD");
        return top != null && allowed.has(top) ? top : null;
      }
      // Returns the value of the next token if it is `type`
      peekType(type) {
        if (this.length === 0) {
          return null;
        }
        const top = this.peek();
        return top.type === type ? top.text : null;
      }
      // Returns the next token; throws if out of tokens
      pop() {
        const result = this.peek();
        this.#offset++;
        return result;
      }
      toString() {
        const tokens = [];
        for (let i = this.#offset; i < this.#tokens.length; i++) {
          const token = this.#tokens[i];
          tokens.push(`${token.type}:${token.text}`);
        }
        return `<TokenString ${tokens.join(" ")}>`;
      }
    };
    function lex(text) {
      const tokens = [];
      const throwError = (message) => {
        const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
        throw new Error(`invalid token ${token} at ${offset}: ${message}`);
      };
      let brackets = [];
      let commas = [];
      let offset = 0;
      while (offset < text.length) {
        let cur = text.substring(offset);
        let match = cur.match(regexWhitespacePrefix);
        if (match) {
          offset += match[1].length;
          cur = text.substring(offset);
        }
        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
        tokens.push(token);
        let type = SimpleTokens[cur[0]] || "";
        if (type) {
          token.type = type;
          token.text = cur[0];
          offset++;
          if (type === "OPEN_PAREN") {
            brackets.push(tokens.length - 1);
            commas.push(tokens.length - 1);
          } else if (type == "CLOSE_PAREN") {
            if (brackets.length === 0) {
              throwError("no matching open bracket");
            }
            token.match = brackets.pop();
            tokens[token.match].match = tokens.length - 1;
            token.depth--;
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
          } else if (type === "COMMA") {
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
            commas.push(tokens.length - 1);
          } else if (type === "OPEN_BRACKET") {
            token.type = "BRACKET";
          } else if (type === "CLOSE_BRACKET") {
            let suffix = tokens.pop().text;
            if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
              const value = tokens.pop().text;
              suffix = value + suffix;
              tokens[tokens.length - 1].value = (0, index_js_1.getNumber)(value);
            }
            if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
              throw new Error("missing opening bracket");
            }
            tokens[tokens.length - 1].text += suffix;
          }
          continue;
        }
        match = cur.match(regexIdPrefix);
        if (match) {
          token.text = match[1];
          offset += token.text.length;
          if (Keywords.has(token.text)) {
            token.type = "KEYWORD";
            continue;
          }
          if (token.text.match(regexType)) {
            token.type = "TYPE";
            continue;
          }
          token.type = "ID";
          continue;
        }
        match = cur.match(regexNumberPrefix);
        if (match) {
          token.text = match[1];
          token.type = "NUMBER";
          offset += token.text.length;
          continue;
        }
        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
      }
      return new TokenString(tokens.map((t) => Object.freeze(t)));
    }
    function allowSingle(set, allowed) {
      let included = [];
      for (const key in allowed.keys()) {
        if (set.has(key)) {
          included.push(key);
        }
      }
      if (included.length > 1) {
        throw new Error(`conflicting types: ${included.join(", ")}`);
      }
    }
    function consumeName(type, tokens) {
      if (tokens.peekKeyword(KwTypes)) {
        const keyword = tokens.pop().text;
        if (keyword !== type) {
          throw new Error(`expected ${type}, got ${keyword}`);
        }
      }
      return tokens.popType("ID");
    }
    function consumeKeywords(tokens, allowed) {
      const keywords = /* @__PURE__ */ new Set();
      while (true) {
        const keyword = tokens.peekType("KEYWORD");
        if (keyword == null || allowed && !allowed.has(keyword)) {
          break;
        }
        tokens.pop();
        if (keywords.has(keyword)) {
          throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
        }
        keywords.add(keyword);
      }
      return Object.freeze(keywords);
    }
    function consumeMutability(tokens) {
      let modifiers = consumeKeywords(tokens, KwVisib);
      allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
      allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
      if (modifiers.has("view")) {
        return "view";
      }
      if (modifiers.has("pure")) {
        return "pure";
      }
      if (modifiers.has("payable")) {
        return "payable";
      }
      if (modifiers.has("nonpayable")) {
        return "nonpayable";
      }
      if (modifiers.has("constant")) {
        return "view";
      }
      return "nonpayable";
    }
    function consumeParams(tokens, allowIndexed) {
      return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
    }
    function consumeGas(tokens) {
      if (tokens.peekType("AT")) {
        tokens.pop();
        if (tokens.peekType("NUMBER")) {
          return (0, index_js_1.getBigInt)(tokens.pop().text);
        }
        throw new Error("invalid gas");
      }
      return null;
    }
    function consumeEoi(tokens) {
      if (tokens.length) {
        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
      }
    }
    var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
    function verifyBasicType(type) {
      const match = type.match(regexType);
      (0, index_js_1.assertArgument)(match, "invalid type", "type", type);
      if (type === "uint") {
        return "uint256";
      }
      if (type === "int") {
        return "int256";
      }
      if (match[2]) {
        const length = parseInt(match[2]);
        (0, index_js_1.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type);
      } else if (match[3]) {
        const size = parseInt(match[3]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
      }
      return type;
    }
    var _guard = {};
    var internal = Symbol.for("_ethers_internal");
    var ParamTypeInternal = "_ParamTypeInternal";
    var ErrorFragmentInternal = "_ErrorInternal";
    var EventFragmentInternal = "_EventInternal";
    var ConstructorFragmentInternal = "_ConstructorInternal";
    var FallbackFragmentInternal = "_FallbackInternal";
    var FunctionFragmentInternal = "_FunctionInternal";
    var StructFragmentInternal = "_StructInternal";
    var ParamType = class _ParamType {
      /**
       *  The local name of the parameter (or ``""`` if unbound)
       */
      name;
      /**
       *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
       *  ``"uint256[3][]"``)
       */
      type;
      /**
       *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
       */
      baseType;
      /**
       *  True if the parameters is indexed.
       *
       *  For non-indexable types this is ``null``.
       */
      indexed;
      /**
       *  The components for the tuple.
       *
       *  For non-tuple types this is ``null``.
       */
      components;
      /**
       *  The array length, or ``-1`` for dynamic-lengthed arrays.
       *
       *  For non-array types this is ``null``.
       */
      arrayLength;
      /**
       *  The type of each child in the array.
       *
       *  For non-array types this is ``null``.
       */
      arrayChildren;
      /**
       *  @private
       */
      constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
        (0, index_js_1.assertPrivate)(guard, _guard, "ParamType");
        Object.defineProperty(this, internal, { value: ParamTypeInternal });
        if (components) {
          components = Object.freeze(components.slice());
        }
        if (baseType === "array") {
          if (arrayLength == null || arrayChildren == null) {
            throw new Error("");
          }
        } else if (arrayLength != null || arrayChildren != null) {
          throw new Error("");
        }
        if (baseType === "tuple") {
          if (components == null) {
            throw new Error("");
          }
        } else if (components != null) {
          throw new Error("");
        }
        (0, index_js_1.defineProperties)(this, {
          name,
          type,
          baseType,
          indexed,
          components,
          arrayLength,
          arrayChildren
        });
      }
      /**
       *  Return a string representation of this type.
       *
       *  For example,
       *
       *  ``sighash" => "(uint256,address)"``
       *
       *  ``"minimal" => "tuple(uint256,address) indexed"``
       *
       *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          const name = this.name || "";
          if (this.isArray()) {
            const result3 = JSON.parse(this.arrayChildren.format("json"));
            result3.name = name;
            result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
            return JSON.stringify(result3);
          }
          const result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.isTuple()) {
            result2.components = this.components.map((c) => JSON.parse(c.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.isArray()) {
          result += this.arrayChildren.format(format);
          result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        } else {
          if (this.isTuple()) {
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== "sighash") {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === "full" && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      /**
       *  Returns true if %%this%% is an Array type.
       *
       *  This provides a type gaurd ensuring that [[arrayChildren]]
       *  and [[arrayLength]] are non-null.
       */
      isArray() {
        return this.baseType === "array";
      }
      /**
       *  Returns true if %%this%% is a Tuple type.
       *
       *  This provides a type gaurd ensuring that [[components]]
       *  is non-null.
       */
      isTuple() {
        return this.baseType === "tuple";
      }
      /**
       *  Returns true if %%this%% is an Indexable type.
       *
       *  This provides a type gaurd ensuring that [[indexed]]
       *  is non-null.
       */
      isIndexable() {
        return this.indexed != null;
      }
      /**
       *  Walks the **ParamType** with %%value%%, calling %%process%%
       *  on each type, destructing the %%value%% recursively.
       */
      walk(value, process2) {
        if (this.isArray()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid array value");
          }
          if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v) => _this.arrayChildren.walk(v, process2));
        }
        if (this.isTuple()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid tuple value");
          }
          if (value.length !== this.components.length) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v, i) => _this.components[i].walk(v, process2));
        }
        return process2(this.type, value);
      }
      #walkAsync(promises, value, process2, setValue) {
        if (this.isArray()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid array value");
          }
          if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
            throw new Error("array is wrong length");
          }
          const childType = this.arrayChildren;
          const result2 = value.slice();
          result2.forEach((value2, index) => {
            childType.#walkAsync(promises, value2, process2, (value3) => {
              result2[index] = value3;
            });
          });
          setValue(result2);
          return;
        }
        if (this.isTuple()) {
          const components = this.components;
          let result2;
          if (Array.isArray(value)) {
            result2 = value.slice();
          } else {
            if (value == null || typeof value !== "object") {
              throw new Error("invalid tuple value");
            }
            result2 = components.map((param) => {
              if (!param.name) {
                throw new Error("cannot use object value with unnamed components");
              }
              if (!(param.name in value)) {
                throw new Error(`missing value for component ${param.name}`);
              }
              return value[param.name];
            });
          }
          if (result2.length !== this.components.length) {
            throw new Error("array is wrong length");
          }
          result2.forEach((value2, index) => {
            components[index].#walkAsync(promises, value2, process2, (value3) => {
              result2[index] = value3;
            });
          });
          setValue(result2);
          return;
        }
        const result = process2(this.type, value);
        if (result.then) {
          promises.push(async function() {
            setValue(await result);
          }());
        } else {
          setValue(result);
        }
      }
      /**
       *  Walks the **ParamType** with %%value%%, asynchronously calling
       *  %%process%% on each type, destructing the %%value%% recursively.
       *
       *  This can be used to resolve ENS names by walking and resolving each
       *  ``"address"`` type.
       */
      async walkAsync(value, process2) {
        const promises = [];
        const result = [value];
        this.#walkAsync(promises, value, process2, (value2) => {
          result[0] = value2;
        });
        if (promises.length) {
          await Promise.all(promises);
        }
        return result[0];
      }
      /**
       *  Creates a new **ParamType** for %%obj%%.
       *
       *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
       *  otherwise the ``indexed`` keyword will throw an error.
       */
      static from(obj, allowIndexed) {
        if (_ParamType.isParamType(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ParamType.from(lex(obj), allowIndexed);
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid param type", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          let type2 = "", baseType = "";
          let comps = null;
          if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
            baseType = "tuple";
            comps = obj.popParams().map((t) => _ParamType.from(t));
            type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
          } else {
            type2 = verifyBasicType(obj.popType("TYPE"));
            baseType = type2;
          }
          let arrayChildren = null;
          let arrayLength = null;
          while (obj.length && obj.peekType("BRACKET")) {
            const bracket = obj.pop();
            arrayChildren = new _ParamType(_guard, "", type2, baseType, null, comps, arrayLength, arrayChildren);
            arrayLength = bracket.value;
            type2 += bracket.text;
            baseType = "array";
            comps = null;
          }
          let indexed2 = null;
          const keywords = consumeKeywords(obj, KwModifiers);
          if (keywords.has("indexed")) {
            if (!allowIndexed) {
              throw new Error("");
            }
            indexed2 = true;
          }
          const name2 = obj.peekType("ID") ? obj.pop().text : "";
          if (obj.length) {
            throw new Error("leftover tokens");
          }
          return new _ParamType(_guard, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
        }
        const name = obj.name;
        (0, index_js_1.assertArgument)(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
        let indexed = obj.indexed;
        if (indexed != null) {
          (0, index_js_1.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
          indexed = !!indexed;
        }
        let type = obj.type;
        let arrayMatch = type.match(regexArrayType);
        if (arrayMatch) {
          const arrayLength = parseInt(arrayMatch[2] || "-1");
          const arrayChildren = _ParamType.from({
            type: arrayMatch[1],
            components: obj.components
          });
          return new _ParamType(_guard, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
        }
        if (type === "tuple" || type.startsWith(
          "tuple("
          /* fix: ) */
        ) || type.startsWith(
          "("
          /* fix: ) */
        )) {
          const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
          const tuple = new _ParamType(_guard, name || "", type, "tuple", indexed, comps, null, null);
          return tuple;
        }
        type = verifyBasicType(obj.type);
        return new _ParamType(_guard, name || "", type, type, indexed, null, null, null);
      }
      /**
       *  Returns true if %%value%% is a **ParamType**.
       */
      static isParamType(value) {
        return value && value[internal] === ParamTypeInternal;
      }
    };
    exports2.ParamType = ParamType;
    var Fragment = class _Fragment {
      /**
       *  The type of the fragment.
       */
      type;
      /**
       *  The inputs for the fragment.
       */
      inputs;
      /**
       *  @private
       */
      constructor(guard, type, inputs) {
        (0, index_js_1.assertPrivate)(guard, _guard, "Fragment");
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { type, inputs });
      }
      /**
       *  Creates a new **Fragment** for %%obj%%, wich can be any supported
       *  ABI frgament type.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            _Fragment.from(JSON.parse(obj));
          } catch (e) {
          }
          return _Fragment.from(lex(obj));
        }
        if (obj instanceof TokenString) {
          const type = obj.peekKeyword(KwTypes);
          switch (type) {
            case "constructor":
              return ConstructorFragment.from(obj);
            case "error":
              return ErrorFragment.from(obj);
            case "event":
              return EventFragment.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment.from(obj);
            case "function":
              return FunctionFragment.from(obj);
            case "struct":
              return StructFragment.from(obj);
          }
        } else if (typeof obj === "object") {
          switch (obj.type) {
            case "constructor":
              return ConstructorFragment.from(obj);
            case "error":
              return ErrorFragment.from(obj);
            case "event":
              return EventFragment.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment.from(obj);
            case "function":
              return FunctionFragment.from(obj);
            case "struct":
              return StructFragment.from(obj);
          }
          (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
            operation: "Fragment.from"
          });
        }
        (0, index_js_1.assertArgument)(false, "unsupported frgament object", "obj", obj);
      }
      /**
       *  Returns true if %%value%% is a [[ConstructorFragment]].
       */
      static isConstructor(value) {
        return ConstructorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[ErrorFragment]].
       */
      static isError(value) {
        return ErrorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[EventFragment]].
       */
      static isEvent(value) {
        return EventFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[FunctionFragment]].
       */
      static isFunction(value) {
        return FunctionFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[StructFragment]].
       */
      static isStruct(value) {
        return StructFragment.isFragment(value);
      }
    };
    exports2.Fragment = Fragment;
    var NamedFragment = class extends Fragment {
      /**
       *  The name of the fragment.
       */
      name;
      /**
       *  @private
       */
      constructor(guard, type, name, inputs) {
        super(guard, type, inputs);
        (0, index_js_1.assertArgument)(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { name });
      }
    };
    exports2.NamedFragment = NamedFragment;
    function joinParams(format, params) {
      return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
    }
    var ErrorFragment = class _ErrorFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "error", name, inputs);
        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
      }
      /**
       *  The Custom Error selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this fragment as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("error");
        }
        result.push(this.name + joinParams(format, this.inputs));
        return result.join(" ");
      }
      /**
       *  Returns a new **ErrorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ErrorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          return _ErrorFragment.from(lex(obj));
        } else if (obj instanceof TokenString) {
          const name = consumeName("error", obj);
          const inputs = consumeParams(obj);
          consumeEoi(obj);
          return new _ErrorFragment(_guard, name, inputs);
        }
        return new _ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **ErrorFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === ErrorFragmentInternal;
      }
    };
    exports2.ErrorFragment = ErrorFragment;
    var EventFragment = class _EventFragment extends NamedFragment {
      /**
       *  Whether this event is anonymous.
       */
      anonymous;
      /**
       *  @private
       */
      constructor(guard, name, inputs, anonymous) {
        super(guard, "event", name, inputs);
        Object.defineProperty(this, internal, { value: EventFragmentInternal });
        (0, index_js_1.defineProperties)(this, { anonymous });
      }
      /**
       *  The Event topic hash.
       */
      get topicHash() {
        return (0, index_js_2.id)(this.format("sighash"));
      }
      /**
       *  Returns a string representation of this event as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("event");
        }
        result.push(this.name + joinParams(format, this.inputs));
        if (format !== "sighash" && this.anonymous) {
          result.push("anonymous");
        }
        return result.join(" ");
      }
      /**
       *  Return the topic hash for an event with %%name%% and %%params%%.
       */
      static getTopicHash(name, params) {
        params = (params || []).map((p) => ParamType.from(p));
        const fragment = new _EventFragment(_guard, name, params, false);
        return fragment.topicHash;
      }
      /**
       *  Returns a new **EventFragment** for %%obj%%.
       */
      static from(obj) {
        if (_EventFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _EventFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid event fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("event", obj);
          const inputs = consumeParams(obj, true);
          const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
          consumeEoi(obj);
          return new _EventFragment(_guard, name, inputs, anonymous);
        }
        return new _EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **EventFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === EventFragmentInternal;
      }
    };
    exports2.EventFragment = EventFragment;
    var ConstructorFragment = class _ConstructorFragment extends Fragment {
      /**
       *  Whether the constructor can receive an endowment.
       */
      payable;
      /**
       *  The recommended gas limit for deployment or ``null``.
       */
      gas;
      /**
       *  @private
       */
      constructor(guard, type, inputs, payable, gas) {
        super(guard, type, inputs);
        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
        (0, index_js_1.defineProperties)(this, { payable, gas });
      }
      /**
       *  Returns a string representation of this constructor as %%format%%.
       */
      format(format) {
        (0, index_js_1.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
        if (format === "json") {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.payable ? "payable" : "undefined",
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [`constructor${joinParams(format, this.inputs)}`];
        if (this.payable) {
          result.push("payable");
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
        return result.join(" ");
      }
      /**
       *  Returns a new **ConstructorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ConstructorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ConstructorFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          consumeKeywords(obj, setify(["constructor"]));
          const inputs = consumeParams(obj);
          const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
          const gas = consumeGas(obj);
          consumeEoi(obj);
          return new _ConstructorFragment(_guard, "constructor", inputs, payable, gas);
        }
        return new _ConstructorFragment(_guard, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **ConstructorFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === ConstructorFragmentInternal;
      }
    };
    exports2.ConstructorFragment = ConstructorFragment;
    var FallbackFragment = class _FallbackFragment extends Fragment {
      /**
       *  If the function can be sent value during invocation.
       */
      payable;
      constructor(guard, inputs, payable) {
        super(guard, "fallback", inputs);
        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
        (0, index_js_1.defineProperties)(this, { payable });
      }
      /**
       *  Returns a string representation of this fallback as %%format%%.
       */
      format(format) {
        const type = this.inputs.length === 0 ? "receive" : "fallback";
        if (format === "json") {
          const stateMutability = this.payable ? "payable" : "nonpayable";
          return JSON.stringify({ type, stateMutability });
        }
        return `${type}()${this.payable ? " payable" : ""}`;
      }
      /**
       *  Returns a new **FallbackFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FallbackFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FallbackFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid fallback fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const errorObj = obj.toString();
          const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
          (0, index_js_1.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
          const type = obj.popKeyword(setify(["fallback", "receive"]));
          if (type === "receive") {
            const inputs2 = consumeParams(obj);
            (0, index_js_1.assertArgument)(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
            consumeKeywords(obj, setify(["payable"]));
            consumeEoi(obj);
            return new _FallbackFragment(_guard, [], true);
          }
          let inputs = consumeParams(obj);
          if (inputs.length) {
            (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
          } else {
            inputs = [ParamType.from("bytes")];
          }
          const mutability = consumeMutability(obj);
          (0, index_js_1.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
          if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
            const outputs = consumeParams(obj);
            (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
          }
          consumeEoi(obj);
          return new _FallbackFragment(_guard, inputs, mutability === "payable");
        }
        if (obj.type === "receive") {
          return new _FallbackFragment(_guard, [], true);
        }
        if (obj.type === "fallback") {
          const inputs = [ParamType.from("bytes")];
          const payable = obj.stateMutability === "payable";
          return new _FallbackFragment(_guard, inputs, payable);
        }
        (0, index_js_1.assertArgument)(false, "invalid fallback description", "obj", obj);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FallbackFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === FallbackFragmentInternal;
      }
    };
    exports2.FallbackFragment = FallbackFragment;
    var FunctionFragment = class _FunctionFragment extends NamedFragment {
      /**
       *  If the function is constant (e.g. ``pure`` or ``view`` functions).
       */
      constant;
      /**
       *  The returned types for the result of calling this function.
       */
      outputs;
      /**
       *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
       *  or ``pure``)
       */
      stateMutability;
      /**
       *  If the function can be sent value during invocation.
       */
      payable;
      /**
       *  The recommended gas limit to send when calling this function.
       */
      gas;
      /**
       *  @private
       */
      constructor(guard, name, stateMutability, inputs, outputs, gas) {
        super(guard, "function", name, inputs);
        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
        outputs = Object.freeze(outputs.slice());
        const constant = stateMutability === "view" || stateMutability === "pure";
        const payable = stateMutability === "payable";
        (0, index_js_1.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });
      }
      /**
       *  The Function selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this function as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
            outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("function");
        }
        result.push(this.name + joinParams(format, this.inputs));
        if (format !== "sighash") {
          if (this.stateMutability !== "nonpayable") {
            result.push(this.stateMutability);
          }
          if (this.outputs && this.outputs.length) {
            result.push("returns");
            result.push(joinParams(format, this.outputs));
          }
          if (this.gas != null) {
            result.push(`@${this.gas.toString()}`);
          }
        }
        return result.join(" ");
      }
      /**
       *  Return the selector for a function with %%name%% and %%params%%.
       */
      static getSelector(name, params) {
        params = (params || []).map((p) => ParamType.from(p));
        const fragment = new _FunctionFragment(_guard, name, "view", params, [], null);
        return fragment.selector;
      }
      /**
       *  Returns a new **FunctionFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FunctionFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FunctionFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid function fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("function", obj);
          const inputs = consumeParams(obj);
          const mutability = consumeMutability(obj);
          let outputs = [];
          if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
            outputs = consumeParams(obj);
          }
          const gas = consumeGas(obj);
          consumeEoi(obj);
          return new _FunctionFragment(_guard, name, mutability, inputs, outputs, gas);
        }
        let stateMutability = obj.stateMutability;
        if (stateMutability == null) {
          stateMutability = "payable";
          if (typeof obj.constant === "boolean") {
            stateMutability = "view";
            if (!obj.constant) {
              stateMutability = "payable";
              if (typeof obj.payable === "boolean" && !obj.payable) {
                stateMutability = "nonpayable";
              }
            }
          } else if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
        return new _FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FunctionFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === FunctionFragmentInternal;
      }
    };
    exports2.FunctionFragment = FunctionFragment;
    var StructFragment = class _StructFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "struct", name, inputs);
        Object.defineProperty(this, internal, { value: StructFragmentInternal });
      }
      /**
       *  Returns a string representation of this struct as %%format%%.
       */
      format() {
        throw new Error("@TODO");
      }
      /**
       *  Returns a new **StructFragment** for %%obj%%.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            return _StructFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid struct fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("struct", obj);
          const inputs = consumeParams(obj);
          consumeEoi(obj);
          return new _StructFragment(_guard, name, inputs);
        }
        return new _StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      // @TODO: fix this return type
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **StructFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === StructFragmentInternal;
      }
    };
    exports2.StructFragment = StructFragment;
  }
});

// node_modules/ethers/lib.commonjs/abi/abi-coder.js
var require_abi_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/abi-coder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbiCoder = void 0;
    var index_js_1 = require_utils();
    var abstract_coder_js_1 = require_abstract_coder();
    var address_js_1 = require_address3();
    var array_js_1 = require_array();
    var boolean_js_1 = require_boolean();
    var bytes_js_1 = require_bytes();
    var fixed_bytes_js_1 = require_fixed_bytes();
    var null_js_1 = require_null();
    var number_js_1 = require_number();
    var string_js_1 = require_string();
    var tuple_js_1 = require_tuple();
    var fragments_js_1 = require_fragments();
    var index_js_2 = require_address2();
    var index_js_3 = require_utils();
    var PanicReasons = /* @__PURE__ */ new Map();
    PanicReasons.set(0, "GENERIC_PANIC");
    PanicReasons.set(1, "ASSERT_FALSE");
    PanicReasons.set(17, "OVERFLOW");
    PanicReasons.set(18, "DIVIDE_BY_ZERO");
    PanicReasons.set(33, "ENUM_RANGE_ERROR");
    PanicReasons.set(34, "BAD_STORAGE_DATA");
    PanicReasons.set(49, "STACK_UNDERFLOW");
    PanicReasons.set(50, "ARRAY_RANGE_ERROR");
    PanicReasons.set(65, "OUT_OF_MEMORY");
    PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var defaultCoder = null;
    var defaultMaxInflation = 1024;
    function getBuiltinCallException(action, tx, data, abiCoder) {
      let message = "missing revert data";
      let reason = null;
      const invocation = null;
      let revert = null;
      if (data) {
        message = "execution reverted";
        const bytes = (0, index_js_3.getBytes)(data);
        data = (0, index_js_3.hexlify)(data);
        if (bytes.length === 0) {
          message += " (no data present; likely require(false) occurred";
          reason = "require(false)";
        } else if (bytes.length % 32 !== 4) {
          message += " (could not decode reason; invalid data length)";
        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x08c379a0") {
          try {
            reason = abiCoder.decode(["string"], bytes.slice(4))[0];
            revert = {
              signature: "Error(string)",
              name: "Error",
              args: [reason]
            };
            message += `: ${JSON.stringify(reason)}`;
          } catch (error) {
            message += " (could not decode reason; invalid string data)";
          }
        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x4e487b71") {
          try {
            const code = Number(abiCoder.decode(["uint256"], bytes.slice(4))[0]);
            revert = {
              signature: "Panic(uint256)",
              name: "Panic",
              args: [code]
            };
            reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
            message += `: ${reason}`;
          } catch (error) {
            message += " (could not decode panic code)";
          }
        } else {
          message += " (unknown custom error)";
        }
      }
      const transaction = {
        to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,
        data: tx.data || "0x"
      };
      if (tx.from) {
        transaction.from = (0, index_js_2.getAddress)(tx.from);
      }
      return (0, index_js_3.makeError)(message, "CALL_EXCEPTION", {
        action,
        data,
        reason,
        transaction,
        invocation,
        revert
      });
    }
    var AbiCoder = class _AbiCoder {
      #getCoder(param) {
        if (param.isArray()) {
          return new array_js_1.ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
        }
        if (param.isTuple()) {
          return new tuple_js_1.TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
        }
        switch (param.baseType) {
          case "address":
            return new address_js_1.AddressCoder(param.name);
          case "bool":
            return new boolean_js_1.BooleanCoder(param.name);
          case "string":
            return new string_js_1.StringCoder(param.name);
          case "bytes":
            return new bytes_js_1.BytesCoder(param.name);
          case "":
            return new null_js_1.NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
          return new number_js_1.NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          (0, index_js_1.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
          return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
        }
        (0, index_js_1.assertArgument)(false, "invalid type", "type", param.type);
      }
      /**
       *  Get the default values for the given %%types%%.
       *
       *  For example, a ``uint`` is by default ``0`` and ``bool``
       *  is by default ``false``.
       */
      getDefaultValue(types) {
        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      /**
       *  Encode the %%values%% as the %%types%% into ABI data.
       *
       *  @returns DataHexstring
       */
      encode(types, values) {
        (0, index_js_1.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        const writer = new abstract_coder_js_1.Writer();
        coder.encode(writer, values);
        return writer.data;
      }
      /**
       *  Decode the ABI %%data%% as the %%types%% into values.
       *
       *  If %%loose%% decoding is enabled, then strict padding is
       *  not enforced. Some older versions of Solidity incorrectly
       *  padded event data emitted from ``external`` functions.
       */
      decode(types, data, loose) {
        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.decode(new abstract_coder_js_1.Reader(data, loose, defaultMaxInflation));
      }
      static _setDefaultMaxInflation(value) {
        (0, index_js_1.assertArgument)(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
        defaultMaxInflation = value;
      }
      /**
       *  Returns the shared singleton instance of a default [[AbiCoder]].
       *
       *  On the first call, the instance is created internally.
       */
      static defaultAbiCoder() {
        if (defaultCoder == null) {
          defaultCoder = new _AbiCoder();
        }
        return defaultCoder;
      }
      /**
       *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
       *  result %%data%% for the [[CallExceptionAction]] %%action%% against
       *  the Transaction %%tx%%.
       */
      static getBuiltinCallException(action, tx, data) {
        return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
      }
    };
    exports2.AbiCoder = AbiCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/bytes32.js
var require_bytes32 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/bytes32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeBytes32String = exports2.encodeBytes32String = void 0;
    var index_js_1 = require_utils();
    function encodeBytes32String(text) {
      const bytes = (0, index_js_1.toUtf8Bytes)(text);
      if (bytes.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
      }
      return (0, index_js_1.zeroPadBytes)(bytes, 32);
    }
    exports2.encodeBytes32String = encodeBytes32String;
    function decodeBytes32String(_bytes) {
      const data = (0, index_js_1.getBytes)(_bytes, "bytes");
      if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
      }
      if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
      }
      let length = 31;
      while (data[length - 1] === 0) {
        length--;
      }
      return (0, index_js_1.toUtf8String)(data.slice(0, length));
    }
    exports2.decodeBytes32String = decodeBytes32String;
  }
});

// node_modules/ethers/lib.commonjs/abi/interface.js
var require_interface = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Interface = exports2.Indexed = exports2.ErrorDescription = exports2.TransactionDescription = exports2.LogDescription = exports2.Result = exports2.checkResultErrors = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_hash();
    var index_js_3 = require_utils();
    var abi_coder_js_1 = require_abi_coder();
    var abstract_coder_js_1 = require_abstract_coder();
    Object.defineProperty(exports2, "checkResultErrors", { enumerable: true, get: function() {
      return abstract_coder_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports2, "Result", { enumerable: true, get: function() {
      return abstract_coder_js_1.Result;
    } });
    var fragments_js_1 = require_fragments();
    var typed_js_1 = require_typed();
    var LogDescription = class {
      /**
       *  The matching fragment for the ``topic0``.
       */
      fragment;
      /**
       *  The name of the Event.
       */
      name;
      /**
       *  The full Event signature.
       */
      signature;
      /**
       *  The topic hash for the Event.
       */
      topic;
      /**
       *  The arguments passed into the Event with ``emit``.
       */
      args;
      /**
       *  @_ignore:
       */
      constructor(fragment, topic, args) {
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          signature,
          topic,
          args
        });
      }
    };
    exports2.LogDescription = LogDescription;
    var TransactionDescription = class {
      /**
       *  The matching fragment from the transaction ``data``.
       */
      fragment;
      /**
       *  The name of the Function from the transaction ``data``.
       */
      name;
      /**
       *  The arguments passed to the Function from the transaction ``data``.
       */
      args;
      /**
       *  The full Function signature from the transaction ``data``.
       */
      signature;
      /**
       *  The selector for the Function from the transaction ``data``.
       */
      selector;
      /**
       *  The ``value`` (in wei) from the transaction.
       */
      value;
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args, value) {
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature,
          selector,
          value
        });
      }
    };
    exports2.TransactionDescription = TransactionDescription;
    var ErrorDescription = class {
      /**
       *  The matching fragment.
       */
      fragment;
      /**
       *  The name of the Error.
       */
      name;
      /**
       *  The arguments passed to the Error with ``revert``.
       */
      args;
      /**
       *  The full Error signature.
       */
      signature;
      /**
       *  The selector for the Error.
       */
      selector;
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args) {
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature,
          selector
        });
      }
    };
    exports2.ErrorDescription = ErrorDescription;
    var Indexed = class {
      /**
       *  The ``keccak256`` of the value logged.
       */
      hash;
      /**
       *  @_ignore:
       */
      _isIndexed;
      /**
       *  Returns ``true`` if %%value%% is an **Indexed**.
       *
       *  This provides a Type Guard for property access.
       */
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
      /**
       *  @_ignore:
       */
      constructor(hash) {
        (0, index_js_3.defineProperties)(this, { hash, _isIndexed: true });
      }
    };
    exports2.Indexed = Indexed;
    var PanicReasons = {
      "0": "generic panic",
      "1": "assert(false)",
      "17": "arithmetic overflow",
      "18": "division or modulo by zero",
      "33": "enum overflow",
      "34": "invalid encoded storage byte array accessed",
      "49": "out-of-bounds array access; popping on an empty array",
      "50": "out-of-bounds access of an array or bytesN",
      "65": "out of memory",
      "81": "uninitialized function"
    };
    var BuiltinErrors = {
      "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: ["string"],
        reason: (message) => {
          return `reverted with reason string ${JSON.stringify(message)}`;
        }
      },
      "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: ["uint256"],
        reason: (code) => {
          let reason = "unknown panic code";
          if (code >= 0 && code <= 255 && PanicReasons[code.toString()]) {
            reason = PanicReasons[code.toString()];
          }
          return `reverted with panic code 0x${code.toString(16)} (${reason})`;
        }
      }
    };
    var Interface = class _Interface {
      /**
       *  All the Contract ABI members (i.e. methods, events, errors, etc).
       */
      fragments;
      /**
       *  The Contract constructor.
       */
      deploy;
      /**
       *  The Fallback method, if any.
       */
      fallback;
      /**
       *  If receiving ether is supported.
       */
      receive;
      #errors;
      #events;
      #functions;
      //    #structs: Map<string, StructFragment>;
      #abiCoder;
      /**
       *  Create a new Interface for the %%fragments%%.
       */
      constructor(fragments) {
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        this.#functions = /* @__PURE__ */ new Map();
        this.#errors = /* @__PURE__ */ new Map();
        this.#events = /* @__PURE__ */ new Map();
        const frags = [];
        for (const a of abi) {
          try {
            frags.push(fragments_js_1.Fragment.from(a));
          } catch (error) {
            console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
          }
        }
        (0, index_js_3.defineProperties)(this, {
          fragments: Object.freeze(frags)
        });
        let fallback = null;
        let receive = false;
        this.#abiCoder = this.getAbiCoder();
        this.fragments.forEach((fragment, index) => {
          let bucket;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                console.log("duplicate definition - constructor");
                return;
              }
              (0, index_js_3.defineProperties)(this, { deploy: fragment });
              return;
            case "fallback":
              if (fragment.inputs.length === 0) {
                receive = true;
              } else {
                (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                fallback = fragment;
                receive = fallback.payable;
              }
              return;
            case "function":
              bucket = this.#functions;
              break;
            case "event":
              bucket = this.#events;
              break;
            case "error":
              bucket = this.#errors;
              break;
            default:
              return;
          }
          const signature = fragment.format();
          if (bucket.has(signature)) {
            return;
          }
          bucket.set(signature, fragment);
        });
        if (!this.deploy) {
          (0, index_js_3.defineProperties)(this, {
            deploy: fragments_js_1.ConstructorFragment.from("constructor()")
          });
        }
        (0, index_js_3.defineProperties)(this, { fallback, receive });
      }
      /**
       *  Returns the entire Human-Readable ABI, as an array of
       *  signatures, optionally as %%minimal%% strings, which
       *  removes parameter names and unneceesary spaces.
       */
      format(minimal) {
        const format = minimal ? "minimal" : "full";
        const abi = this.fragments.map((f) => f.format(format));
        return abi;
      }
      /**
       *  Return the JSON-encoded ABI. This is the format Solidiy
       *  returns.
       */
      formatJson() {
        const abi = this.fragments.map((f) => f.format("json"));
        return JSON.stringify(abi.map((j) => JSON.parse(j)));
      }
      /**
       *  The ABI coder that will be used to encode and decode binary
       *  data.
       */
      getAbiCoder() {
        return abi_coder_js_1.AbiCoder.defaultAbiCoder();
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      #getFunction(key, values, forceUnique) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          for (const fragment of this.#functions.values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of this.#functions) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (values) {
            const lastValue = values.length > 0 ? values[values.length - 1] : null;
            let valueLength = values.length;
            let allowOptions = true;
            if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === "overrides") {
              allowOptions = false;
              valueLength--;
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs.length;
              if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
                matching.splice(i, 1);
              }
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs;
              for (let j = 0; j < values.length; j++) {
                if (!typed_js_1.Typed.isTyped(values[j])) {
                  continue;
                }
                if (j >= inputs.length) {
                  if (values[j].type === "overrides") {
                    continue;
                  }
                  matching.splice(i, 1);
                  break;
                }
                if (values[j].type !== inputs[j].baseType) {
                  matching.splice(i, 1);
                  break;
                }
              }
            }
          }
          if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
            const lastArg = values[values.length - 1];
            if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
              matching.splice(0, 1);
            }
          }
          if (matching.length === 0) {
            return null;
          }
          if (matching.length > 1 && forceUnique) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
          }
          return matching[0];
        }
        const result = this.#functions.get(fragments_js_1.FunctionFragment.from(key).format());
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Get the function name for %%key%%, which may be a function selector,
       *  function name or function signature that belongs to the ABI.
       */
      getFunctionName(key) {
        const fragment = this.#getFunction(key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching function", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (a function selector, function name or
       *  function signature) is present in the ABI.
       *
       *  In the case of a function name, the name may be ambiguous, so
       *  accessing the [[FunctionFragment]] may require refinement.
       */
      hasFunction(key) {
        return !!this.#getFunction(key, null, false);
      }
      /**
       *  Get the [[FunctionFragment]] for %%key%%, which may be a function
       *  selector, function name or function signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple functions match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single function in
       *  the ABI, this will throw.
       */
      getFunction(key, values) {
        return this.#getFunction(key, values || null, true);
      }
      /**
       *  Iterate over all functions, calling %%callback%%, sorted by their name.
       */
      forEachFunction(callback) {
        const names = Array.from(this.#functions.keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(this.#functions.get(name), i);
        }
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      #getEvent(key, values, forceUnique) {
        if ((0, index_js_3.isHexString)(key)) {
          const eventTopic = key.toLowerCase();
          for (const fragment of this.#events.values()) {
            if (eventTopic === fragment.topicHash) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of this.#events) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (values) {
            for (let i = matching.length - 1; i >= 0; i--) {
              if (matching[i].inputs.length < values.length) {
                matching.splice(i, 1);
              }
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs;
              for (let j = 0; j < values.length; j++) {
                if (!typed_js_1.Typed.isTyped(values[j])) {
                  continue;
                }
                if (values[j].type !== inputs[j].baseType) {
                  matching.splice(i, 1);
                  break;
                }
              }
            }
          }
          if (matching.length === 0) {
            return null;
          }
          if (matching.length > 1 && forceUnique) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
          }
          return matching[0];
        }
        const result = this.#events.get(fragments_js_1.EventFragment.from(key).format());
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Get the event name for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       */
      getEventName(key) {
        const fragment = this.#getEvent(key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching event", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (an event topic hash, event name or
       *  event signature) is present in the ABI.
       *
       *  In the case of an event name, the name may be ambiguous, so
       *  accessing the [[EventFragment]] may require refinement.
       */
      hasEvent(key) {
        return !!this.#getEvent(key, null, false);
      }
      /**
       *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple events match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single event in
       *  the ABI, this will throw.
       */
      getEvent(key, values) {
        return this.#getEvent(key, values || null, true);
      }
      /**
       *  Iterate over all events, calling %%callback%%, sorted by their name.
       */
      forEachEvent(callback) {
        const names = Array.from(this.#events.keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(this.#events.get(name), i);
        }
      }
      /**
       *  Get the [[ErrorFragment]] for %%key%%, which may be an error
       *  selector, error name or error signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple errors match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single error in
       *  the ABI, this will throw.
       */
      getError(key, values) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          if (BuiltinErrors[selector]) {
            return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);
          }
          for (const fragment of this.#errors.values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of this.#errors) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (matching.length === 0) {
            if (key === "Error") {
              return fragments_js_1.ErrorFragment.from("error Error(string)");
            }
            if (key === "Panic") {
              return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
            }
            return null;
          } else if (matching.length > 1) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
          }
          return matching[0];
        }
        key = fragments_js_1.ErrorFragment.from(key).format();
        if (key === "Error(string)") {
          return fragments_js_1.ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic(uint256)") {
          return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
        }
        const result = this.#errors.get(key);
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Iterate over all errors, calling %%callback%%, sorted by their name.
       */
      forEachError(callback) {
        const names = Array.from(this.#errors.keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(this.#errors.get(name), i);
        }
      }
      // Get the 4-byte selector used by Solidity to identify a function
      /*
      getSelector(fragment: ErrorFragment | FunctionFragment): string {
          if (typeof(fragment) === "string") {
              const matches: Array<Fragment> = [ ];
      
              try { matches.push(this.getFunction(fragment)); } catch (error) { }
              try { matches.push(this.getError(<string>fragment)); } catch (_) { }
      
              if (matches.length === 0) {
                  logger.throwArgumentError("unknown fragment", "key", fragment);
              } else if (matches.length > 1) {
                  logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
              }
      
              fragment = matches[0];
          }
      
          return dataSlice(id(fragment.format()), 0, 4);
      }
          */
      // Get the 32-byte topic hash used by Solidity to identify an event
      /*
      getEventTopic(fragment: EventFragment): string {
          //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
          return id(fragment.format());
      }
      */
      _decodeParams(params, data) {
        return this.#abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this.#abiCoder.encode(params, values);
      }
      /**
       *  Encodes a ``tx.data`` object for deploying the Contract with
       *  the %%values%% as the constructor arguments.
       */
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified error (see [[getError]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          const f = this.getError(fragment);
          (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the transaction revert data for a call result that
       *  reverted from the the Contract with the sepcified %%error%%
       *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getError(fragment);
          (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the %%data%% from a transaction ``tx.data`` for
       *  the function specified (see [[getFunction]] for valid values
       *  for %%fragment%%).
       *
       *  Most developers should prefer the [[parseTransaction]] method
       *  instead, which will automatically detect the fragment.
       */
      decodeFunctionData(fragment, data) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the ``tx.data`` for a transaction that calls the function
       *  specified (see [[getFunction]] for valid values for %%fragment%%) with
       *  the %%values%%.
       */
      encodeFunctionData(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeFunctionResult(fragment, data) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        let message = "invalid length for result data";
        const bytes = (0, index_js_3.getBytesCopy)(data);
        if (bytes.length % 32 === 0) {
          try {
            return this.#abiCoder.decode(fragment.outputs, bytes);
          } catch (error) {
            message = "could not decode result data";
          }
        }
        (0, index_js_3.assert)(false, message, "BAD_DATA", {
          value: (0, index_js_3.hexlify)(bytes),
          info: { method: fragment.name, signature: fragment.format() }
        });
      }
      makeError(_data, tx) {
        const data = (0, index_js_3.getBytes)(_data, "data");
        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException("call", tx, data);
        const customPrefix = "execution reverted (unknown custom error)";
        if (error.message.startsWith(customPrefix)) {
          const selector = (0, index_js_3.hexlify)(data.slice(0, 4));
          const ef = this.getError(selector);
          if (ef) {
            try {
              const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
              error.revert = {
                name: ef.name,
                signature: ef.format(),
                args
              };
              error.reason = error.revert.signature;
              error.message = `execution reverted: ${error.reason}`;
            } catch (e) {
              error.message = `execution reverted (coult not decode custom error)`;
            }
          }
        }
        const parsed = this.parseTransaction(tx);
        if (parsed) {
          error.invocation = {
            method: parsed.name,
            signature: parsed.signature,
            args: parsed.args
          };
        }
        return error;
      }
      /**
       *  Encodes the result data (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values
       *  for %%fragment%%) with %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeFunctionResult(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));
      }
      /*
          spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
              const promises: Array<Promise<>> = [ ];
              const process = function(type: ParamType, value: any): any {
                  if (type.baseType === "array") {
                      return descend(type.child
                  }
                  if (type. === "address") {
                  }
              };
      
              const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                  if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                  
              };
      
              const result: Array<any> = [ ];
              values.forEach((value, index) => {
                  if (value == null) {
                      topics.push(null);
                  } else if (param.baseType === "array" || param.baseType === "tuple") {
                      logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                  } else if (Array.isArray(value)) {
                      topics.push(value.map((value) => encodeTopic(param, value)));
                  } else {
                      topics.push(encodeTopic(param, value));
                  }
              });
          }
      */
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
        const topics = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return (0, index_js_2.id)(value);
          } else if (param.type === "bytes") {
            return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          } else if (param.type.match(/^u?int/)) {
            value = (0, index_js_3.toBeHex)(value);
          } else if (param.type.match(/^bytes/)) {
            value = (0, index_js_3.zeroPadBytes)(value, 32);
          } else if (param.type === "address") {
            this.#abiCoder.encode(["address"], [value]);
          }
          return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);
        };
        values.forEach((value, index) => {
          const param = fragment.inputs[index];
          if (!param.indexed) {
            (0, index_js_3.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            (0, index_js_3.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
        fragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push((0, index_js_2.id)(value));
            } else if (param.type === "bytes") {
              topics.push((0, index_js_1.keccak256)(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this.#abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this.#abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(fragment, data, topics) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        if (topics != null && !fragment.anonymous) {
          const eventTopic = fragment.topicHash;
          (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
          topics = topics.slice(1);
        }
        const indexed = [];
        const nonIndexed = [];
        const dynamic = [];
        fragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(fragments_js_1.ParamType.from({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, (0, index_js_3.concat)(topics)) : null;
        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
        const values = [];
        const keys = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        fragment.inputs.forEach((param, index) => {
          let value = null;
          if (param.indexed) {
            if (resultIndexed == null) {
              value = new Indexed(null);
            } else if (dynamic[index]) {
              value = new Indexed(resultIndexed[indexedIndex++]);
            } else {
              try {
                value = resultIndexed[indexedIndex++];
              } catch (error) {
                value = error;
              }
            }
          } else {
            try {
              value = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              value = error;
            }
          }
          values.push(value);
          keys.push(param.name || null);
        });
        return abstract_coder_js_1.Result.fromItems(values, keys);
      }
      /**
       *  Parses a transaction, finding the matching function and extracts
       *  the parameter values along with other useful function details.
       *
       *  If the matching function cannot be found, return null.
       */
      parseTransaction(tx) {
        const data = (0, index_js_3.getBytes)(tx.data, "tx.data");
        const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
        const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));
        if (!fragment) {
          return null;
        }
        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
        return new TransactionDescription(fragment, fragment.selector, args, value);
      }
      parseCallResult(data) {
        throw new Error("@TODO");
      }
      /**
       *  Parses a receipt log, finding the matching event and extracts
       *  the parameter values along with other useful event details.
       *
       *  If the matching event cannot be found, returns null.
       */
      parseLog(log) {
        const fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
      }
      /**
       *  Parses a revert data, finding the matching error and extracts
       *  the parameter values along with other useful error details.
       *
       *  If the matching error cannot be found, returns null.
       */
      parseError(data) {
        const hexData = (0, index_js_3.hexlify)(data);
        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));
        if (!fragment) {
          return null;
        }
        const args = this.#abiCoder.decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));
        return new ErrorDescription(fragment, fragment.selector, args);
      }
      /**
       *  Creates a new [[Interface]] from the ABI %%value%%.
       *
       *  The %%value%% may be provided as an existing [[Interface]] object,
       *  a JSON-encoded ABI or any Human-Readable ABI format.
       */
      static from(value) {
        if (value instanceof _Interface) {
          return value;
        }
        if (typeof value === "string") {
          return new _Interface(JSON.parse(value));
        }
        if (typeof value.formatJson === "function") {
          return new _Interface(value.formatJson());
        }
        if (typeof value.format === "function") {
          return new _Interface(value.format("json"));
        }
        return new _Interface(value);
      }
    };
    exports2.Interface = Interface;
  }
});

// node_modules/ethers/lib.commonjs/abi/index.js
var require_abi = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Typed = exports2.Result = exports2.TransactionDescription = exports2.LogDescription = exports2.ErrorDescription = exports2.Interface = exports2.Indexed = exports2.checkResultErrors = exports2.StructFragment = exports2.ParamType = exports2.NamedFragment = exports2.FunctionFragment = exports2.Fragment = exports2.FallbackFragment = exports2.EventFragment = exports2.ErrorFragment = exports2.ConstructorFragment = exports2.encodeBytes32String = exports2.decodeBytes32String = exports2.AbiCoder = void 0;
    var abi_coder_js_1 = require_abi_coder();
    Object.defineProperty(exports2, "AbiCoder", { enumerable: true, get: function() {
      return abi_coder_js_1.AbiCoder;
    } });
    var bytes32_js_1 = require_bytes32();
    Object.defineProperty(exports2, "decodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports2, "encodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.encodeBytes32String;
    } });
    var fragments_js_1 = require_fragments();
    Object.defineProperty(exports2, "ConstructorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports2, "ErrorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports2, "EventFragment", { enumerable: true, get: function() {
      return fragments_js_1.EventFragment;
    } });
    Object.defineProperty(exports2, "FallbackFragment", { enumerable: true, get: function() {
      return fragments_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports2, "Fragment", { enumerable: true, get: function() {
      return fragments_js_1.Fragment;
    } });
    Object.defineProperty(exports2, "FunctionFragment", { enumerable: true, get: function() {
      return fragments_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports2, "NamedFragment", { enumerable: true, get: function() {
      return fragments_js_1.NamedFragment;
    } });
    Object.defineProperty(exports2, "ParamType", { enumerable: true, get: function() {
      return fragments_js_1.ParamType;
    } });
    Object.defineProperty(exports2, "StructFragment", { enumerable: true, get: function() {
      return fragments_js_1.StructFragment;
    } });
    var interface_js_1 = require_interface();
    Object.defineProperty(exports2, "checkResultErrors", { enumerable: true, get: function() {
      return interface_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports2, "Indexed", { enumerable: true, get: function() {
      return interface_js_1.Indexed;
    } });
    Object.defineProperty(exports2, "Interface", { enumerable: true, get: function() {
      return interface_js_1.Interface;
    } });
    Object.defineProperty(exports2, "ErrorDescription", { enumerable: true, get: function() {
      return interface_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports2, "LogDescription", { enumerable: true, get: function() {
      return interface_js_1.LogDescription;
    } });
    Object.defineProperty(exports2, "TransactionDescription", { enumerable: true, get: function() {
      return interface_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports2, "Result", { enumerable: true, get: function() {
      return interface_js_1.Result;
    } });
    var typed_js_1 = require_typed();
    Object.defineProperty(exports2, "Typed", { enumerable: true, get: function() {
      return typed_js_1.Typed;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/provider.js
var require_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransactionResponse = exports2.TransactionReceipt = exports2.Log = exports2.Block = exports2.copyRequest = exports2.FeeData = void 0;
    var index_js_1 = require_utils();
    var index_js_2 = require_transaction2();
    var BN_0 = BigInt(0);
    function getValue(value) {
      if (value == null) {
        return null;
      }
      return value;
    }
    function toJson(value) {
      if (value == null) {
        return null;
      }
      return value.toString();
    }
    var FeeData = class {
      /**
       *  The gas price for legacy networks.
       */
      gasPrice;
      /**
       *  The maximum fee to pay per gas.
       *
       *  The base fee per gas is defined by the network and based on
       *  congestion, increasing the cost during times of heavy load
       *  and lowering when less busy.
       *
       *  The actual fee per gas will be the base fee for the block
       *  and the priority fee, up to the max fee per gas.
       *
       *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
       */
      maxFeePerGas;
      /**
       *  The additional amout to pay per gas to encourage a validator
       *  to include the transaction.
       *
       *  The purpose of this is to compensate the validator for the
       *  adjusted risk for including a given transaction.
       *
       *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
       */
      maxPriorityFeePerGas;
      /**
       *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
       *  %%maxPriorityFeePerGas%%.
       */
      constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
        (0, index_js_1.defineProperties)(this, {
          gasPrice: getValue(gasPrice),
          maxFeePerGas: getValue(maxFeePerGas),
          maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
        });
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
        return {
          _type: "FeeData",
          gasPrice: toJson(gasPrice),
          maxFeePerGas: toJson(maxFeePerGas),
          maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
        };
      }
    };
    exports2.FeeData = FeeData;
    function copyRequest(req) {
      const result = {};
      if (req.to) {
        result.to = req.to;
      }
      if (req.from) {
        result.from = req.from;
      }
      if (req.data) {
        result.data = (0, index_js_1.hexlify)(req.data);
      }
      const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
      for (const key of bigIntKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);
      }
      const numberKeys = "type,nonce".split(/,/);
      for (const key of numberKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);
      }
      if (req.accessList) {
        result.accessList = (0, index_js_2.accessListify)(req.accessList);
      }
      if ("blockTag" in req) {
        result.blockTag = req.blockTag;
      }
      if ("enableCcipRead" in req) {
        result.enableCcipRead = !!req.enableCcipRead;
      }
      if ("customData" in req) {
        result.customData = req.customData;
      }
      if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
        result.blobVersionedHashes = req.blobVersionedHashes.slice();
      }
      if ("kzg" in req) {
        result.kzg = req.kzg;
      }
      if ("blobs" in req && req.blobs) {
        result.blobs = req.blobs.map((b) => {
          if ((0, index_js_1.isBytesLike)(b)) {
            return (0, index_js_1.hexlify)(b);
          }
          return Object.assign({}, b);
        });
      }
      return result;
    }
    exports2.copyRequest = copyRequest;
    var Block = class {
      /**
       *  The provider connected to the block used to fetch additional details
       *  if necessary.
       */
      provider;
      /**
       *  The block number, sometimes called the block height. This is a
       *  sequential number that is one higher than the parent block.
       */
      number;
      /**
       *  The block hash.
       *
       *  This hash includes all properties, so can be safely used to identify
       *  an exact set of block properties.
       */
      hash;
      /**
       *  The timestamp for this block, which is the number of seconds since
       *  epoch that this block was included.
       */
      timestamp;
      /**
       *  The block hash of the parent block.
       */
      parentHash;
      /**
       *  The hash tree root of the parent beacon block for the given
       *  execution block. See [[link-eip-4788]].
       */
      parentBeaconBlockRoot;
      /**
       *  The nonce.
       *
       *  On legacy networks, this is the random number inserted which
       *  permitted the difficulty target to be reached.
       */
      nonce;
      /**
       *  The difficulty target.
       *
       *  On legacy networks, this is the proof-of-work target required
       *  for a block to meet the protocol rules to be included.
       *
       *  On modern networks, this is a random number arrived at using
       *  randao.  @TODO: Find links?
       */
      difficulty;
      /**
       *  The total gas limit for this block.
       */
      gasLimit;
      /**
       *  The total gas used in this block.
       */
      gasUsed;
      /**
       *  The root hash for the global state after applying changes
       *  in this block.
       */
      stateRoot;
      /**
       *  The hash of the transaction receipts trie.
       */
      receiptsRoot;
      /**
       *  The total amount of blob gas consumed by the transactions
       *  within the block. See [[link-eip-4844]].
       */
      blobGasUsed;
      /**
       *  The running total of blob gas consumed in excess of the
       *  target, prior to the block. See [[link-eip-4844]].
       */
      excessBlobGas;
      /**
       *  The miner coinbase address, wihch receives any subsidies for
       *  including this block.
       */
      miner;
      /**
       *  The latest RANDAO mix of the post beacon state of
       *  the previous block.
       */
      prevRandao;
      /**
       *  Any extra data the validator wished to include.
       */
      extraData;
      /**
       *  The base fee per gas that all transactions in this block were
       *  charged.
       *
       *  This adjusts after each block, depending on how congested the network
       *  is.
       */
      baseFeePerGas;
      #transactions;
      /**
       *  Create a new **Block** object.
       *
       *  This should generally not be necessary as the unless implementing a
       *  low-level library.
       */
      constructor(block, provider) {
        this.#transactions = block.transactions.map((tx) => {
          if (typeof tx !== "string") {
            return new TransactionResponse(tx, provider);
          }
          return tx;
        });
        (0, index_js_1.defineProperties)(this, {
          provider,
          hash: getValue(block.hash),
          number: block.number,
          timestamp: block.timestamp,
          parentHash: block.parentHash,
          parentBeaconBlockRoot: block.parentBeaconBlockRoot,
          nonce: block.nonce,
          difficulty: block.difficulty,
          gasLimit: block.gasLimit,
          gasUsed: block.gasUsed,
          blobGasUsed: block.blobGasUsed,
          excessBlobGas: block.excessBlobGas,
          miner: block.miner,
          prevRandao: getValue(block.prevRandao),
          extraData: block.extraData,
          baseFeePerGas: getValue(block.baseFeePerGas),
          stateRoot: block.stateRoot,
          receiptsRoot: block.receiptsRoot
        });
      }
      /**
       *  Returns the list of transaction hashes, in the order
       *  they were executed within the block.
       */
      get transactions() {
        return this.#transactions.map((tx) => {
          if (typeof tx === "string") {
            return tx;
          }
          return tx.hash;
        });
      }
      /**
       *  Returns the complete transactions, in the order they
       *  were executed within the block.
       *
       *  This is only available for blocks which prefetched
       *  transactions, by passing ``true`` to %%prefetchTxs%%
       *  into [[Provider-getBlock]].
       */
      get prefetchedTransactions() {
        const txs = this.#transactions.slice();
        if (txs.length === 0) {
          return [];
        }
        (0, index_js_1.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
          operation: "transactionResponses()"
        });
        return txs;
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
        return {
          _type: "Block",
          baseFeePerGas: toJson(baseFeePerGas),
          difficulty: toJson(difficulty),
          extraData,
          gasLimit: toJson(gasLimit),
          gasUsed: toJson(gasUsed),
          blobGasUsed: toJson(this.blobGasUsed),
          excessBlobGas: toJson(this.excessBlobGas),
          hash,
          miner,
          prevRandao,
          nonce,
          number,
          parentHash,
          timestamp,
          parentBeaconBlockRoot,
          stateRoot,
          receiptsRoot,
          transactions
        };
      }
      [Symbol.iterator]() {
        let index = 0;
        const txs = this.transactions;
        return {
          next: () => {
            if (index < this.length) {
              return {
                value: txs[index++],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The number of transactions in this block.
       */
      get length() {
        return this.#transactions.length;
      }
      /**
       *  The [[link-js-date]] this block was included at.
       */
      get date() {
        if (this.timestamp == null) {
          return null;
        }
        return new Date(this.timestamp * 1e3);
      }
      /**
       *  Get the transaction at %%indexe%% within this block.
       */
      async getTransaction(indexOrHash) {
        let tx = void 0;
        if (typeof indexOrHash === "number") {
          tx = this.#transactions[indexOrHash];
        } else {
          const hash = indexOrHash.toLowerCase();
          for (const v of this.#transactions) {
            if (typeof v === "string") {
              if (v !== hash) {
                continue;
              }
              tx = v;
              break;
            } else {
              if (v.hash !== hash) {
                continue;
              }
              tx = v;
              break;
            }
          }
        }
        if (tx == null) {
          throw new Error("no such tx");
        }
        if (typeof tx === "string") {
          return await this.provider.getTransaction(tx);
        } else {
          return tx;
        }
      }
      /**
       *  If a **Block** was fetched with a request to include the transactions
       *  this will allow synchronous access to those transactions.
       *
       *  If the transactions were not prefetched, this will throw.
       */
      getPrefetchedTransaction(indexOrHash) {
        const txs = this.prefetchedTransactions;
        if (typeof indexOrHash === "number") {
          return txs[indexOrHash];
        }
        indexOrHash = indexOrHash.toLowerCase();
        for (const tx of txs) {
          if (tx.hash === indexOrHash) {
            return tx;
          }
        }
        (0, index_js_1.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
      }
      /**
       *  Returns true if this block been mined. This provides a type guard
       *  for all properties on a [[MinedBlock]].
       */
      isMined() {
        return !!this.hash;
      }
      /**
       *  Returns true if this block is an [[link-eip-2930]] block.
       */
      isLondon() {
        return !!this.baseFeePerGas;
      }
      /**
       *  @_ignore:
       */
      orphanedEvent() {
        if (!this.isMined()) {
          throw new Error("");
        }
        return createOrphanedBlockFilter(this);
      }
    };
    exports2.Block = Block;
    var Log = class {
      /**
       *  The provider connected to the log used to fetch additional details
       *  if necessary.
       */
      provider;
      /**
       *  The transaction hash of the transaction this log occurred in. Use the
       *  [[Log-getTransaction]] to get the [[TransactionResponse]].
       */
      transactionHash;
      /**
       *  The block hash of the block this log occurred in. Use the
       *  [[Log-getBlock]] to get the [[Block]].
       */
      blockHash;
      /**
       *  The block number of the block this log occurred in. It is preferred
       *  to use the [[Block-hash]] when fetching the related [[Block]],
       *  since in the case of an orphaned block, the block at that height may
       *  have changed.
       */
      blockNumber;
      /**
       *  If the **Log** represents a block that was removed due to an orphaned
       *  block, this will be true.
       *
       *  This can only happen within an orphan event listener.
       */
      removed;
      /**
       *  The address of the contract that emitted this log.
       */
      address;
      /**
       *  The data included in this log when it was emitted.
       */
      data;
      /**
       *  The indexed topics included in this log when it was emitted.
       *
       *  All topics are included in the bloom filters, so they can be
       *  efficiently filtered using the [[Provider-getLogs]] method.
       */
      topics;
      /**
       *  The index within the block this log occurred at. This is generally
       *  not useful to developers, but can be used with the various roots
       *  to proof inclusion within a block.
       */
      index;
      /**
       *  The index within the transaction of this log.
       */
      transactionIndex;
      /**
       *  @_ignore:
       */
      constructor(log, provider) {
        this.provider = provider;
        const topics = Object.freeze(log.topics.slice());
        (0, index_js_1.defineProperties)(this, {
          transactionHash: log.transactionHash,
          blockHash: log.blockHash,
          blockNumber: log.blockNumber,
          removed: log.removed,
          address: log.address,
          data: log.data,
          topics,
          index: log.index,
          transactionIndex: log.transactionIndex
        });
      }
      /**
       *  Returns a JSON-compatible object.
       */
      toJSON() {
        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
        return {
          _type: "log",
          address,
          blockHash,
          blockNumber,
          data,
          index,
          removed,
          topics,
          transactionHash,
          transactionIndex
        };
      }
      /**
       *  Returns the block that this log occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        (0, index_js_1.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
        return block;
      }
      /**
       *  Returns the transaction that this log occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.transactionHash);
        (0, index_js_1.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
        return tx;
      }
      /**
       *  Returns the transaction receipt fot the transaction that this
       *  log occurred in.
       */
      async getTransactionReceipt() {
        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
        (0, index_js_1.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
        return receipt;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedLogFilter(this);
      }
    };
    exports2.Log = Log;
    var TransactionReceipt = class {
      /**
       *  The provider connected to the log used to fetch additional details
       *  if necessary.
       */
      provider;
      /**
       *  The address the transaction was sent to.
       */
      to;
      /**
       *  The sender of the transaction.
       */
      from;
      /**
       *  The address of the contract if the transaction was directly
       *  responsible for deploying one.
       *
       *  This is non-null **only** if the ``to`` is empty and the ``data``
       *  was successfully executed as initcode.
       */
      contractAddress;
      /**
       *  The transaction hash.
       */
      hash;
      /**
       *  The index of this transaction within the block transactions.
       */
      index;
      /**
       *  The block hash of the [[Block]] this transaction was included in.
       */
      blockHash;
      /**
       *  The block number of the [[Block]] this transaction was included in.
       */
      blockNumber;
      /**
       *  The bloom filter bytes that represent all logs that occurred within
       *  this transaction. This is generally not useful for most developers,
       *  but can be used to validate the included logs.
       */
      logsBloom;
      /**
       *  The actual amount of gas used by this transaction.
       *
       *  When creating a transaction, the amount of gas that will be used can
       *  only be approximated, but the sender must pay the gas fee for the
       *  entire gas limit. After the transaction, the difference is refunded.
       */
      gasUsed;
      /**
       *  The gas used for BLObs. See [[link-eip-4844]].
       */
      blobGasUsed;
      /**
       *  The amount of gas used by all transactions within the block for this
       *  and all transactions with a lower ``index``.
       *
       *  This is generally not useful for developers but can be used to
       *  validate certain aspects of execution.
       */
      cumulativeGasUsed;
      /**
       *  The actual gas price used during execution.
       *
       *  Due to the complexity of [[link-eip-1559]] this value can only
       *  be caluclated after the transaction has been mined, snce the base
       *  fee is protocol-enforced.
       */
      gasPrice;
      /**
       *  The price paid per BLOB in gas. See [[link-eip-4844]].
       */
      blobGasPrice;
      /**
       *  The [[link-eip-2718]] transaction type.
       */
      type;
      //readonly byzantium!: boolean;
      /**
       *  The status of this transaction, indicating success (i.e. ``1``) or
       *  a revert (i.e. ``0``).
       *
       *  This is available in post-byzantium blocks, but some backends may
       *  backfill this value.
       */
      status;
      /**
       *  The root hash of this transaction.
       *
       *  This is no present and was only included in pre-byzantium blocks, but
       *  could be used to validate certain parts of the receipt.
       */
      root;
      #logs;
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        this.#logs = Object.freeze(tx.logs.map((log) => {
          return new Log(log, provider);
        }));
        let gasPrice = BN_0;
        if (tx.effectiveGasPrice != null) {
          gasPrice = tx.effectiveGasPrice;
        } else if (tx.gasPrice != null) {
          gasPrice = tx.gasPrice;
        }
        (0, index_js_1.defineProperties)(this, {
          provider,
          to: tx.to,
          from: tx.from,
          contractAddress: tx.contractAddress,
          hash: tx.hash,
          index: tx.index,
          blockHash: tx.blockHash,
          blockNumber: tx.blockNumber,
          logsBloom: tx.logsBloom,
          gasUsed: tx.gasUsed,
          cumulativeGasUsed: tx.cumulativeGasUsed,
          blobGasUsed: tx.blobGasUsed,
          gasPrice,
          blobGasPrice: tx.blobGasPrice,
          type: tx.type,
          //byzantium: tx.byzantium,
          status: tx.status,
          root: tx.root
        });
      }
      /**
       *  The logs for this transaction.
       */
      get logs() {
        return this.#logs;
      }
      /**
       *  Returns a JSON-compatible representation.
       */
      toJSON() {
        const {
          to,
          from,
          contractAddress,
          hash,
          index,
          blockHash,
          blockNumber,
          logsBloom,
          logs,
          //byzantium, 
          status,
          root
        } = this;
        return {
          _type: "TransactionReceipt",
          blockHash,
          blockNumber,
          //byzantium, 
          contractAddress,
          cumulativeGasUsed: toJson(this.cumulativeGasUsed),
          from,
          gasPrice: toJson(this.gasPrice),
          blobGasUsed: toJson(this.blobGasUsed),
          blobGasPrice: toJson(this.blobGasPrice),
          gasUsed: toJson(this.gasUsed),
          hash,
          index,
          logs,
          logsBloom,
          root,
          status,
          to
        };
      }
      /**
       *  @_ignore:
       */
      get length() {
        return this.logs.length;
      }
      [Symbol.iterator]() {
        let index = 0;
        return {
          next: () => {
            if (index < this.length) {
              return { value: this.logs[index++], done: false };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The total fee for this transaction, in wei.
       */
      get fee() {
        return this.gasUsed * this.gasPrice;
      }
      /**
       *  Resolves to the block this transaction occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to the transaction this transaction occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.hash);
        if (tx == null) {
          throw new Error("TODO");
        }
        return tx;
      }
      /**
       *  Resolves to the return value of the execution of this transaction.
       *
       *  Support for this feature is limited, as it requires an archive node
       *  with the ``debug_`` or ``trace_`` API enabled.
       */
      async getResult() {
        return await this.provider.getTransactionResult(this.hash);
      }
      /**
       *  Resolves to the number of confirmations this transaction has.
       */
      async confirmations() {
        return await this.provider.getBlockNumber() - this.blockNumber + 1;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedTransactionFilter(this);
      }
      /**
       *  @_ignore:
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
        return createReorderedTransactionFilter(this, other);
      }
    };
    exports2.TransactionReceipt = TransactionReceipt;
    var TransactionResponse = class _TransactionResponse {
      /**
       *  The provider this is connected to, which will influence how its
       *  methods will resolve its async inspection methods.
       */
      provider;
      /**
       *  The block number of the block that this transaction was included in.
       *
       *  This is ``null`` for pending transactions.
       */
      blockNumber;
      /**
       *  The blockHash of the block that this transaction was included in.
       *
       *  This is ``null`` for pending transactions.
       */
      blockHash;
      /**
       *  The index within the block that this transaction resides at.
       */
      index;
      /**
       *  The transaction hash.
       */
      hash;
      /**
       *  The [[link-eip-2718]] transaction envelope type. This is
       *  ``0`` for legacy transactions types.
       */
      type;
      /**
       *  The receiver of this transaction.
       *
       *  If ``null``, then the transaction is an initcode transaction.
       *  This means the result of executing the [[data]] will be deployed
       *  as a new contract on chain (assuming it does not revert) and the
       *  address may be computed using [[getCreateAddress]].
       */
      to;
      /**
       *  The sender of this transaction. It is implicitly computed
       *  from the transaction pre-image hash (as the digest) and the
       *  [[signature]] using ecrecover.
       */
      from;
      /**
       *  The nonce, which is used to prevent replay attacks and offer
       *  a method to ensure transactions from a given sender are explicitly
       *  ordered.
       *
       *  When sending a transaction, this must be equal to the number of
       *  transactions ever sent by [[from]].
       */
      nonce;
      /**
       *  The maximum units of gas this transaction can consume. If execution
       *  exceeds this, the entries transaction is reverted and the sender
       *  is charged for the full amount, despite not state changes being made.
       */
      gasLimit;
      /**
       *  The gas price can have various values, depending on the network.
       *
       *  In modern networks, for transactions that are included this is
       *  the //effective gas price// (the fee per gas that was actually
       *  charged), while for transactions that have not been included yet
       *  is the [[maxFeePerGas]].
       *
       *  For legacy transactions, or transactions on legacy networks, this
       *  is the fee that will be charged per unit of gas the transaction
       *  consumes.
       */
      gasPrice;
      /**
       *  The maximum priority fee (per unit of gas) to allow a
       *  validator to charge the sender. This is inclusive of the
       *  [[maxFeeFeePerGas]].
       */
      maxPriorityFeePerGas;
      /**
       *  The maximum fee (per unit of gas) to allow this transaction
       *  to charge the sender.
       */
      maxFeePerGas;
      /**
       *  The [[link-eip-4844]] max fee per BLOb gas.
       */
      maxFeePerBlobGas;
      /**
       *  The data.
       */
      data;
      /**
       *  The value, in wei. Use [[formatEther]] to format this value
       *  as ether.
       */
      value;
      /**
       *  The chain ID.
       */
      chainId;
      /**
       *  The signature.
       */
      signature;
      /**
       *  The [[link-eip-2930]] access list for transaction types that
       *  support it, otherwise ``null``.
       */
      accessList;
      /**
       *  The [[link-eip-4844]] BLOb versioned hashes.
       */
      blobVersionedHashes;
      #startBlock;
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        this.provider = provider;
        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
        this.blockHash = tx.blockHash != null ? tx.blockHash : null;
        this.hash = tx.hash;
        this.index = tx.index;
        this.type = tx.type;
        this.from = tx.from;
        this.to = tx.to || null;
        this.gasLimit = tx.gasLimit;
        this.nonce = tx.nonce;
        this.data = tx.data;
        this.value = tx.value;
        this.gasPrice = tx.gasPrice;
        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
        this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
        this.chainId = tx.chainId;
        this.signature = tx.signature;
        this.accessList = tx.accessList != null ? tx.accessList : null;
        this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
        this.#startBlock = -1;
      }
      /**
       *  Returns a JSON-compatible representation of this transaction.
       */
      toJSON() {
        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
        return {
          _type: "TransactionResponse",
          accessList,
          blockNumber,
          blockHash,
          blobVersionedHashes,
          chainId: toJson(this.chainId),
          data,
          from,
          gasLimit: toJson(this.gasLimit),
          gasPrice: toJson(this.gasPrice),
          hash,
          maxFeePerGas: toJson(this.maxFeePerGas),
          maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
          maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
          nonce,
          signature,
          to,
          index,
          type,
          value: toJson(this.value)
        };
      }
      /**
       *  Resolves to the Block that this transaction was included in.
       *
       *  This will return null if the transaction has not been included yet.
       */
      async getBlock() {
        let blockNumber = this.blockNumber;
        if (blockNumber == null) {
          const tx = await this.getTransaction();
          if (tx) {
            blockNumber = tx.blockNumber;
          }
        }
        if (blockNumber == null) {
          return null;
        }
        const block = this.provider.getBlock(blockNumber);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to this transaction being re-requested from the
       *  provider. This can be used if you have an unmined transaction
       *  and wish to get an up-to-date populated instance.
       */
      async getTransaction() {
        return this.provider.getTransaction(this.hash);
      }
      /**
       *  Resolve to the number of confirmations this transaction has.
       */
      async confirmations() {
        if (this.blockNumber == null) {
          const { tx, blockNumber: blockNumber2 } = await (0, index_js_1.resolveProperties)({
            tx: this.getTransaction(),
            blockNumber: this.provider.getBlockNumber()
          });
          if (tx == null || tx.blockNumber == null) {
            return 0;
          }
          return blockNumber2 - tx.blockNumber + 1;
        }
        const blockNumber = await this.provider.getBlockNumber();
        return blockNumber - this.blockNumber + 1;
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(_confirms, _timeout) {
        const confirms = _confirms == null ? 1 : _confirms;
        const timeout = _timeout == null ? 0 : _timeout;
        let startBlock = this.#startBlock;
        let nextScan = -1;
        let stopScanning = startBlock === -1 ? true : false;
        const checkReplacement = async () => {
          if (stopScanning) {
            return null;
          }
          const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({
            blockNumber: this.provider.getBlockNumber(),
            nonce: this.provider.getTransactionCount(this.from)
          });
          if (nonce < this.nonce) {
            startBlock = blockNumber;
            return;
          }
          if (stopScanning) {
            return null;
          }
          const mined = await this.getTransaction();
          if (mined && mined.blockNumber != null) {
            return;
          }
          if (nextScan === -1) {
            nextScan = startBlock - 3;
            if (nextScan < this.#startBlock) {
              nextScan = this.#startBlock;
            }
          }
          while (nextScan <= blockNumber) {
            if (stopScanning) {
              return null;
            }
            const block = await this.provider.getBlock(nextScan, true);
            if (block == null) {
              return;
            }
            for (const hash of block) {
              if (hash === this.hash) {
                return;
              }
            }
            for (let i = 0; i < block.length; i++) {
              const tx = await block.getTransaction(i);
              if (tx.from === this.from && tx.nonce === this.nonce) {
                if (stopScanning) {
                  return null;
                }
                const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
                if (receipt2 == null) {
                  return;
                }
                if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                  return;
                }
                let reason = "replaced";
                if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                  reason = "repriced";
                } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0) {
                  reason = "cancelled";
                }
                (0, index_js_1.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                  cancelled: reason === "replaced" || reason === "cancelled",
                  reason,
                  replacement: tx.replaceableTransaction(startBlock),
                  hash: tx.hash,
                  receipt: receipt2
                });
              }
            }
            nextScan++;
          }
          return;
        };
        const checkReceipt = (receipt2) => {
          if (receipt2 == null || receipt2.status !== 0) {
            return receipt2;
          }
          (0, index_js_1.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
            action: "sendTransaction",
            data: null,
            reason: null,
            invocation: null,
            revert: null,
            transaction: {
              to: receipt2.to,
              from: receipt2.from,
              data: ""
              // @TODO: in v7, split out sendTransaction properties
            },
            receipt: receipt2
          });
        };
        const receipt = await this.provider.getTransactionReceipt(this.hash);
        if (confirms === 0) {
          return checkReceipt(receipt);
        }
        if (receipt) {
          if (await receipt.confirmations() >= confirms) {
            return checkReceipt(receipt);
          }
        } else {
          await checkReplacement();
          if (confirms === 0) {
            return null;
          }
        }
        const waiter = new Promise((resolve2, reject2) => {
          const cancellers = [];
          const cancel = () => {
            cancellers.forEach((c) => c());
          };
          cancellers.push(() => {
            stopScanning = true;
          });
          if (timeout > 0) {
            const timer = setTimeout(() => {
              cancel();
              reject2((0, index_js_1.makeError)("wait for transaction timeout", "TIMEOUT"));
            }, timeout);
            cancellers.push(() => {
              clearTimeout(timer);
            });
          }
          const txListener = async (receipt2) => {
            if (await receipt2.confirmations() >= confirms) {
              cancel();
              try {
                resolve2(checkReceipt(receipt2));
              } catch (error) {
                reject2(error);
              }
            }
          };
          cancellers.push(() => {
            this.provider.off(this.hash, txListener);
          });
          this.provider.on(this.hash, txListener);
          if (startBlock >= 0) {
            const replaceListener = async () => {
              try {
                await checkReplacement();
              } catch (error) {
                if ((0, index_js_1.isError)(error, "TRANSACTION_REPLACED")) {
                  cancel();
                  reject2(error);
                  return;
                }
              }
              if (!stopScanning) {
                this.provider.once("block", replaceListener);
              }
            };
            cancellers.push(() => {
              this.provider.off("block", replaceListener);
            });
            this.provider.once("block", replaceListener);
          }
        });
        return await waiter;
      }
      /**
       *  Returns ``true`` if this transaction has been included.
       *
       *  This is effective only as of the time the TransactionResponse
       *  was instantiated. To get up-to-date information, use
       *  [[getTransaction]].
       *
       *  This provides a Type Guard that this transaction will have
       *  non-null property values for properties that are null for
       *  unmined transactions.
       */
      isMined() {
        return this.blockHash != null;
      }
      /**
       *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
       *  transaction.
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
       *  transaction. See [[link-eip-2070]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if the transaction is a London (i.e. ``type == 2``)
       *  transaction. See [[link-eip-1559]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
       *  transaction. See [[link-eip-4844]].
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that evict this transaction.
       */
      removedEvent() {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createRemovedTransactionFilter(this);
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that re-order this event against %%other%%.
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createReorderedTransactionFilter(this, other);
      }
      /**
       *  Returns a new TransactionResponse instance which has the ability to
       *  detect (and throw an error) if the transaction is replaced, which
       *  will begin scanning at %%startBlock%%.
       *
       *  This should generally not be used by developers and is intended
       *  primarily for internal use. Setting an incorrect %%startBlock%% can
       *  have devastating performance consequences if used incorrectly.
       */
      replaceableTransaction(startBlock) {
        (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
        const tx = new _TransactionResponse(this, this.provider);
        tx.#startBlock = startBlock;
        return tx;
      }
    };
    exports2.TransactionResponse = TransactionResponse;
    function createOrphanedBlockFilter(block) {
      return { orphan: "drop-block", hash: block.hash, number: block.number };
    }
    function createReorderedTransactionFilter(tx, other) {
      return { orphan: "reorder-transaction", tx, other };
    }
    function createRemovedTransactionFilter(tx) {
      return { orphan: "drop-transaction", tx };
    }
    function createRemovedLogFilter(log) {
      return { orphan: "drop-log", log: {
        transactionHash: log.transactionHash,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        address: log.address,
        data: log.data,
        topics: Object.freeze(log.topics.slice()),
        index: log.index
      } };
    }
  }
});

// node_modules/ethers/lib.commonjs/contract/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/wrappers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContractEventPayload = exports2.ContractUnknownEventPayload = exports2.ContractTransactionResponse = exports2.ContractTransactionReceipt = exports2.UndecodedEventLog = exports2.EventLog = void 0;
    var provider_js_1 = require_provider();
    var index_js_1 = require_utils();
    var EventLog = class extends provider_js_1.Log {
      /**
       *  The Contract Interface.
       */
      interface;
      /**
       *  The matching event.
       */
      fragment;
      /**
       *  The parsed arguments passed to the event by ``emit``.
       */
      args;
      /**
       * @_ignore:
       */
      constructor(log, iface, fragment) {
        super(log, log.provider);
        const args = iface.decodeEventLog(fragment, log.data, log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment, interface: iface });
      }
      /**
       *  The name of the event.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The signature of the event.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports2.EventLog = EventLog;
    var UndecodedEventLog = class extends provider_js_1.Log {
      /**
       *  The error encounted when trying to decode the log.
       */
      error;
      /**
       * @_ignore:
       */
      constructor(log, error) {
        super(log, log.provider);
        (0, index_js_1.defineProperties)(this, { error });
      }
    };
    exports2.UndecodedEventLog = UndecodedEventLog;
    var ContractTransactionReceipt = class extends provider_js_1.TransactionReceipt {
      #iface;
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        this.#iface = iface;
      }
      /**
       *  The parsed logs for any [[Log]] which has a matching event in the
       *  Contract ABI.
       */
      get logs() {
        return super.logs.map((log) => {
          const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
          if (fragment) {
            try {
              return new EventLog(log, this.#iface, fragment);
            } catch (error) {
              return new UndecodedEventLog(log, error);
            }
          }
          return log;
        });
      }
    };
    exports2.ContractTransactionReceipt = ContractTransactionReceipt;
    var ContractTransactionResponse = class extends provider_js_1.TransactionResponse {
      #iface;
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        this.#iface = iface;
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(confirms, timeout) {
        const receipt = await super.wait(confirms, timeout);
        if (receipt == null) {
          return null;
        }
        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
      }
    };
    exports2.ContractTransactionResponse = ContractTransactionResponse;
    var ContractUnknownEventPayload = class extends index_js_1.EventPayload {
      /**
       *  The log with no matching events.
       */
      log;
      /**
       *  @_event:
       */
      constructor(contract, listener, filter, log) {
        super(contract, listener, filter);
        (0, index_js_1.defineProperties)(this, { log });
      }
      /**
       *  Resolves to the block the event occured in.
       */
      async getBlock() {
        return await this.log.getBlock();
      }
      /**
       *  Resolves to the transaction the event occured in.
       */
      async getTransaction() {
        return await this.log.getTransaction();
      }
      /**
       *  Resolves to the transaction receipt the event occured in.
       */
      async getTransactionReceipt() {
        return await this.log.getTransactionReceipt();
      }
    };
    exports2.ContractUnknownEventPayload = ContractUnknownEventPayload;
    var ContractEventPayload = class extends ContractUnknownEventPayload {
      /**
       *  @_ignore:
       */
      constructor(contract, listener, filter, fragment, _log) {
        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment });
      }
      /**
       *  The event name.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The event signature.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports2.ContractEventPayload = ContractEventPayload;
  }
});

// node_modules/ethers/lib.commonjs/contract/contract.js
var require_contract = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/contract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Contract = exports2.BaseContract = exports2.resolveArgs = exports2.copyOverrides = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var provider_js_1 = require_provider();
    var index_js_3 = require_utils();
    var wrappers_js_1 = require_wrappers();
    var BN_0 = BigInt(0);
    function canCall(value) {
      return value && typeof value.call === "function";
    }
    function canEstimate(value) {
      return value && typeof value.estimateGas === "function";
    }
    function canResolve(value) {
      return value && typeof value.resolveName === "function";
    }
    function canSend(value) {
      return value && typeof value.sendTransaction === "function";
    }
    function getResolver(value) {
      if (value != null) {
        if (canResolve(value)) {
          return value;
        }
        if (value.provider) {
          return value.provider;
        }
      }
      return void 0;
    }
    var PreparedTopicFilter = class {
      #filter;
      fragment;
      constructor(contract, fragment, args) {
        (0, index_js_3.defineProperties)(this, { fragment });
        if (fragment.inputs.length < args.length) {
          throw new Error("too many arguments");
        }
        const runner = getRunner(contract.runner, "resolveName");
        const resolver = canResolve(runner) ? runner : null;
        this.#filter = async function() {
          const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
            const arg = args[index];
            if (arg == null) {
              return null;
            }
            return param.walkAsync(args[index], (type, value) => {
              if (type === "address") {
                if (Array.isArray(value)) {
                  return Promise.all(value.map((v) => (0, index_js_2.resolveAddress)(v, resolver)));
                }
                return (0, index_js_2.resolveAddress)(value, resolver);
              }
              return value;
            });
          }));
          return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
        }();
      }
      getTopicFilter() {
        return this.#filter;
      }
    };
    function getRunner(value, feature) {
      if (value == null) {
        return null;
      }
      if (typeof value[feature] === "function") {
        return value;
      }
      if (value.provider && typeof value.provider[feature] === "function") {
        return value.provider;
      }
      return null;
    }
    function getProvider(value) {
      if (value == null) {
        return null;
      }
      return value.provider || null;
    }
    async function copyOverrides(arg, allowed) {
      const _overrides = index_js_1.Typed.dereference(arg, "overrides");
      (0, index_js_3.assertArgument)(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
      const overrides = (0, provider_js_1.copyRequest)(_overrides);
      (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
      (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
      if (overrides.from) {
        overrides.from = overrides.from;
      }
      return overrides;
    }
    exports2.copyOverrides = copyOverrides;
    async function resolveArgs(_runner, inputs, args) {
      const runner = getRunner(_runner, "resolveName");
      const resolver = canResolve(runner) ? runner : null;
      return await Promise.all(inputs.map((param, index) => {
        return param.walkAsync(args[index], (type, value) => {
          value = index_js_1.Typed.dereference(value, type);
          if (type === "address") {
            return (0, index_js_2.resolveAddress)(value, resolver);
          }
          return value;
        });
      }));
    }
    exports2.resolveArgs = resolveArgs;
    function buildWrappedFallback(contract) {
      const populateTransaction = async function(overrides) {
        const tx = await copyOverrides(overrides, ["data"]);
        tx.to = await contract.getAddress();
        if (tx.from) {
          tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract.runner));
        }
        const iface = contract.interface;
        const noValue = (0, index_js_3.getBigInt)(tx.value || BN_0, "overrides.value") === BN_0;
        const noData = (tx.data || "0x") === "0x";
        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
          (0, index_js_3.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
        }
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        const payable = iface.receive || iface.fallback && iface.fallback.payable;
        (0, index_js_3.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        return tx;
      };
      const staticCall = async function(overrides) {
        const runner = getRunner(contract.runner, "call");
        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(overrides);
        try {
          return await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
      };
      const send = async function(overrides) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(overrides));
        const provider = getProvider(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(overrides) {
        const runner = getRunner(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(overrides));
      };
      const method = async (overrides) => {
        return await send(overrides);
      };
      (0, index_js_3.defineProperties)(method, {
        _contract: contract,
        estimateGas,
        populateTransaction,
        send,
        staticCall
      });
      return method;
    }
    function buildWrappedMethod(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getFunction(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const populateTransaction = async function(...args) {
        const fragment = getFragment(...args);
        let overrides = {};
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await copyOverrides(args.pop());
          if (overrides.from) {
            overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract.runner));
          }
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
        }
        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
        return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({
          to: contract.getAddress(),
          data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
        }));
      };
      const staticCall = async function(...args) {
        const result = await staticCallResult(...args);
        if (result.length === 1) {
          return result[0];
        }
        return result;
      };
      const send = async function(...args) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(...args));
        const provider = getProvider(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(...args) {
        const runner = getRunner(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(...args));
      };
      const staticCallResult = async function(...args) {
        const runner = getRunner(contract.runner, "call");
        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(...args);
        let result = "0x";
        try {
          result = await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
        const fragment = getFragment(...args);
        return contract.interface.decodeFunctionResult(fragment, result);
      };
      const method = async (...args) => {
        const fragment = getFragment(...args);
        if (fragment.constant) {
          return await staticCall(...args);
        }
        return await send(...args);
      };
      (0, index_js_3.defineProperties)(method, {
        name: contract.interface.getFunctionName(key),
        _contract: contract,
        _key: key,
        getFragment,
        estimateGas,
        populateTransaction,
        send,
        staticCall,
        staticCallResult
      });
      Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getFunction(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method;
    }
    function buildWrappedEvent(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getEvent(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const method = function(...args) {
        return new PreparedTopicFilter(contract, getFragment(...args), args);
      };
      (0, index_js_3.defineProperties)(method, {
        name: contract.interface.getEventName(key),
        _contract: contract,
        _key: key,
        getFragment
      });
      Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getEvent(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method;
    }
    var internal = Symbol.for("_ethersInternal_contract");
    var internalValues = /* @__PURE__ */ new WeakMap();
    function setInternal(contract, values) {
      internalValues.set(contract[internal], values);
    }
    function getInternal(contract) {
      return internalValues.get(contract[internal]);
    }
    function isDeferred(value) {
      return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
    }
    async function getSubInfo(contract, event) {
      let topics;
      let fragment = null;
      if (Array.isArray(event)) {
        const topicHashify = function(name) {
          if ((0, index_js_3.isHexString)(name, 32)) {
            return name;
          }
          const fragment2 = contract.interface.getEvent(name);
          (0, index_js_3.assertArgument)(fragment2, "unknown fragment", "name", name);
          return fragment2.topicHash;
        };
        topics = event.map((e) => {
          if (e == null) {
            return null;
          }
          if (Array.isArray(e)) {
            return e.map(topicHashify);
          }
          return topicHashify(e);
        });
      } else if (event === "*") {
        topics = [null];
      } else if (typeof event === "string") {
        if ((0, index_js_3.isHexString)(event, 32)) {
          topics = [event];
        } else {
          fragment = contract.interface.getEvent(event);
          (0, index_js_3.assertArgument)(fragment, "unknown fragment", "event", event);
          topics = [fragment.topicHash];
        }
      } else if (isDeferred(event)) {
        topics = await event.getTopicFilter();
      } else if ("fragment" in event) {
        fragment = event.fragment;
        topics = [fragment.topicHash];
      } else {
        (0, index_js_3.assertArgument)(false, "unknown event name", "event", event);
      }
      topics = topics.map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
          if (items.length === 1) {
            return items[0];
          }
          items.sort();
          return items;
        }
        return t.toLowerCase();
      });
      const tag = topics.map((t) => {
        if (t == null) {
          return "null";
        }
        if (Array.isArray(t)) {
          return t.join("|");
        }
        return t;
      }).join("&");
      return { fragment, tag, topics };
    }
    async function hasSub(contract, event) {
      const { subs } = getInternal(contract);
      return subs.get((await getSubInfo(contract, event)).tag) || null;
    }
    async function getSub(contract, operation, event) {
      const provider = getProvider(contract.runner);
      (0, index_js_3.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
      const { fragment, tag, topics } = await getSubInfo(contract, event);
      const { addr, subs } = getInternal(contract);
      let sub = subs.get(tag);
      if (!sub) {
        const address = addr ? addr : contract;
        const filter = { address, topics };
        const listener = (log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = contract.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            const _foundFragment = foundFragment;
            const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
            emit(contract, event, args, (listener2) => {
              return new wrappers_js_1.ContractEventPayload(contract, listener2, event, _foundFragment, log);
            });
          } else {
            emit(contract, event, [], (listener2) => {
              return new wrappers_js_1.ContractUnknownEventPayload(contract, listener2, event, log);
            });
          }
        };
        let starting = [];
        const start = () => {
          if (starting.length) {
            return;
          }
          starting.push(provider.on(filter, listener));
        };
        const stop = async () => {
          if (starting.length == 0) {
            return;
          }
          let started = starting;
          starting = [];
          await Promise.all(started);
          provider.off(filter, listener);
        };
        sub = { tag, listeners: [], start, stop };
        subs.set(tag, sub);
      }
      return sub;
    }
    var lastEmit = Promise.resolve();
    async function _emit(contract, event, args, payloadFunc) {
      await lastEmit;
      const sub = await hasSub(contract, event);
      if (!sub) {
        return false;
      }
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener, once }) => {
        const passArgs = Array.from(args);
        if (payloadFunc) {
          passArgs.push(payloadFunc(once ? null : listener));
        }
        try {
          listener.call(contract, ...passArgs);
        } catch (error) {
        }
        return !once;
      });
      if (sub.listeners.length === 0) {
        sub.stop();
        getInternal(contract).subs.delete(sub.tag);
      }
      return count > 0;
    }
    async function emit(contract, event, args, payloadFunc) {
      try {
        await lastEmit;
      } catch (error) {
      }
      const resultPromise = _emit(contract, event, args, payloadFunc);
      lastEmit = resultPromise;
      return await resultPromise;
    }
    var passProperties = ["then"];
    var BaseContract = class _BaseContract {
      /**
       *  The target to connect to.
       *
       *  This can be an address, ENS name or any [[Addressable]], such as
       *  another contract. To get the resovled address, use the ``getAddress``
       *  method.
       */
      target;
      /**
       *  The contract Interface.
       */
      interface;
      /**
       *  The connected runner. This is generally a [[Provider]] or a
       *  [[Signer]], which dictates what operations are supported.
       *
       *  For example, a **Contract** connected to a [[Provider]] may
       *  only execute read-only operations.
       */
      runner;
      /**
       *  All the Events available on this contract.
       */
      filters;
      /**
       *  @_ignore:
       */
      [internal];
      /**
       *  The fallback or receive function if any.
       */
      fallback;
      /**
       *  Creates a new contract connected to %%target%% with the %%abi%% and
       *  optionally connected to a %%runner%% to perform operations on behalf
       *  of.
       */
      constructor(target, abi, runner, _deployTx) {
        (0, index_js_3.assertArgument)(typeof target === "string" || (0, index_js_2.isAddressable)(target), "invalid value for Contract target", "target", target);
        if (runner == null) {
          runner = null;
        }
        const iface = index_js_1.Interface.from(abi);
        (0, index_js_3.defineProperties)(this, { target, runner, interface: iface });
        Object.defineProperty(this, internal, { value: {} });
        let addrPromise;
        let addr = null;
        let deployTx = null;
        if (_deployTx) {
          const provider = getProvider(runner);
          deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);
        }
        let subs = /* @__PURE__ */ new Map();
        if (typeof target === "string") {
          if ((0, index_js_3.isHexString)(target)) {
            addr = target;
            addrPromise = Promise.resolve(target);
          } else {
            const resolver = getRunner(runner, "resolveName");
            if (!canResolve(resolver)) {
              throw (0, index_js_3.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                operation: "resolveName"
              });
            }
            addrPromise = resolver.resolveName(target).then((addr2) => {
              if (addr2 == null) {
                throw (0, index_js_3.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                  value: target
                });
              }
              getInternal(this).addr = addr2;
              return addr2;
            });
          }
        } else {
          addrPromise = target.getAddress().then((addr2) => {
            if (addr2 == null) {
              throw new Error("TODO");
            }
            getInternal(this).addr = addr2;
            return addr2;
          });
        }
        setInternal(this, { addrPromise, addr, deployTx, subs });
        const filters = new Proxy({}, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return this.getEvent(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (passProperties.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
          }
        });
        (0, index_js_3.defineProperties)(this, { filters });
        (0, index_js_3.defineProperties)(this, {
          fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
        });
        return new Proxy(this, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return target2.getFunction(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return target2.interface.hasFunction(prop);
          }
        });
      }
      /**
       *  Return a new Contract instance with the same target and ABI, but
       *  a different %%runner%%.
       */
      connect(runner) {
        return new _BaseContract(this.target, this.interface, runner);
      }
      /**
       *  Return a new Contract instance with the same ABI and runner, but
       *  a different %%target%%.
       */
      attach(target) {
        return new _BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Return the resolved address of this Contract.
       */
      async getAddress() {
        return await getInternal(this).addrPromise;
      }
      /**
       *  Return the deployed bytecode or null if no bytecode is found.
       */
      async getDeployedCode() {
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
        const code = await provider.getCode(await this.getAddress());
        if (code === "0x") {
          return null;
        }
        return code;
      }
      /**
       *  Resolve to this Contract once the bytecode has been deployed, or
       *  resolve immediately if already deployed.
       */
      async waitForDeployment() {
        const deployTx = this.deploymentTransaction();
        if (deployTx) {
          await deployTx.wait();
          return this;
        }
        const code = await this.getDeployedCode();
        if (code != null) {
          return this;
        }
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
        return new Promise((resolve2, reject2) => {
          const checkCode = async () => {
            try {
              const code2 = await this.getDeployedCode();
              if (code2 != null) {
                return resolve2(this);
              }
              provider.once("block", checkCode);
            } catch (error) {
              reject2(error);
            }
          };
          checkCode();
        });
      }
      /**
       *  Return the transaction used to deploy this contract.
       *
       *  This is only available if this instance was returned from a
       *  [[ContractFactory]].
       */
      deploymentTransaction() {
        return getInternal(this).deployTx;
      }
      /**
       *  Return the function for a given name. This is useful when a contract
       *  method name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getFunction(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        const func = buildWrappedMethod(this, key);
        return func;
      }
      /**
       *  Return the event for a given name. This is useful when a contract
       *  event name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getEvent(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        return buildWrappedEvent(this, key);
      }
      /**
       *  @_ignore:
       */
      async queryTransaction(hash) {
        throw new Error("@TODO");
      }
      /*
          // @TODO: this is a non-backwards compatible change, but will be added
          //        in v7 and in a potential SmartContract class in an upcoming
          //        v6 release
          async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
              const provider = getProvider(this.runner);
              assert(provider, "contract runner does not have a provider",
                  "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
      
              const receipt = await provider.getTransactionReceipt(hash);
              if (receipt == null) { return null; }
      
              return new ContractTransactionReceipt(this.interface, provider, receipt);
          }
          */
      /**
       *  Provide historic access to event data for %%event%% in the range
       *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
       *  inclusive.
       */
      async queryFilter(event, fromBlock, toBlock) {
        if (fromBlock == null) {
          fromBlock = 0;
        }
        if (toBlock == null) {
          toBlock = "latest";
        }
        const { addr, addrPromise } = getInternal(this);
        const address = addr ? addr : await addrPromise;
        const { fragment, topics } = await getSubInfo(this, event);
        const filter = { address, topics, fromBlock, toBlock };
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
        return (await provider.getLogs(filter)).map((log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = this.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            try {
              return new wrappers_js_1.EventLog(log, this.interface, foundFragment);
            } catch (error) {
              return new wrappers_js_1.UndecodedEventLog(log, error);
            }
          }
          return new provider_js_1.Log(log, provider);
        });
      }
      /**
       *  Add an event %%listener%% for the %%event%%.
       */
      async on(event, listener) {
        const sub = await getSub(this, "on", event);
        sub.listeners.push({ listener, once: false });
        sub.start();
        return this;
      }
      /**
       *  Add an event %%listener%% for the %%event%%, but remove the listener
       *  after it is fired once.
       */
      async once(event, listener) {
        const sub = await getSub(this, "once", event);
        sub.listeners.push({ listener, once: true });
        sub.start();
        return this;
      }
      /**
       *  Emit an %%event%% calling all listeners with %%args%%.
       *
       *  Resolves to ``true`` if any listeners were called.
       */
      async emit(event, ...args) {
        return await emit(this, event, args, null);
      }
      /**
       *  Resolves to the number of listeners of %%event%% or the total number
       *  of listeners if unspecified.
       */
      async listenerCount(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        const { subs } = getInternal(this);
        let total = 0;
        for (const { listeners } of subs.values()) {
          total += listeners.length;
        }
        return total;
      }
      /**
       *  Resolves to the listeners subscribed to %%event%% or all listeners
       *  if unspecified.
       */
      async listeners(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        const { subs } = getInternal(this);
        let result = [];
        for (const { listeners } of subs.values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      /**
       *  Remove the %%listener%% from the listeners for %%event%% or remove
       *  all listeners if unspecified.
       */
      async off(event, listener) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (listener == null || sub.listeners.length === 0) {
          sub.stop();
          getInternal(this).subs.delete(sub.tag);
        }
        return this;
      }
      /**
       *  Remove all the listeners for %%event%% or remove all listeners if
       *  unspecified.
       */
      async removeAllListeners(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return this;
          }
          sub.stop();
          getInternal(this).subs.delete(sub.tag);
        } else {
          const { subs } = getInternal(this);
          for (const { tag, stop } of subs.values()) {
            stop();
            subs.delete(tag);
          }
        }
        return this;
      }
      /**
       *  Alias for [on].
       */
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      /**
       *  Alias for [off].
       */
      async removeListener(event, listener) {
        return await this.off(event, listener);
      }
      /**
       *  Create a new Class for the %%abi%%.
       */
      static buildClass(abi) {
        class CustomContract extends _BaseContract {
          constructor(address, runner = null) {
            super(address, abi, runner);
          }
        }
        return CustomContract;
      }
      /**
       *  Create a new BaseContract with a specified Interface.
       */
      static from(target, abi, runner) {
        if (runner == null) {
          runner = null;
        }
        const contract = new this(target, abi, runner);
        return contract;
      }
    };
    exports2.BaseContract = BaseContract;
    function _ContractBase() {
      return BaseContract;
    }
    var Contract = class extends _ContractBase() {
    };
    exports2.Contract = Contract;
  }
});

// node_modules/ethers/lib.commonjs/contract/factory.js
var require_factory = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/factory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContractFactory = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var index_js_3 = require_utils();
    var contract_js_1 = require_contract();
    var ContractFactory = class _ContractFactory {
      /**
       *  The Contract Interface.
       */
      interface;
      /**
       *  The Contract deployment bytecode. Often called the initcode.
       */
      bytecode;
      /**
       *  The ContractRunner to deploy the Contract as.
       */
      runner;
      /**
       *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
       *  optionally connected to %%runner%%.
       *
       *  The %%bytecode%% may be the ``bytecode`` property within the
       *  standard Solidity JSON output.
       */
      constructor(abi, bytecode, runner) {
        const iface = index_js_1.Interface.from(abi);
        if (bytecode instanceof Uint8Array) {
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        } else {
          if (typeof bytecode === "object") {
            bytecode = bytecode.object;
          }
          if (!bytecode.startsWith("0x")) {
            bytecode = "0x" + bytecode;
          }
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        }
        (0, index_js_3.defineProperties)(this, {
          bytecode,
          interface: iface,
          runner: runner || null
        });
      }
      attach(target) {
        return new contract_js_1.BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Resolves to the transaction to deploy the contract, passing %%args%%
       *  into the constructor.
       */
      async getDeployTransaction(...args) {
        let overrides = {};
        const fragment = this.interface.deploy;
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await (0, contract_js_1.copyOverrides)(args.pop());
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("incorrect number of arguments to constructor");
        }
        const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);
        const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
        return Object.assign({}, overrides, { data });
      }
      /**
       *  Resolves to the Contract deployed by passing %%args%% into the
       *  constructor.
       *
       *  This will resolve to the Contract before it has been deployed to the
       *  network, so the [[BaseContract-waitForDeployment]] should be used before
       *  sending any transactions to it.
       */
      async deploy(...args) {
        const tx = await this.getDeployTransaction(...args);
        (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
          operation: "sendTransaction"
        });
        const sentTx = await this.runner.sendTransaction(tx);
        const address = (0, index_js_2.getCreateAddress)(sentTx);
        return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);
      }
      /**
       *  Return a new **ContractFactory** with the same ABI and bytecode,
       *  but connected to %%runner%%.
       */
      connect(runner) {
        return new _ContractFactory(this.interface, this.bytecode, runner);
      }
      /**
       *  Create a new **ContractFactory** from the standard Solidity JSON output.
       */
      static fromSolidity(output, runner) {
        (0, index_js_3.assertArgument)(output != null, "bad compiler output", "output", output);
        if (typeof output === "string") {
          output = JSON.parse(output);
        }
        const abi = output.abi;
        let bytecode = "";
        if (output.bytecode) {
          bytecode = output.bytecode;
        } else if (output.evm && output.evm.bytecode) {
          bytecode = output.evm.bytecode;
        }
        return new this(abi, bytecode, runner);
      }
    };
    exports2.ContractFactory = ContractFactory;
  }
});

// node_modules/ethers/lib.commonjs/contract/index.js
var require_contract2 = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UndecodedEventLog = exports2.EventLog = exports2.ContractTransactionResponse = exports2.ContractTransactionReceipt = exports2.ContractUnknownEventPayload = exports2.ContractEventPayload = exports2.ContractFactory = exports2.Contract = exports2.BaseContract = void 0;
    var contract_js_1 = require_contract();
    Object.defineProperty(exports2, "BaseContract", { enumerable: true, get: function() {
      return contract_js_1.BaseContract;
    } });
    Object.defineProperty(exports2, "Contract", { enumerable: true, get: function() {
      return contract_js_1.Contract;
    } });
    var factory_js_1 = require_factory();
    Object.defineProperty(exports2, "ContractFactory", { enumerable: true, get: function() {
      return factory_js_1.ContractFactory;
    } });
    var wrappers_js_1 = require_wrappers();
    Object.defineProperty(exports2, "ContractEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractEventPayload;
    } });
    Object.defineProperty(exports2, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports2, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports2, "ContractTransactionResponse", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionResponse;
    } });
    Object.defineProperty(exports2, "EventLog", { enumerable: true, get: function() {
      return wrappers_js_1.EventLog;
    } });
    Object.defineProperty(exports2, "UndecodedEventLog", { enumerable: true, get: function() {
      return wrappers_js_1.UndecodedEventLog;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/ens-resolver.js
var require_ens_resolver = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ens-resolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnsResolver = exports2.BasicMulticoinProviderPlugin = exports2.MulticoinProviderPlugin = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_constants();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash();
    var index_js_5 = require_utils();
    function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) {
        link = link.substring(12);
      } else if (link.match(/^ipfs:\/\//i)) {
        link = link.substring(7);
      } else {
        (0, index_js_5.assertArgument)(false, "unsupported IPFS format", "link", link);
      }
      return `https://gateway.ipfs.io/ipfs/${link}`;
    }
    var MulticoinProviderPlugin = class {
      /**
       *  The name.
       */
      name;
      /**
       *  Creates a new **MulticoinProviderPluing** for %%name%%.
       */
      constructor(name) {
        (0, index_js_5.defineProperties)(this, { name });
      }
      connect(proivder) {
        return this;
      }
      /**
       *  Returns ``true`` if %%coinType%% is supported by this plugin.
       */
      supportsCoinType(coinType) {
        return false;
      }
      /**
       *  Resolves to the encoded %%address%% for %%coinType%%.
       */
      async encodeAddress(coinType, address) {
        throw new Error("unsupported coin");
      }
      /**
       *  Resolves to the decoded %%data%% for %%coinType%%.
       */
      async decodeAddress(coinType, data) {
        throw new Error("unsupported coin");
      }
    };
    exports2.MulticoinProviderPlugin = MulticoinProviderPlugin;
    var BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
    var BasicMulticoinProviderPlugin = class extends MulticoinProviderPlugin {
      /**
       *  Creates a new **BasicMulticoinProviderPlugin**.
       */
      constructor() {
        super(BasicMulticoinPluginId);
      }
    };
    exports2.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;
    var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    var matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    var EnsResolver = class _EnsResolver {
      /**
       *  The connected provider.
       */
      provider;
      /**
       *  The address of the resolver.
       */
      address;
      /**
       *  The name this resolver was resolved against.
       */
      name;
      // For EIP-2544 names, the ancestor that provided the resolver
      #supports2544;
      #resolver;
      constructor(provider, address, name) {
        (0, index_js_5.defineProperties)(this, { provider, address, name });
        this.#supports2544 = null;
        this.#resolver = new index_js_3.Contract(address, [
          "function supportsInterface(bytes4) view returns (bool)",
          "function resolve(bytes, bytes) view returns (bytes)",
          "function addr(bytes32) view returns (address)",
          "function addr(bytes32, uint) view returns (bytes)",
          "function text(bytes32, string) view returns (string)",
          "function contenthash(bytes32) view returns (bytes)"
        ], provider);
      }
      /**
       *  Resolves to true if the resolver supports wildcard resolution.
       */
      async supportsWildcard() {
        if (this.#supports2544 == null) {
          this.#supports2544 = (async () => {
            try {
              return await this.#resolver.supportsInterface("0x9061b923");
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
                return false;
              }
              this.#supports2544 = null;
              throw error;
            }
          })();
        }
        return await this.#supports2544;
      }
      async #fetch(funcName, params) {
        params = (params || []).slice();
        const iface = this.#resolver.interface;
        params.unshift((0, index_js_4.namehash)(this.name));
        let fragment = null;
        if (await this.supportsWildcard()) {
          fragment = iface.getFunction(funcName);
          (0, index_js_5.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
            info: { funcName }
          });
          params = [
            (0, index_js_4.dnsEncode)(this.name, 255),
            iface.encodeFunctionData(fragment, params)
          ];
          funcName = "resolve(bytes,bytes)";
        }
        params.push({
          enableCcipRead: true
        });
        try {
          const result = await this.#resolver[funcName](...params);
          if (fragment) {
            return iface.decodeFunctionResult(fragment, result)[0];
          }
          return result;
        } catch (error) {
          if (!(0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
            throw error;
          }
        }
        return null;
      }
      /**
       *  Resolves to the address for %%coinType%% or null if the
       *  provided %%coinType%% has not been configured.
       */
      async getAddress(coinType) {
        if (coinType == null) {
          coinType = 60;
        }
        if (coinType === 60) {
          try {
            const result = await this.#fetch("addr(bytes32)");
            if (result == null || result === index_js_2.ZeroAddress) {
              return null;
            }
            return result;
          } catch (error) {
            if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
              return null;
            }
            throw error;
          }
        }
        if (coinType >= 0 && coinType < 2147483648) {
          let ethCoinType = coinType + 2147483648;
          const data2 = await this.#fetch("addr(bytes32,uint)", [ethCoinType]);
          if ((0, index_js_5.isHexString)(data2, 20)) {
            return (0, index_js_1.getAddress)(data2);
          }
        }
        let coinPlugin = null;
        for (const plugin of this.provider.plugins) {
          if (!(plugin instanceof MulticoinProviderPlugin)) {
            continue;
          }
          if (plugin.supportsCoinType(coinType)) {
            coinPlugin = plugin;
            break;
          }
        }
        if (coinPlugin == null) {
          return null;
        }
        const data = await this.#fetch("addr(bytes32,uint)", [coinType]);
        if (data == null || data === "0x") {
          return null;
        }
        const address = await coinPlugin.decodeAddress(coinType, data);
        if (address != null) {
          return address;
        }
        (0, index_js_5.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
          operation: `getAddress(${coinType})`,
          info: { coinType, data }
        });
      }
      /**
       *  Resolves to the EIP-634 text record for %%key%%, or ``null``
       *  if unconfigured.
       */
      async getText(key) {
        const data = await this.#fetch("text(bytes32,string)", [key]);
        if (data == null || data === "0x") {
          return null;
        }
        return data;
      }
      /**
       *  Rsolves to the content-hash or ``null`` if unconfigured.
       */
      async getContentHash() {
        const data = await this.#fetch("contenthash(bytes32)");
        if (data == null || data === "0x") {
          return null;
        }
        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
        if (ipfs) {
          const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
          const length = parseInt(ipfs[4], 16);
          if (ipfs[5].length === length * 2) {
            return `${scheme}://${(0, index_js_5.encodeBase58)("0x" + ipfs[2])}`;
          }
        }
        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
        if (swarm && swarm[1].length === 64) {
          return `bzz://${swarm[1]}`;
        }
        (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
          operation: "getContentHash()",
          info: { data }
        });
      }
      /**
       *  Resolves to the avatar url or ``null`` if the avatar is either
       *  unconfigured or incorrectly configured (e.g. references an NFT
       *  not owned by the address).
       *
       *  If diagnosing issues with configurations, the [[_getAvatar]]
       *  method may be useful.
       */
      async getAvatar() {
        const avatar = await this._getAvatar();
        return avatar.url;
      }
      /**
       *  When resolving an avatar, there are many steps involved, such
       *  fetching metadata and possibly validating ownership of an
       *  NFT.
       *
       *  This method can be used to examine each step and the value it
       *  was working from.
       */
      async _getAvatar() {
        const linkage = [{ type: "name", value: this.name }];
        try {
          const avatar = await this.getText("avatar");
          if (avatar == null) {
            linkage.push({ type: "!avatar", value: "" });
            return { url: null, linkage };
          }
          linkage.push({ type: "avatar", value: avatar });
          for (let i = 0; i < matchers.length; i++) {
            const match = avatar.match(matchers[i]);
            if (match == null) {
              continue;
            }
            const scheme = match[1].toLowerCase();
            switch (scheme) {
              case "https":
              case "data":
                linkage.push({ type: "url", value: avatar });
                return { linkage, url: avatar };
              case "ipfs": {
                const url = getIpfsLink(avatar);
                linkage.push({ type: "ipfs", value: avatar });
                linkage.push({ type: "url", value: url });
                return { linkage, url };
              }
              case "erc721":
              case "erc1155": {
                const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
                linkage.push({ type: scheme, value: avatar });
                const owner = await this.getAddress();
                if (owner == null) {
                  linkage.push({ type: "!owner", value: "" });
                  return { url: null, linkage };
                }
                const comps = (match[2] || "").split("/");
                if (comps.length !== 2) {
                  linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                  return { url: null, linkage };
                }
                const tokenId = comps[1];
                const contract = new index_js_3.Contract(comps[0], [
                  // ERC-721
                  "function tokenURI(uint) view returns (string)",
                  "function ownerOf(uint) view returns (address)",
                  // ERC-1155
                  "function uri(uint) view returns (string)",
                  "function balanceOf(address, uint256) view returns (uint)"
                ], this.provider);
                if (scheme === "erc721") {
                  const tokenOwner = await contract.ownerOf(tokenId);
                  if (owner !== tokenOwner) {
                    linkage.push({ type: "!owner", value: tokenOwner });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "owner", value: tokenOwner });
                } else if (scheme === "erc1155") {
                  const balance = await contract.balanceOf(owner, tokenId);
                  if (!balance) {
                    linkage.push({ type: "!balance", value: "0" });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "balance", value: balance.toString() });
                }
                let metadataUrl = await contract[selector](tokenId);
                if (metadataUrl == null || metadataUrl === "0x") {
                  linkage.push({ type: "!metadata-url", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata-url-base", value: metadataUrl });
                if (scheme === "erc1155") {
                  metadataUrl = metadataUrl.replace("{id}", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));
                  linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
                }
                if (metadataUrl.match(/^ipfs:/i)) {
                  metadataUrl = getIpfsLink(metadataUrl);
                }
                linkage.push({ type: "metadata-url", value: metadataUrl });
                let metadata = {};
                const response = await new index_js_5.FetchRequest(metadataUrl).send();
                response.assertOk();
                try {
                  metadata = response.bodyJson;
                } catch (error) {
                  try {
                    linkage.push({ type: "!metadata", value: response.bodyText });
                  } catch (error2) {
                    const bytes = response.body;
                    if (bytes) {
                      linkage.push({ type: "!metadata", value: (0, index_js_5.hexlify)(bytes) });
                    }
                    return { url: null, linkage };
                  }
                  return { url: null, linkage };
                }
                if (!metadata) {
                  linkage.push({ type: "!metadata", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
                let imageUrl = metadata.image;
                if (typeof imageUrl !== "string") {
                  linkage.push({ type: "!imageUrl", value: "" });
                  return { url: null, linkage };
                }
                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                } else {
                  const ipfs = imageUrl.match(matcherIpfs);
                  if (ipfs == null) {
                    linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                  imageUrl = getIpfsLink(imageUrl);
                }
                linkage.push({ type: "url", value: imageUrl });
                return { linkage, url: imageUrl };
              }
            }
          }
        } catch (error) {
        }
        return { linkage, url: null };
      }
      static async getEnsAddress(provider) {
        const network = await provider.getNetwork();
        const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
        (0, index_js_5.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
          operation: "getEnsAddress",
          info: { network }
        });
        return ensPlugin.address;
      }
      static async #getResolver(provider, name) {
        const ensAddr = await _EnsResolver.getEnsAddress(provider);
        try {
          const contract = new index_js_3.Contract(ensAddr, [
            "function resolver(bytes32) view returns (address)"
          ], provider);
          const addr = await contract.resolver((0, index_js_4.namehash)(name), {
            enableCcipRead: true
          });
          if (addr === index_js_2.ZeroAddress) {
            return null;
          }
          return addr;
        } catch (error) {
          throw error;
        }
        return null;
      }
      /**
       *  Resolve to the ENS resolver for %%name%% using %%provider%% or
       *  ``null`` if unconfigured.
       */
      static async fromName(provider, name) {
        let currentName = name;
        while (true) {
          if (currentName === "" || currentName === ".") {
            return null;
          }
          if (name !== "eth" && currentName === "eth") {
            return null;
          }
          const addr = await _EnsResolver.#getResolver(provider, currentName);
          if (addr != null) {
            const resolver = new _EnsResolver(provider, addr, name);
            if (currentName !== name && !await resolver.supportsWildcard()) {
              return null;
            }
            return resolver;
          }
          currentName = currentName.split(".").slice(1).join(".");
        }
      }
    };
    exports2.EnsResolver = EnsResolver;
  }
});

// node_modules/ethers/lib.commonjs/providers/format.js
var require_format = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/format.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatTransactionResponse = exports2.formatTransactionReceipt = exports2.formatReceiptLog = exports2.formatBlock = exports2.formatLog = exports2.formatUint256 = exports2.formatHash = exports2.formatData = exports2.formatBoolean = exports2.object = exports2.arrayOf = exports2.allowNull = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var BN_0 = BigInt(0);
    function allowNull(format, nullValue) {
      return function(value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    exports2.allowNull = allowNull;
    function arrayOf(format, allowNull2) {
      return (array) => {
        if (allowNull2 && array == null) {
          return null;
        }
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }
        return array.map((i) => format(i));
      };
    }
    exports2.arrayOf = arrayOf;
    function object(format, altNames) {
      return (value) => {
        const result = {};
        for (const key in format) {
          let srcKey = key;
          if (altNames && key in altNames && !(srcKey in value)) {
            for (const altKey of altNames[key]) {
              if (altKey in value) {
                srcKey = altKey;
                break;
              }
            }
          }
          try {
            const nv = format[key](value[srcKey]);
            if (nv !== void 0) {
              result[key] = nv;
            }
          } catch (error) {
            const message = error instanceof Error ? error.message : "not-an-error";
            (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
          }
        }
        return result;
      };
    }
    exports2.object = object;
    function formatBoolean(value) {
      switch (value) {
        case true:
        case "true":
          return true;
        case false:
        case "false":
          return false;
      }
      (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
    }
    exports2.formatBoolean = formatBoolean;
    function formatData(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), "invalid data", "value", value);
      return value;
    }
    exports2.formatData = formatData;
    function formatHash(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), "invalid hash", "value", value);
      return value;
    }
    exports2.formatHash = formatHash;
    function formatUint256(value) {
      if (!(0, index_js_4.isHexString)(value)) {
        throw new Error("invalid uint256");
      }
      return (0, index_js_4.zeroPadValue)(value, 32);
    }
    exports2.formatUint256 = formatUint256;
    var _formatLog = object({
      address: index_js_1.getAddress,
      blockHash: formatHash,
      blockNumber: index_js_4.getNumber,
      data: formatData,
      index: index_js_4.getNumber,
      removed: allowNull(formatBoolean, false),
      topics: arrayOf(formatHash),
      transactionHash: formatHash,
      transactionIndex: index_js_4.getNumber
    }, {
      index: ["logIndex"]
    });
    function formatLog(value) {
      return _formatLog(value);
    }
    exports2.formatLog = formatLog;
    var _formatBlock = object({
      hash: allowNull(formatHash),
      parentHash: formatHash,
      parentBeaconBlockRoot: allowNull(formatHash, null),
      number: index_js_4.getNumber,
      timestamp: index_js_4.getNumber,
      nonce: allowNull(formatData),
      difficulty: index_js_4.getBigInt,
      gasLimit: index_js_4.getBigInt,
      gasUsed: index_js_4.getBigInt,
      stateRoot: allowNull(formatHash, null),
      receiptsRoot: allowNull(formatHash, null),
      blobGasUsed: allowNull(index_js_4.getBigInt, null),
      excessBlobGas: allowNull(index_js_4.getBigInt, null),
      miner: allowNull(index_js_1.getAddress),
      prevRandao: allowNull(formatHash, null),
      extraData: formatData,
      baseFeePerGas: allowNull(index_js_4.getBigInt)
    }, {
      prevRandao: ["mixHash"]
    });
    function formatBlock(value) {
      const result = _formatBlock(value);
      result.transactions = value.transactions.map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return formatTransactionResponse(tx);
      });
      return result;
    }
    exports2.formatBlock = formatBlock;
    var _formatReceiptLog = object({
      transactionIndex: index_js_4.getNumber,
      blockNumber: index_js_4.getNumber,
      transactionHash: formatHash,
      address: index_js_1.getAddress,
      topics: arrayOf(formatHash),
      data: formatData,
      index: index_js_4.getNumber,
      blockHash: formatHash
    }, {
      index: ["logIndex"]
    });
    function formatReceiptLog(value) {
      return _formatReceiptLog(value);
    }
    exports2.formatReceiptLog = formatReceiptLog;
    var _formatTransactionReceipt = object({
      to: allowNull(index_js_1.getAddress, null),
      from: allowNull(index_js_1.getAddress, null),
      contractAddress: allowNull(index_js_1.getAddress, null),
      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      index: index_js_4.getNumber,
      root: allowNull(index_js_4.hexlify),
      gasUsed: index_js_4.getBigInt,
      blobGasUsed: allowNull(index_js_4.getBigInt, null),
      logsBloom: allowNull(formatData),
      blockHash: formatHash,
      hash: formatHash,
      logs: arrayOf(formatReceiptLog),
      blockNumber: index_js_4.getNumber,
      //confirmations: allowNull(getNumber, null),
      cumulativeGasUsed: index_js_4.getBigInt,
      effectiveGasPrice: allowNull(index_js_4.getBigInt),
      blobGasPrice: allowNull(index_js_4.getBigInt, null),
      status: allowNull(index_js_4.getNumber),
      type: allowNull(index_js_4.getNumber, 0)
    }, {
      effectiveGasPrice: ["gasPrice"],
      hash: ["transactionHash"],
      index: ["transactionIndex"]
    });
    function formatTransactionReceipt(value) {
      return _formatTransactionReceipt(value);
    }
    exports2.formatTransactionReceipt = formatTransactionReceipt;
    function formatTransactionResponse(value) {
      if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {
        value.to = "0x0000000000000000000000000000000000000000";
      }
      const result = object({
        hash: formatHash,
        // Some nodes do not return this, usually test nodes (like Ganache)
        index: allowNull(index_js_4.getNumber, void 0),
        type: (value2) => {
          if (value2 === "0x" || value2 == null) {
            return 0;
          }
          return (0, index_js_4.getNumber)(value2);
        },
        accessList: allowNull(index_js_3.accessListify, null),
        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
        blockHash: allowNull(formatHash, null),
        blockNumber: allowNull(index_js_4.getNumber, null),
        transactionIndex: allowNull(index_js_4.getNumber, null),
        from: index_js_1.getAddress,
        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
        gasPrice: allowNull(index_js_4.getBigInt),
        maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),
        maxFeePerGas: allowNull(index_js_4.getBigInt),
        maxFeePerBlobGas: allowNull(index_js_4.getBigInt, null),
        gasLimit: index_js_4.getBigInt,
        to: allowNull(index_js_1.getAddress, null),
        value: index_js_4.getBigInt,
        nonce: index_js_4.getNumber,
        data: formatData,
        creates: allowNull(index_js_1.getAddress, null),
        chainId: allowNull(index_js_4.getBigInt, null)
      }, {
        data: ["input"],
        gasLimit: ["gas"],
        index: ["transactionIndex"]
      })(value);
      if (result.to == null && result.creates == null) {
        result.creates = (0, index_js_1.getCreateAddress)(result);
      }
      if ((value.type === 1 || value.type === 2) && value.accessList == null) {
        result.accessList = [];
      }
      if (value.signature) {
        result.signature = index_js_2.Signature.from(value.signature);
      } else {
        result.signature = index_js_2.Signature.from(value);
      }
      if (result.chainId == null) {
        const chainId = result.signature.legacyChainId;
        if (chainId != null) {
          result.chainId = chainId;
        }
      }
      if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {
        result.blockHash = null;
      }
      return result;
    }
    exports2.formatTransactionResponse = formatTransactionResponse;
  }
});

// node_modules/ethers/lib.commonjs/providers/plugins-network.js
var require_plugins_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/plugins-network.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FetchUrlFeeDataNetworkPlugin = exports2.FeeDataNetworkPlugin = exports2.EnsPlugin = exports2.GasCostPlugin = exports2.NetworkPlugin = void 0;
    var properties_js_1 = require_properties();
    var index_js_1 = require_utils();
    var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
    var NetworkPlugin = class _NetworkPlugin {
      /**
       *  The name of the plugin.
       *
       *  It is recommended to use reverse-domain-notation, which permits
       *  unique names with a known authority as well as hierarchal entries.
       */
      name;
      /**
       *  Creates a new **NetworkPlugin**.
       */
      constructor(name) {
        (0, properties_js_1.defineProperties)(this, { name });
      }
      /**
       *  Creates a copy of this plugin.
       */
      clone() {
        return new _NetworkPlugin(this.name);
      }
    };
    exports2.NetworkPlugin = NetworkPlugin;
    var GasCostPlugin = class _GasCostPlugin extends NetworkPlugin {
      /**
       *  The block number to treat these values as valid from.
       *
       *  This allows a hardfork to have updated values included as well as
       *  mulutiple hardforks to be supported.
       */
      effectiveBlock;
      /**
       *  The transactions base fee.
       */
      txBase;
      /**
       *  The fee for creating a new account.
       */
      txCreate;
      /**
       *  The fee per zero-byte in the data.
       */
      txDataZero;
      /**
       *  The fee per non-zero-byte in the data.
       */
      txDataNonzero;
      /**
       *  The fee per storage key in the [[link-eip-2930]] access list.
       */
      txAccessListStorageKey;
      /**
       *  The fee per address in the [[link-eip-2930]] access list.
       */
      txAccessListAddress;
      /**
       *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
       *  latest block or another GasCostPlugin supercedes that block number,
       *  with the associated %%costs%%.
       */
      constructor(effectiveBlock, costs) {
        if (effectiveBlock == null) {
          effectiveBlock = 0;
        }
        super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
        const props = { effectiveBlock };
        function set(name, nullish) {
          let value = (costs || {})[name];
          if (value == null) {
            value = nullish;
          }
          (0, index_js_1.assertArgument)(typeof value === "number", `invalud value for ${name}`, "costs", costs);
          props[name] = value;
        }
        set("txBase", 21e3);
        set("txCreate", 32e3);
        set("txDataZero", 4);
        set("txDataNonzero", 16);
        set("txAccessListStorageKey", 1900);
        set("txAccessListAddress", 2400);
        (0, properties_js_1.defineProperties)(this, props);
      }
      clone() {
        return new _GasCostPlugin(this.effectiveBlock, this);
      }
    };
    exports2.GasCostPlugin = GasCostPlugin;
    var EnsPlugin = class _EnsPlugin extends NetworkPlugin {
      /**
       *  The ENS Registrty Contract address.
       */
      address;
      /**
       *  The chain ID that the ENS contract lives on.
       */
      targetNetwork;
      /**
       *  Creates a new **EnsPlugin** connected to %%address%% on the
       *  %%targetNetwork%%. The default ENS address and mainnet is used
       *  if unspecified.
       */
      constructor(address, targetNetwork) {
        super("org.ethers.plugins.network.Ens");
        (0, properties_js_1.defineProperties)(this, {
          address: address || EnsAddress,
          targetNetwork: targetNetwork == null ? 1 : targetNetwork
        });
      }
      clone() {
        return new _EnsPlugin(this.address, this.targetNetwork);
      }
    };
    exports2.EnsPlugin = EnsPlugin;
    var FeeDataNetworkPlugin = class _FeeDataNetworkPlugin extends NetworkPlugin {
      #feeDataFunc;
      /**
       *  The fee data function provided to the constructor.
       */
      get feeDataFunc() {
        return this.#feeDataFunc;
      }
      /**
       *  Creates a new **FeeDataNetworkPlugin**.
       */
      constructor(feeDataFunc) {
        super("org.ethers.plugins.network.FeeData");
        this.#feeDataFunc = feeDataFunc;
      }
      /**
       *  Resolves to the fee data.
       */
      async getFeeData(provider) {
        return await this.#feeDataFunc(provider);
      }
      clone() {
        return new _FeeDataNetworkPlugin(this.#feeDataFunc);
      }
    };
    exports2.FeeDataNetworkPlugin = FeeDataNetworkPlugin;
    var FetchUrlFeeDataNetworkPlugin = class extends NetworkPlugin {
      #url;
      #processFunc;
      /**
       *  The URL to initialize the FetchRequest with in %%processFunc%%.
       */
      get url() {
        return this.#url;
      }
      /**
       *  The callback to use when computing the FeeData.
       */
      get processFunc() {
        return this.#processFunc;
      }
      /**
       *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
       *  be used when computing the fee data for the network.
       */
      constructor(url, processFunc) {
        super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        this.#url = url;
        this.#processFunc = processFunc;
      }
      // We are immutable, so we can serve as our own clone
      clone() {
        return this;
      }
    };
    exports2.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin;
  }
});

// node_modules/ethers/lib.commonjs/providers/network.js
var require_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/network.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Network = void 0;
    var index_js_1 = require_transaction2();
    var index_js_2 = require_utils();
    var plugins_network_js_1 = require_plugins_network();
    var Networks = /* @__PURE__ */ new Map();
    var Network = class _Network {
      #name;
      #chainId;
      #plugins;
      /**
       *  Creates a new **Network** for %%name%% and %%chainId%%.
       */
      constructor(name, chainId) {
        this.#name = name;
        this.#chainId = (0, index_js_2.getBigInt)(chainId);
        this.#plugins = /* @__PURE__ */ new Map();
      }
      /**
       *  Returns a JSON-compatible representation of a Network.
       */
      toJSON() {
        return { name: this.name, chainId: String(this.chainId) };
      }
      /**
       *  The network common name.
       *
       *  This is the canonical name, as networks migh have multiple
       *  names.
       */
      get name() {
        return this.#name;
      }
      set name(value) {
        this.#name = value;
      }
      /**
       *  The network chain ID.
       */
      get chainId() {
        return this.#chainId;
      }
      set chainId(value) {
        this.#chainId = (0, index_js_2.getBigInt)(value, "chainId");
      }
      /**
       *  Returns true if %%other%% matches this network. Any chain ID
       *  must match, and if no chain ID is present, the name must match.
       *
       *  This method does not currently check for additional properties,
       *  such as ENS address or plug-in compatibility.
       */
      matches(other) {
        if (other == null) {
          return false;
        }
        if (typeof other === "string") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return this.name === other;
        }
        if (typeof other === "number" || typeof other === "bigint") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return false;
        }
        if (typeof other === "object") {
          if (other.chainId != null) {
            try {
              return this.chainId === (0, index_js_2.getBigInt)(other.chainId);
            } catch (error) {
            }
            return false;
          }
          if (other.name != null) {
            return this.name === other.name;
          }
          return false;
        }
        return false;
      }
      /**
       *  Returns the list of plugins currently attached to this Network.
       */
      get plugins() {
        return Array.from(this.#plugins.values());
      }
      /**
       *  Attach a new %%plugin%% to this Network. The network name
       *  must be unique, excluding any fragment.
       */
      attachPlugin(plugin) {
        if (this.#plugins.get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        this.#plugins.set(plugin.name, plugin.clone());
        return this;
      }
      /**
       *  Return the plugin, if any, matching %%name%% exactly. Plugins
       *  with fragments will not be returned unless %%name%% includes
       *  a fragment.
       */
      getPlugin(name) {
        return this.#plugins.get(name) || null;
      }
      /**
       *  Gets a list of all plugins that match %%name%%, with otr without
       *  a fragment.
       */
      getPlugins(basename) {
        return this.plugins.filter((p) => p.name.split("#")[0] === basename);
      }
      /**
       *  Create a copy of this Network.
       */
      clone() {
        const clone = new _Network(this.name, this.chainId);
        this.plugins.forEach((plugin) => {
          clone.attachPlugin(plugin.clone());
        });
        return clone;
      }
      /**
       *  Compute the intrinsic gas required for a transaction.
       *
       *  A GasCostPlugin can be attached to override the default
       *  values.
       */
      computeIntrinsicGas(tx) {
        const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new plugins_network_js_1.GasCostPlugin();
        let gas = costs.txBase;
        if (tx.to == null) {
          gas += costs.txCreate;
        }
        if (tx.data) {
          for (let i = 2; i < tx.data.length; i += 2) {
            if (tx.data.substring(i, i + 2) === "00") {
              gas += costs.txDataZero;
            } else {
              gas += costs.txDataNonzero;
            }
          }
        }
        if (tx.accessList) {
          const accessList = (0, index_js_1.accessListify)(tx.accessList);
          for (const addr in accessList) {
            gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
          }
        }
        return gas;
      }
      /**
       *  Returns a new Network for the %%network%% name or chainId.
       */
      static from(network) {
        injectCommonNetworks();
        if (network == null) {
          return _Network.from("mainnet");
        }
        if (typeof network === "number") {
          network = BigInt(network);
        }
        if (typeof network === "string" || typeof network === "bigint") {
          const networkFunc = Networks.get(network);
          if (networkFunc) {
            return networkFunc();
          }
          if (typeof network === "bigint") {
            return new _Network("unknown", network);
          }
          (0, index_js_2.assertArgument)(false, "unknown network", "network", network);
        }
        if (typeof network.clone === "function") {
          const clone = network.clone();
          return clone;
        }
        if (typeof network === "object") {
          (0, index_js_2.assertArgument)(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
          const custom = new _Network(network.name, network.chainId);
          if (network.ensAddress || network.ensNetwork != null) {
            custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));
          }
          return custom;
        }
        (0, index_js_2.assertArgument)(false, "invalid network", "network", network);
      }
      /**
       *  Register %%nameOrChainId%% with a function which returns
       *  an instance of a Network representing that chain.
       */
      static register(nameOrChainId, networkFunc) {
        if (typeof nameOrChainId === "number") {
          nameOrChainId = BigInt(nameOrChainId);
        }
        const existing = Networks.get(nameOrChainId);
        if (existing) {
          (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
        }
        Networks.set(nameOrChainId, networkFunc);
      }
    };
    exports2.Network = Network;
    function parseUnits(_value, decimals) {
      const value = String(_value);
      if (!value.match(/^[0-9.]+$/)) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      const comps = value.split(".");
      if (comps.length === 1) {
        comps.push("");
      }
      if (comps.length !== 2) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      while (comps[1].length < decimals) {
        comps[1] += "0";
      }
      if (comps[1].length > 9) {
        let frac = BigInt(comps[1].substring(0, 9));
        if (!comps[1].substring(9).match(/^0+$/)) {
          frac++;
        }
        comps[1] = frac.toString();
      }
      return BigInt(comps[0] + comps[1]);
    }
    function getGasStationPlugin(url) {
      return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
        request.setHeader("User-Agent", "ethers");
        let response;
        try {
          const [_response, _feeData] = await Promise.all([
            request.send(),
            fetchFeeData()
          ]);
          response = _response;
          const payload = response.bodyJson.standard;
          const feeData = {
            gasPrice: _feeData.gasPrice,
            maxFeePerGas: parseUnits(payload.maxFee, 9),
            maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)
          };
          return feeData;
        } catch (error) {
          (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
        }
      });
    }
    var injected = false;
    function injectCommonNetworks() {
      if (injected) {
        return;
      }
      injected = true;
      function registerEth(name, chainId, options) {
        const func = function() {
          const network = new Network(name, chainId);
          if (options.ensNetwork != null) {
            network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));
          }
          network.attachPlugin(new plugins_network_js_1.GasCostPlugin());
          (options.plugins || []).forEach((plugin) => {
            network.attachPlugin(plugin);
          });
          return network;
        };
        Network.register(name, func);
        Network.register(chainId, func);
        if (options.altNames) {
          options.altNames.forEach((name2) => {
            Network.register(name2, func);
          });
        }
      }
      registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
      registerEth("ropsten", 3, { ensNetwork: 3 });
      registerEth("rinkeby", 4, { ensNetwork: 4 });
      registerEth("goerli", 5, { ensNetwork: 5 });
      registerEth("kovan", 42, { ensNetwork: 42 });
      registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
      registerEth("holesky", 17e3, { ensNetwork: 17e3 });
      registerEth("classic", 61, {});
      registerEth("classicKotti", 6, {});
      registerEth("arbitrum", 42161, {
        ensNetwork: 1
      });
      registerEth("arbitrum-goerli", 421613, {});
      registerEth("arbitrum-sepolia", 421614, {});
      registerEth("base", 8453, { ensNetwork: 1 });
      registerEth("base-goerli", 84531, {});
      registerEth("base-sepolia", 84532, {});
      registerEth("bnb", 56, { ensNetwork: 1 });
      registerEth("bnbt", 97, {});
      registerEth("linea", 59144, { ensNetwork: 1 });
      registerEth("linea-goerli", 59140, {});
      registerEth("linea-sepolia", 59141, {});
      registerEth("matic", 137, {
        ensNetwork: 1,
        plugins: [
          getGasStationPlugin("https://gasstation.polygon.technology/v2")
        ]
      });
      registerEth("matic-amoy", 80002, {});
      registerEth("matic-mumbai", 80001, {
        altNames: ["maticMumbai", "maticmum"],
        plugins: [
          getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
        ]
      });
      registerEth("optimism", 10, {
        ensNetwork: 1,
        plugins: []
      });
      registerEth("optimism-goerli", 420, {});
      registerEth("optimism-sepolia", 11155420, {});
      registerEth("xdai", 100, { ensNetwork: 1 });
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-polling.js
var require_subscriber_polling = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-polling.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PollingEventSubscriber = exports2.PollingTransactionSubscriber = exports2.PollingOrphanSubscriber = exports2.PollingBlockTagSubscriber = exports2.OnBlockSubscriber = exports2.PollingBlockSubscriber = exports2.getPollingSubscriber = void 0;
    var index_js_1 = require_utils();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function getPollingSubscriber(provider, event) {
      if (event === "block") {
        return new PollingBlockSubscriber(provider);
      }
      if ((0, index_js_1.isHexString)(event, 32)) {
        return new PollingTransactionSubscriber(provider, event);
      }
      (0, index_js_1.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
        operation: "getPollingSubscriber",
        info: { event }
      });
    }
    exports2.getPollingSubscriber = getPollingSubscriber;
    var PollingBlockSubscriber = class {
      #provider;
      #poller;
      #interval;
      // The most recent block we have scanned for events. The value -2
      // indicates we still need to fetch an initial block number
      #blockNumber;
      /**
       *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        this.#provider = provider;
        this.#poller = null;
        this.#interval = 4e3;
        this.#blockNumber = -2;
      }
      /**
       *  The polling interval.
       */
      get pollingInterval() {
        return this.#interval;
      }
      set pollingInterval(value) {
        this.#interval = value;
      }
      async #poll() {
        try {
          const blockNumber = await this.#provider.getBlockNumber();
          if (this.#blockNumber === -2) {
            this.#blockNumber = blockNumber;
            return;
          }
          if (blockNumber !== this.#blockNumber) {
            for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {
              if (this.#poller == null) {
                return;
              }
              await this.#provider.emit("block", b);
            }
            this.#blockNumber = blockNumber;
          }
        } catch (error) {
        }
        if (this.#poller == null) {
          return;
        }
        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
      }
      start() {
        if (this.#poller) {
          return;
        }
        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
        this.#poll();
      }
      stop() {
        if (!this.#poller) {
          return;
        }
        this.#provider._clearTimeout(this.#poller);
        this.#poller = null;
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          this.#blockNumber = -2;
        }
      }
      resume() {
        this.start();
      }
    };
    exports2.PollingBlockSubscriber = PollingBlockSubscriber;
    var OnBlockSubscriber = class {
      #provider;
      #poll;
      #running;
      /**
       *  Create a new **OnBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        this.#provider = provider;
        this.#running = false;
        this.#poll = (blockNumber) => {
          this._poll(blockNumber, this.#provider);
        };
      }
      /**
       *  Called on every new block.
       */
      async _poll(blockNumber, provider) {
        throw new Error("sub-classes must override this");
      }
      start() {
        if (this.#running) {
          return;
        }
        this.#running = true;
        this.#poll(-2);
        this.#provider.on("block", this.#poll);
      }
      stop() {
        if (!this.#running) {
          return;
        }
        this.#running = false;
        this.#provider.off("block", this.#poll);
      }
      pause(dropWhilePaused) {
        this.stop();
      }
      resume() {
        this.start();
      }
    };
    exports2.OnBlockSubscriber = OnBlockSubscriber;
    var PollingBlockTagSubscriber = class extends OnBlockSubscriber {
      #tag;
      #lastBlock;
      constructor(provider, tag) {
        super(provider);
        this.#tag = tag;
        this.#lastBlock = -2;
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          this.#lastBlock = -2;
        }
        super.pause(dropWhilePaused);
      }
      async _poll(blockNumber, provider) {
        const block = await provider.getBlock(this.#tag);
        if (block == null) {
          return;
        }
        if (this.#lastBlock === -2) {
          this.#lastBlock = block.number;
        } else if (block.number > this.#lastBlock) {
          provider.emit(this.#tag, block.number);
          this.#lastBlock = block.number;
        }
      }
    };
    exports2.PollingBlockTagSubscriber = PollingBlockTagSubscriber;
    var PollingOrphanSubscriber = class extends OnBlockSubscriber {
      #filter;
      constructor(provider, filter) {
        super(provider);
        this.#filter = copy(filter);
      }
      async _poll(blockNumber, provider) {
        throw new Error("@TODO");
        console.log(this.#filter);
      }
    };
    exports2.PollingOrphanSubscriber = PollingOrphanSubscriber;
    var PollingTransactionSubscriber = class extends OnBlockSubscriber {
      #hash;
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%hash%%.
       */
      constructor(provider, hash) {
        super(provider);
        this.#hash = hash;
      }
      async _poll(blockNumber, provider) {
        const tx = await provider.getTransactionReceipt(this.#hash);
        if (tx) {
          provider.emit(this.#hash, tx);
        }
      }
    };
    exports2.PollingTransactionSubscriber = PollingTransactionSubscriber;
    var PollingEventSubscriber = class {
      #provider;
      #filter;
      #poller;
      #running;
      // The most recent block we have scanned for events. The value -2
      // indicates we still need to fetch an initial block number
      #blockNumber;
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%filter%%.
       */
      constructor(provider, filter) {
        this.#provider = provider;
        this.#filter = copy(filter);
        this.#poller = this.#poll.bind(this);
        this.#running = false;
        this.#blockNumber = -2;
      }
      async #poll(blockNumber) {
        if (this.#blockNumber === -2) {
          return;
        }
        const filter = copy(this.#filter);
        filter.fromBlock = this.#blockNumber + 1;
        filter.toBlock = blockNumber;
        const logs = await this.#provider.getLogs(filter);
        if (logs.length === 0) {
          if (this.#blockNumber < blockNumber - 60) {
            this.#blockNumber = blockNumber - 60;
          }
          return;
        }
        for (const log of logs) {
          this.#provider.emit(this.#filter, log);
          this.#blockNumber = log.blockNumber;
        }
      }
      start() {
        if (this.#running) {
          return;
        }
        this.#running = true;
        if (this.#blockNumber === -2) {
          this.#provider.getBlockNumber().then((blockNumber) => {
            this.#blockNumber = blockNumber;
          });
        }
        this.#provider.on("block", this.#poller);
      }
      stop() {
        if (!this.#running) {
          return;
        }
        this.#running = false;
        this.#provider.off("block", this.#poller);
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          this.#blockNumber = -2;
        }
      }
      resume() {
        this.start();
      }
    };
    exports2.PollingEventSubscriber = PollingEventSubscriber;
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-provider.js
var require_abstract_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbstractProvider = exports2.UnmanagedSubscriber = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_constants();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash();
    var index_js_5 = require_transaction2();
    var index_js_6 = require_utils();
    var ens_resolver_js_1 = require_ens_resolver();
    var format_js_1 = require_format();
    var network_js_1 = require_network();
    var provider_js_1 = require_provider();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var BN_2 = BigInt(2);
    var MAX_CCIP_REDIRECTS = 10;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    function getTag(prefix, value) {
      return prefix + ":" + JSON.stringify(value, (k, v) => {
        if (v == null) {
          return "null";
        }
        if (typeof v === "bigint") {
          return `bigint:${v.toString()}`;
        }
        if (typeof v === "string") {
          return v.toLowerCase();
        }
        if (typeof v === "object" && !Array.isArray(v)) {
          const keys = Object.keys(v);
          keys.sort();
          return keys.reduce((accum, key) => {
            accum[key] = v[key];
            return accum;
          }, {});
        }
        return v;
      });
    }
    var UnmanagedSubscriber = class {
      /**
       *  The name fof the event.
       */
      name;
      /**
       *  Create a new UnmanagedSubscriber with %%name%%.
       */
      constructor(name) {
        (0, index_js_6.defineProperties)(this, { name });
      }
      start() {
      }
      stop() {
      }
      pause(dropWhilePaused) {
      }
      resume() {
      }
    };
    exports2.UnmanagedSubscriber = UnmanagedSubscriber;
    function copy(value) {
      return JSON.parse(JSON.stringify(value));
    }
    function concisify(items) {
      items = Array.from(new Set(items).values());
      items.sort();
      return items;
    }
    async function getSubscription(_event, provider) {
      if (_event == null) {
        throw new Error("invalid event");
      }
      if (Array.isArray(_event)) {
        _event = { topics: _event };
      }
      if (typeof _event === "string") {
        switch (_event) {
          case "block":
          case "debug":
          case "error":
          case "finalized":
          case "network":
          case "pending":
          case "safe": {
            return { type: _event, tag: _event };
          }
        }
      }
      if ((0, index_js_6.isHexString)(_event, 32)) {
        const hash = _event.toLowerCase();
        return { type: "transaction", tag: getTag("tx", { hash }), hash };
      }
      if (_event.orphan) {
        const event = _event;
        return { type: "orphan", tag: getTag("orphan", event), filter: copy(event) };
      }
      if (_event.address || _event.topics) {
        const event = _event;
        const filter = {
          topics: (event.topics || []).map((t) => {
            if (t == null) {
              return null;
            }
            if (Array.isArray(t)) {
              return concisify(t.map((t2) => t2.toLowerCase()));
            }
            return t.toLowerCase();
          })
        };
        if (event.address) {
          const addresses = [];
          const promises = [];
          const addAddress = (addr) => {
            if ((0, index_js_6.isHexString)(addr)) {
              addresses.push(addr);
            } else {
              promises.push((async () => {
                addresses.push(await (0, index_js_1.resolveAddress)(addr, provider));
              })());
            }
          };
          if (Array.isArray(event.address)) {
            event.address.forEach(addAddress);
          } else {
            addAddress(event.address);
          }
          if (promises.length) {
            await Promise.all(promises);
          }
          filter.address = concisify(addresses.map((a) => a.toLowerCase()));
        }
        return { filter, tag: getTag("event", filter), type: "event" };
      }
      (0, index_js_6.assertArgument)(false, "unknown ProviderEvent", "event", _event);
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    var defaultOptions = {
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var AbstractProvider = class {
      #subs;
      #plugins;
      // null=unpaused, true=paused+dropWhilePaused, false=paused
      #pausedState;
      #destroyed;
      #networkPromise;
      #anyNetwork;
      #performCache;
      // The most recent block number if running an event or -1 if no "block" event
      #lastBlockNumber;
      #nextTimer;
      #timers;
      #disableCcipRead;
      #options;
      /**
       *  Create a new **AbstractProvider** connected to %%network%%, or
       *  use the various network detection capabilities to discover the
       *  [[Network]] if necessary.
       */
      constructor(_network, options) {
        this.#options = Object.assign({}, defaultOptions, options || {});
        if (_network === "any") {
          this.#anyNetwork = true;
          this.#networkPromise = null;
        } else if (_network) {
          const network = network_js_1.Network.from(_network);
          this.#anyNetwork = false;
          this.#networkPromise = Promise.resolve(network);
          setTimeout(() => {
            this.emit("network", network, null);
          }, 0);
        } else {
          this.#anyNetwork = false;
          this.#networkPromise = null;
        }
        this.#lastBlockNumber = -1;
        this.#performCache = /* @__PURE__ */ new Map();
        this.#subs = /* @__PURE__ */ new Map();
        this.#plugins = /* @__PURE__ */ new Map();
        this.#pausedState = null;
        this.#destroyed = false;
        this.#nextTimer = 1;
        this.#timers = /* @__PURE__ */ new Map();
        this.#disableCcipRead = false;
      }
      get pollingInterval() {
        return this.#options.pollingInterval;
      }
      /**
       *  Returns ``this``, to allow an **AbstractProvider** to implement
       *  the [[ContractRunner]] interface.
       */
      get provider() {
        return this;
      }
      /**
       *  Returns all the registered plug-ins.
       */
      get plugins() {
        return Array.from(this.#plugins.values());
      }
      /**
       *  Attach a new plug-in.
       */
      attachPlugin(plugin) {
        if (this.#plugins.get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        this.#plugins.set(plugin.name, plugin.connect(this));
        return this;
      }
      /**
       *  Get a plugin by name.
       */
      getPlugin(name) {
        return this.#plugins.get(name) || null;
      }
      /**
       *  Prevent any CCIP-read operation, regardless of whether requested
       *  in a [[call]] using ``enableCcipRead``.
       */
      get disableCcipRead() {
        return this.#disableCcipRead;
      }
      set disableCcipRead(value) {
        this.#disableCcipRead = !!value;
      }
      // Shares multiple identical requests made during the same 250ms
      async #perform(req) {
        const timeout = this.#options.cacheTimeout;
        if (timeout < 0) {
          return await this._perform(req);
        }
        const tag = getTag(req.method, req);
        let perform = this.#performCache.get(tag);
        if (!perform) {
          perform = this._perform(req);
          this.#performCache.set(tag, perform);
          setTimeout(() => {
            if (this.#performCache.get(tag) === perform) {
              this.#performCache.delete(tag);
            }
          }, timeout);
        }
        return await perform;
      }
      /**
       *  Resolves to the data for executing the CCIP-read operations.
       */
      async ccipReadFetch(tx, calldata, urls) {
        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
          return null;
        }
        const sender = tx.to.toLowerCase();
        const data = calldata.toLowerCase();
        const errorMessages = [];
        for (let i = 0; i < urls.length; i++) {
          const url = urls[i];
          const href = url.replace("{sender}", sender).replace("{data}", data);
          const request = new index_js_6.FetchRequest(href);
          if (url.indexOf("{data}") === -1) {
            request.body = { data, sender };
          }
          this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
          let errorMessage = "unknown error";
          let resp;
          try {
            resp = await request.send();
          } catch (error) {
            errorMessages.push(error.message);
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
            continue;
          }
          try {
            const result = resp.bodyJson;
            if (result.data) {
              this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
              return result.data;
            }
            if (result.message) {
              errorMessage = result.message;
            }
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
          } catch (error) {
          }
          (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
          errorMessages.push(errorMessage);
        }
        (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
          reason: "500_SERVER_ERROR",
          transaction: tx,
          info: { urls, errorMessages }
        });
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a block before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Block]].
       */
      _wrapBlock(value, network) {
        return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a log before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Log]].
       */
      _wrapLog(value, network) {
        return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  receipt before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionReceipt]].
       */
      _wrapTransactionReceipt(value, network) {
        return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  response before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionResponse]].
       */
      _wrapTransactionResponse(tx, network) {
        return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);
      }
      /**
       *  Resolves to the Network, forcing a network detection using whatever
       *  technique the sub-class requires.
       *
       *  Sub-classes **must** override this.
       */
      _detectNetwork() {
        (0, index_js_6.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
          operation: "_detectNetwork"
        });
      }
      /**
       *  Sub-classes should use this to perform all built-in operations. All
       *  methods sanitizes and normalizes the values passed into this.
       *
       *  Sub-classes **must** override this.
       */
      async _perform(req) {
        (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
          operation: req.method,
          info: req
        });
      }
      // State
      async getBlockNumber() {
        const blockNumber = (0, index_js_6.getNumber)(await this.#perform({ method: "getBlockNumber" }), "%response");
        if (this.#lastBlockNumber >= 0) {
          this.#lastBlockNumber = blockNumber;
        }
        return blockNumber;
      }
      /**
       *  Returns or resolves to the address for %%address%%, resolving ENS
       *  names and [[Addressable]] objects and returning if already an
       *  address.
       */
      _getAddress(address) {
        return (0, index_js_1.resolveAddress)(address, this);
      }
      /**
       *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
       *  negative values and returning if already a valid block tag.
       */
      _getBlockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        switch (blockTag) {
          case "earliest":
            return "0x0";
          case "finalized":
          case "latest":
          case "pending":
          case "safe":
            return blockTag;
        }
        if ((0, index_js_6.isHexString)(blockTag)) {
          if ((0, index_js_6.isHexString)(blockTag, 32)) {
            return blockTag;
          }
          return (0, index_js_6.toQuantity)(blockTag);
        }
        if (typeof blockTag === "bigint") {
          blockTag = (0, index_js_6.getNumber)(blockTag, "blockTag");
        }
        if (typeof blockTag === "number") {
          if (blockTag >= 0) {
            return (0, index_js_6.toQuantity)(blockTag);
          }
          if (this.#lastBlockNumber >= 0) {
            return (0, index_js_6.toQuantity)(this.#lastBlockNumber + blockTag);
          }
          return this.getBlockNumber().then((b) => (0, index_js_6.toQuantity)(b + blockTag));
        }
        (0, index_js_6.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
      }
      /**
       *  Returns or resolves to a filter for %%filter%%, resolving any ENS
       *  names or [[Addressable]] object and returning if already a valid
       *  filter.
       */
      _getFilter(filter) {
        const topics = (filter.topics || []).map((t) => {
          if (t == null) {
            return null;
          }
          if (Array.isArray(t)) {
            return concisify(t.map((t2) => t2.toLowerCase()));
          }
          return t.toLowerCase();
        });
        const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
        const resolve2 = (_address, fromBlock2, toBlock2) => {
          let address2 = void 0;
          switch (_address.length) {
            case 0:
              break;
            case 1:
              address2 = _address[0];
              break;
            default:
              _address.sort();
              address2 = _address;
          }
          if (blockHash) {
            if (fromBlock2 != null || toBlock2 != null) {
              throw new Error("invalid filter");
            }
          }
          const filter2 = {};
          if (address2) {
            filter2.address = address2;
          }
          if (topics.length) {
            filter2.topics = topics;
          }
          if (fromBlock2) {
            filter2.fromBlock = fromBlock2;
          }
          if (toBlock2) {
            filter2.toBlock = toBlock2;
          }
          if (blockHash) {
            filter2.blockHash = blockHash;
          }
          return filter2;
        };
        let address = [];
        if (filter.address) {
          if (Array.isArray(filter.address)) {
            for (const addr of filter.address) {
              address.push(this._getAddress(addr));
            }
          } else {
            address.push(this._getAddress(filter.address));
          }
        }
        let fromBlock = void 0;
        if ("fromBlock" in filter) {
          fromBlock = this._getBlockTag(filter.fromBlock);
        }
        let toBlock = void 0;
        if ("toBlock" in filter) {
          toBlock = this._getBlockTag(filter.toBlock);
        }
        if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
          return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
            return resolve2(result[0], result[1], result[2]);
          });
        }
        return resolve2(address, fromBlock, toBlock);
      }
      /**
       *  Returns or resolves to a transaction for %%request%%, resolving
       *  any ENS names or [[Addressable]] and returning if already a valid
       *  transaction.
       */
      _getTransactionRequest(_request) {
        const request = (0, provider_js_1.copyRequest)(_request);
        const promises = [];
        ["to", "from"].forEach((key) => {
          if (request[key] == null) {
            return;
          }
          const addr = (0, index_js_1.resolveAddress)(request[key], this);
          if (isPromise(addr)) {
            promises.push(async function() {
              request[key] = await addr;
            }());
          } else {
            request[key] = addr;
          }
        });
        if (request.blockTag != null) {
          const blockTag = this._getBlockTag(request.blockTag);
          if (isPromise(blockTag)) {
            promises.push(async function() {
              request.blockTag = await blockTag;
            }());
          } else {
            request.blockTag = blockTag;
          }
        }
        if (promises.length) {
          return async function() {
            await Promise.all(promises);
            return request;
          }();
        }
        return request;
      }
      async getNetwork() {
        if (this.#networkPromise == null) {
          const detectNetwork = (async () => {
            try {
              const network = await this._detectNetwork();
              this.emit("network", network, null);
              return network;
            } catch (error) {
              if (this.#networkPromise === detectNetwork) {
                this.#networkPromise = null;
              }
              throw error;
            }
          })();
          this.#networkPromise = detectNetwork;
          return (await detectNetwork).clone();
        }
        const networkPromise = this.#networkPromise;
        const [expected, actual] = await Promise.all([
          networkPromise,
          this._detectNetwork()
          // The actual connected network
        ]);
        if (expected.chainId !== actual.chainId) {
          if (this.#anyNetwork) {
            this.emit("network", actual, expected);
            if (this.#networkPromise === networkPromise) {
              this.#networkPromise = Promise.resolve(actual);
            }
          } else {
            (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
              event: "changed"
            });
          }
        }
        return expected.clone();
      }
      async getFeeData() {
        const network = await this.getNetwork();
        const getFeeDataFunc = async () => {
          const { _block, gasPrice, priorityFee } = await (0, index_js_6.resolveProperties)({
            _block: this.#getBlock("latest", false),
            gasPrice: (async () => {
              try {
                const value = await this.#perform({ method: "getGasPrice" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })(),
            priorityFee: (async () => {
              try {
                const value = await this.#perform({ method: "getPriorityFee" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })()
          });
          let maxFeePerGas = null;
          let maxPriorityFeePerGas = null;
          const block = this._wrapBlock(_block, network);
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
            maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;
          }
          return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
        };
        const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        if (plugin) {
          const req = new index_js_6.FetchRequest(plugin.url);
          const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
          return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
        }
        return await getFeeDataFunc();
      }
      async estimateGas(_tx) {
        let tx = this._getTransactionRequest(_tx);
        if (isPromise(tx)) {
          tx = await tx;
        }
        return (0, index_js_6.getBigInt)(await this.#perform({
          method: "estimateGas",
          transaction: tx
        }), "%response");
      }
      async #call(tx, blockTag, attempt) {
        (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
          reason: "TOO_MANY_REDIRECTS",
          transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
        });
        const transaction = (0, provider_js_1.copyRequest)(tx);
        try {
          return (0, index_js_6.hexlify)(await this._perform({ method: "call", transaction, blockTag }));
        } catch (error) {
          if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === "0x556f1830") {
            const data = error.data;
            const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);
            let ccipArgs;
            try {
              ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));
            } catch (error2) {
              (0, index_js_6.assert)(false, error2.message, "OFFCHAIN_FAULT", {
                reason: "BAD_DATA",
                transaction,
                info: { data }
              });
            }
            (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
              action: "call",
              data,
              reason: "OffchainLookup",
              transaction,
              invocation: null,
              revert: {
                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                name: "OffchainLookup",
                args: ccipArgs.errorArgs
              }
            });
            const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
            (0, index_js_6.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
              reason: "FETCH_FAILED",
              transaction,
              info: { data: error.data, errorArgs: ccipArgs.errorArgs }
            });
            const tx2 = {
              to: txSender,
              data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
            };
            this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
            try {
              const result = await this.#call(tx2, blockTag, attempt + 1);
              this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
              return result;
            } catch (error2) {
              this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
              throw error2;
            }
          }
          throw error;
        }
      }
      async #checkNetwork(promise) {
        const { value } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          value: promise
        });
        return value;
      }
      async call(_tx) {
        const { tx, blockTag } = await (0, index_js_6.resolveProperties)({
          tx: this._getTransactionRequest(_tx),
          blockTag: this._getBlockTag(_tx.blockTag)
        });
        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
      }
      // Account
      async #getAccountValue(request, _address, _blockTag) {
        let address = this._getAddress(_address);
        let blockTag = this._getBlockTag(_blockTag);
        if (typeof address !== "string" || typeof blockTag !== "string") {
          [address, blockTag] = await Promise.all([address, blockTag]);
        }
        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));
      }
      async getBalance(address, blockTag) {
        return (0, index_js_6.getBigInt)(await this.#getAccountValue({ method: "getBalance" }, address, blockTag), "%response");
      }
      async getTransactionCount(address, blockTag) {
        return (0, index_js_6.getNumber)(await this.#getAccountValue({ method: "getTransactionCount" }, address, blockTag), "%response");
      }
      async getCode(address, blockTag) {
        return (0, index_js_6.hexlify)(await this.#getAccountValue({ method: "getCode" }, address, blockTag));
      }
      async getStorage(address, _position, blockTag) {
        const position = (0, index_js_6.getBigInt)(_position, "position");
        return (0, index_js_6.hexlify)(await this.#getAccountValue({ method: "getStorage", position }, address, blockTag));
      }
      // Write
      async broadcastTransaction(signedTx) {
        const { blockNumber, hash, network } = await (0, index_js_6.resolveProperties)({
          blockNumber: this.getBlockNumber(),
          hash: this._perform({
            method: "broadcastTransaction",
            signedTransaction: signedTx
          }),
          network: this.getNetwork()
        });
        const tx = index_js_5.Transaction.from(signedTx);
        if (tx.hash !== hash) {
          throw new Error("@TODO: the returned hash did not match");
        }
        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
      }
      async #getBlock(block, includeTransactions) {
        if ((0, index_js_6.isHexString)(block, 32)) {
          return await this.#perform({
            method: "getBlock",
            blockHash: block,
            includeTransactions
          });
        }
        let blockTag = this._getBlockTag(block);
        if (typeof blockTag !== "string") {
          blockTag = await blockTag;
        }
        return await this.#perform({
          method: "getBlock",
          blockTag,
          includeTransactions
        });
      }
      // Queries
      async getBlock(block, prefetchTxs) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: this.#getBlock(block, !!prefetchTxs)
        });
        if (params == null) {
          return null;
        }
        return this._wrapBlock(params, network);
      }
      async getTransaction(hash) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: this.#perform({ method: "getTransaction", hash })
        });
        if (params == null) {
          return null;
        }
        return this._wrapTransactionResponse(params, network);
      }
      async getTransactionReceipt(hash) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: this.#perform({ method: "getTransactionReceipt", hash })
        });
        if (params == null) {
          return null;
        }
        if (params.gasPrice == null && params.effectiveGasPrice == null) {
          const tx = await this.#perform({ method: "getTransaction", hash });
          if (tx == null) {
            throw new Error("report this; could not find tx or effectiveGasPrice");
          }
          params.effectiveGasPrice = tx.gasPrice;
        }
        return this._wrapTransactionReceipt(params, network);
      }
      async getTransactionResult(hash) {
        const { result } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          result: this.#perform({ method: "getTransactionResult", hash })
        });
        if (result == null) {
          return null;
        }
        return (0, index_js_6.hexlify)(result);
      }
      // Bloom-filter Queries
      async getLogs(_filter) {
        let filter = this._getFilter(_filter);
        if (isPromise(filter)) {
          filter = await filter;
        }
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: this.#perform({ method: "getLogs", filter })
        });
        return params.map((p) => this._wrapLog(p, network));
      }
      // ENS
      _getProvider(chainId) {
        (0, index_js_6.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
          operation: "_getProvider()"
        });
      }
      async getResolver(name) {
        return await ens_resolver_js_1.EnsResolver.fromName(this, name);
      }
      async getAvatar(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAvatar();
        }
        return null;
      }
      async resolveName(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAddress();
        }
        return null;
      }
      async lookupAddress(address) {
        address = (0, index_js_1.getAddress)(address);
        const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + ".addr.reverse");
        try {
          const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);
          const ensContract = new index_js_3.Contract(ensAddr, [
            "function resolver(bytes32) view returns (address)"
          ], this);
          const resolver = await ensContract.resolver(node);
          if (resolver == null || resolver === index_js_2.ZeroAddress) {
            return null;
          }
          const resolverContract = new index_js_3.Contract(resolver, [
            "function name(bytes32) view returns (string)"
          ], this);
          const name = await resolverContract.name(node);
          const check = await this.resolveName(name);
          if (check !== address) {
            return null;
          }
          return name;
        } catch (error) {
          if ((0, index_js_6.isError)(error, "BAD_DATA") && error.value === "0x") {
            return null;
          }
          if ((0, index_js_6.isError)(error, "CALL_EXCEPTION")) {
            return null;
          }
          throw error;
        }
        return null;
      }
      async waitForTransaction(hash, _confirms, timeout) {
        const confirms = _confirms != null ? _confirms : 1;
        if (confirms === 0) {
          return this.getTransactionReceipt(hash);
        }
        return new Promise(async (resolve2, reject2) => {
          let timer = null;
          const listener = async (blockNumber) => {
            try {
              const receipt = await this.getTransactionReceipt(hash);
              if (receipt != null) {
                if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                  resolve2(receipt);
                  if (timer) {
                    clearTimeout(timer);
                    timer = null;
                  }
                  return;
                }
              }
            } catch (error) {
              console.log("EEE", error);
            }
            this.once("block", listener);
          };
          if (timeout != null) {
            timer = setTimeout(() => {
              if (timer == null) {
                return;
              }
              timer = null;
              this.off("block", listener);
              reject2((0, index_js_6.makeError)("timeout", "TIMEOUT", { reason: "timeout" }));
            }, timeout);
          }
          listener(await this.getBlockNumber());
        });
      }
      async waitForBlock(blockTag) {
        (0, index_js_6.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
          operation: "waitForBlock"
        });
      }
      /**
       *  Clear a timer created using the [[_setTimeout]] method.
       */
      _clearTimeout(timerId) {
        const timer = this.#timers.get(timerId);
        if (!timer) {
          return;
        }
        if (timer.timer) {
          clearTimeout(timer.timer);
        }
        this.#timers.delete(timerId);
      }
      /**
       *  Create a timer that will execute %%func%% after at least %%timeout%%
       *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
       *  in the next event loop.
       *
       *  [Pausing](AbstractProvider-paused) the provider will pause any
       *  associated timers.
       */
      _setTimeout(_func, timeout) {
        if (timeout == null) {
          timeout = 0;
        }
        const timerId = this.#nextTimer++;
        const func = () => {
          this.#timers.delete(timerId);
          _func();
        };
        if (this.paused) {
          this.#timers.set(timerId, { timer: null, func, time: timeout });
        } else {
          const timer = setTimeout(func, timeout);
          this.#timers.set(timerId, { timer, func, time: getTime() });
        }
        return timerId;
      }
      /**
       *  Perform %%func%% on each subscriber.
       */
      _forEachSubscriber(func) {
        for (const sub of this.#subs.values()) {
          func(sub.subscriber);
        }
      }
      /**
       *  Sub-classes may override this to customize subscription
       *  implementations.
       */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "debug":
          case "error":
          case "network":
            return new UnmanagedSubscriber(sub.type);
          case "block": {
            const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);
            subscriber.pollingInterval = this.pollingInterval;
            return subscriber;
          }
          case "safe":
          case "finalized":
            return new subscriber_polling_js_1.PollingBlockTagSubscriber(this, sub.type);
          case "event":
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          case "transaction":
            return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);
          case "orphan":
            return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);
        }
        throw new Error(`unsupported event: ${sub.type}`);
      }
      /**
       *  If a [[Subscriber]] fails and needs to replace itself, this
       *  method may be used.
       *
       *  For example, this is used for providers when using the
       *  ``eth_getFilterChanges`` method, which can return null if state
       *  filters are not supported by the backend, allowing the Subscriber
       *  to swap in a [[PollingEventSubscriber]].
       */
      _recoverSubscriber(oldSub, newSub) {
        for (const sub of this.#subs.values()) {
          if (sub.subscriber === oldSub) {
            if (sub.started) {
              sub.subscriber.stop();
            }
            sub.subscriber = newSub;
            if (sub.started) {
              newSub.start();
            }
            if (this.#pausedState != null) {
              newSub.pause(this.#pausedState);
            }
            break;
          }
        }
      }
      async #hasSub(event, emitArgs) {
        let sub = await getSubscription(event, this);
        if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
          sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
        }
        return this.#subs.get(sub.tag) || null;
      }
      async #getSub(event) {
        const subscription = await getSubscription(event, this);
        const tag = subscription.tag;
        let sub = this.#subs.get(tag);
        if (!sub) {
          const subscriber = this._getSubscriber(subscription);
          const addressableMap = /* @__PURE__ */ new WeakMap();
          const nameMap = /* @__PURE__ */ new Map();
          sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
          this.#subs.set(tag, sub);
        }
        return sub;
      }
      async on(event, listener) {
        const sub = await this.#getSub(event);
        sub.listeners.push({ listener, once: false });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (this.#pausedState != null) {
            sub.subscriber.pause(this.#pausedState);
          }
        }
        return this;
      }
      async once(event, listener) {
        const sub = await this.#getSub(event);
        sub.listeners.push({ listener, once: true });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (this.#pausedState != null) {
            sub.subscriber.pause(this.#pausedState);
          }
        }
        return this;
      }
      async emit(event, ...args) {
        const sub = await this.#hasSub(event, args);
        if (!sub || sub.listeners.length === 0) {
          return false;
        }
        ;
        const count = sub.listeners.length;
        sub.listeners = sub.listeners.filter(({ listener, once }) => {
          const payload = new index_js_6.EventPayload(this, once ? null : listener, event);
          try {
            listener.call(this, ...args, payload);
          } catch (error) {
          }
          return !once;
        });
        if (sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          this.#subs.delete(sub.tag);
        }
        return count > 0;
      }
      async listenerCount(event) {
        if (event) {
          const sub = await this.#hasSub(event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        let total = 0;
        for (const { listeners } of this.#subs.values()) {
          total += listeners.length;
        }
        return total;
      }
      async listeners(event) {
        if (event) {
          const sub = await this.#hasSub(event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        let result = [];
        for (const { listeners } of this.#subs.values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      async off(event, listener) {
        const sub = await this.#hasSub(event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (!listener || sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          this.#subs.delete(sub.tag);
        }
        return this;
      }
      async removeAllListeners(event) {
        if (event) {
          const { tag, started, subscriber } = await this.#getSub(event);
          if (started) {
            subscriber.stop();
          }
          this.#subs.delete(tag);
        } else {
          for (const [tag, { started, subscriber }] of this.#subs) {
            if (started) {
              subscriber.stop();
            }
            this.#subs.delete(tag);
          }
        }
        return this;
      }
      // Alias for "on"
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      // Alias for "off"
      async removeListener(event, listener) {
        return this.off(event, listener);
      }
      /**
       *  If this provider has been destroyed using the [[destroy]] method.
       *
       *  Once destroyed, all resources are reclaimed, internal event loops
       *  and timers are cleaned up and no further requests may be sent to
       *  the provider.
       */
      get destroyed() {
        return this.#destroyed;
      }
      /**
       *  Sub-classes may use this to shutdown any sockets or release their
       *  resources and reject any pending requests.
       *
       *  Sub-classes **must** call ``super.destroy()``.
       */
      destroy() {
        this.removeAllListeners();
        for (const timerId of this.#timers.keys()) {
          this._clearTimeout(timerId);
        }
        this.#destroyed = true;
      }
      /**
       *  Whether the provider is currently paused.
       *
       *  A paused provider will not emit any events, and generally should
       *  not make any requests to the network, but that is up to sub-classes
       *  to manage.
       *
       *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
       *  which will buffer any events that occur while paused until the
       *  provider is unpaused.
       */
      get paused() {
        return this.#pausedState != null;
      }
      set paused(pause) {
        if (!!pause === this.paused) {
          return;
        }
        if (this.paused) {
          this.resume();
        } else {
          this.pause(false);
        }
      }
      /**
       *  Pause the provider. If %%dropWhilePaused%%, any events that occur
       *  while paused are dropped, otherwise all events will be emitted once
       *  the provider is unpaused.
       */
      pause(dropWhilePaused) {
        this.#lastBlockNumber = -1;
        if (this.#pausedState != null) {
          if (this.#pausedState == !!dropWhilePaused) {
            return;
          }
          (0, index_js_6.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
            operation: "pause"
          });
        }
        this._forEachSubscriber((s) => s.pause(dropWhilePaused));
        this.#pausedState = !!dropWhilePaused;
        for (const timer of this.#timers.values()) {
          if (timer.timer) {
            clearTimeout(timer.timer);
          }
          timer.time = getTime() - timer.time;
        }
      }
      /**
       *  Resume the provider.
       */
      resume() {
        if (this.#pausedState == null) {
          return;
        }
        this._forEachSubscriber((s) => s.resume());
        this.#pausedState = null;
        for (const timer of this.#timers.values()) {
          let timeout = timer.time;
          if (timeout < 0) {
            timeout = 0;
          }
          timer.time = getTime();
          setTimeout(timer.func, timeout);
        }
      }
    };
    exports2.AbstractProvider = AbstractProvider;
    function _parseString(result, start) {
      try {
        const bytes = _parseBytes(result, start);
        if (bytes) {
          return (0, index_js_6.toUtf8String)(bytes);
        }
      } catch (error) {
      }
      return null;
    }
    function _parseBytes(result, start) {
      if (result === "0x") {
        return null;
      }
      try {
        const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));
        const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));
        return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);
      } catch (error) {
      }
      return null;
    }
    function numPad(value) {
      const result = (0, index_js_6.toBeArray)(value);
      if (result.length > 32) {
        throw new Error("internal; should not happen");
      }
      const padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
    }
    function bytesPad(value) {
      if (value.length % 32 === 0) {
        return value;
      }
      const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
    }
    var empty = new Uint8Array([]);
    function encodeBytes(datas) {
      const result = [];
      let byteCount = 0;
      for (let i = 0; i < datas.length; i++) {
        result.push(empty);
        byteCount += 32;
      }
      for (let i = 0; i < datas.length; i++) {
        const data = (0, index_js_6.getBytes)(datas[i]);
        result[i] = numPad(byteCount);
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, index_js_6.concat)(result);
    }
    var zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
    function parseOffchainLookup(data) {
      const result = {
        sender: "",
        urls: [],
        calldata: "",
        selector: "",
        extraData: "",
        errorArgs: []
      };
      (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
        reason: "insufficient OffchainLookup data"
      });
      const sender = (0, index_js_6.dataSlice)(data, 0, 32);
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup sender"
      });
      result.sender = (0, index_js_6.dataSlice)(sender, 12);
      try {
        const urls = [];
        const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));
        const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));
        const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);
        for (let u = 0; u < urlsLength; u++) {
          const url = _parseString(urlsData, u * 32);
          if (url == null) {
            throw new Error("abort");
          }
          urls.push(url);
        }
        result.urls = urls;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup urls"
        });
      }
      try {
        const calldata = _parseBytes(data, 64);
        if (calldata == null) {
          throw new Error("abort");
        }
        result.calldata = calldata;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup calldata"
        });
      }
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup callbaackSelector"
      });
      result.selector = (0, index_js_6.dataSlice)(data, 96, 100);
      try {
        const extraData = _parseBytes(data, 128);
        if (extraData == null) {
          throw new Error("abort");
        }
        result.extraData = extraData;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup extraData"
        });
      }
      result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-signer.js
var require_abstract_signer = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-signer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoidSigner = exports2.AbstractSigner = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_transaction2();
    var index_js_3 = require_utils();
    var provider_js_1 = require_provider();
    function checkProvider(signer, operation) {
      if (signer.provider) {
        return signer.provider;
      }
      (0, index_js_3.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
    }
    async function populate(signer, tx) {
      let pop = (0, provider_js_1.copyRequest)(tx);
      if (pop.to != null) {
        pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);
      }
      if (pop.from != null) {
        const from = pop.from;
        pop.from = Promise.all([
          signer.getAddress(),
          (0, index_js_1.resolveAddress)(from, signer)
        ]).then(([address, from2]) => {
          (0, index_js_3.assertArgument)(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
          return address;
        });
      } else {
        pop.from = signer.getAddress();
      }
      return await (0, index_js_3.resolveProperties)(pop);
    }
    var AbstractSigner = class {
      /**
       *  The provider this signer is connected to.
       */
      provider;
      /**
       *  Creates a new Signer connected to %%provider%%.
       */
      constructor(provider) {
        (0, index_js_3.defineProperties)(this, { provider: provider || null });
      }
      async getNonce(blockTag) {
        return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
      }
      async populateCall(tx) {
        const pop = await populate(this, tx);
        return pop;
      }
      async populateTransaction(tx) {
        const provider = checkProvider(this, "populateTransaction");
        const pop = await populate(this, tx);
        if (pop.nonce == null) {
          pop.nonce = await this.getNonce("pending");
        }
        if (pop.gasLimit == null) {
          pop.gasLimit = await this.estimateGas(pop);
        }
        const network = await this.provider.getNetwork();
        if (pop.chainId != null) {
          const chainId = (0, index_js_3.getBigInt)(pop.chainId);
          (0, index_js_3.assertArgument)(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
        } else {
          pop.chainId = network.chainId;
        }
        const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
          (0, index_js_3.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
          (0, index_js_3.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
        }
        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
          pop.type = 2;
        } else if (pop.type === 0 || pop.type === 1) {
          const feeData = await provider.getFeeData();
          (0, index_js_3.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
            operation: "getGasPrice"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
        } else {
          const feeData = await provider.getFeeData();
          if (pop.type == null) {
            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
              pop.type = 2;
              if (pop.gasPrice != null) {
                const gasPrice = pop.gasPrice;
                delete pop.gasPrice;
                pop.maxFeePerGas = gasPrice;
                pop.maxPriorityFeePerGas = gasPrice;
              } else {
                if (pop.maxFeePerGas == null) {
                  pop.maxFeePerGas = feeData.maxFeePerGas;
                }
                if (pop.maxPriorityFeePerGas == null) {
                  pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                }
              }
            } else if (feeData.gasPrice != null) {
              (0, index_js_3.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                operation: "populateTransaction"
              });
              if (pop.gasPrice == null) {
                pop.gasPrice = feeData.gasPrice;
              }
              pop.type = 0;
            } else {
              (0, index_js_3.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                operation: "signer.getFeeData"
              });
            }
          } else if (pop.type === 2 || pop.type === 3) {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        }
        return await (0, index_js_3.resolveProperties)(pop);
      }
      async estimateGas(tx) {
        return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
      }
      async call(tx) {
        return checkProvider(this, "call").call(await this.populateCall(tx));
      }
      async resolveName(name) {
        const provider = checkProvider(this, "resolveName");
        return await provider.resolveName(name);
      }
      async sendTransaction(tx) {
        const provider = checkProvider(this, "sendTransaction");
        const pop = await this.populateTransaction(tx);
        delete pop.from;
        const txObj = index_js_2.Transaction.from(pop);
        return await provider.broadcastTransaction(await this.signTransaction(txObj));
      }
    };
    exports2.AbstractSigner = AbstractSigner;
    var VoidSigner = class _VoidSigner extends AbstractSigner {
      /**
       *  The signer address.
       */
      address;
      /**
       *  Creates a new **VoidSigner** with %%address%% attached to
       *  %%provider%%.
       */
      constructor(address, provider) {
        super(provider);
        (0, index_js_3.defineProperties)(this, { address });
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _VoidSigner(this.address, provider);
      }
      #throwUnsupported(suffix, operation) {
        (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
      }
      async signTransaction(tx) {
        this.#throwUnsupported("transactions", "signTransaction");
      }
      async signMessage(message) {
        this.#throwUnsupported("messages", "signMessage");
      }
      async signTypedData(domain, types, value) {
        this.#throwUnsupported("typed-data", "signTypedData");
      }
    };
    exports2.VoidSigner = VoidSigner;
  }
});

// node_modules/ethers/lib.commonjs/providers/community.js
var require_community = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/community.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.showThrottleMessage = void 0;
    var shown = /* @__PURE__ */ new Set();
    function showThrottleMessage(service) {
      if (shown.has(service)) {
        return;
      }
      shown.add(service);
      console.log("========= NOTICE =========");
      console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.org/api-keys/");
      console.log("==========================");
    }
    exports2.showThrottleMessage = showThrottleMessage;
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js
var require_subscriber_filterid = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterIdPendingSubscriber = exports2.FilterIdEventSubscriber = exports2.FilterIdSubscriber = void 0;
    var index_js_1 = require_utils();
    var subscriber_polling_js_1 = require_subscriber_polling();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    var FilterIdSubscriber = class {
      #provider;
      #filterIdPromise;
      #poller;
      #running;
      #network;
      #hault;
      /**
       *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
       *  and [[_emitResults]] to setup the subscription and provide the event
       *  to the %%provider%%.
       */
      constructor(provider) {
        this.#provider = provider;
        this.#filterIdPromise = null;
        this.#poller = this.#poll.bind(this);
        this.#running = false;
        this.#network = null;
        this.#hault = false;
      }
      /**
       *  Sub-classes **must** override this to begin the subscription.
       */
      _subscribe(provider) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle the events.
       */
      _emitResults(provider, result) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle recovery on errors.
       */
      _recover(provider) {
        throw new Error("subclasses must override this");
      }
      async #poll(blockNumber) {
        try {
          if (this.#filterIdPromise == null) {
            this.#filterIdPromise = this._subscribe(this.#provider);
          }
          let filterId = null;
          try {
            filterId = await this.#filterIdPromise;
          } catch (error) {
            if (!(0, index_js_1.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
              throw error;
            }
          }
          if (filterId == null) {
            this.#filterIdPromise = null;
            this.#provider._recoverSubscriber(this, this._recover(this.#provider));
            return;
          }
          const network = await this.#provider.getNetwork();
          if (!this.#network) {
            this.#network = network;
          }
          if (this.#network.chainId !== network.chainId) {
            throw new Error("chaid changed");
          }
          if (this.#hault) {
            return;
          }
          const result = await this.#provider.send("eth_getFilterChanges", [filterId]);
          await this._emitResults(this.#provider, result);
        } catch (error) {
          console.log("@TODO", error);
        }
        this.#provider.once("block", this.#poller);
      }
      #teardown() {
        const filterIdPromise = this.#filterIdPromise;
        if (filterIdPromise) {
          this.#filterIdPromise = null;
          filterIdPromise.then((filterId) => {
            if (this.#provider.destroyed) {
              return;
            }
            this.#provider.send("eth_uninstallFilter", [filterId]);
          });
        }
      }
      start() {
        if (this.#running) {
          return;
        }
        this.#running = true;
        this.#poll(-2);
      }
      stop() {
        if (!this.#running) {
          return;
        }
        this.#running = false;
        this.#hault = true;
        this.#teardown();
        this.#provider.off("block", this.#poller);
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          this.#teardown();
        }
        this.#provider.off("block", this.#poller);
      }
      resume() {
        this.start();
      }
    };
    exports2.FilterIdSubscriber = FilterIdSubscriber;
    var FilterIdEventSubscriber = class extends FilterIdSubscriber {
      #event;
      /**
       *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
       *  listening for %%filter%%.
       */
      constructor(provider, filter) {
        super(provider);
        this.#event = copy(filter);
      }
      _recover(provider) {
        return new subscriber_polling_js_1.PollingEventSubscriber(provider, this.#event);
      }
      async _subscribe(provider) {
        const filterId = await provider.send("eth_newFilter", [this.#event]);
        return filterId;
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit(this.#event, provider._wrapLog(result, provider._network));
        }
      }
    };
    exports2.FilterIdEventSubscriber = FilterIdEventSubscriber;
    var FilterIdPendingSubscriber = class extends FilterIdSubscriber {
      async _subscribe(provider) {
        return await provider.send("eth_newPendingTransactionFilter", []);
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit("pending", result);
        }
      }
    };
    exports2.FilterIdPendingSubscriber = FilterIdPendingSubscriber;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js
var require_provider_jsonrpc = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonRpcProvider = exports2.JsonRpcApiPollingProvider = exports2.JsonRpcApiProvider = exports2.JsonRpcSigner = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var index_js_3 = require_hash();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils();
    var abstract_provider_js_1 = require_abstract_provider();
    var abstract_signer_js_1 = require_abstract_signer();
    var network_js_1 = require_network();
    var subscriber_filterid_js_1 = require_subscriber_filterid();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
    function deepCopy(value) {
      if (value == null || Primitive.indexOf(typeof value) >= 0) {
        return value;
      }
      if (typeof value.getAddress === "function") {
        return value;
      }
      if (Array.isArray(value)) {
        return value.map(deepCopy);
      }
      if (typeof value === "object") {
        return Object.keys(value).reduce((accum, key) => {
          accum[key] = value[key];
          return accum;
        }, {});
      }
      throw new Error(`should not happen: ${value} (${typeof value})`);
    }
    function stall(duration) {
      return new Promise((resolve2) => {
        setTimeout(resolve2, duration);
      });
    }
    function getLowerCase(value) {
      if (value) {
        return value.toLowerCase();
      }
      return value;
    }
    function isPollable(value) {
      return value && typeof value.pollingInterval === "number";
    }
    var defaultOptions = {
      polling: false,
      staticNetwork: null,
      batchStallTime: 10,
      batchMaxSize: 1 << 20,
      batchMaxCount: 100,
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var JsonRpcSigner = class extends abstract_signer_js_1.AbstractSigner {
      address;
      constructor(provider, address) {
        super(provider);
        address = (0, index_js_2.getAddress)(address);
        (0, index_js_5.defineProperties)(this, { address });
      }
      connect(provider) {
        (0, index_js_5.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
          operation: "signer.connect"
        });
      }
      async getAddress() {
        return this.address;
      }
      // JSON-RPC will automatially fill in nonce, etc. so we just check from
      async populateTransaction(tx) {
        return await this.populateCall(tx);
      }
      // Returns just the hash of the transaction after sent, which is what
      // the bare JSON-RPC API does;
      async sendUncheckedTransaction(_tx) {
        const tx = deepCopy(_tx);
        const promises = [];
        if (tx.from) {
          const _from = tx.from;
          promises.push((async () => {
            const from = await (0, index_js_2.resolveAddress)(_from, this.provider);
            (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
            tx.from = from;
          })());
        } else {
          tx.from = this.address;
        }
        if (tx.gasLimit == null) {
          promises.push((async () => {
            tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
          })());
        }
        if (tx.to != null) {
          const _to = tx.to;
          promises.push((async () => {
            tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);
          })());
        }
        if (promises.length) {
          await Promise.all(promises);
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return this.provider.send("eth_sendTransaction", [hexTx]);
      }
      async sendTransaction(tx) {
        const blockNumber = await this.provider.getBlockNumber();
        const hash = await this.sendUncheckedTransaction(tx);
        return await new Promise((resolve2, reject2) => {
          const timeouts = [1e3, 100];
          let invalids = 0;
          const checkTx = async () => {
            try {
              const tx2 = await this.provider.getTransaction(hash);
              if (tx2 != null) {
                resolve2(tx2.replaceableTransaction(blockNumber));
                return;
              }
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CANCELLED") || (0, index_js_5.isError)(error, "BAD_DATA") || (0, index_js_5.isError)(error, "NETWORK_ERROR") || (0, index_js_5.isError)(error, "UNSUPPORTED_OPERATION")) {
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash;
                reject2(error);
                return;
              }
              if ((0, index_js_5.isError)(error, "INVALID_ARGUMENT")) {
                invalids++;
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash;
                if (invalids > 10) {
                  reject2(error);
                  return;
                }
              }
              this.provider.emit("error", (0, index_js_5.makeError)("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
            }
            this.provider._setTimeout(() => {
              checkTx();
            }, timeouts.pop() || 4e3);
          };
          checkTx();
        });
      }
      async signTransaction(_tx) {
        const tx = deepCopy(_tx);
        if (tx.from) {
          const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);
          (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        } else {
          tx.from = this.address;
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return await this.provider.send("eth_signTransaction", [hexTx]);
      }
      async signMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("personal_sign", [
          (0, index_js_5.hexlify)(message),
          this.address.toLowerCase()
        ]);
      }
      async signTypedData(domain, types, _value) {
        const value = deepCopy(_value);
        const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
          const address = await (0, index_js_2.resolveAddress)(value2);
          (0, index_js_5.assertArgument)(address != null, "TypedData does not support null address", "value", value2);
          return address;
        });
        return await this.provider.send("eth_signTypedData_v4", [
          this.address.toLowerCase(),
          JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))
        ]);
      }
      async unlock(password) {
        return this.provider.send("personal_unlockAccount", [
          this.address.toLowerCase(),
          password,
          null
        ]);
      }
      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
      async _legacySignMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("eth_sign", [
          this.address.toLowerCase(),
          (0, index_js_5.hexlify)(message)
        ]);
      }
    };
    exports2.JsonRpcSigner = JsonRpcSigner;
    var JsonRpcApiProvider = class extends abstract_provider_js_1.AbstractProvider {
      #options;
      // The next ID to use for the JSON-RPC ID field
      #nextId;
      // Payloads are queued and triggered in batches using the drainTimer
      #payloads;
      #drainTimer;
      #notReady;
      #network;
      #pendingDetectNetwork;
      #scheduleDrain() {
        if (this.#drainTimer) {
          return;
        }
        const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
        this.#drainTimer = setTimeout(() => {
          this.#drainTimer = null;
          const payloads = this.#payloads;
          this.#payloads = [];
          while (payloads.length) {
            const batch = [payloads.shift()];
            while (payloads.length) {
              if (batch.length === this.#options.batchMaxCount) {
                break;
              }
              batch.push(payloads.shift());
              const bytes = JSON.stringify(batch.map((p) => p.payload));
              if (bytes.length > this.#options.batchMaxSize) {
                payloads.unshift(batch.pop());
                break;
              }
            }
            (async () => {
              const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
              this.emit("debug", { action: "sendRpcPayload", payload });
              try {
                const result = await this._send(payload);
                this.emit("debug", { action: "receiveRpcResult", result });
                for (const { resolve: resolve2, reject: reject2, payload: payload2 } of batch) {
                  if (this.destroyed) {
                    reject2((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                    continue;
                  }
                  const resp = result.filter((r) => r.id === payload2.id)[0];
                  if (resp == null) {
                    const error = (0, index_js_5.makeError)("missing response for request", "BAD_DATA", {
                      value: result,
                      info: { payload: payload2 }
                    });
                    this.emit("error", error);
                    reject2(error);
                    continue;
                  }
                  if ("error" in resp) {
                    reject2(this.getRpcError(payload2, resp));
                    continue;
                  }
                  resolve2(resp.result);
                }
              } catch (error) {
                this.emit("debug", { action: "receiveRpcError", error });
                for (const { reject: reject2 } of batch) {
                  reject2(error);
                }
              }
            })();
          }
        }, stallTime);
      }
      constructor(network, options) {
        super(network, options);
        this.#nextId = 1;
        this.#options = Object.assign({}, defaultOptions, options || {});
        this.#payloads = [];
        this.#drainTimer = null;
        this.#network = null;
        this.#pendingDetectNetwork = null;
        {
          let resolve2 = null;
          const promise = new Promise((_resolve) => {
            resolve2 = _resolve;
          });
          this.#notReady = { promise, resolve: resolve2 };
        }
        const staticNetwork = this._getOption("staticNetwork");
        if (typeof staticNetwork === "boolean") {
          (0, index_js_5.assertArgument)(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
          if (staticNetwork && network != null) {
            this.#network = network_js_1.Network.from(network);
          }
        } else if (staticNetwork) {
          (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
          this.#network = staticNetwork;
        }
      }
      /**
       *  Returns the value associated with the option %%key%%.
       *
       *  Sub-classes can use this to inquire about configuration options.
       */
      _getOption(key) {
        return this.#options[key];
      }
      /**
       *  Gets the [[Network]] this provider has committed to. On each call, the network
       *  is detected, and if it has changed, the call will reject.
       */
      get _network() {
        (0, index_js_5.assert)(this.#network, "network is not available yet", "NETWORK_ERROR");
        return this.#network;
      }
      /**
       *  Resolves to the non-normalized value by performing %%req%%.
       *
       *  Sub-classes may override this to modify behavior of actions,
       *  and should generally call ``super._perform`` as a fallback.
       */
      async _perform(req) {
        if (req.method === "call" || req.method === "estimateGas") {
          let tx = req.transaction;
          if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {
            if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
              const feeData = await this.getFeeData();
              if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                req = Object.assign({}, req, {
                  transaction: Object.assign({}, tx, { type: void 0 })
                });
              }
            }
          }
        }
        const request = this.getRpcRequest(req);
        if (request != null) {
          return await this.send(request.method, request.args);
        }
        return super._perform(req);
      }
      /**
       *  Sub-classes may override this; it detects the *actual* network that
       *  we are **currently** connected to.
       *
       *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
       *  _send primitive must be used instead.
       */
      async _detectNetwork() {
        const network = this._getOption("staticNetwork");
        if (network) {
          if (network === true) {
            if (this.#network) {
              return this.#network;
            }
          } else {
            return network;
          }
        }
        if (this.#pendingDetectNetwork) {
          return await this.#pendingDetectNetwork;
        }
        if (this.ready) {
          this.#pendingDetectNetwork = (async () => {
            try {
              const result = network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send("eth_chainId", [])));
              this.#pendingDetectNetwork = null;
              return result;
            } catch (error) {
              this.#pendingDetectNetwork = null;
              throw error;
            }
          })();
          return await this.#pendingDetectNetwork;
        }
        this.#pendingDetectNetwork = (async () => {
          const payload = {
            id: this.#nextId++,
            method: "eth_chainId",
            params: [],
            jsonrpc: "2.0"
          };
          this.emit("debug", { action: "sendRpcPayload", payload });
          let result;
          try {
            result = (await this._send(payload))[0];
            this.#pendingDetectNetwork = null;
          } catch (error) {
            this.#pendingDetectNetwork = null;
            this.emit("debug", { action: "receiveRpcError", error });
            throw error;
          }
          this.emit("debug", { action: "receiveRpcResult", result });
          if ("result" in result) {
            return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));
          }
          throw this.getRpcError(payload, result);
        })();
        return await this.#pendingDetectNetwork;
      }
      /**
       *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
       *  will be passed to [[_send]] from [[send]]. If it is overridden, then
       *  ``super._start()`` **MUST** be called.
       *
       *  Calling it multiple times is safe and has no effect.
       */
      _start() {
        if (this.#notReady == null || this.#notReady.resolve == null) {
          return;
        }
        this.#notReady.resolve();
        this.#notReady = null;
        (async () => {
          while (this.#network == null && !this.destroyed) {
            try {
              this.#network = await this._detectNetwork();
            } catch (error) {
              if (this.destroyed) {
                break;
              }
              console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
              this.emit("error", (0, index_js_5.makeError)("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
              await stall(1e3);
            }
          }
          this.#scheduleDrain();
        })();
      }
      /**
       *  Resolves once the [[_start]] has been called. This can be used in
       *  sub-classes to defer sending data until the connection has been
       *  established.
       */
      async _waitUntilReady() {
        if (this.#notReady == null) {
          return;
        }
        return await this.#notReady.promise;
      }
      /**
       *  Return a Subscriber that will manage the %%sub%%.
       *
       *  Sub-classes may override this to modify the behavior of
       *  subscription management.
       */
      _getSubscriber(sub) {
        if (sub.type === "pending") {
          return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);
        }
        if (sub.type === "event") {
          if (this._getOption("polling")) {
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          }
          return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);
        }
        if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
          return new abstract_provider_js_1.UnmanagedSubscriber("orphan");
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Returns true only if the [[_start]] has been called.
       */
      get ready() {
        return this.#notReady == null;
      }
      /**
       *  Returns %%tx%% as a normalized JSON-RPC transaction request,
       *  which has all values hexlified and any numeric values converted
       *  to Quantity values.
       */
      getRpcTransaction(tx) {
        const result = {};
        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          let dstKey = key;
          if (key === "gasLimit") {
            dstKey = "gas";
          }
          result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));
        });
        ["from", "to", "data"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          result[key] = (0, index_js_5.hexlify)(tx[key]);
        });
        if (tx.accessList) {
          result["accessList"] = (0, index_js_4.accessListify)(tx.accessList);
        }
        if (tx.blobVersionedHashes) {
          result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
        }
        return result;
      }
      /**
       *  Returns the request method and arguments required to perform
       *  %%req%%.
       */
      getRpcRequest(req) {
        switch (req.method) {
          case "chainId":
            return { method: "eth_chainId", args: [] };
          case "getBlockNumber":
            return { method: "eth_blockNumber", args: [] };
          case "getGasPrice":
            return { method: "eth_gasPrice", args: [] };
          case "getPriorityFee":
            return { method: "eth_maxPriorityFeePerGas", args: [] };
          case "getBalance":
            return {
              method: "eth_getBalance",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getTransactionCount":
            return {
              method: "eth_getTransactionCount",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getCode":
            return {
              method: "eth_getCode",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getStorage":
            return {
              method: "eth_getStorageAt",
              args: [
                getLowerCase(req.address),
                "0x" + req.position.toString(16),
                req.blockTag
              ]
            };
          case "broadcastTransaction":
            return {
              method: "eth_sendRawTransaction",
              args: [req.signedTransaction]
            };
          case "getBlock":
            if ("blockTag" in req) {
              return {
                method: "eth_getBlockByNumber",
                args: [req.blockTag, !!req.includeTransactions]
              };
            } else if ("blockHash" in req) {
              return {
                method: "eth_getBlockByHash",
                args: [req.blockHash, !!req.includeTransactions]
              };
            }
            break;
          case "getTransaction":
            return {
              method: "eth_getTransactionByHash",
              args: [req.hash]
            };
          case "getTransactionReceipt":
            return {
              method: "eth_getTransactionReceipt",
              args: [req.hash]
            };
          case "call":
            return {
              method: "eth_call",
              args: [this.getRpcTransaction(req.transaction), req.blockTag]
            };
          case "estimateGas": {
            return {
              method: "eth_estimateGas",
              args: [this.getRpcTransaction(req.transaction)]
            };
          }
          case "getLogs":
            if (req.filter && req.filter.address != null) {
              if (Array.isArray(req.filter.address)) {
                req.filter.address = req.filter.address.map(getLowerCase);
              } else {
                req.filter.address = getLowerCase(req.filter.address);
              }
            }
            return { method: "eth_getLogs", args: [req.filter] };
        }
        return null;
      }
      /**
       *  Returns an ethers-style Error for the given JSON-RPC error
       *  %%payload%%, coalescing the various strings and error shapes
       *  that different nodes return, coercing them into a machine-readable
       *  standardized error.
       */
      getRpcError(payload, _error) {
        const { method } = payload;
        const { error } = _error;
        if (method === "eth_estimateGas" && error.message) {
          const msg = error.message;
          if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
            return (0, index_js_5.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: payload.params[0],
              info: { payload, error }
            });
          }
        }
        if (method === "eth_call" || method === "eth_estimateGas") {
          const result = spelunkData(error);
          const e = index_js_1.AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
          e.info = { error, payload };
          return e;
        }
        const message = JSON.stringify(spelunkMessage(error));
        if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
          const actionMap = {
            eth_sign: "signMessage",
            personal_sign: "signMessage",
            eth_signTypedData_v4: "signTypedData",
            eth_signTransaction: "signTransaction",
            eth_sendTransaction: "sendTransaction",
            eth_requestAccounts: "requestAccess",
            wallet_requestAccounts: "requestAccess"
          };
          return (0, index_js_5.makeError)(`user rejected action`, "ACTION_REJECTED", {
            action: actionMap[method] || "unknown",
            reason: "rejected",
            info: { payload, error }
          });
        }
        if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
          const transaction = payload.params[0];
          if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
            return (0, index_js_5.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
              transaction,
              info: { error }
            });
          }
          if (message.match(/nonce/i) && message.match(/too low/i)) {
            return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
          }
          if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
            return (0, index_js_5.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
          }
          if (message.match(/only replay-protected/i)) {
            return (0, index_js_5.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
              operation: method,
              info: { transaction, info: { error } }
            });
          }
        }
        let unsupported = !!message.match(/the method .* does not exist/i);
        if (!unsupported) {
          if (error && error.details && error.details.startsWith("Unauthorized method:")) {
            unsupported = true;
          }
        }
        if (unsupported) {
          return (0, index_js_5.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
            operation: payload.method,
            info: { error, payload }
          });
        }
        return (0, index_js_5.makeError)("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
      }
      /**
       *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
       *  over the underlying channel. This can be used to call methods
       *  on the backend that do not have a high-level API within the Provider
       *  API.
       *
       *  This method queues requests according to the batch constraints
       *  in the options, assigns the request a unique ID.
       *
       *  **Do NOT override** this method in sub-classes; instead
       *  override [[_send]] or force the options values in the
       *  call to the constructor to modify this method's behavior.
       */
      send(method, params) {
        if (this.destroyed) {
          return Promise.reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
        }
        const id = this.#nextId++;
        const promise = new Promise((resolve2, reject2) => {
          this.#payloads.push({
            resolve: resolve2,
            reject: reject2,
            payload: { method, params, id, jsonrpc: "2.0" }
          });
        });
        this.#scheduleDrain();
        return promise;
      }
      /**
       *  Resolves to the [[Signer]] account for  %%address%% managed by
       *  the client.
       *
       *  If the %%address%% is a number, it is used as an index in the
       *  the accounts from [[listAccounts]].
       *
       *  This can only be used on clients which manage accounts (such as
       *  Geth with imported account or MetaMask).
       *
       *  Throws if the account doesn't exist.
       */
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accountsPromise = this.send("eth_accounts", []);
        if (typeof address === "number") {
          const accounts2 = await accountsPromise;
          if (address >= accounts2.length) {
            throw new Error("no such account");
          }
          return new JsonRpcSigner(this, accounts2[address]);
        }
        const { accounts } = await (0, index_js_5.resolveProperties)({
          network: this.getNetwork(),
          accounts: accountsPromise
        });
        address = (0, index_js_2.getAddress)(address);
        for (const account of accounts) {
          if ((0, index_js_2.getAddress)(account) === address) {
            return new JsonRpcSigner(this, address);
          }
        }
        throw new Error("invalid account");
      }
      async listAccounts() {
        const accounts = await this.send("eth_accounts", []);
        return accounts.map((a) => new JsonRpcSigner(this, a));
      }
      destroy() {
        if (this.#drainTimer) {
          clearTimeout(this.#drainTimer);
          this.#drainTimer = null;
        }
        for (const { payload, reject: reject2 } of this.#payloads) {
          reject2((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
        }
        this.#payloads = [];
        super.destroy();
      }
    };
    exports2.JsonRpcApiProvider = JsonRpcApiProvider;
    var JsonRpcApiPollingProvider = class extends JsonRpcApiProvider {
      #pollingInterval;
      constructor(network, options) {
        super(network, options);
        let pollingInterval = this._getOption("pollingInterval");
        if (pollingInterval == null) {
          pollingInterval = defaultOptions.pollingInterval;
        }
        this.#pollingInterval = pollingInterval;
      }
      _getSubscriber(sub) {
        const subscriber = super._getSubscriber(sub);
        if (isPollable(subscriber)) {
          subscriber.pollingInterval = this.#pollingInterval;
        }
        return subscriber;
      }
      /**
       *  The polling interval (default: 4000 ms)
       */
      get pollingInterval() {
        return this.#pollingInterval;
      }
      set pollingInterval(value) {
        if (!Number.isInteger(value) || value < 0) {
          throw new Error("invalid interval");
        }
        this.#pollingInterval = value;
        this._forEachSubscriber((sub) => {
          if (isPollable(sub)) {
            sub.pollingInterval = this.#pollingInterval;
          }
        });
      }
    };
    exports2.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;
    var JsonRpcProvider = class extends JsonRpcApiPollingProvider {
      #connect;
      constructor(url, network, options) {
        if (url == null) {
          url = "http://localhost:8545";
        }
        super(network, options);
        if (typeof url === "string") {
          this.#connect = new index_js_5.FetchRequest(url);
        } else {
          this.#connect = url.clone();
        }
      }
      _getConnection() {
        return this.#connect.clone();
      }
      async send(method, params) {
        await this._start();
        return await super.send(method, params);
      }
      async _send(payload) {
        const request = this._getConnection();
        request.body = JSON.stringify(payload);
        request.setHeader("content-type", "application/json");
        const response = await request.send();
        response.assertOk();
        let resp = response.bodyJson;
        if (!Array.isArray(resp)) {
          resp = [resp];
        }
        return resp;
      }
    };
    exports2.JsonRpcProvider = JsonRpcProvider;
    function spelunkData(value) {
      if (value == null) {
        return null;
      }
      if (typeof value.message === "string" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {
        return { message: value.message, data: value.data };
      }
      if (typeof value === "object") {
        for (const key in value) {
          const result = spelunkData(value[key]);
          if (result) {
            return result;
          }
        }
        return null;
      }
      if (typeof value === "string") {
        try {
          return spelunkData(JSON.parse(value));
        } catch (error) {
        }
      }
      return null;
    }
    function _spelunkMessage(value, result) {
      if (value == null) {
        return;
      }
      if (typeof value.message === "string") {
        result.push(value.message);
      }
      if (typeof value === "object") {
        for (const key in value) {
          _spelunkMessage(value[key], result);
        }
      }
      if (typeof value === "string") {
        try {
          return _spelunkMessage(JSON.parse(value), result);
        } catch (error) {
        }
      }
    }
    function spelunkMessage(value) {
      const result = [];
      _spelunkMessage(value, result);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ankr.js
var require_provider_ankr = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ankr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AnkrProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "rpc.ankr.com/eth";
        case "goerli":
          return "rpc.ankr.com/eth_goerli";
        case "sepolia":
          return "rpc.ankr.com/eth_sepolia";
        case "arbitrum":
          return "rpc.ankr.com/arbitrum";
        case "base":
          return "rpc.ankr.com/base";
        case "base-goerli":
          return "rpc.ankr.com/base_goerli";
        case "base-sepolia":
          return "rpc.ankr.com/base_sepolia";
        case "bnb":
          return "rpc.ankr.com/bsc";
        case "bnbt":
          return "rpc.ankr.com/bsc_testnet_chapel";
        case "matic":
          return "rpc.ankr.com/polygon";
        case "matic-mumbai":
          return "rpc.ankr.com/polygon_mumbai";
        case "optimism":
          return "rpc.ankr.com/optimism";
        case "optimism-goerli":
          return "rpc.ankr.com/optimism_testnet";
        case "optimism-sepolia":
          return "rpc.ankr.com/optimism_sepolia";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AnkrProvider = class _AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  The API key for the Ankr connection.
       */
      apiKey;
      /**
       *  Create a new **AnkrProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const options = { polling: true, staticNetwork: network };
        const request = _AnkrProvider.getRequest(network, apiKey);
        super(request, network, options);
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AnkrProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%apiKey%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("AnkrProvider");
            return true;
          };
        }
        return request;
      }
      getRpcError(payload, error) {
        if (payload.method === "eth_sendRawTransaction") {
          if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
            error.error.message = "replacement transaction underpriced";
          }
        }
        return super.getRpcError(payload, error);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    exports2.AnkrProvider = AnkrProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-alchemy.js
var require_provider_alchemy = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-alchemy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlchemyProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.alchemyapi.io";
        case "goerli":
          return "eth-goerli.g.alchemy.com";
        case "sepolia":
          return "eth-sepolia.g.alchemy.com";
        case "arbitrum":
          return "arb-mainnet.g.alchemy.com";
        case "arbitrum-goerli":
          return "arb-goerli.g.alchemy.com";
        case "arbitrum-sepolia":
          return "arb-sepolia.g.alchemy.com";
        case "base":
          return "base-mainnet.g.alchemy.com";
        case "base-goerli":
          return "base-goerli.g.alchemy.com";
        case "base-sepolia":
          return "base-sepolia.g.alchemy.com";
        case "matic":
          return "polygon-mainnet.g.alchemy.com";
        case "matic-amoy":
          return "polygon-amoy.g.alchemy.com";
        case "matic-mumbai":
          return "polygon-mumbai.g.alchemy.com";
        case "optimism":
          return "opt-mainnet.g.alchemy.com";
        case "optimism-goerli":
          return "opt-goerli.g.alchemy.com";
        case "optimism-sepolia":
          return "opt-sepolia.g.alchemy.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AlchemyProvider = class _AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      apiKey;
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = _AlchemyProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AlchemyProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      async _perform(req) {
        if (req.method === "getTransactionResult") {
          const { trace, tx } = await (0, index_js_1.resolveProperties)({
            trace: this.send("trace_transaction", [req.hash]),
            tx: this.getTransaction(req.hash)
          });
          if (trace == null || tx == null) {
            return null;
          }
          let data;
          let error = false;
          try {
            data = trace[0].result.output;
            error = trace[0].error === "Reverted";
          } catch (error2) {
          }
          if (data) {
            (0, index_js_1.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
              action: "getTransactionResult",
              data,
              reason: null,
              transaction: tx,
              invocation: null,
              revert: null
              // @TODO
            });
            return data;
          }
          (0, index_js_1.assert)(false, "could not parse trace result", "BAD_DATA", { value: trace });
        }
        return await super._perform(req);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v2/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("alchemy");
            return true;
          };
        }
        return request;
      }
    };
    exports2.AlchemyProvider = AlchemyProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-chainstack.js
var require_provider_chainstack = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-chainstack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChainstackProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    function getApiKey(name) {
      switch (name) {
        case "mainnet":
          return "39f1d67cedf8b7831010a665328c9197";
        case "arbitrum":
          return "0550c209db33c3abf4cc927e1e18cea1";
        case "bnb":
          return "98b5a77e531614387366f6fc5da097f8";
        case "matic":
          return "cd9d4d70377471aa7c142ec4a4205249";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethereum-mainnet.core.chainstack.com";
        case "arbitrum":
          return "arbitrum-mainnet.core.chainstack.com";
        case "bnb":
          return "bsc-mainnet.core.chainstack.com";
        case "matic":
          return "polygon-mainnet.core.chainstack.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var ChainstackProvider = class _ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  The API key for the Chainstack connection.
       */
      apiKey;
      /**
       *  Creates a new **ChainstackProvider**.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = _ChainstackProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _ChainstackProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.apiKey === getApiKey(this._network.name);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%apiKey%% and %%projectSecret%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === getApiKey(network.name)) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("ChainstackProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports2.ChainstackProvider = ChainstackProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js
var require_provider_cloudflare = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CloudflareProvider = void 0;
    var index_js_1 = require_utils();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var CloudflareProvider = class extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        (0, index_js_1.assertArgument)(network.name === "mainnet", "unsupported network", "network", _network);
        super("https://cloudflare-eth.com/", network, { staticNetwork: network });
      }
    };
    exports2.CloudflareProvider = CloudflareProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-etherscan.js
var require_provider_etherscan = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-etherscan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EtherscanProvider = exports2.EtherscanPlugin = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_contract2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network();
    var plugins_network_js_1 = require_plugins_network();
    var community_js_1 = require_community();
    var THROTTLE = 2e3;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    var EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
    var EtherscanPlugin = class _EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {
      /**
       *  The Etherscan API base URL.
       */
      baseUrl;
      /**
       *  Creates a new **EtherscanProvider** which will use
       *  %%baseUrl%%.
       */
      constructor(baseUrl) {
        super(EtherscanPluginId);
        (0, index_js_4.defineProperties)(this, { baseUrl });
      }
      clone() {
        return new _EtherscanPlugin(this.baseUrl);
      }
    };
    exports2.EtherscanPlugin = EtherscanPlugin;
    var skipKeys = ["enableCcipRead"];
    var nextId = 1;
    var EtherscanProvider = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  The connected network.
       */
      network;
      /**
       *  The API key or null if using the community provided bandwidth.
       */
      apiKey;
      #plugin;
      /**
       *  Creates a new **EtherscanBaseProvider**.
       */
      constructor(_network, _apiKey) {
        const apiKey = _apiKey != null ? _apiKey : null;
        super();
        const network = network_js_1.Network.from(_network);
        this.#plugin = network.getPlugin(EtherscanPluginId);
        (0, index_js_4.defineProperties)(this, { apiKey, network });
        this.getBaseUrl();
      }
      /**
       *  Returns the base URL.
       *
       *  If an [[EtherscanPlugin]] is configured on the
       *  [[EtherscanBaseProvider_network]], returns the plugin's
       *  baseUrl.
       */
      getBaseUrl() {
        if (this.#plugin) {
          return this.#plugin.baseUrl;
        }
        switch (this.network.name) {
          case "mainnet":
            return "https://api.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          case "sepolia":
            return "https://api-sepolia.etherscan.io";
          case "holesky":
            return "https://api-holesky.etherscan.io";
          case "arbitrum":
            return "https://api.arbiscan.io";
          case "arbitrum-goerli":
            return "https://api-goerli.arbiscan.io";
          case "base":
            return "https://api.basescan.org";
          case "base-sepolia":
            return "https://api-sepolia.basescan.org";
          case "bnb":
            return "https://api.bscscan.com";
          case "bnbt":
            return "https://api-testnet.bscscan.com";
          case "matic":
            return "https://api.polygonscan.com";
          case "matic-amoy":
            return "https://api-amoy.polygonscan.com";
          case "matic-mumbai":
            return "https://api-testnet.polygonscan.com";
          case "optimism":
            return "https://api-optimistic.etherscan.io";
          case "optimism-goerli":
            return "https://api-goerli-optimistic.etherscan.io";
          default:
        }
        (0, index_js_4.assertArgument)(false, "unsupported network", "network", this.network);
      }
      /**
       *  Returns the URL for the %%module%% and %%params%%.
       */
      getUrl(module3, params) {
        const query = Object.keys(params).reduce((accum, key) => {
          const value = params[key];
          if (value != null) {
            accum += `&${key}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.getBaseUrl()}/api?module=${module3}${query}${apiKey}`;
      }
      /**
       *  Returns the URL for using POST requests.
       */
      getPostUrl() {
        return `${this.getBaseUrl()}/api`;
      }
      /**
       *  Returns the parameters for using POST requests.
       */
      getPostData(module3, params) {
        params.module = module3;
        params.apikey = this.apiKey;
        return params;
      }
      async detectNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the result of calling %%module%% with %%params%%.
       *
       *  If %%post%%, the request is made as a POST request.
       */
      async fetch(module3, params, post) {
        const id = nextId++;
        const url = post ? this.getPostUrl() : this.getUrl(module3, params);
        const payload = post ? this.getPostData(module3, params) : null;
        this.emit("debug", { action: "sendRequest", id, url, payload });
        const request = new index_js_4.FetchRequest(url);
        request.setThrottleParams({ slotInterval: 1e3 });
        request.retryFunc = (req, resp, attempt) => {
          if (this.isCommunityResource()) {
            (0, community_js_1.showThrottleMessage)("Etherscan");
          }
          return Promise.resolve(true);
        };
        request.processFunc = async (request2, response2) => {
          const result2 = response2.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response2.body)) : {};
          const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
          if (module3 === "proxy") {
            if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
              this.emit("debug", { action: "receiveError", id, reason: "proxy-NOTOK", error: result2 });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          } else {
            if (throttle) {
              this.emit("debug", { action: "receiveError", id, reason: "null result", error: result2.result });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          }
          return response2;
        };
        if (payload) {
          request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
        }
        const response = await request.send();
        try {
          response.assertOk();
        } catch (error) {
          this.emit("debug", { action: "receiveError", id, error, reason: "assertOk" });
          (0, index_js_4.assert)(false, "response error", "SERVER_ERROR", { request, response });
        }
        if (!response.hasBody()) {
          this.emit("debug", { action: "receiveError", id, error: "missing body", reason: "null body" });
          (0, index_js_4.assert)(false, "missing response", "SERVER_ERROR", { request, response });
        }
        const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));
        if (module3 === "proxy") {
          if (result.jsonrpc != "2.0") {
            this.emit("debug", { action: "receiveError", id, result, reason: "invalid JSON-RPC" });
            (0, index_js_4.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
          }
          if (result.error) {
            this.emit("debug", { action: "receiveError", id, result, reason: "JSON-RPC error" });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id, result });
          return result.result;
        } else {
          if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            this.emit("debug", { action: "receiveRequest", id, result });
            return result.result;
          }
          if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
            this.emit("debug", { action: "receiveError", id, result });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id, result });
          return result.result;
        }
      }
      /**
       *  Returns %%transaction%% normalized for the Etherscan API.
       */
      _getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
          if (skipKeys.indexOf(key) >= 0) {
            continue;
          }
          if (transaction[key] == null) {
            continue;
          }
          let value = transaction[key];
          if (key === "type" && value === 0) {
            continue;
          }
          if (key === "blockTag" && value === "latest") {
            continue;
          }
          if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
            value = (0, index_js_4.toQuantity)(value);
          } else if (key === "accessList") {
            value = "[" + (0, index_js_3.accessListify)(value).map((set) => {
              return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
            }).join(",") + "]";
          } else if (key === "blobVersionedHashes") {
            if (value.length === 0) {
              continue;
            }
            (0, index_js_4.assert)(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
              operation: "_getTransactionPostData",
              info: { transaction }
            });
          } else {
            value = (0, index_js_4.hexlify)(value);
          }
          result[key] = value;
        }
        return result;
      }
      /**
       *  Throws the normalized Etherscan error.
       */
      _checkError(req, error, transaction) {
        let message = "";
        if ((0, index_js_4.isError)(error, "SERVER_ERROR")) {
          try {
            message = error.info.result.error.message;
          } catch (e) {
          }
          if (!message) {
            try {
              message = error.info.message;
            } catch (e) {
            }
          }
        }
        if (req.method === "estimateGas") {
          if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
            (0, index_js_4.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: req.transaction
            });
          }
        }
        if (req.method === "call" || req.method === "estimateGas") {
          if (message.match(/execution reverted/i)) {
            let data = "";
            try {
              data = error.info.result.error.data;
            } catch (error2) {
            }
            const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
            e.info = { request: req, error };
            throw e;
          }
        }
        if (message) {
          if (req.method === "broadcastTransaction") {
            const transaction2 = index_js_3.Transaction.from(req.signedTransaction);
            if (message.match(/replacement/i) && message.match(/underpriced/i)) {
              (0, index_js_4.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                transaction: transaction2
              });
            }
            if (message.match(/insufficient funds/)) {
              (0, index_js_4.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                transaction: transaction2
              });
            }
            if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
              (0, index_js_4.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
                transaction: transaction2
              });
            }
          }
        }
        throw error;
      }
      async _detectNetwork() {
        return this.network;
      }
      async _perform(req) {
        switch (req.method) {
          case "chainId":
            return this.network.chainId;
          case "getBlockNumber":
            return this.fetch("proxy", { action: "eth_blockNumber" });
          case "getGasPrice":
            return this.fetch("proxy", { action: "eth_gasPrice" });
          case "getPriorityFee":
            if (this.network.name === "mainnet") {
              return "1000000000";
            } else if (this.network.name === "optimism") {
              return "1000000";
            } else {
              throw new Error("fallback onto the AbstractProvider default");
            }
          case "getBalance":
            return this.fetch("account", {
              action: "balance",
              address: req.address,
              tag: req.blockTag
            });
          case "getTransactionCount":
            return this.fetch("proxy", {
              action: "eth_getTransactionCount",
              address: req.address,
              tag: req.blockTag
            });
          case "getCode":
            return this.fetch("proxy", {
              action: "eth_getCode",
              address: req.address,
              tag: req.blockTag
            });
          case "getStorage":
            return this.fetch("proxy", {
              action: "eth_getStorageAt",
              address: req.address,
              position: req.position,
              tag: req.blockTag
            });
          case "broadcastTransaction":
            return this.fetch("proxy", {
              action: "eth_sendRawTransaction",
              hex: req.signedTransaction
            }, true).catch((error) => {
              return this._checkError(req, error, req.signedTransaction);
            });
          case "getBlock":
            if ("blockTag" in req) {
              return this.fetch("proxy", {
                action: "eth_getBlockByNumber",
                tag: req.blockTag,
                boolean: req.includeTransactions ? "true" : "false"
              });
            }
            (0, index_js_4.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
              operation: "getBlock(blockHash)"
            });
          case "getTransaction":
            return this.fetch("proxy", {
              action: "eth_getTransactionByHash",
              txhash: req.hash
            });
          case "getTransactionReceipt":
            return this.fetch("proxy", {
              action: "eth_getTransactionReceipt",
              txhash: req.hash
            });
          case "call": {
            if (req.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          case "estimateGas": {
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          default:
            break;
        }
        return super._perform(req);
      }
      async getNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the current price of ether.
       *
       *  This returns ``0`` on any network other than ``mainnet``.
       */
      async getEtherPrice() {
        if (this.network.name !== "mainnet") {
          return 0;
        }
        return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
      }
      /**
       *  Resolves to a [Contract]] for %%address%%, using the
       *  Etherscan API to retreive the Contract ABI.
       */
      async getContract(_address) {
        let address = this._getAddress(_address);
        if (isPromise(address)) {
          address = await address;
        }
        try {
          const resp = await this.fetch("contract", {
            action: "getabi",
            address
          });
          const abi = JSON.parse(resp);
          return new index_js_2.Contract(address, abi, this);
        } catch (error) {
          return null;
        }
      }
      isCommunityResource() {
        return this.apiKey == null;
      }
    };
    exports2.EtherscanProvider = EtherscanProvider;
  }
});

// node_modules/ws/lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/ws/lib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
      EMPTY_BUFFER: Buffer.alloc(0),
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      kForOnEventAttribute: Symbol("kIsForOnEventAttribute"),
      kListener: Symbol("kListener"),
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      NOOP: () => {
      }
    };
  }
});

// node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS({
  "node_modules/ws/lib/buffer-util.js"(exports2, module2) {
    "use strict";
    var { EMPTY_BUFFER } = require_constants2();
    var FastBuffer = Buffer[Symbol.species];
    function concat(list, totalLength) {
      if (list.length === 0)
        return EMPTY_BUFFER;
      if (list.length === 1)
        return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i = 0; i < list.length; i++) {
        const buf = list[i];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength) {
        return new FastBuffer(target.buffer, target.byteOffset, offset);
      }
      return target;
    }
    function _mask(source, mask, output, offset, length) {
      for (let i = 0; i < length; i++) {
        output[offset + i] = source[i] ^ mask[i & 3];
      }
    }
    function _unmask(buffer, mask) {
      for (let i = 0; i < buffer.length; i++) {
        buffer[i] ^= mask[i & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.length === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data))
        return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = new FastBuffer(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    module2.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
    if (!process.env.WS_NO_BUFFER_UTIL) {
      try {
        const bufferUtil = require("bufferutil");
        module2.exports.mask = function(source, mask, output, offset, length) {
          if (length < 48)
            _mask(source, mask, output, offset, length);
          else
            bufferUtil.mask(source, mask, output, offset, length);
        };
        module2.exports.unmask = function(buffer, mask) {
          if (buffer.length < 32)
            _unmask(buffer, mask);
          else
            bufferUtil.unmask(buffer, mask);
        };
      } catch (e) {
      }
    }
  }
});

// node_modules/ws/lib/limiter.js
var require_limiter = __commonJS({
  "node_modules/ws/lib/limiter.js"(exports2, module2) {
    "use strict";
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    var Limiter = class {
      /**
       * Creates a new `Limiter`.
       *
       * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
       *     to run concurrently
       */
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      /**
       * Adds a job to the queue.
       *
       * @param {Function} job The job to run
       * @public
       */
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      /**
       * Removes a job from the queue and runs it if possible.
       *
       * @private
       */
      [kRun]() {
        if (this.pending === this.concurrency)
          return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    };
    module2.exports = Limiter;
  }
});

// node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS({
  "node_modules/ws/lib/permessage-deflate.js"(exports2, module2) {
    "use strict";
    var zlib = require("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode } = require_constants2();
    var FastBuffer = Buffer[Symbol.species];
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    var PerMessageDeflate = class {
      /**
       * Creates a PerMessageDeflate instance.
       *
       * @param {Object} [options] Configuration options
       * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
       *     for, or request, a custom client window size
       * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
       *     acknowledge disabling of client context takeover
       * @param {Number} [options.concurrencyLimit=10] The number of concurrent
       *     calls to zlib
       * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
       *     use of a custom server window size
       * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
       *     disabling of server context takeover
       * @param {Number} [options.threshold=1024] Size (in bytes) below which
       *     messages should not be compressed if context takeover is disabled
       * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
       *     deflate
       * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
       *     inflate
       * @param {Boolean} [isServer=false] Create the instance in either server or
       *     client mode
       * @param {Number} [maxPayload=0] The maximum allowed message length
       */
      constructor(options, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      /**
       * @type {String}
       */
      static get extensionName() {
        return "permessage-deflate";
      }
      /**
       * Create an extension negotiation offer.
       *
       * @return {Object} Extension parameters
       * @public
       */
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      /**
       * Accept an extension negotiation offer/response.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Object} Accepted configuration
       * @public
       */
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      /**
       * Releases all resources used by the extension.
       *
       * @public
       */
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(
              new Error(
                "The deflate stream was closed while data was being processed"
              )
            );
          }
        }
      }
      /**
       *  Accept an extension negotiation offer.
       *
       * @param {Array} offers The extension negotiation offers
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      /**
       * Accept the extension negotiation response.
       *
       * @param {Array} response The extension negotiation response
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error(
            'Unexpected or invalid parameter "client_max_window_bits"'
          );
        }
        return params;
      }
      /**
       * Normalize parameters.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Array} The offers/response with normalized parameters
       * @private
       */
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key) => {
            let value = params[key];
            if (value.length > 1) {
              throw new Error(`Parameter "${key}" must have only a single value`);
            }
            value = value[0];
            if (key === "client_max_window_bits") {
              if (value !== true) {
                const num = +value;
                if (!Number.isInteger(num) || num < 8 || num > 15) {
                  throw new TypeError(
                    `Invalid value for parameter "${key}": ${value}`
                  );
                }
                value = num;
              } else if (!this._isServer) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
            } else if (key === "server_max_window_bits") {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
              value = num;
            } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
              if (value !== true) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
            } else {
              throw new Error(`Unknown parameter "${key}"`);
            }
            params[key] = value;
          });
        });
        return configurations;
      }
      /**
       * Decompress data. Concurrency limited.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      /**
       * Compress data. Concurrency limited.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      /**
       * Decompress data.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin)
          this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err = this._inflate[kError];
          if (err) {
            this._inflate.close();
            this._inflate = null;
            callback(err);
            return;
          }
          const data2 = bufferUtil.concat(
            this._inflate[kBuffers],
            this._inflate[kTotalLength]
          );
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      /**
       * Compress data.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(
            this._deflate[kBuffers],
            this._deflate[kTotalLength]
          );
          if (fin) {
            data2 = new FastBuffer(data2.buffer, data2.byteOffset, data2.length - 4);
          }
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    };
    module2.exports = PerMessageDeflate;
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err) {
      this[kPerMessageDeflate]._inflate = null;
      err[kStatusCode] = 1007;
      this[kCallback](err);
    }
  }
});

// node_modules/ws/lib/validation.js
var require_validation = __commonJS({
  "node_modules/ws/lib/validation.js"(exports2, module2) {
    "use strict";
    var { isUtf8 } = require("buffer");
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // 0 - 15
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // 16 - 31
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      // 32 - 47
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      // 48 - 63
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      // 64 - 79
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      // 80 - 95
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      // 96 - 111
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
      // 112 - 127
    ];
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i = 0;
      while (i < len) {
        if ((buf[i] & 128) === 0) {
          i++;
        } else if ((buf[i] & 224) === 192) {
          if (i + 1 === len || (buf[i + 1] & 192) !== 128 || (buf[i] & 254) === 192) {
            return false;
          }
          i += 2;
        } else if ((buf[i] & 240) === 224) {
          if (i + 2 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || buf[i] === 224 && (buf[i + 1] & 224) === 128 || // Overlong
          buf[i] === 237 && (buf[i + 1] & 224) === 160) {
            return false;
          }
          i += 3;
        } else if ((buf[i] & 248) === 240) {
          if (i + 3 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || (buf[i + 3] & 192) !== 128 || buf[i] === 240 && (buf[i + 1] & 240) === 128 || // Overlong
          buf[i] === 244 && buf[i + 1] > 143 || buf[i] > 244) {
            return false;
          }
          i += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    module2.exports = {
      isValidStatusCode,
      isValidUTF8: _isValidUTF8,
      tokenChars
    };
    if (isUtf8) {
      module2.exports.isValidUTF8 = function(buf) {
        return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
      };
    } else if (!process.env.WS_NO_UTF_8_VALIDATE) {
      try {
        const isValidUTF8 = require("utf-8-validate");
        module2.exports.isValidUTF8 = function(buf) {
          return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
        };
      } catch (e) {
      }
    }
  }
});

// node_modules/ws/lib/receiver.js
var require_receiver = __commonJS({
  "node_modules/ws/lib/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable } = require("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants2();
    var { concat, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var FastBuffer = Buffer[Symbol.species];
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    var DEFER_EVENT = 6;
    var Receiver = class extends Writable {
      /**
       * Creates a Receiver instance.
       *
       * @param {Object} [options] Options object
       * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {String} [options.binaryType=nodebuffer] The type for binary data
       * @param {Object} [options.extensions] An object containing the negotiated
       *     extensions
       * @param {Boolean} [options.isServer=false] Specifies whether to operate in
       *     client or server mode
       * @param {Number} [options.maxPayload=0] The maximum allowed message length
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       */
      constructor(options = {}) {
        super();
        this._allowSynchronousEvents = options.allowSynchronousEvents !== void 0 ? options.allowSynchronousEvents : true;
        this._binaryType = options.binaryType || BINARY_TYPES[0];
        this._extensions = options.extensions || {};
        this._isServer = !!options.isServer;
        this._maxPayload = options.maxPayload | 0;
        this._skipUTF8Validation = !!options.skipUTF8Validation;
        this[kWebSocket] = void 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._errored = false;
        this._loop = false;
        this._state = GET_INFO;
      }
      /**
       * Implements `Writable.prototype._write()`.
       *
       * @param {Buffer} chunk The chunk of data to write
       * @param {String} encoding The character encoding of `chunk`
       * @param {Function} cb Callback
       * @private
       */
      _write(chunk, encoding, cb) {
        if (this._opcode === 8 && this._state == GET_INFO)
          return cb();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb);
      }
      /**
       * Consumes `n` bytes from the buffered data.
       *
       * @param {Number} n The number of bytes to consume
       * @return {Buffer} The consumed bytes
       * @private
       */
      consume(n) {
        this._bufferedBytes -= n;
        if (n === this._buffers[0].length)
          return this._buffers.shift();
        if (n < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = new FastBuffer(
            buf.buffer,
            buf.byteOffset + n,
            buf.length - n
          );
          return new FastBuffer(buf.buffer, buf.byteOffset, n);
        }
        const dst = Buffer.allocUnsafe(n);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n;
          if (n >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
            this._buffers[0] = new FastBuffer(
              buf.buffer,
              buf.byteOffset + n,
              buf.length - n
            );
          }
          n -= buf.length;
        } while (n > 0);
        return dst;
      }
      /**
       * Starts the parsing loop.
       *
       * @param {Function} cb Callback
       * @private
       */
      startLoop(cb) {
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              this.getInfo(cb);
              break;
            case GET_PAYLOAD_LENGTH_16:
              this.getPayloadLength16(cb);
              break;
            case GET_PAYLOAD_LENGTH_64:
              this.getPayloadLength64(cb);
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              this.getData(cb);
              break;
            case INFLATING:
            case DEFER_EVENT:
              this._loop = false;
              return;
          }
        } while (this._loop);
        if (!this._errored)
          cb();
      }
      /**
       * Reads the first two bytes of a frame.
       *
       * @param {Function} cb Callback
       * @private
       */
      getInfo(cb) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          const error = this.createError(
            RangeError,
            "RSV2 and RSV3 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_2_3"
          );
          cb(error);
          return;
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          const error = this.createError(
            RangeError,
            "RSV1 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_1"
          );
          cb(error);
          return;
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            const error = this.createError(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
            cb(error);
            return;
          }
          if (!this._fragmented) {
            const error = this.createError(
              RangeError,
              "invalid opcode 0",
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
            cb(error);
            return;
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            const error = this.createError(
              RangeError,
              `invalid opcode ${this._opcode}`,
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
            cb(error);
            return;
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            const error = this.createError(
              RangeError,
              "FIN must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_FIN"
            );
            cb(error);
            return;
          }
          if (compressed) {
            const error = this.createError(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
            cb(error);
            return;
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            const error = this.createError(
              RangeError,
              `invalid payload length ${this._payloadLength}`,
              true,
              1002,
              "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
            );
            cb(error);
            return;
          }
        } else {
          const error = this.createError(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            "WS_ERR_INVALID_OPCODE"
          );
          cb(error);
          return;
        }
        if (!this._fin && !this._fragmented)
          this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            const error = this.createError(
              RangeError,
              "MASK must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_MASK"
            );
            cb(error);
            return;
          }
        } else if (this._masked) {
          const error = this.createError(
            RangeError,
            "MASK must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_MASK"
          );
          cb(error);
          return;
        }
        if (this._payloadLength === 126)
          this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127)
          this._state = GET_PAYLOAD_LENGTH_64;
        else
          this.haveLength(cb);
      }
      /**
       * Gets extended payload length (7+16).
       *
       * @param {Function} cb Callback
       * @private
       */
      getPayloadLength16(cb) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        this.haveLength(cb);
      }
      /**
       * Gets extended payload length (7+64).
       *
       * @param {Function} cb Callback
       * @private
       */
      getPayloadLength64(cb) {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num = buf.readUInt32BE(0);
        if (num > Math.pow(2, 53 - 32) - 1) {
          const error = this.createError(
            RangeError,
            "Unsupported WebSocket frame: payload length > 2^53 - 1",
            false,
            1009,
            "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH"
          );
          cb(error);
          return;
        }
        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
        this.haveLength(cb);
      }
      /**
       * Payload length has been read.
       *
       * @param {Function} cb Callback
       * @private
       */
      haveLength(cb) {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            const error = this.createError(
              RangeError,
              "Max payload size exceeded",
              false,
              1009,
              "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
            );
            cb(error);
            return;
          }
        }
        if (this._masked)
          this._state = GET_MASK;
        else
          this._state = GET_DATA;
      }
      /**
       * Reads mask bytes.
       *
       * @private
       */
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      /**
       * Reads data bytes.
       *
       * @param {Function} cb Callback
       * @private
       */
      getData(cb) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {
            unmask(data, this._mask);
          }
        }
        if (this._opcode > 7) {
          this.controlMessage(data, cb);
          return;
        }
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        this.dataMessage(cb);
      }
      /**
       * Decompresses data.
       *
       * @param {Buffer} data Compressed data
       * @param {Function} cb Callback
       * @private
       */
      decompress(data, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err, buf) => {
          if (err)
            return cb(err);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              const error = this.createError(
                RangeError,
                "Max payload size exceeded",
                false,
                1009,
                "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
              );
              cb(error);
              return;
            }
            this._fragments.push(buf);
          }
          this.dataMessage(cb);
          if (this._state === GET_INFO)
            this.startLoop(cb);
        });
      }
      /**
       * Handles a data message.
       *
       * @param {Function} cb Callback
       * @private
       */
      dataMessage(cb) {
        if (!this._fin) {
          this._state = GET_INFO;
          return;
        }
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];
        if (this._opcode === 2) {
          let data;
          if (this._binaryType === "nodebuffer") {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === "arraybuffer") {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else {
            data = fragments;
          }
          if (this._allowSynchronousEvents) {
            this.emit("message", data, true);
            this._state = GET_INFO;
          } else {
            this._state = DEFER_EVENT;
            setImmediate(() => {
              this.emit("message", data, true);
              this._state = GET_INFO;
              this.startLoop(cb);
            });
          }
        } else {
          const buf = concat(fragments, messageLength);
          if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
            const error = this.createError(
              Error,
              "invalid UTF-8 sequence",
              true,
              1007,
              "WS_ERR_INVALID_UTF8"
            );
            cb(error);
            return;
          }
          if (this._state === INFLATING || this._allowSynchronousEvents) {
            this.emit("message", buf, false);
            this._state = GET_INFO;
          } else {
            this._state = DEFER_EVENT;
            setImmediate(() => {
              this.emit("message", buf, false);
              this._state = GET_INFO;
              this.startLoop(cb);
            });
          }
        }
      }
      /**
       * Handles a control message.
       *
       * @param {Buffer} data Data to handle
       * @return {(Error|RangeError|undefined)} A possible error
       * @private
       */
      controlMessage(data, cb) {
        if (this._opcode === 8) {
          if (data.length === 0) {
            this._loop = false;
            this.emit("conclude", 1005, EMPTY_BUFFER);
            this.end();
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              const error = this.createError(
                RangeError,
                `invalid status code ${code}`,
                true,
                1002,
                "WS_ERR_INVALID_CLOSE_CODE"
              );
              cb(error);
              return;
            }
            const buf = new FastBuffer(
              data.buffer,
              data.byteOffset + 2,
              data.length - 2
            );
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              const error = this.createError(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
              cb(error);
              return;
            }
            this._loop = false;
            this.emit("conclude", code, buf);
            this.end();
          }
          this._state = GET_INFO;
          return;
        }
        if (this._allowSynchronousEvents) {
          this.emit(this._opcode === 9 ? "ping" : "pong", data);
          this._state = GET_INFO;
        } else {
          this._state = DEFER_EVENT;
          setImmediate(() => {
            this.emit(this._opcode === 9 ? "ping" : "pong", data);
            this._state = GET_INFO;
            this.startLoop(cb);
          });
        }
      }
      /**
       * Builds an error object.
       *
       * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
       * @param {String} message The error message
       * @param {Boolean} prefix Specifies whether or not to add a default prefix to
       *     `message`
       * @param {Number} statusCode The status code
       * @param {String} errorCode The exposed error code
       * @return {(Error|RangeError)} The error
       * @private
       */
      createError(ErrorCtor, message, prefix, statusCode, errorCode) {
        this._loop = false;
        this._errored = true;
        const err = new ErrorCtor(
          prefix ? `Invalid WebSocket frame: ${message}` : message
        );
        Error.captureStackTrace(err, this.createError);
        err.code = errorCode;
        err[kStatusCode] = statusCode;
        return err;
      }
    };
    module2.exports = Receiver;
  }
});

// node_modules/ws/lib/sender.js
var require_sender = __commonJS({
  "node_modules/ws/lib/sender.js"(exports2, module2) {
    "use strict";
    var { Duplex } = require("stream");
    var { randomFillSync } = require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER } = require_constants2();
    var { isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var kByteLength = Symbol("kByteLength");
    var maskBuffer = Buffer.alloc(4);
    var RANDOM_POOL_SIZE = 8 * 1024;
    var randomPool;
    var randomPoolPointer = RANDOM_POOL_SIZE;
    var Sender = class _Sender {
      /**
       * Creates a Sender instance.
       *
       * @param {Duplex} socket The connection socket
       * @param {Object} [extensions] An object containing the negotiated extensions
       * @param {Function} [generateMask] The function used to generate the masking
       *     key
       */
      constructor(socket, extensions, generateMask) {
        this._extensions = extensions || {};
        if (generateMask) {
          this._generateMask = generateMask;
          this._maskBuffer = Buffer.alloc(4);
        }
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._deflating = false;
        this._queue = [];
      }
      /**
       * Frames a piece of data according to the HyBi WebSocket protocol.
       *
       * @param {(Buffer|String)} data The data to frame
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @return {(Buffer|String)[]} The framed data
       * @public
       */
      static frame(data, options) {
        let mask;
        let merge = false;
        let offset = 2;
        let skipMasking = false;
        if (options.mask) {
          mask = options.maskBuffer || maskBuffer;
          if (options.generateMask) {
            options.generateMask(mask);
          } else {
            if (randomPoolPointer === RANDOM_POOL_SIZE) {
              if (randomPool === void 0) {
                randomPool = Buffer.alloc(RANDOM_POOL_SIZE);
              }
              randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);
              randomPoolPointer = 0;
            }
            mask[0] = randomPool[randomPoolPointer++];
            mask[1] = randomPool[randomPoolPointer++];
            mask[2] = randomPool[randomPoolPointer++];
            mask[3] = randomPool[randomPoolPointer++];
          }
          skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
          offset = 6;
        }
        let dataLength;
        if (typeof data === "string") {
          if ((!options.mask || skipMasking) && options[kByteLength] !== void 0) {
            dataLength = options[kByteLength];
          } else {
            data = Buffer.from(data);
            dataLength = data.length;
          }
        } else {
          dataLength = data.length;
          merge = options.mask && options.readOnly && !skipMasking;
        }
        let payloadLength = dataLength;
        if (dataLength >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (dataLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);
        target[0] = options.fin ? options.opcode | 128 : options.opcode;
        if (options.rsv1)
          target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(dataLength, 2);
        } else if (payloadLength === 127) {
          target[2] = target[3] = 0;
          target.writeUIntBE(dataLength, 4, 6);
        }
        if (!options.mask)
          return [target, data];
        target[1] |= 128;
        target[offset - 4] = mask[0];
        target[offset - 3] = mask[1];
        target[offset - 2] = mask[2];
        target[offset - 1] = mask[3];
        if (skipMasking)
          return [target, data];
        if (merge) {
          applyMask(data, mask, target, offset, dataLength);
          return [target];
        }
        applyMask(data, mask, data, 0, dataLength);
        return [target, data];
      }
      /**
       * Sends a close message to the other peer.
       *
       * @param {Number} [code] The status code component of the body
       * @param {(String|Buffer)} [data] The message component of the body
       * @param {Boolean} [mask=false] Specifies whether or not to mask the message
       * @param {Function} [cb] Callback
       * @public
       */
      close(code, data, mask, cb) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || !data.length) {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          if (typeof data === "string") {
            buf.write(data, 2);
          } else {
            buf.set(data, 2);
          }
        }
        const options = {
          [kByteLength]: buf.length,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 8,
          readOnly: false,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, buf, false, options, cb]);
        } else {
          this.sendFrame(_Sender.frame(buf, options), cb);
        }
      }
      /**
       * Sends a ping message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      ping(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 9,
          readOnly,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options, cb]);
        } else {
          this.sendFrame(_Sender.frame(data, options), cb);
        }
      }
      /**
       * Sends a pong message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      pong(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 10,
          readOnly,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options, cb]);
        } else {
          this.sendFrame(_Sender.frame(data, options), cb);
        }
      }
      /**
       * Sends a data message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Object} options Options object
       * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
       *     or text
       * @param {Boolean} [options.compress=false] Specifies whether or not to
       *     compress `data`
       * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Function} [cb] Callback
       * @public
       */
      send(data, options, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options.binary ? 2 : 1;
        let rsv1 = options.compress;
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? "server_no_context_takeover" : "client_no_context_takeover"]) {
            rsv1 = byteLength >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options.fin)
          this._firstFragment = true;
        if (perMessageDeflate) {
          const opts = {
            [kByteLength]: byteLength,
            fin: options.fin,
            generateMask: this._generateMask,
            mask: options.mask,
            maskBuffer: this._maskBuffer,
            opcode,
            readOnly,
            rsv1
          };
          if (this._deflating) {
            this.enqueue([this.dispatch, data, this._compress, opts, cb]);
          } else {
            this.dispatch(data, this._compress, opts, cb);
          }
        } else {
          this.sendFrame(
            _Sender.frame(data, {
              [kByteLength]: byteLength,
              fin: options.fin,
              generateMask: this._generateMask,
              mask: options.mask,
              maskBuffer: this._maskBuffer,
              opcode,
              readOnly,
              rsv1: false
            }),
            cb
          );
        }
      }
      /**
       * Dispatches a message.
       *
       * @param {(Buffer|String)} data The message to send
       * @param {Boolean} [compress=false] Specifies whether or not to compress
       *     `data`
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @param {Function} [cb] Callback
       * @private
       */
      dispatch(data, compress, options, cb) {
        if (!compress) {
          this.sendFrame(_Sender.frame(data, options), cb);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += options[kByteLength];
        this._deflating = true;
        perMessageDeflate.compress(data, options.fin, (_, buf) => {
          if (this._socket.destroyed) {
            const err = new Error(
              "The socket was closed while data was being compressed"
            );
            if (typeof cb === "function")
              cb(err);
            for (let i = 0; i < this._queue.length; i++) {
              const params = this._queue[i];
              const callback = params[params.length - 1];
              if (typeof callback === "function")
                callback(err);
            }
            return;
          }
          this._bufferedBytes -= options[kByteLength];
          this._deflating = false;
          options.readOnly = false;
          this.sendFrame(_Sender.frame(buf, options), cb);
          this.dequeue();
        });
      }
      /**
       * Executes queued send operations.
       *
       * @private
       */
      dequeue() {
        while (!this._deflating && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[3][kByteLength];
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      /**
       * Enqueues a send operation.
       *
       * @param {Array} params Send operation parameters.
       * @private
       */
      enqueue(params) {
        this._bufferedBytes += params[3][kByteLength];
        this._queue.push(params);
      }
      /**
       * Sends a frame.
       *
       * @param {Buffer[]} list The frame to send
       * @param {Function} [cb] Callback
       * @private
       */
      sendFrame(list, cb) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb);
        }
      }
    };
    module2.exports = Sender;
  }
});

// node_modules/ws/lib/event-target.js
var require_event_target = __commonJS({
  "node_modules/ws/lib/event-target.js"(exports2, module2) {
    "use strict";
    var { kForOnEventAttribute, kListener } = require_constants2();
    var kCode = Symbol("kCode");
    var kData = Symbol("kData");
    var kError = Symbol("kError");
    var kMessage = Symbol("kMessage");
    var kReason = Symbol("kReason");
    var kTarget = Symbol("kTarget");
    var kType = Symbol("kType");
    var kWasClean = Symbol("kWasClean");
    var Event = class {
      /**
       * Create a new `Event`.
       *
       * @param {String} type The name of the event
       * @throws {TypeError} If the `type` argument is not specified
       */
      constructor(type) {
        this[kTarget] = null;
        this[kType] = type;
      }
      /**
       * @type {*}
       */
      get target() {
        return this[kTarget];
      }
      /**
       * @type {String}
       */
      get type() {
        return this[kType];
      }
    };
    Object.defineProperty(Event.prototype, "target", { enumerable: true });
    Object.defineProperty(Event.prototype, "type", { enumerable: true });
    var CloseEvent = class extends Event {
      /**
       * Create a new `CloseEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {Number} [options.code=0] The status code explaining why the
       *     connection was closed
       * @param {String} [options.reason=''] A human-readable string explaining why
       *     the connection was closed
       * @param {Boolean} [options.wasClean=false] Indicates whether or not the
       *     connection was cleanly closed
       */
      constructor(type, options = {}) {
        super(type);
        this[kCode] = options.code === void 0 ? 0 : options.code;
        this[kReason] = options.reason === void 0 ? "" : options.reason;
        this[kWasClean] = options.wasClean === void 0 ? false : options.wasClean;
      }
      /**
       * @type {Number}
       */
      get code() {
        return this[kCode];
      }
      /**
       * @type {String}
       */
      get reason() {
        return this[kReason];
      }
      /**
       * @type {Boolean}
       */
      get wasClean() {
        return this[kWasClean];
      }
    };
    Object.defineProperty(CloseEvent.prototype, "code", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "reason", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "wasClean", { enumerable: true });
    var ErrorEvent = class extends Event {
      /**
       * Create a new `ErrorEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.error=null] The error that generated this event
       * @param {String} [options.message=''] The error message
       */
      constructor(type, options = {}) {
        super(type);
        this[kError] = options.error === void 0 ? null : options.error;
        this[kMessage] = options.message === void 0 ? "" : options.message;
      }
      /**
       * @type {*}
       */
      get error() {
        return this[kError];
      }
      /**
       * @type {String}
       */
      get message() {
        return this[kMessage];
      }
    };
    Object.defineProperty(ErrorEvent.prototype, "error", { enumerable: true });
    Object.defineProperty(ErrorEvent.prototype, "message", { enumerable: true });
    var MessageEvent = class extends Event {
      /**
       * Create a new `MessageEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.data=null] The message content
       */
      constructor(type, options = {}) {
        super(type);
        this[kData] = options.data === void 0 ? null : options.data;
      }
      /**
       * @type {*}
       */
      get data() {
        return this[kData];
      }
    };
    Object.defineProperty(MessageEvent.prototype, "data", { enumerable: true });
    var EventTarget = {
      /**
       * Register an event listener.
       *
       * @param {String} type A string representing the event type to listen for
       * @param {(Function|Object)} handler The listener to add
       * @param {Object} [options] An options object specifies characteristics about
       *     the event listener
       * @param {Boolean} [options.once=false] A `Boolean` indicating that the
       *     listener should be invoked at most once after being added. If `true`,
       *     the listener would be automatically removed when invoked.
       * @public
       */
      addEventListener(type, handler, options = {}) {
        for (const listener of this.listeners(type)) {
          if (!options[kForOnEventAttribute] && listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            return;
          }
        }
        let wrapper;
        if (type === "message") {
          wrapper = function onMessage(data, isBinary) {
            const event = new MessageEvent("message", {
              data: isBinary ? data : data.toString()
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "close") {
          wrapper = function onClose(code, message) {
            const event = new CloseEvent("close", {
              code,
              reason: message.toString(),
              wasClean: this._closeFrameReceived && this._closeFrameSent
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "error") {
          wrapper = function onError(error) {
            const event = new ErrorEvent("error", {
              error,
              message: error.message
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "open") {
          wrapper = function onOpen() {
            const event = new Event("open");
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else {
          return;
        }
        wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];
        wrapper[kListener] = handler;
        if (options.once) {
          this.once(type, wrapper);
        } else {
          this.on(type, wrapper);
        }
      },
      /**
       * Remove an event listener.
       *
       * @param {String} type A string representing the event type to remove
       * @param {(Function|Object)} handler The listener to remove
       * @public
       */
      removeEventListener(type, handler) {
        for (const listener of this.listeners(type)) {
          if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            this.removeListener(type, listener);
            break;
          }
        }
      }
    };
    module2.exports = {
      CloseEvent,
      ErrorEvent,
      Event,
      EventTarget,
      MessageEvent
    };
    function callListener(listener, thisArg, event) {
      if (typeof listener === "object" && listener.handleEvent) {
        listener.handleEvent.call(listener, event);
      } else {
        listener.call(thisArg, event);
      }
    }
  }
});

// node_modules/ws/lib/extension.js
var require_extension = __commonJS({
  "node_modules/ws/lib/extension.js"(exports2, module2) {
    "use strict";
    var { tokenChars } = require_validation();
    function push(dest, name, elem) {
      if (dest[name] === void 0)
        dest[name] = [elem];
      else
        dest[name].push(elem);
    }
    function parse(header) {
      const offers = /* @__PURE__ */ Object.create(null);
      let params = /* @__PURE__ */ Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let code = -1;
      let end = -1;
      let i = 0;
      for (; i < header.length; i++) {
        code = header.charCodeAt(i);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (i !== 0 && (code === 32 || code === 9)) {
            if (end === -1 && start !== -1)
              end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1)
              end = i;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = /* @__PURE__ */ Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1)
              end = i;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (start === -1)
              start = i;
            else if (!mustUnescape)
              mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1)
                start = i;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
          } else if (code === 34 && header.charCodeAt(i - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1)
              end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1)
              end = i;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        }
      }
      if (start === -1 || inQuotes || code === 32 || code === 9) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1)
        end = i;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations))
          configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(
            Object.keys(params).map((k) => {
              let values = params[k];
              if (!Array.isArray(values))
                values = [values];
              return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
            })
          ).join("; ");
        }).join(", ");
      }).join(", ");
    }
    module2.exports = { format, parse };
  }
});

// node_modules/ws/lib/websocket.js
var require_websocket = __commonJS({
  "node_modules/ws/lib/websocket.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var https = require("https");
    var http = require("http");
    var net = require("net");
    var tls = require("tls");
    var { randomBytes, createHash } = require("crypto");
    var { Duplex, Readable } = require("stream");
    var { URL: URL2 } = require("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver = require_receiver();
    var Sender = require_sender();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kForOnEventAttribute,
      kListener,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants2();
    var {
      EventTarget: { addEventListener, removeEventListener }
    } = require_event_target();
    var { format, parse } = require_extension();
    var { toBuffer } = require_buffer_util();
    var closeTimeout = 30 * 1e3;
    var kAborted = Symbol("kAborted");
    var protocolVersions = [8, 13];
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
    var WebSocket = class _WebSocket extends EventEmitter {
      /**
       * Create a new `WebSocket`.
       *
       * @param {(String|URL)} address The URL to which to connect
       * @param {(String|String[])} [protocols] The subprotocols
       * @param {Object} [options] Connection options
       */
      constructor(address, protocols, options) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = EMPTY_BUFFER;
        this._closeTimer = null;
        this._extensions = {};
        this._paused = false;
        this._protocol = "";
        this._readyState = _WebSocket.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (protocols === void 0) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            if (typeof protocols === "object" && protocols !== null) {
              options = protocols;
              protocols = [];
            } else {
              protocols = [protocols];
            }
          }
          initAsClient(this, address, protocols, options);
        } else {
          this._autoPong = options.autoPong;
          this._isServer = true;
        }
      }
      /**
       * This deviates from the WHATWG interface since ws doesn't support the
       * required default "blob" type (instead we define a custom "nodebuffer"
       * type).
       *
       * @type {String}
       */
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type) {
        if (!BINARY_TYPES.includes(type))
          return;
        this._binaryType = type;
        if (this._receiver)
          this._receiver._binaryType = type;
      }
      /**
       * @type {Number}
       */
      get bufferedAmount() {
        if (!this._socket)
          return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      /**
       * @type {String}
       */
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      /**
       * @type {Boolean}
       */
      get isPaused() {
        return this._paused;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onclose() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onerror() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onopen() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onmessage() {
        return null;
      }
      /**
       * @type {String}
       */
      get protocol() {
        return this._protocol;
      }
      /**
       * @type {Number}
       */
      get readyState() {
        return this._readyState;
      }
      /**
       * @type {String}
       */
      get url() {
        return this._url;
      }
      /**
       * Set up the socket and the internal resources.
       *
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Object} options Options object
       * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Number} [options.maxPayload=0] The maximum allowed message size
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @private
       */
      setSocket(socket, head, options) {
        const receiver = new Receiver({
          allowSynchronousEvents: options.allowSynchronousEvents,
          binaryType: this.binaryType,
          extensions: this._extensions,
          isServer: this._isServer,
          maxPayload: options.maxPayload,
          skipUTF8Validation: options.skipUTF8Validation
        });
        this._sender = new Sender(socket, this._extensions, options.generateMask);
        this._receiver = receiver;
        this._socket = socket;
        receiver[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        if (socket.setTimeout)
          socket.setTimeout(0);
        if (socket.setNoDelay)
          socket.setNoDelay();
        if (head.length > 0)
          socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = _WebSocket.OPEN;
        this.emit("open");
      }
      /**
       * Emit the `'close'` event.
       *
       * @private
       */
      emitClose() {
        if (!this._socket) {
          this._readyState = _WebSocket.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = _WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      /**
       * Start a closing handshake.
       *
       *          +----------+   +-----------+   +----------+
       *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
       *    |     +----------+   +-----------+   +----------+     |
       *          +----------+   +-----------+         |
       * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
       *          +----------+   +-----------+   |
       *    |           |                        |   +---+        |
       *                +------------------------+-->|fin| - - - -
       *    |         +---+                      |   +---+
       *     - - - - -|fin|<---------------------+
       *              +---+
       *
       * @param {Number} [code] Status code explaining why the connection is closing
       * @param {(String|Buffer)} [data] The reason why the connection is
       *     closing
       * @public
       */
      close(code, data) {
        if (this.readyState === _WebSocket.CLOSED)
          return;
        if (this.readyState === _WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this.readyState === _WebSocket.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = _WebSocket.CLOSING;
        this._sender.close(code, data, !this._isServer, (err) => {
          if (err)
            return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        this._closeTimer = setTimeout(
          this._socket.destroy.bind(this._socket),
          closeTimeout
        );
      }
      /**
       * Pause the socket.
       *
       * @public
       */
      pause() {
        if (this.readyState === _WebSocket.CONNECTING || this.readyState === _WebSocket.CLOSED) {
          return;
        }
        this._paused = true;
        this._socket.pause();
      }
      /**
       * Send a ping.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the ping is sent
       * @public
       */
      ping(data, mask, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0)
          mask = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask, cb);
      }
      /**
       * Send a pong.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the pong is sent
       * @public
       */
      pong(data, mask, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0)
          mask = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask, cb);
      }
      /**
       * Resume the socket.
       *
       * @public
       */
      resume() {
        if (this.readyState === _WebSocket.CONNECTING || this.readyState === _WebSocket.CLOSED) {
          return;
        }
        this._paused = false;
        if (!this._receiver._writableState.needDrain)
          this._socket.resume();
      }
      /**
       * Send a data message.
       *
       * @param {*} data The message to send
       * @param {Object} [options] Options object
       * @param {Boolean} [options.binary] Specifies whether `data` is binary or
       *     text
       * @param {Boolean} [options.compress] Specifies whether or not to compress
       *     `data`
       * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when data is written out
       * @public
       */
      send(data, options, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        const opts = {
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options
        };
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb);
      }
      /**
       * Forcibly close the connection.
       *
       * @public
       */
      terminate() {
        if (this.readyState === _WebSocket.CLOSED)
          return;
        if (this.readyState === _WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this._socket) {
          this._readyState = _WebSocket.CLOSING;
          this._socket.destroy();
        }
      }
    };
    Object.defineProperty(WebSocket, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "isPaused",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket.prototype, `on${method}`, {
        enumerable: true,
        get() {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute])
              return listener[kListener];
          }
          return null;
        },
        set(handler) {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) {
              this.removeListener(method, listener);
              break;
            }
          }
          if (typeof handler !== "function")
            return;
          this.addEventListener(method, handler, {
            [kForOnEventAttribute]: true
          });
        }
      });
    });
    WebSocket.prototype.addEventListener = addEventListener;
    WebSocket.prototype.removeEventListener = removeEventListener;
    module2.exports = WebSocket;
    function initAsClient(websocket, address, protocols, options) {
      const opts = {
        allowSynchronousEvents: true,
        autoPong: true,
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        skipUTF8Validation: false,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: "GET",
        host: void 0,
        path: void 0,
        port: void 0
      };
      websocket._autoPong = opts.autoPong;
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(
          `Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`
        );
      }
      let parsedUrl;
      if (address instanceof URL2) {
        parsedUrl = address;
      } else {
        try {
          parsedUrl = new URL2(address);
        } catch (e) {
          throw new SyntaxError(`Invalid URL: ${address}`);
        }
      }
      if (parsedUrl.protocol === "http:") {
        parsedUrl.protocol = "ws:";
      } else if (parsedUrl.protocol === "https:") {
        parsedUrl.protocol = "wss:";
      }
      websocket._url = parsedUrl.href;
      const isSecure = parsedUrl.protocol === "wss:";
      const isIpcUrl = parsedUrl.protocol === "ws+unix:";
      let invalidUrlMessage;
      if (parsedUrl.protocol !== "ws:" && !isSecure && !isIpcUrl) {
        invalidUrlMessage = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"`;
      } else if (isIpcUrl && !parsedUrl.pathname) {
        invalidUrlMessage = "The URL's pathname is empty";
      } else if (parsedUrl.hash) {
        invalidUrlMessage = "The URL contains a fragment identifier";
      }
      if (invalidUrlMessage) {
        const err = new SyntaxError(invalidUrlMessage);
        if (websocket._redirects === 0) {
          throw err;
        } else {
          emitErrorAndClose(websocket, err);
          return;
        }
      }
      const defaultPort = isSecure ? 443 : 80;
      const key = randomBytes(16).toString("base64");
      const request = isSecure ? https.request : http.request;
      const protocolSet = /* @__PURE__ */ new Set();
      let perMessageDeflate;
      opts.createConnection = opts.createConnection || (isSecure ? tlsConnect : netConnect);
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = {
        ...opts.headers,
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key,
        Connection: "Upgrade",
        Upgrade: "websocket"
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(
          opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
          false,
          opts.maxPayload
        );
        opts.headers["Sec-WebSocket-Extensions"] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols.length) {
        for (const protocol of protocols) {
          if (typeof protocol !== "string" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {
            throw new SyntaxError(
              "An invalid or duplicated subprotocol was specified"
            );
          }
          protocolSet.add(protocol);
        }
        opts.headers["Sec-WebSocket-Protocol"] = protocols.join(",");
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isIpcUrl) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      let req;
      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalIpc = isIpcUrl;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;
          const headers = options && options.headers;
          options = { ...options, headers: {} };
          if (headers) {
            for (const [key2, value] of Object.entries(headers)) {
              options.headers[key2.toLowerCase()] = value;
            }
          }
        } else if (websocket.listenerCount("redirect") === 0) {
          const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;
          if (!isSameHost || websocket._originalSecure && !isSecure) {
            delete opts.headers.authorization;
            delete opts.headers.cookie;
            if (!isSameHost)
              delete opts.headers.host;
            opts.auth = void 0;
          }
        }
        if (opts.auth && !options.headers.authorization) {
          options.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
        }
        req = websocket._req = request(opts);
        if (websocket._redirects) {
          websocket.emit("redirect", websocket.url, req);
        }
      } else {
        req = websocket._req = request(opts);
      }
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err) => {
        if (req === null || req[kAborted])
          return;
        req = websocket._req = null;
        emitErrorAndClose(websocket, err);
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          let addr;
          try {
            addr = new URL2(location, address);
          } catch (e) {
            const err = new SyntaxError(`Invalid URL: ${location}`);
            emitErrorAndClose(websocket, err);
            return;
          }
          initAsClient(websocket, addr, protocols, options);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(
            websocket,
            req,
            `Unexpected server response: ${res.statusCode}`
          );
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket.CONNECTING)
          return;
        req = websocket._req = null;
        const upgrade = res.headers.upgrade;
        if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
          abortHandshake(websocket, socket, "Invalid Upgrade header");
          return;
        }
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        let protError;
        if (serverProt !== void 0) {
          if (!protocolSet.size) {
            protError = "Server sent a subprotocol but none was requested";
          } else if (!protocolSet.has(serverProt)) {
            protError = "Server sent an invalid subprotocol";
          }
        } else if (protocolSet.size) {
          protError = "Server sent no subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt)
          websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse(secWebSocketExtensions);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
            const message = "Server indicated an extension that was not requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
        websocket.setSocket(socket, head, {
          allowSynchronousEvents: opts.allowSynchronousEvents,
          generateMask: opts.generateMask,
          maxPayload: opts.maxPayload,
          skipUTF8Validation: opts.skipUTF8Validation
        });
      });
      if (opts.finishRequest) {
        opts.finishRequest(req, websocket);
      } else {
        req.end();
      }
    }
    function emitErrorAndClose(websocket, err) {
      websocket._readyState = WebSocket.CLOSING;
      websocket.emit("error", err);
      websocket.emitClose();
    }
    function netConnect(options) {
      options.path = options.socketPath;
      return net.connect(options);
    }
    function tlsConnect(options) {
      options.path = void 0;
      if (!options.servername && options.servername !== "") {
        options.servername = net.isIP(options.host) ? "" : options.host;
      }
      return tls.connect(options);
    }
    function abortHandshake(websocket, stream2, message) {
      websocket._readyState = WebSocket.CLOSING;
      const err = new Error(message);
      Error.captureStackTrace(err, abortHandshake);
      if (stream2.setHeader) {
        stream2[kAborted] = true;
        stream2.abort();
        if (stream2.socket && !stream2.socket.destroyed) {
          stream2.socket.destroy();
        }
        process.nextTick(emitErrorAndClose, websocket, err);
      } else {
        stream2.destroy(err);
        stream2.once("error", websocket.emit.bind(websocket, "error"));
        stream2.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb) {
      if (data) {
        const length = toBuffer(data).length;
        if (websocket._socket)
          websocket._sender._bufferedBytes += length;
        else
          websocket._bufferedAmount += length;
      }
      if (cb) {
        const err = new Error(
          `WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`
        );
        process.nextTick(cb, err);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (websocket._socket[kWebSocket] === void 0)
        return;
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      if (code === 1005)
        websocket.close();
      else
        websocket.close(code, reason);
    }
    function receiverOnDrain() {
      const websocket = this[kWebSocket];
      if (!websocket.isPaused)
        websocket._socket.resume();
    }
    function receiverOnError(err) {
      const websocket = this[kWebSocket];
      if (websocket._socket[kWebSocket] !== void 0) {
        websocket._socket.removeListener("data", socketOnData);
        process.nextTick(resume, websocket._socket);
        websocket.close(err[kStatusCode]);
      }
      websocket.emit("error", err);
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data, isBinary) {
      this[kWebSocket].emit("message", data, isBinary);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      if (websocket._autoPong)
        websocket.pong(data, !this._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream2) {
      stream2.resume();
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket.CLOSING;
        this.destroy();
      }
    }
  }
});

// node_modules/ws/lib/stream.js
var require_stream = __commonJS({
  "node_modules/ws/lib/stream.js"(exports2, module2) {
    "use strict";
    var { Duplex } = require("stream");
    function emitClose(stream2) {
      stream2.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err);
      }
    }
    function createWebSocketStream(ws, options) {
      let terminateOnDestroy = true;
      const duplex = new Duplex({
        ...options,
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      });
      ws.on("message", function message(msg, isBinary) {
        const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;
        if (!duplex.push(data))
          ws.pause();
      });
      ws.once("error", function error(err) {
        if (duplex.destroyed)
          return;
        terminateOnDestroy = false;
        duplex.destroy(err);
      });
      ws.once("close", function close() {
        if (duplex.destroyed)
          return;
        duplex.push(null);
      });
      duplex._destroy = function(err, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err);
          process.nextTick(emitClose, duplex);
          return;
        }
        let called = false;
        ws.once("error", function error(err2) {
          called = true;
          callback(err2);
        });
        ws.once("close", function close() {
          if (!called)
            callback(err);
          process.nextTick(emitClose, duplex);
        });
        if (terminateOnDestroy)
          ws.terminate();
      };
      duplex._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._final(callback);
          });
          return;
        }
        if (ws._socket === null)
          return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex._readableState.endEmitted)
            duplex.destroy();
        } else {
          ws._socket.once("finish", function finish2() {
            callback();
          });
          ws.close();
        }
      };
      duplex._read = function() {
        if (ws.isPaused)
          ws.resume();
      };
      duplex._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex.on("end", duplexOnEnd);
      duplex.on("error", duplexOnError);
      return duplex;
    }
    module2.exports = createWebSocketStream;
  }
});

// node_modules/ws/lib/subprotocol.js
var require_subprotocol = __commonJS({
  "node_modules/ws/lib/subprotocol.js"(exports2, module2) {
    "use strict";
    var { tokenChars } = require_validation();
    function parse(header) {
      const protocols = /* @__PURE__ */ new Set();
      let start = -1;
      let end = -1;
      let i = 0;
      for (i; i < header.length; i++) {
        const code = header.charCodeAt(i);
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (i !== 0 && (code === 32 || code === 9)) {
          if (end === -1 && start !== -1)
            end = i;
        } else if (code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          const protocol2 = header.slice(start, end);
          if (protocols.has(protocol2)) {
            throw new SyntaxError(`The "${protocol2}" subprotocol is duplicated`);
          }
          protocols.add(protocol2);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
      if (start === -1 || end !== -1) {
        throw new SyntaxError("Unexpected end of input");
      }
      const protocol = header.slice(start, i);
      if (protocols.has(protocol)) {
        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
      }
      protocols.add(protocol);
      return protocols;
    }
    module2.exports = { parse };
  }
});

// node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS({
  "node_modules/ws/lib/websocket-server.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events");
    var http = require("http");
    var { Duplex } = require("stream");
    var { createHash } = require("crypto");
    var extension = require_extension();
    var PerMessageDeflate = require_permessage_deflate();
    var subprotocol = require_subprotocol();
    var WebSocket = require_websocket();
    var { GUID, kWebSocket } = require_constants2();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    var WebSocketServer = class extends EventEmitter {
      /**
       * Create a `WebSocketServer` instance.
       *
       * @param {Object} options Configuration options
       * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {Boolean} [options.autoPong=true] Specifies whether or not to
       *     automatically send a pong in response to a ping
       * @param {Number} [options.backlog=511] The maximum length of the queue of
       *     pending connections
       * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
       *     track clients
       * @param {Function} [options.handleProtocols] A hook to handle protocols
       * @param {String} [options.host] The hostname where to bind the server
       * @param {Number} [options.maxPayload=104857600] The maximum allowed message
       *     size
       * @param {Boolean} [options.noServer=false] Enable no server mode
       * @param {String} [options.path] Accept only connections matching this path
       * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
       *     permessage-deflate
       * @param {Number} [options.port] The port where to bind the server
       * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
       *     server to use
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @param {Function} [options.verifyClient] A hook to reject connections
       * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
       *     class to use. It must be the `WebSocket` class or class that extends it
       * @param {Function} [callback] A listener for the `listening` event
       */
      constructor(options, callback) {
        super();
        options = {
          allowSynchronousEvents: true,
          autoPong: true,
          maxPayload: 100 * 1024 * 1024,
          skipUTF8Validation: false,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          // use default (511 as implemented in net.js)
          server: null,
          host: null,
          path: null,
          port: null,
          WebSocket,
          ...options
        };
        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {
          throw new TypeError(
            'One and only one of the "port", "server", or "noServer" options must be specified'
          );
        }
        if (options.port != null) {
          this._server = http.createServer((req, res) => {
            const body = http.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(
            options.port,
            options.host,
            options.backlog,
            callback
          );
        } else if (options.server) {
          this._server = options.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options.perMessageDeflate === true)
          options.perMessageDeflate = {};
        if (options.clientTracking) {
          this.clients = /* @__PURE__ */ new Set();
          this._shouldEmitClose = false;
        }
        this.options = options;
        this._state = RUNNING;
      }
      /**
       * Returns the bound address, the address family name, and port of the server
       * as reported by the operating system if listening on an IP socket.
       * If the server is listening on a pipe or UNIX domain socket, the name is
       * returned as a string.
       *
       * @return {(Object|String|null)} The address of the server
       * @public
       */
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server)
          return null;
        return this._server.address();
      }
      /**
       * Stop the server from accepting new connections and emit the `'close'` event
       * when all existing connections are closed.
       *
       * @param {Function} [cb] A one-time listener for the `'close'` event
       * @public
       */
      close(cb) {
        if (this._state === CLOSED) {
          if (cb) {
            this.once("close", () => {
              cb(new Error("The server is not running"));
            });
          }
          process.nextTick(emitClose, this);
          return;
        }
        if (cb)
          this.once("close", cb);
        if (this._state === CLOSING)
          return;
        this._state = CLOSING;
        if (this.options.noServer || this.options.server) {
          if (this._server) {
            this._removeListeners();
            this._removeListeners = this._server = null;
          }
          if (this.clients) {
            if (!this.clients.size) {
              process.nextTick(emitClose, this);
            } else {
              this._shouldEmitClose = true;
            }
          } else {
            process.nextTick(emitClose, this);
          }
        } else {
          const server = this._server;
          this._removeListeners();
          this._removeListeners = this._server = null;
          server.close(() => {
            emitClose(this);
          });
        }
      }
      /**
       * See if a given request should be handled by this server instance.
       *
       * @param {http.IncomingMessage} req Request object to inspect
       * @return {Boolean} `true` if the request is valid, else `false`
       * @public
       */
      shouldHandle(req) {
        if (this.options.path) {
          const index = req.url.indexOf("?");
          const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
          if (pathname !== this.options.path)
            return false;
        }
        return true;
      }
      /**
       * Handle a HTTP Upgrade request.
       *
       * @param {http.IncomingMessage} req The request object
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Function} cb Callback
       * @public
       */
      handleUpgrade(req, socket, head, cb) {
        socket.on("error", socketOnError);
        const key = req.headers["sec-websocket-key"];
        const upgrade = req.headers.upgrade;
        const version = +req.headers["sec-websocket-version"];
        if (req.method !== "GET") {
          const message = "Invalid HTTP method";
          abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
          return;
        }
        if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
          const message = "Invalid Upgrade header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (key === void 0 || !keyRegex.test(key)) {
          const message = "Missing or invalid Sec-WebSocket-Key header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (version !== 8 && version !== 13) {
          const message = "Missing or invalid Sec-WebSocket-Version header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!this.shouldHandle(req)) {
          abortHandshake(socket, 400);
          return;
        }
        const secWebSocketProtocol = req.headers["sec-websocket-protocol"];
        let protocols = /* @__PURE__ */ new Set();
        if (secWebSocketProtocol !== void 0) {
          try {
            protocols = subprotocol.parse(secWebSocketProtocol);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Protocol header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        const secWebSocketExtensions = req.headers["sec-websocket-extensions"];
        const extensions = {};
        if (this.options.perMessageDeflate && secWebSocketExtensions !== void 0) {
          const perMessageDeflate = new PerMessageDeflate(
            this.options.perMessageDeflate,
            true,
            this.options.maxPayload
          );
          try {
            const offers = extension.parse(secWebSocketExtensions);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err) {
            const message = "Invalid or unacceptable Sec-WebSocket-Extensions header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(
                extensions,
                key,
                protocols,
                req,
                socket,
                head,
                cb
              );
            });
            return;
          }
          if (!this.options.verifyClient(info))
            return abortHandshake(socket, 401);
        }
        this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
      }
      /**
       * Upgrade the connection to WebSocket.
       *
       * @param {Object} extensions The accepted extensions
       * @param {String} key The value of the `Sec-WebSocket-Key` header
       * @param {Set} protocols The subprotocols
       * @param {http.IncomingMessage} req The request object
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Function} cb Callback
       * @throws {Error} If called more than once with the same socket
       * @private
       */
      completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
        if (!socket.readable || !socket.writable)
          return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error(
            "server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration"
          );
        }
        if (this._state > RUNNING)
          return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new this.options.WebSocket(null, void 0, this.options);
        if (protocols.size) {
          const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value = extension.format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, {
          allowSynchronousEvents: this.options.allowSynchronousEvents,
          maxPayload: this.options.maxPayload,
          skipUTF8Validation: this.options.skipUTF8Validation
        });
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => {
            this.clients.delete(ws);
            if (this._shouldEmitClose && !this.clients.size) {
              process.nextTick(emitClose, this);
            }
          });
        }
        cb(ws, req);
      }
    };
    module2.exports = WebSocketServer;
    function addListeners(server, map) {
      for (const event of Object.keys(map))
        server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      message = message || http.STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.once("finish", socket.destroy);
      socket.end(
        `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message
      );
    }
    function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
      if (server.listenerCount("wsClientError")) {
        const err = new Error(message);
        Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);
        server.emit("wsClientError", err, socket, req);
      } else {
        abortHandshake(socket, code, message);
      }
    }
  }
});

// node_modules/ws/index.js
var require_ws = __commonJS({
  "node_modules/ws/index.js"(exports2, module2) {
    "use strict";
    var WebSocket = require_websocket();
    WebSocket.createWebSocketStream = require_stream();
    WebSocket.Server = require_websocket_server();
    WebSocket.Receiver = require_receiver();
    WebSocket.Sender = require_sender();
    WebSocket.WebSocket = WebSocket;
    WebSocket.WebSocketServer = WebSocket.Server;
    module2.exports = WebSocket;
  }
});

// node_modules/ethers/lib.commonjs/providers/ws.js
var require_ws2 = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ws.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebSocket = void 0;
    var ws_1 = require_ws();
    Object.defineProperty(exports2, "WebSocket", { enumerable: true, get: function() {
      return ws_1.WebSocket;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-socket.js
var require_provider_socket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-socket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SocketProvider = exports2.SocketEventSubscriber = exports2.SocketPendingSubscriber = exports2.SocketBlockSubscriber = exports2.SocketSubscriber = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    var index_js_1 = require_utils();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var SocketSubscriber = class {
      #provider;
      #filter;
      /**
       *  The filter.
       */
      get filter() {
        return JSON.parse(this.#filter);
      }
      #filterId;
      #paused;
      #emitPromise;
      /**
       *  Creates a new **SocketSubscriber** attached to %%provider%% listening
       *  to %%filter%%.
       */
      constructor(provider, filter) {
        this.#provider = provider;
        this.#filter = JSON.stringify(filter);
        this.#filterId = null;
        this.#paused = null;
        this.#emitPromise = null;
      }
      start() {
        this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId) => {
          ;
          this.#provider._register(filterId, this);
          return filterId;
        });
      }
      stop() {
        this.#filterId.then((filterId) => {
          if (this.#provider.destroyed) {
            return;
          }
          this.#provider.send("eth_unsubscribe", [filterId]);
        });
        this.#filterId = null;
      }
      // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
      //        and resume
      pause(dropWhilePaused) {
        (0, index_js_1.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
        this.#paused = !!dropWhilePaused;
      }
      resume() {
        this.#paused = null;
      }
      /**
       *  @_ignore:
       */
      _handleMessage(message) {
        if (this.#filterId == null) {
          return;
        }
        if (this.#paused === null) {
          let emitPromise = this.#emitPromise;
          if (emitPromise == null) {
            emitPromise = this._emit(this.#provider, message);
          } else {
            emitPromise = emitPromise.then(async () => {
              await this._emit(this.#provider, message);
            });
          }
          this.#emitPromise = emitPromise.then(() => {
            if (this.#emitPromise === emitPromise) {
              this.#emitPromise = null;
            }
          });
        }
      }
      /**
       *  Sub-classes **must** override this to emit the events on the
       *  provider.
       */
      async _emit(provider, message) {
        throw new Error("sub-classes must implemente this; _emit");
      }
    };
    exports2.SocketSubscriber = SocketSubscriber;
    var SocketBlockSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newHeads"]);
      }
      async _emit(provider, message) {
        provider.emit("block", parseInt(message.number));
      }
    };
    exports2.SocketBlockSubscriber = SocketBlockSubscriber;
    var SocketPendingSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newPendingTransactions"]);
      }
      async _emit(provider, message) {
        provider.emit("pending", message);
      }
    };
    exports2.SocketPendingSubscriber = SocketPendingSubscriber;
    var SocketEventSubscriber = class extends SocketSubscriber {
      #logFilter;
      /**
       *  The filter.
       */
      get logFilter() {
        return JSON.parse(this.#logFilter);
      }
      /**
       *  @_ignore:
       */
      constructor(provider, filter) {
        super(provider, ["logs", filter]);
        this.#logFilter = JSON.stringify(filter);
      }
      async _emit(provider, message) {
        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
      }
    };
    exports2.SocketEventSubscriber = SocketEventSubscriber;
    var SocketProvider = class extends provider_jsonrpc_js_1.JsonRpcApiProvider {
      #callbacks;
      // Maps each filterId to its subscriber
      #subs;
      // If any events come in before a subscriber has finished
      // registering, queue them
      #pending;
      /**
       *  Creates a new **SocketProvider** connected to %%network%%.
       *
       *  If unspecified, the network will be discovered.
       */
      constructor(network, _options) {
        const options = Object.assign({}, _options != null ? _options : {});
        (0, index_js_1.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
        options.batchMaxCount = 1;
        if (options.staticNetwork == null) {
          options.staticNetwork = true;
        }
        super(network, options);
        this.#callbacks = /* @__PURE__ */ new Map();
        this.#subs = /* @__PURE__ */ new Map();
        this.#pending = /* @__PURE__ */ new Map();
      }
      // This value is only valid after _start has been called
      /*
      get _network(): Network {
          if (this.#network == null) {
              throw new Error("this shouldn't happen");
          }
          return this.#network.clone();
      }
      */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "close":
            return new abstract_provider_js_1.UnmanagedSubscriber("close");
          case "block":
            return new SocketBlockSubscriber(this);
          case "pending":
            return new SocketPendingSubscriber(this);
          case "event":
            return new SocketEventSubscriber(this, sub.filter);
          case "orphan":
            if (sub.filter.orphan === "drop-log") {
              return new abstract_provider_js_1.UnmanagedSubscriber("drop-log");
            }
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Register a new subscriber. This is used internalled by Subscribers
       *  and generally is unecessary unless extending capabilities.
       */
      _register(filterId, subscriber) {
        this.#subs.set(filterId, subscriber);
        const pending = this.#pending.get(filterId);
        if (pending) {
          for (const message of pending) {
            subscriber._handleMessage(message);
          }
          this.#pending.delete(filterId);
        }
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
        const promise = new Promise((resolve2, reject2) => {
          this.#callbacks.set(payload.id, { payload, resolve: resolve2, reject: reject2 });
        });
        await this._waitUntilReady();
        await this._write(JSON.stringify(payload));
        return [await promise];
      }
      // Sub-classes must call this once they are connected
      /*
          async _start(): Promise<void> {
              if (this.#ready) { return; }
      
              for (const { payload } of this.#callbacks.values()) {
                  await this._write(JSON.stringify(payload));
              }
      
              this.#ready = (async function() {
                  await super._start();
              })();
          }
          */
      /**
       *  Sub-classes **must** call this with messages received over their
       *  transport to be processed and dispatched.
       */
      async _processMessage(message) {
        const result = JSON.parse(message);
        if (result && typeof result === "object" && "id" in result) {
          const callback = this.#callbacks.get(result.id);
          if (callback == null) {
            this.emit("error", (0, index_js_1.makeError)("received result for unknown id", "UNKNOWN_ERROR", {
              reasonCode: "UNKNOWN_ID",
              result
            }));
            return;
          }
          this.#callbacks.delete(result.id);
          callback.resolve(result);
        } else if (result && result.method === "eth_subscription") {
          const filterId = result.params.subscription;
          const subscriber = this.#subs.get(filterId);
          if (subscriber) {
            subscriber._handleMessage(result.params.result);
          } else {
            let pending = this.#pending.get(filterId);
            if (pending == null) {
              pending = [];
              this.#pending.set(filterId, pending);
            }
            pending.push(result.params.result);
          }
        } else {
          this.emit("error", (0, index_js_1.makeError)("received unexpected message", "UNKNOWN_ERROR", {
            reasonCode: "UNEXPECTED_MESSAGE",
            result
          }));
          return;
        }
      }
      /**
       *  Sub-classes **must** override this to send %%message%% over their
       *  transport.
       */
      async _write(message) {
        throw new Error("sub-classes must override this");
      }
    };
    exports2.SocketProvider = SocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-websocket.js
var require_provider_websocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-websocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebSocketProvider = void 0;
    var ws_js_1 = require_ws2();
    var provider_socket_js_1 = require_provider_socket();
    var WebSocketProvider = class extends provider_socket_js_1.SocketProvider {
      #connect;
      #websocket;
      get websocket() {
        if (this.#websocket == null) {
          throw new Error("websocket closed");
        }
        return this.#websocket;
      }
      constructor(url, network, options) {
        super(network, options);
        if (typeof url === "string") {
          this.#connect = () => {
            return new ws_js_1.WebSocket(url);
          };
          this.#websocket = this.#connect();
        } else if (typeof url === "function") {
          this.#connect = url;
          this.#websocket = url();
        } else {
          this.#connect = null;
          this.#websocket = url;
        }
        this.websocket.onopen = async () => {
          try {
            await this._start();
            this.resume();
          } catch (error) {
            console.log("failed to start WebsocketProvider", error);
          }
        };
        this.websocket.onmessage = (message) => {
          this._processMessage(message.data);
        };
      }
      async _write(message) {
        this.websocket.send(message);
      }
      async destroy() {
        if (this.#websocket != null) {
          this.#websocket.close();
          this.#websocket = null;
        }
        super.destroy();
      }
    };
    exports2.WebSocketProvider = WebSocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-infura.js
var require_provider_infura = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-infura.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InfuraProvider = exports2.InfuraWebSocketProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var provider_websocket_js_1 = require_provider_websocket();
    var defaultProjectId = "84842078b09946638c03157f83405213";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "mainnet.infura.io";
        case "goerli":
          return "goerli.infura.io";
        case "sepolia":
          return "sepolia.infura.io";
        case "arbitrum":
          return "arbitrum-mainnet.infura.io";
        case "arbitrum-goerli":
          return "arbitrum-goerli.infura.io";
        case "arbitrum-sepolia":
          return "arbitrum-sepolia.infura.io";
        case "base":
          return "base-mainnet.infura.io";
        case "base-goerlia":
          return "base-goerli.infura.io";
        case "base-sepolia":
          return "base-sepolia.infura.io";
        case "bnb":
          return "bnbsmartchain-mainnet.infura.io";
        case "bnbt":
          return "bnbsmartchain-testnet.infura.io";
        case "linea":
          return "linea-mainnet.infura.io";
        case "linea-goerli":
          return "linea-goerli.infura.io";
        case "linea-sepolia":
          return "linea-sepolia.infura.io";
        case "matic":
          return "polygon-mainnet.infura.io";
        case "matic-amoy":
          return "polygon-amoy.infura.io";
        case "matic-mumbai":
          return "polygon-mumbai.infura.io";
        case "optimism":
          return "optimism-mainnet.infura.io";
        case "optimism-goerli":
          return "optimism-goerli.infura.io";
        case "optimism-sepolia":
          return "optimism-sepolia.infura.io";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var InfuraWebSocketProvider = class extends provider_websocket_js_1.WebSocketProvider {
      /**
       *  The Project ID for the INFURA connection.
       */
      projectId;
      /**
       *  The Project Secret.
       *
       *  If null, no authenticated requests are made. This should not
       *  be used outside of private contexts.
       */
      projectSecret;
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      constructor(network, projectId) {
        const provider = new InfuraProvider(network, projectId);
        const req = provider._getConnection();
        (0, index_js_1.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
        const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, provider._network);
        (0, index_js_1.defineProperties)(this, {
          projectId: provider.projectId,
          projectSecret: provider.projectSecret
        });
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    exports2.InfuraWebSocketProvider = InfuraWebSocketProvider;
    var InfuraProvider = class _InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  The Project ID for the INFURA connection.
       */
      projectId;
      /**
       *  The Project Secret.
       *
       *  If null, no authenticated requests are made. This should not
       *  be used outside of private contexts.
       */
      projectSecret;
      /**
       *  Creates a new **InfuraProvider**.
       */
      constructor(_network, projectId, projectSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = _InfuraProvider.getRequest(network, projectId, projectSecret);
        super(request, network, { staticNetwork: network });
        (0, index_js_1.defineProperties)(this, { projectId, projectSecret });
      }
      _getProvider(chainId) {
        try {
          return new _InfuraProvider(chainId, this.projectId, this.projectSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      static getWebSocketProvider(network, projectId) {
        return new InfuraWebSocketProvider(network, projectId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%projectId%% and %%projectSecret%%.
       */
      static getRequest(network, projectId, projectSecret) {
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v3/${projectId}`);
        request.allowGzip = true;
        if (projectSecret) {
          request.setCredentials("", projectSecret);
        }
        if (projectId === defaultProjectId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("InfuraProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports2.InfuraProvider = InfuraProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-quicknode.js
var require_provider_quicknode = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-quicknode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QuickNodeProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethers.quiknode.pro";
        case "goerli":
          return "ethers.ethereum-goerli.quiknode.pro";
        case "sepolia":
          return "ethers.ethereum-sepolia.quiknode.pro";
        case "holesky":
          return "ethers.ethereum-holesky.quiknode.pro";
        case "arbitrum":
          return "ethers.arbitrum-mainnet.quiknode.pro";
        case "arbitrum-goerli":
          return "ethers.arbitrum-goerli.quiknode.pro";
        case "arbitrum-sepolia":
          return "ethers.arbitrum-sepolia.quiknode.pro";
        case "base":
          return "ethers.base-mainnet.quiknode.pro";
        case "base-goerli":
          return "ethers.base-goerli.quiknode.pro";
        case "base-spolia":
          return "ethers.base-sepolia.quiknode.pro";
        case "bnb":
          return "ethers.bsc.quiknode.pro";
        case "bnbt":
          return "ethers.bsc-testnet.quiknode.pro";
        case "matic":
          return "ethers.matic.quiknode.pro";
        case "matic-mumbai":
          return "ethers.matic-testnet.quiknode.pro";
        case "optimism":
          return "ethers.optimism.quiknode.pro";
        case "optimism-goerli":
          return "ethers.optimism-goerli.quiknode.pro";
        case "optimism-sepolia":
          return "ethers.optimism-sepolia.quiknode.pro";
        case "xdai":
          return "ethers.xdai.quiknode.pro";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var QuickNodeProvider = class _QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  The API token.
       */
      token;
      /**
       *  Creates a new **QuickNodeProvider**.
       */
      constructor(_network, token) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (token == null) {
          token = defaultToken;
        }
        const request = _QuickNodeProvider.getRequest(network, token);
        super(request, network, { staticNetwork: network });
        (0, index_js_1.defineProperties)(this, { token });
      }
      _getProvider(chainId) {
        try {
          return new _QuickNodeProvider(chainId, this.token);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.token === defaultToken;
      }
      /**
       *  Returns a new request prepared for %%network%% and the
       *  %%token%%.
       */
      static getRequest(network, token) {
        if (token == null) {
          token = defaultToken;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${token}`);
        request.allowGzip = true;
        if (token === defaultToken) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("QuickNodeProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports2.QuickNodeProvider = QuickNodeProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-fallback.js
var require_provider_fallback = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-fallback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FallbackProvider = void 0;
    var index_js_1 = require_utils();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network();
    var BN_1 = BigInt("1");
    var BN_2 = BigInt("2");
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        const tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
      }
    }
    function stall(duration) {
      return new Promise((resolve2) => {
        setTimeout(resolve2, duration);
      });
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function stringify(value) {
      return JSON.stringify(value, (key, value2) => {
        if (typeof value2 === "bigint") {
          return { type: "bigint", value: value2.toString() };
        }
        return value2;
      });
    }
    var defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
    var defaultState = {
      blockNumber: -2,
      requests: 0,
      lateResponses: 0,
      errorResponses: 0,
      outOfSync: -1,
      unsupportedEvents: 0,
      rollingDuration: 0,
      score: 0,
      _network: null,
      _updateNumber: null,
      _totalTime: 0,
      _lastFatalError: null,
      _lastFatalErrorTimestamp: 0
    };
    async function waitForSync(config, blockNumber) {
      while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
        if (!config._updateNumber) {
          config._updateNumber = (async () => {
            try {
              const blockNumber2 = await config.provider.getBlockNumber();
              if (blockNumber2 > config.blockNumber) {
                config.blockNumber = blockNumber2;
              }
            } catch (error) {
              config.blockNumber = -2;
              config._lastFatalError = error;
              config._lastFatalErrorTimestamp = getTime();
            }
            config._updateNumber = null;
          })();
        }
        await config._updateNumber;
        config.outOfSync++;
        if (config._lastFatalError) {
          break;
        }
      }
    }
    function _normalize(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[" + value.map(_normalize).join(",") + "]";
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return _normalize(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
        case "number":
          return BigInt(value).toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
        }
      }
      console.log("Could not serialize", value);
      throw new Error("Hmm...");
    }
    function normalizeResult(value) {
      if ("error" in value) {
        const error = value.error;
        return { tag: _normalize(error), value: error };
      }
      const result = value.result;
      return { tag: _normalize(result), value: result };
    }
    function checkQuorum(quorum, results) {
      const tally = /* @__PURE__ */ new Map();
      for (const { value, tag, weight } of results) {
        const t = tally.get(tag) || { value, weight: 0 };
        t.weight += weight;
        tally.set(tag, t);
      }
      let best = null;
      for (const r of tally.values()) {
        if (r.weight >= quorum && (!best || r.weight > best.weight)) {
          best = r;
        }
      }
      if (best) {
        return best.value;
      }
      return void 0;
    }
    function getMedian(quorum, results) {
      let resultWeight = 0;
      const errorMap = /* @__PURE__ */ new Map();
      let bestError = null;
      const values = [];
      for (const { value, tag, weight } of results) {
        if (value instanceof Error) {
          const e = errorMap.get(tag) || { value, weight: 0 };
          e.weight += weight;
          errorMap.set(tag, e);
          if (bestError == null || e.weight > bestError.weight) {
            bestError = e;
          }
        } else {
          values.push(BigInt(value));
          resultWeight += weight;
        }
      }
      if (resultWeight < quorum) {
        if (bestError && bestError.weight >= quorum) {
          return bestError.value;
        }
        return void 0;
      }
      values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);
      const mid = Math.floor(values.length / 2);
      if (values.length % 2) {
        return values[mid];
      }
      return (values[mid - 1] + values[mid] + BN_1) / BN_2;
    }
    function getAnyResult(quorum, results) {
      const result = checkQuorum(quorum, results);
      if (result !== void 0) {
        return result;
      }
      for (const r of results) {
        if (r.value) {
          return r.value;
        }
      }
      return void 0;
    }
    function getFuzzyMode(quorum, results) {
      if (quorum === 1) {
        return (0, index_js_1.getNumber)(getMedian(quorum, results), "%internal");
      }
      const tally = /* @__PURE__ */ new Map();
      const add = (result, weight) => {
        const t = tally.get(result) || { result, weight: 0 };
        t.weight += weight;
        tally.set(result, t);
      };
      for (const { weight, value } of results) {
        const r = (0, index_js_1.getNumber)(value);
        add(r - 1, weight);
        add(r, weight);
        add(r + 1, weight);
      }
      let bestWeight = 0;
      let bestResult = void 0;
      for (const { weight, result } of tally.values()) {
        if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
          bestWeight = weight;
          bestResult = result;
        }
      }
      return bestResult;
    }
    var FallbackProvider = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  The number of backends that must agree on a value before it is
       *  accpeted.
       */
      quorum;
      /**
       *  @_ignore:
       */
      eventQuorum;
      /**
       *  @_ignore:
       */
      eventWorkers;
      #configs;
      #height;
      #initialSyncPromise;
      /**
       *  Creates a new **FallbackProvider** with %%providers%% connected to
       *  %%network%%.
       *
       *  If a [[Provider]] is included in %%providers%%, defaults are used
       *  for the configuration.
       */
      constructor(providers, network, options) {
        super(network, options);
        this.#configs = providers.map((p) => {
          if (p instanceof abstract_provider_js_1.AbstractProvider) {
            return Object.assign({ provider: p }, defaultConfig, defaultState);
          } else {
            return Object.assign({}, defaultConfig, p, defaultState);
          }
        });
        this.#height = -2;
        this.#initialSyncPromise = null;
        if (options && options.quorum != null) {
          this.quorum = options.quorum;
        } else {
          this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {
            accum += config.weight;
            return accum;
          }, 0) / 2);
        }
        this.eventQuorum = 1;
        this.eventWorkers = 1;
        (0, index_js_1.assertArgument)(this.quorum <= this.#configs.reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
      }
      get providerConfigs() {
        return this.#configs.map((c) => {
          const result = Object.assign({}, c);
          for (const key in result) {
            if (key[0] === "_") {
              delete result[key];
            }
          }
          return result;
        });
      }
      async _detectNetwork() {
        return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({ method: "chainId" })));
      }
      // @TODO: Add support to select providers to be the event subscriber
      //_getSubscriber(sub: Subscription): Subscriber {
      //    throw new Error("@TODO");
      //}
      /**
       *  Transforms a %%req%% into the correct method call on %%provider%%.
       */
      async _translatePerform(provider, req) {
        switch (req.method) {
          case "broadcastTransaction":
            return await provider.broadcastTransaction(req.signedTransaction);
          case "call":
            return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
          case "chainId":
            return (await provider.getNetwork()).chainId;
          case "estimateGas":
            return await provider.estimateGas(req.transaction);
          case "getBalance":
            return await provider.getBalance(req.address, req.blockTag);
          case "getBlock": {
            const block = "blockHash" in req ? req.blockHash : req.blockTag;
            return await provider.getBlock(block, req.includeTransactions);
          }
          case "getBlockNumber":
            return await provider.getBlockNumber();
          case "getCode":
            return await provider.getCode(req.address, req.blockTag);
          case "getGasPrice":
            return (await provider.getFeeData()).gasPrice;
          case "getPriorityFee":
            return (await provider.getFeeData()).maxPriorityFeePerGas;
          case "getLogs":
            return await provider.getLogs(req.filter);
          case "getStorage":
            return await provider.getStorage(req.address, req.position, req.blockTag);
          case "getTransaction":
            return await provider.getTransaction(req.hash);
          case "getTransactionCount":
            return await provider.getTransactionCount(req.address, req.blockTag);
          case "getTransactionReceipt":
            return await provider.getTransactionReceipt(req.hash);
          case "getTransactionResult":
            return await provider.getTransactionResult(req.hash);
        }
      }
      // Grab the next (random) config that is not already part of
      // the running set
      #getNextConfig(running) {
        const configs = Array.from(running).map((r) => r.config);
        const allConfigs = this.#configs.slice();
        shuffle(allConfigs);
        allConfigs.sort((a, b) => a.priority - b.priority);
        for (const config of allConfigs) {
          if (config._lastFatalError) {
            continue;
          }
          if (configs.indexOf(config) === -1) {
            return config;
          }
        }
        return null;
      }
      // Adds a new runner (if available) to running.
      #addRunner(running, req) {
        const config = this.#getNextConfig(running);
        if (config == null) {
          return null;
        }
        const runner = {
          config,
          result: null,
          didBump: false,
          perform: null,
          staller: null
        };
        const now = getTime();
        runner.perform = (async () => {
          try {
            config.requests++;
            const result = await this._translatePerform(config.provider, req);
            runner.result = { result };
          } catch (error) {
            config.errorResponses++;
            runner.result = { error };
          }
          const dt = getTime() - now;
          config._totalTime += dt;
          config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
          runner.perform = null;
        })();
        runner.staller = (async () => {
          await stall(config.stallTimeout);
          runner.staller = null;
        })();
        running.add(runner);
        return runner;
      }
      // Initializes the blockNumber and network for each runner and
      // blocks until initialized
      async #initialSync() {
        let initialSync = this.#initialSyncPromise;
        if (!initialSync) {
          const promises = [];
          this.#configs.forEach((config) => {
            promises.push((async () => {
              await waitForSync(config, 0);
              if (!config._lastFatalError) {
                config._network = await config.provider.getNetwork();
              }
            })());
          });
          this.#initialSyncPromise = initialSync = (async () => {
            await Promise.all(promises);
            let chainId = null;
            for (const config of this.#configs) {
              if (config._lastFatalError) {
                continue;
              }
              const network = config._network;
              if (chainId == null) {
                chainId = network.chainId;
              } else if (network.chainId !== chainId) {
                (0, index_js_1.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                  operation: "new FallbackProvider"
                });
              }
            }
          })();
        }
        await initialSync;
      }
      async #checkQuorum(running, req) {
        const results = [];
        for (const runner of running) {
          if (runner.result != null) {
            const { tag, value } = normalizeResult(runner.result);
            results.push({ tag, value, weight: runner.config.weight });
          }
        }
        if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
          return void 0;
        }
        switch (req.method) {
          case "getBlockNumber": {
            if (this.#height === -2) {
              this.#height = Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, this.#configs.filter((c) => !c._lastFatalError).map((c) => ({
                value: c.blockNumber,
                tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),
                weight: c.weight
              })))));
            }
            const mode = getFuzzyMode(this.quorum, results);
            if (mode === void 0) {
              return void 0;
            }
            if (mode > this.#height) {
              this.#height = mode;
            }
            return this.#height;
          }
          case "getGasPrice":
          case "getPriorityFee":
          case "estimateGas":
            return getMedian(this.quorum, results);
          case "getBlock":
            if ("blockTag" in req && req.blockTag === "pending") {
              return getAnyResult(this.quorum, results);
            }
            return checkQuorum(this.quorum, results);
          case "call":
          case "chainId":
          case "getBalance":
          case "getTransactionCount":
          case "getCode":
          case "getStorage":
          case "getTransaction":
          case "getTransactionReceipt":
          case "getLogs":
            return checkQuorum(this.quorum, results);
          case "broadcastTransaction":
            return getAnyResult(this.quorum, results);
        }
        (0, index_js_1.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
          operation: `_perform(${stringify(req.method)})`
        });
      }
      async #waitForQuorum(running, req) {
        if (running.size === 0) {
          throw new Error("no runners?!");
        }
        const interesting = [];
        let newRunners = 0;
        for (const runner of running) {
          if (runner.perform) {
            interesting.push(runner.perform);
          }
          if (runner.staller) {
            interesting.push(runner.staller);
            continue;
          }
          if (runner.didBump) {
            continue;
          }
          runner.didBump = true;
          newRunners++;
        }
        const value = await this.#checkQuorum(running, req);
        if (value !== void 0) {
          if (value instanceof Error) {
            throw value;
          }
          return value;
        }
        for (let i = 0; i < newRunners; i++) {
          this.#addRunner(running, req);
        }
        (0, index_js_1.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
          request: "%sub-requests",
          info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }
        });
        await Promise.race(interesting);
        return await this.#waitForQuorum(running, req);
      }
      async _perform(req) {
        if (req.method === "broadcastTransaction") {
          const results = this.#configs.map((c) => null);
          const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {
            try {
              const result3 = await provider._perform(req);
              results[index] = Object.assign(normalizeResult({ result: result3 }), { weight });
            } catch (error) {
              results[index] = Object.assign(normalizeResult({ error }), { weight });
            }
          });
          while (true) {
            const done = results.filter((r) => r != null);
            for (const { value } of done) {
              if (!(value instanceof Error)) {
                return value;
              }
            }
            const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
            if ((0, index_js_1.isError)(result3, "INSUFFICIENT_FUNDS")) {
              throw result3;
            }
            const waiting = broadcasts.filter((b, i) => results[i] == null);
            if (waiting.length === 0) {
              break;
            }
            await Promise.race(waiting);
          }
          const result2 = getAnyResult(this.quorum, results);
          (0, index_js_1.assert)(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
            request: "%sub-requests",
            info: { request: req, results: results.map(stringify) }
          });
          if (result2 instanceof Error) {
            throw result2;
          }
          return result2;
        }
        await this.#initialSync();
        const running = /* @__PURE__ */ new Set();
        let inflightQuorum = 0;
        while (true) {
          const runner = this.#addRunner(running, req);
          if (runner == null) {
            break;
          }
          inflightQuorum += runner.config.weight;
          if (inflightQuorum >= this.quorum) {
            break;
          }
        }
        const result = await this.#waitForQuorum(running, req);
        for (const runner of running) {
          if (runner.perform && runner.result == null) {
            runner.config.lateResponses++;
          }
        }
        return result;
      }
      async destroy() {
        for (const { provider } of this.#configs) {
          provider.destroy();
        }
        super.destroy();
      }
    };
    exports2.FallbackProvider = FallbackProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/default-provider.js
var require_default_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/default-provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultProvider = void 0;
    var index_js_1 = require_utils();
    var provider_ankr_js_1 = require_provider_ankr();
    var provider_alchemy_js_1 = require_provider_alchemy();
    var provider_chainstack_js_1 = require_provider_chainstack();
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    var provider_etherscan_js_1 = require_provider_etherscan();
    var provider_infura_js_1 = require_provider_infura();
    var provider_quicknode_js_1 = require_provider_quicknode();
    var provider_fallback_js_1 = require_provider_fallback();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var network_js_1 = require_network();
    var provider_websocket_js_1 = require_provider_websocket();
    function isWebSocketLike(value) {
      return value && typeof value.send === "function" && typeof value.close === "function";
    }
    var Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
    function getDefaultProvider(network, options) {
      if (options == null) {
        options = {};
      }
      const allowService = (name) => {
        if (options[name] === "-") {
          return false;
        }
        if (typeof options.exclusive === "string") {
          return name === options.exclusive;
        }
        if (Array.isArray(options.exclusive)) {
          return options.exclusive.indexOf(name) !== -1;
        }
        return true;
      };
      if (typeof network === "string" && network.match(/^https?:/)) {
        return new provider_jsonrpc_js_1.JsonRpcProvider(network);
      }
      if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
        return new provider_websocket_js_1.WebSocketProvider(network);
      }
      let staticNetwork = null;
      try {
        staticNetwork = network_js_1.Network.from(network);
      } catch (error) {
      }
      const providers = [];
      if (allowService("publicPolygon") && staticNetwork) {
        if (staticNetwork.name === "matic") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
        } else if (staticNetwork.name === "matic-amoy") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
        }
      }
      if (allowService("alchemy")) {
        try {
          providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));
        } catch (error) {
        }
      }
      if (allowService("ankr") && options.ankr != null) {
        try {
          providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));
        } catch (error) {
        }
      }
      if (allowService("chainstack")) {
        try {
          providers.push(new provider_chainstack_js_1.ChainstackProvider(network, options.chainstack));
        } catch (error) {
        }
      }
      if (allowService("cloudflare")) {
        try {
          providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));
        } catch (error) {
        }
      }
      if (allowService("etherscan")) {
        try {
          providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));
        } catch (error) {
        }
      }
      if (allowService("infura")) {
        try {
          let projectId = options.infura;
          let projectSecret = void 0;
          if (typeof projectId === "object") {
            projectSecret = projectId.projectSecret;
            projectId = projectId.projectId;
          }
          providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));
        } catch (error) {
        }
      }
      if (allowService("quicknode")) {
        try {
          let token = options.quicknode;
          providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));
        } catch (error) {
        }
      }
      (0, index_js_1.assert)(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
        operation: "getDefaultProvider"
      });
      if (providers.length === 1) {
        return providers[0];
      }
      let quorum = Math.floor(providers.length / 2);
      if (quorum > 2) {
        quorum = 2;
      }
      if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
        quorum = 1;
      }
      if (options && options.quorum) {
        quorum = options.quorum;
      }
      return new provider_fallback_js_1.FallbackProvider(providers, void 0, { quorum });
    }
    exports2.getDefaultProvider = getDefaultProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js
var require_signer_noncemanager = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NonceManager = void 0;
    var index_js_1 = require_utils();
    var abstract_signer_js_1 = require_abstract_signer();
    var NonceManager = class _NonceManager extends abstract_signer_js_1.AbstractSigner {
      /**
       *  The Signer being managed.
       */
      signer;
      #noncePromise;
      #delta;
      /**
       *  Creates a new **NonceManager** to manage %%signer%%.
       */
      constructor(signer) {
        super(signer.provider);
        (0, index_js_1.defineProperties)(this, { signer });
        this.#noncePromise = null;
        this.#delta = 0;
      }
      async getAddress() {
        return this.signer.getAddress();
      }
      connect(provider) {
        return new _NonceManager(this.signer.connect(provider));
      }
      async getNonce(blockTag) {
        if (blockTag === "pending") {
          if (this.#noncePromise == null) {
            this.#noncePromise = super.getNonce("pending");
          }
          const delta = this.#delta;
          return await this.#noncePromise + delta;
        }
        return super.getNonce(blockTag);
      }
      /**
       *  Manually increment the nonce. This may be useful when managng
       *  offline transactions.
       */
      increment() {
        this.#delta++;
      }
      /**
       *  Resets the nonce, causing the **NonceManager** to reload the current
       *  nonce from the blockchain on the next transaction.
       */
      reset() {
        this.#delta = 0;
        this.#noncePromise = null;
      }
      async sendTransaction(tx) {
        const noncePromise = this.getNonce("pending");
        this.increment();
        tx = await this.signer.populateTransaction(tx);
        tx.nonce = await noncePromise;
        return await this.signer.sendTransaction(tx);
      }
      signTransaction(tx) {
        return this.signer.signTransaction(tx);
      }
      signMessage(message) {
        return this.signer.signMessage(message);
      }
      signTypedData(domain, types, value) {
        return this.signer.signTypedData(domain, types, value);
      }
    };
    exports2.NonceManager = NonceManager;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-browser.js
var require_provider_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BrowserProvider = void 0;
    var index_js_1 = require_utils();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var BrowserProvider = class extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {
      #request;
      /**
       *  Connect to the %%ethereum%% provider, optionally forcing the
       *  %%network%%.
       */
      constructor(ethereum, network, _options) {
        const options = Object.assign({}, _options != null ? _options : {}, { batchMaxCount: 1 });
        (0, index_js_1.assertArgument)(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
        super(network, options);
        this.#request = async (method, params) => {
          const payload = { method, params };
          this.emit("debug", { action: "sendEip1193Request", payload });
          try {
            const result = await ethereum.request(payload);
            this.emit("debug", { action: "receiveEip1193Result", result });
            return result;
          } catch (e) {
            const error = new Error(e.message);
            error.code = e.code;
            error.data = e.data;
            error.payload = payload;
            this.emit("debug", { action: "receiveEip1193Error", error });
            throw error;
          }
        };
      }
      async send(method, params) {
        await this._start();
        return await super.send(method, params);
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
        try {
          const result = await this.#request(payload.method, payload.params || []);
          return [{ id: payload.id, result }];
        } catch (e) {
          return [{
            id: payload.id,
            error: { code: e.code, data: e.data, message: e.message }
          }];
        }
      }
      getRpcError(payload, error) {
        error = JSON.parse(JSON.stringify(error));
        switch (error.error.code || -1) {
          case 4001:
            error.error.message = `ethers-user-denied: ${error.error.message}`;
            break;
          case 4200:
            error.error.message = `ethers-unsupported: ${error.error.message}`;
            break;
        }
        return super.getRpcError(payload, error);
      }
      /**
       *  Resolves to ``true`` if the provider manages the %%address%%.
       */
      async hasSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accounts = await this.send("eth_accounts", []);
        if (typeof address === "number") {
          return accounts.length > address;
        }
        address = address.toLowerCase();
        return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
      }
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        if (!await this.hasSigner(address)) {
          try {
            await this.#request("eth_requestAccounts", []);
          } catch (error) {
            const payload = error.payload;
            throw this.getRpcError(payload, { id: payload.id, error });
          }
        }
        return await super.getSigner(address);
      }
    };
    exports2.BrowserProvider = BrowserProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-pocket.js
var require_provider_pocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-pocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PocketProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.gateway.pokt.network";
        case "goerli":
          return "eth-goerli.gateway.pokt.network";
        case "matic":
          return "poly-mainnet.gateway.pokt.network";
        case "matic-mumbai":
          return "polygon-mumbai-rpc.gateway.pokt.network";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var PocketProvider = class _PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  The Application ID for the Pocket connection.
       */
      applicationId;
      /**
       *  The Application Secret for making authenticated requests
       *  to the Pocket connection.
       */
      applicationSecret;
      /**
       *  Create a new **PocketProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, applicationId, applicationSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        if (applicationSecret == null) {
          applicationSecret = null;
        }
        const options = { staticNetwork: network };
        const request = _PocketProvider.getRequest(network, applicationId, applicationSecret);
        super(request, network, options);
        (0, index_js_1.defineProperties)(this, { applicationId, applicationSecret });
      }
      _getProvider(chainId) {
        try {
          return new _PocketProvider(chainId, this.applicationId, this.applicationSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%applicationId%%.
       */
      static getRequest(network, applicationId, applicationSecret) {
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v1/lb/${applicationId}`);
        request.allowGzip = true;
        if (applicationSecret) {
          request.setCredentials("", applicationSecret);
        }
        if (applicationId === defaultApplicationId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("PocketProvider");
            return true;
          };
        }
        return request;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationId;
      }
    };
    exports2.PocketProvider = PocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.js
var require_provider_ipcsocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IpcSocketProvider = void 0;
    var net_1 = require("net");
    var provider_socket_js_1 = require_provider_socket();
    function splitBuffer(data) {
      const messages = [];
      let lastStart = 0;
      while (true) {
        const nl = data.indexOf(10, lastStart);
        if (nl === -1) {
          break;
        }
        messages.push(data.subarray(lastStart, nl).toString().trim());
        lastStart = nl + 1;
      }
      return { messages, remaining: data.subarray(lastStart) };
    }
    var IpcSocketProvider = class extends provider_socket_js_1.SocketProvider {
      #socket;
      /**
       *  The connected socket.
       */
      get socket() {
        return this.#socket;
      }
      constructor(path, network, options) {
        super(network, options);
        this.#socket = (0, net_1.connect)(path);
        this.socket.on("ready", async () => {
          try {
            await this._start();
          } catch (error) {
            console.log("failed to start IpcSocketProvider", error);
          }
        });
        let response = Buffer.alloc(0);
        this.socket.on("data", (data) => {
          response = Buffer.concat([response, data]);
          const { messages, remaining } = splitBuffer(response);
          messages.forEach((message) => {
            this._processMessage(message);
          });
          response = remaining;
        });
        this.socket.on("end", () => {
          this.emit("close");
          this.socket.destroy();
          this.socket.end();
        });
      }
      destroy() {
        this.socket.destroy();
        this.socket.end();
        super.destroy();
      }
      async _write(message) {
        if (!message.endsWith("\n")) {
          message += "\n";
        }
        this.socket.write(message);
      }
    };
    exports2.IpcSocketProvider = IpcSocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/index.js
var require_providers = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SocketEventSubscriber = exports2.SocketPendingSubscriber = exports2.SocketBlockSubscriber = exports2.SocketSubscriber = exports2.WebSocketProvider = exports2.SocketProvider = exports2.IpcSocketProvider = exports2.QuickNodeProvider = exports2.PocketProvider = exports2.InfuraWebSocketProvider = exports2.InfuraProvider = exports2.EtherscanPlugin = exports2.EtherscanProvider = exports2.ChainstackProvider = exports2.CloudflareProvider = exports2.AnkrProvider = exports2.AlchemyProvider = exports2.BrowserProvider = exports2.JsonRpcSigner = exports2.JsonRpcProvider = exports2.JsonRpcApiProvider = exports2.FallbackProvider = exports2.copyRequest = exports2.TransactionResponse = exports2.TransactionReceipt = exports2.Log = exports2.FeeData = exports2.Block = exports2.FetchUrlFeeDataNetworkPlugin = exports2.FeeDataNetworkPlugin = exports2.EnsPlugin = exports2.GasCostPlugin = exports2.NetworkPlugin = exports2.NonceManager = exports2.Network = exports2.MulticoinProviderPlugin = exports2.EnsResolver = exports2.getDefaultProvider = exports2.showThrottleMessage = exports2.VoidSigner = exports2.AbstractSigner = exports2.UnmanagedSubscriber = exports2.AbstractProvider = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    Object.defineProperty(exports2, "AbstractProvider", { enumerable: true, get: function() {
      return abstract_provider_js_1.AbstractProvider;
    } });
    Object.defineProperty(exports2, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return abstract_provider_js_1.UnmanagedSubscriber;
    } });
    var abstract_signer_js_1 = require_abstract_signer();
    Object.defineProperty(exports2, "AbstractSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.AbstractSigner;
    } });
    Object.defineProperty(exports2, "VoidSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.VoidSigner;
    } });
    var community_js_1 = require_community();
    Object.defineProperty(exports2, "showThrottleMessage", { enumerable: true, get: function() {
      return community_js_1.showThrottleMessage;
    } });
    var default_provider_js_1 = require_default_provider();
    Object.defineProperty(exports2, "getDefaultProvider", { enumerable: true, get: function() {
      return default_provider_js_1.getDefaultProvider;
    } });
    var ens_resolver_js_1 = require_ens_resolver();
    Object.defineProperty(exports2, "EnsResolver", { enumerable: true, get: function() {
      return ens_resolver_js_1.EnsResolver;
    } });
    Object.defineProperty(exports2, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return ens_resolver_js_1.MulticoinProviderPlugin;
    } });
    var network_js_1 = require_network();
    Object.defineProperty(exports2, "Network", { enumerable: true, get: function() {
      return network_js_1.Network;
    } });
    var signer_noncemanager_js_1 = require_signer_noncemanager();
    Object.defineProperty(exports2, "NonceManager", { enumerable: true, get: function() {
      return signer_noncemanager_js_1.NonceManager;
    } });
    var plugins_network_js_1 = require_plugins_network();
    Object.defineProperty(exports2, "NetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.NetworkPlugin;
    } });
    Object.defineProperty(exports2, "GasCostPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.GasCostPlugin;
    } });
    Object.defineProperty(exports2, "EnsPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.EnsPlugin;
    } });
    Object.defineProperty(exports2, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports2, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin;
    } });
    var provider_js_1 = require_provider();
    Object.defineProperty(exports2, "Block", { enumerable: true, get: function() {
      return provider_js_1.Block;
    } });
    Object.defineProperty(exports2, "FeeData", { enumerable: true, get: function() {
      return provider_js_1.FeeData;
    } });
    Object.defineProperty(exports2, "Log", { enumerable: true, get: function() {
      return provider_js_1.Log;
    } });
    Object.defineProperty(exports2, "TransactionReceipt", { enumerable: true, get: function() {
      return provider_js_1.TransactionReceipt;
    } });
    Object.defineProperty(exports2, "TransactionResponse", { enumerable: true, get: function() {
      return provider_js_1.TransactionResponse;
    } });
    Object.defineProperty(exports2, "copyRequest", { enumerable: true, get: function() {
      return provider_js_1.copyRequest;
    } });
    var provider_fallback_js_1 = require_provider_fallback();
    Object.defineProperty(exports2, "FallbackProvider", { enumerable: true, get: function() {
      return provider_fallback_js_1.FallbackProvider;
    } });
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    Object.defineProperty(exports2, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcSigner", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcSigner;
    } });
    var provider_browser_js_1 = require_provider_browser();
    Object.defineProperty(exports2, "BrowserProvider", { enumerable: true, get: function() {
      return provider_browser_js_1.BrowserProvider;
    } });
    var provider_alchemy_js_1 = require_provider_alchemy();
    Object.defineProperty(exports2, "AlchemyProvider", { enumerable: true, get: function() {
      return provider_alchemy_js_1.AlchemyProvider;
    } });
    var provider_ankr_js_1 = require_provider_ankr();
    Object.defineProperty(exports2, "AnkrProvider", { enumerable: true, get: function() {
      return provider_ankr_js_1.AnkrProvider;
    } });
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    Object.defineProperty(exports2, "CloudflareProvider", { enumerable: true, get: function() {
      return provider_cloudflare_js_1.CloudflareProvider;
    } });
    var provider_chainstack_js_1 = require_provider_chainstack();
    Object.defineProperty(exports2, "ChainstackProvider", { enumerable: true, get: function() {
      return provider_chainstack_js_1.ChainstackProvider;
    } });
    var provider_etherscan_js_1 = require_provider_etherscan();
    Object.defineProperty(exports2, "EtherscanProvider", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanProvider;
    } });
    Object.defineProperty(exports2, "EtherscanPlugin", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanPlugin;
    } });
    var provider_infura_js_1 = require_provider_infura();
    Object.defineProperty(exports2, "InfuraProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraProvider;
    } });
    Object.defineProperty(exports2, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraWebSocketProvider;
    } });
    var provider_pocket_js_1 = require_provider_pocket();
    Object.defineProperty(exports2, "PocketProvider", { enumerable: true, get: function() {
      return provider_pocket_js_1.PocketProvider;
    } });
    var provider_quicknode_js_1 = require_provider_quicknode();
    Object.defineProperty(exports2, "QuickNodeProvider", { enumerable: true, get: function() {
      return provider_quicknode_js_1.QuickNodeProvider;
    } });
    var provider_ipcsocket_js_1 = require_provider_ipcsocket();
    Object.defineProperty(exports2, "IpcSocketProvider", { enumerable: true, get: function() {
      return provider_ipcsocket_js_1.IpcSocketProvider;
    } });
    var provider_socket_js_1 = require_provider_socket();
    Object.defineProperty(exports2, "SocketProvider", { enumerable: true, get: function() {
      return provider_socket_js_1.SocketProvider;
    } });
    var provider_websocket_js_1 = require_provider_websocket();
    Object.defineProperty(exports2, "WebSocketProvider", { enumerable: true, get: function() {
      return provider_websocket_js_1.WebSocketProvider;
    } });
    var provider_socket_js_2 = require_provider_socket();
    Object.defineProperty(exports2, "SocketSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketSubscriber;
    } });
    Object.defineProperty(exports2, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports2, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports2, "SocketEventSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketEventSubscriber;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/base-wallet.js
var require_base_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/base-wallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseWallet = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_hash();
    var index_js_3 = require_providers();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils();
    var BaseWallet = class _BaseWallet extends index_js_3.AbstractSigner {
      /**
       *  The wallet address.
       */
      address;
      #signingKey;
      /**
       *  Creates a new BaseWallet for %%privateKey%%, optionally
       *  connected to %%provider%%.
       *
       *  If %%provider%% is not specified, only offline methods can
       *  be used.
       */
      constructor(privateKey, provider) {
        super(provider);
        (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
        this.#signingKey = privateKey;
        const address = (0, index_js_4.computeAddress)(this.signingKey.publicKey);
        (0, index_js_5.defineProperties)(this, { address });
      }
      // Store private values behind getters to reduce visibility
      // in console.log
      /**
       *  The [[SigningKey]] used for signing payloads.
       */
      get signingKey() {
        return this.#signingKey;
      }
      /**
       *  The private key for this wallet.
       */
      get privateKey() {
        return this.signingKey.privateKey;
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _BaseWallet(this.#signingKey, provider);
      }
      async signTransaction(tx) {
        tx = (0, index_js_3.copyRequest)(tx);
        const { to, from } = await (0, index_js_5.resolveProperties)({
          to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : void 0,
          from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : void 0
        });
        if (to != null) {
          tx.to = to;
        }
        if (from != null) {
          tx.from = from;
        }
        if (tx.from != null) {
          (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
          delete tx.from;
        }
        const btx = index_js_4.Transaction.from(tx);
        btx.signature = this.signingKey.sign(btx.unsignedHash);
        return btx.serialized;
      }
      async signMessage(message) {
        return this.signMessageSync(message);
      }
      // @TODO: Add a secialized signTx and signTyped sync that enforces
      // all parameters are known?
      /**
       *  Returns the signature for %%message%% signed with this wallet.
       */
      signMessageSync(message) {
        return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;
      }
      async signTypedData(domain, types, value) {
        const populated = await index_js_2.TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
          (0, index_js_5.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
            operation: "resolveName",
            info: { name }
          });
          const address = await this.provider.resolveName(name);
          (0, index_js_5.assert)(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
            value: name
          });
          return address;
        });
        return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
      }
    };
    exports2.BaseWallet = BaseWallet;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owl.js
var require_decode_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeOwl = exports2.decode = void 0;
    var index_js_1 = require_utils();
    var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
    var Word = /^[a-z]*$/i;
    function unfold(words, sep) {
      let initial = 97;
      return words.reduce((accum, word) => {
        if (word === sep) {
          initial++;
        } else if (word.match(Word)) {
          accum.push(String.fromCharCode(initial) + word);
        } else {
          initial = 97;
          accum.push(word);
        }
        return accum;
      }, []);
    }
    function decode(data, subs) {
      for (let i = subsChrs.length - 1; i >= 0; i--) {
        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
      }
      const clumps = [];
      const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
        if (semi) {
          for (let i = parseInt(semi); i >= 0; i--) {
            clumps.push(";");
          }
        } else {
          clumps.push(item.toLowerCase());
        }
        return "";
      });
      if (leftover) {
        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
      }
      return unfold(unfold(clumps, ";"), ":");
    }
    exports2.decode = decode;
    function decodeOwl(data) {
      (0, index_js_1.assertArgument)(data[0] === "0", "unsupported auwl data", "data", data);
      return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
    }
    exports2.decodeOwl = decodeOwl;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist.js
var require_wordlist = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Wordlist = void 0;
    var index_js_1 = require_utils();
    var Wordlist = class {
      locale;
      /**
       *  Creates a new Wordlist instance.
       *
       *  Sub-classes MUST call this if they provide their own constructor,
       *  passing in the locale string of the language.
       *
       *  Generally there is no need to create instances of a Wordlist,
       *  since each language-specific Wordlist creates an instance and
       *  there is no state kept internally, so they are safe to share.
       */
      constructor(locale) {
        (0, index_js_1.defineProperties)(this, { locale });
      }
      /**
       *  Sub-classes may override this to provide a language-specific
       *  method for spliting %%phrase%% into individual words.
       *
       *  By default, %%phrase%% is split using any sequences of
       *  white-space as defined by regular expressions (i.e. ``/\s+/``).
       */
      split(phrase) {
        return phrase.toLowerCase().split(/\s+/g);
      }
      /**
       *  Sub-classes may override this to provider a language-specific
       *  method for joining %%words%% into a phrase.
       *
       *  By default, %%words%% are joined by a single space.
       */
      join(words) {
        return words.join(" ");
      }
    };
    exports2.Wordlist = Wordlist;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js
var require_wordlist_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WordlistOwl = void 0;
    var index_js_1 = require_hash();
    var index_js_2 = require_utils();
    var decode_owl_js_1 = require_decode_owl();
    var wordlist_js_1 = require_wordlist();
    var WordlistOwl = class extends wordlist_js_1.Wordlist {
      #data;
      #checksum;
      /**
       *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
       *  and validated against the %%checksum%%.
       */
      constructor(locale, data, checksum) {
        super(locale);
        this.#data = data;
        this.#checksum = checksum;
        this.#words = null;
      }
      /**
       *  The OWL-encoded data.
       */
      get _data() {
        return this.#data;
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owl_js_1.decodeOwl)(this.#data);
      }
      #words;
      #loadWords() {
        if (this.#words == null) {
          const words = this._decodeWords();
          const checksum = (0, index_js_1.id)(words.join("\n") + "\n");
          if (checksum !== this.#checksum) {
            throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
          }
          this.#words = words;
        }
        return this.#words;
      }
      getWord(index) {
        const words = this.#loadWords();
        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
        return words[index];
      }
      getWordIndex(word) {
        return this.#loadWords().indexOf(word);
      }
    };
    exports2.WordlistOwl = WordlistOwl;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-en.js
var require_lang_en = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-en.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangEn = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
    var checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
    var wordlist = null;
    var LangEn = class _LangEn extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the English language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langEn]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("en", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangEn``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangEn();
        }
        return wordlist;
      }
    };
    exports2.LangEn = LangEn;
  }
});

// node_modules/ethers/lib.commonjs/wallet/mnemonic.js
var require_mnemonic = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/mnemonic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Mnemonic = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var lang_en_js_1 = require_lang_en();
    function getUpperMask(bits) {
      return (1 << bits) - 1 << 8 - bits & 255;
    }
    function getLowerMask(bits) {
      return (1 << bits) - 1 & 255;
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
      (0, index_js_2.assertNormalize)("NFKD");
      if (wordlist == null) {
        wordlist = lang_en_js_1.LangEn.wordlist();
      }
      const words = wordlist.split(mnemonic);
      (0, index_js_2.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
      const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
      let offset = 0;
      for (let i = 0; i < words.length; i++) {
        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
        (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
        for (let bit = 0; bit < 11; bit++) {
          if (index & 1 << 10 - bit) {
            entropy[offset >> 3] |= 1 << 7 - offset % 8;
          }
          offset++;
        }
      }
      const entropyBits = 32 * words.length / 3;
      const checksumBits = words.length / 3;
      const checksumMask = getUpperMask(checksumBits);
      const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
      (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
      return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
      (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
      if (wordlist == null) {
        wordlist = lang_en_js_1.LangEn.wordlist();
      }
      const indices = [0];
      let remainingBits = 11;
      for (let i = 0; i < entropy.length; i++) {
        if (remainingBits > 8) {
          indices[indices.length - 1] <<= 8;
          indices[indices.length - 1] |= entropy[i];
          remainingBits -= 8;
        } else {
          indices[indices.length - 1] <<= remainingBits;
          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
          indices.push(entropy[i] & getLowerMask(8 - remainingBits));
          remainingBits += 3;
        }
      }
      const checksumBits = entropy.length / 4;
      const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
      indices[indices.length - 1] <<= checksumBits;
      indices[indices.length - 1] |= checksum >> 8 - checksumBits;
      return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    var _guard = {};
    var Mnemonic = class _Mnemonic {
      /**
       *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
       *
       *  Use the [[wordlist]] ``split`` method to get the individual words.
       */
      phrase;
      /**
       *  The password used for this mnemonic. If no password is used this
       *  is the empty string (i.e. ``""``) as per the specification.
       */
      password;
      /**
       *  The wordlist for this mnemonic.
       */
      wordlist;
      /**
       *  The underlying entropy which the mnemonic encodes.
       */
      entropy;
      /**
       *  @private
       */
      constructor(guard, entropy, phrase, password, wordlist) {
        if (password == null) {
          password = "";
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        (0, index_js_2.assertPrivate)(guard, _guard, "Mnemonic");
        (0, index_js_2.defineProperties)(this, { phrase, password, wordlist, entropy });
      }
      /**
       *  Returns the seed for the mnemonic.
       */
      computeSeed() {
        const salt = (0, index_js_2.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
        return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
      }
      /**
       *  Creates a new Mnemonic for the %%phrase%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromPhrase(phrase, password, wordlist) {
        const entropy = mnemonicToEntropy(phrase, wordlist);
        phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist);
        return new _Mnemonic(_guard, entropy, phrase, password, wordlist);
      }
      /**
       *  Create a new **Mnemonic** from the %%entropy%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromEntropy(_entropy, password, wordlist) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        const phrase = entropyToMnemonic(entropy, wordlist);
        return new _Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist);
      }
      /**
       *  Returns the phrase for %%mnemonic%%.
       */
      static entropyToPhrase(_entropy, wordlist) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        return entropyToMnemonic(entropy, wordlist);
      }
      /**
       *  Returns the entropy for %%phrase%%.
       */
      static phraseToEntropy(phrase, wordlist) {
        return mnemonicToEntropy(phrase, wordlist);
      }
      /**
       *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
       *
       *  This checks all the provided words belong to the %%wordlist%%,
       *  that the length is valid and the checksum is correct.
       */
      static isValidMnemonic(phrase, wordlist) {
        try {
          mnemonicToEntropy(phrase, wordlist);
          return true;
        } catch (error) {
        }
        return false;
      }
    };
    exports2.Mnemonic = Mnemonic;
  }
});

// node_modules/aes-js/lib.commonjs/aes.js
var require_aes = __commonJS({
  "node_modules/aes-js/lib.commonjs/aes.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _AES_key;
    var _AES_Kd;
    var _AES_Ke;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AES = void 0;
    var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
    var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
    var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
    var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
    var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
    var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
    var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
    var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
    var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
    var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
    var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
    var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
    var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
    var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
    var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
    var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
    function convertToInt32(bytes) {
      const result = [];
      for (let i = 0; i < bytes.length; i += 4) {
        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
      }
      return result;
    }
    var AES = class _AES {
      get key() {
        return __classPrivateFieldGet2(this, _AES_key, "f").slice();
      }
      constructor(key) {
        _AES_key.set(this, void 0);
        _AES_Kd.set(this, void 0);
        _AES_Ke.set(this, void 0);
        if (!(this instanceof _AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        __classPrivateFieldSet2(this, _AES_key, new Uint8Array(key), "f");
        const rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
        }
        __classPrivateFieldSet2(this, _AES_Ke, [], "f");
        __classPrivateFieldSet2(this, _AES_Kd, [], "f");
        for (let i = 0; i <= rounds; i++) {
          __classPrivateFieldGet2(this, _AES_Ke, "f").push([0, 0, 0, 0]);
          __classPrivateFieldGet2(this, _AES_Kd, "f").push([0, 0, 0, 0]);
        }
        const roundKeyCount = (rounds + 1) * 4;
        const KC = this.key.length / 4;
        const tk = convertToInt32(this.key);
        let index;
        for (let i = 0; i < KC; i++) {
          index = i >> 2;
          __classPrivateFieldGet2(this, _AES_Ke, "f")[index][i % 4] = tk[i];
          __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
        }
        let rconpointer = 0;
        let t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (let i2 = 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          } else {
            for (let i2 = 1; i2 < KC / 2; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          }
          let i = 0, r, c;
          while (i < KC && t < roundKeyCount) {
            r = t >> 2;
            c = t % 4;
            __classPrivateFieldGet2(this, _AES_Ke, "f")[r][c] = tk[i];
            __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
            t++;
          }
        }
        for (let r = 1; r < rounds; r++) {
          for (let c = 0; c < 4; c++) {
            tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c];
            __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      }
      encrypt(plaintext) {
        if (plaintext.length != 16) {
          throw new TypeError("invalid plaintext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet2(this, _AES_Ke, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(plaintext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet2(this, _AES_Ke, "f")[0][i];
        }
        for (let r = 1; r < rounds; r++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Ke, "f")[r][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet2(this, _AES_Ke, "f")[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
      decrypt(ciphertext) {
        if (ciphertext.length != 16) {
          throw new TypeError("invalid ciphertext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet2(this, _AES_Kd, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(ciphertext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet2(this, _AES_Kd, "f")[0][i];
        }
        for (let r = 1; r < rounds; r++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Kd, "f")[r][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
    };
    exports2.AES = AES;
    _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode.js
var require_mode = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModeOfOperation = void 0;
    var aes_js_1 = require_aes();
    var ModeOfOperation = class {
      constructor(name, key, cls) {
        if (cls && !(this instanceof cls)) {
          throw new Error(`${name} must be instantiated with "new"`);
        }
        Object.defineProperties(this, {
          aes: { enumerable: true, value: new aes_js_1.AES(key) },
          name: { enumerable: true, value: name }
        });
      }
    };
    exports2.ModeOfOperation = ModeOfOperation;
  }
});

// node_modules/aes-js/lib.commonjs/mode-cbc.js
var require_mode_cbc = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cbc.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CBC_iv;
    var _CBC_lastBlock;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CBC = void 0;
    var mode_js_1 = require_mode();
    var CBC = class _CBC extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("ECC", key, _CBC);
        _CBC_iv.set(this, void 0);
        _CBC_lastBlock.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          for (let j = 0; j < 16; j++) {
            __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
          }
          __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
          ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(ciphertext.length);
        for (let i = 0; i < ciphertext.length; i += 16) {
          const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
          for (let j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j];
            __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
          }
        }
        return plaintext;
      }
    };
    exports2.CBC = CBC;
    _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cfb.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CFB_instances;
    var _CFB_iv;
    var _CFB_shiftRegister;
    var _CFB_shift;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CFB = void 0;
    var mode_js_1 = require_mode();
    var CFB = class _CFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv, segmentSize = 8) {
        super("CFB", key, _CFB);
        _CFB_instances.add(this);
        _CFB_iv.set(this, void 0);
        _CFB_shiftRegister.set(this, void 0);
        if (!Number.isInteger(segmentSize) || segmentSize % 8) {
          throw new TypeError("invalid segmentSize");
        }
        Object.defineProperties(this, {
          segmentSize: { enumerable: true, value: segmentSize }
        });
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CFB_shiftRegister, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CFB_iv, "f"));
      }
      encrypt(plaintext) {
        if (8 * plaintext.length % this.segmentSize) {
          throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
          for (let j = 0; j < segmentSize; j++) {
            ciphertext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (8 * ciphertext.length % this.segmentSize) {
          throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const plaintext = new Uint8Array(ciphertext);
        for (let i = 0; i < plaintext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
          for (let j = 0; j < segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return plaintext;
      }
    };
    exports2.CFB = CFB;
    _CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
      const segmentSize = this.segmentSize / 8;
      __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f").subarray(segmentSize));
      __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
    };
  }
});

// node_modules/aes-js/lib.commonjs/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ctr.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CTR_remaining;
    var _CTR_remainingIndex;
    var _CTR_counter;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CTR = void 0;
    var mode_js_1 = require_mode();
    var CTR = class _CTR extends mode_js_1.ModeOfOperation {
      constructor(key, initialValue) {
        super("CTR", key, _CTR);
        _CTR_remaining.set(this, void 0);
        _CTR_remainingIndex.set(this, void 0);
        _CTR_counter.set(this, void 0);
        __classPrivateFieldSet2(this, _CTR_counter, new Uint8Array(16), "f");
        __classPrivateFieldGet2(this, _CTR_counter, "f").fill(0);
        __classPrivateFieldSet2(this, _CTR_remaining, __classPrivateFieldGet2(this, _CTR_counter, "f"), "f");
        __classPrivateFieldSet2(this, _CTR_remainingIndex, 16, "f");
        if (initialValue == null) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this.setCounterValue(initialValue);
        } else {
          this.setCounterBytes(initialValue);
        }
      }
      get counter() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CTR_counter, "f"));
      }
      setCounterValue(value) {
        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
          throw new TypeError("invalid counter initial integer value");
        }
        for (let index = 15; index >= 0; --index) {
          __classPrivateFieldGet2(this, _CTR_counter, "f")[index] = value % 256;
          value = Math.floor(value / 256);
        }
      }
      setCounterBytes(value) {
        if (value.length !== 16) {
          throw new TypeError("invalid counter initial Uint8Array value length");
        }
        __classPrivateFieldGet2(this, _CTR_counter, "f").set(value);
      }
      increment() {
        for (let i = 15; i >= 0; i--) {
          if (__classPrivateFieldGet2(this, _CTR_counter, "f")[i] === 255) {
            __classPrivateFieldGet2(this, _CTR_counter, "f")[i] = 0;
          } else {
            __classPrivateFieldGet2(this, _CTR_counter, "f")[i]++;
            break;
          }
        }
      }
      encrypt(plaintext) {
        var _a, _b;
        const crypttext = new Uint8Array(plaintext);
        for (let i = 0; i < crypttext.length; i++) {
          if (__classPrivateFieldGet2(this, _CTR_remainingIndex, "f") === 16) {
            __classPrivateFieldSet2(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet2(this, _CTR_counter, "f")), "f");
            __classPrivateFieldSet2(this, _CTR_remainingIndex, 0, "f");
            this.increment();
          }
          crypttext[i] ^= __classPrivateFieldGet2(this, _CTR_remaining, "f")[__classPrivateFieldSet2(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet2(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return crypttext;
      }
      decrypt(ciphertext) {
        return this.encrypt(ciphertext);
      }
    };
    exports2.CTR = CTR;
    _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ecb.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ECB = void 0;
    var mode_js_1 = require_mode();
    var ECB = class _ECB extends mode_js_1.ModeOfOperation {
      constructor(key) {
        super("ECB", key, _ECB);
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const crypttext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
        }
        return crypttext;
      }
      decrypt(crypttext) {
        if (crypttext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(crypttext.length);
        for (let i = 0; i < crypttext.length; i += 16) {
          plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
        }
        return plaintext;
      }
    };
    exports2.ECB = ECB;
  }
});

// node_modules/aes-js/lib.commonjs/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ofb.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OFB_iv;
    var _OFB_lastPrecipher;
    var _OFB_lastPrecipherIndex;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OFB = void 0;
    var mode_js_1 = require_mode();
    var OFB = class _OFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("OFB", key, _OFB);
        _OFB_iv.set(this, void 0);
        _OFB_lastPrecipher.set(this, void 0);
        _OFB_lastPrecipherIndex.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.iv, "f");
        __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 16, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _OFB_iv, "f"));
      }
      encrypt(plaintext) {
        var _a, _b;
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i++) {
          if (__classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f") === 16) {
            __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")), "f");
            __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 0, "f");
          }
          ciphertext[i] ^= __classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")[__classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        return this.encrypt(ciphertext);
      }
    };
    exports2.OFB = OFB;
    _OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/padding.js
var require_padding = __commonJS({
  "node_modules/aes-js/lib.commonjs/padding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pkcs7Strip = exports2.pkcs7Pad = void 0;
    function pkcs7Pad(data) {
      const padder = 16 - data.length % 16;
      const result = new Uint8Array(data.length + padder);
      result.set(data);
      for (let i = data.length; i < result.length; i++) {
        result[i] = padder;
      }
      return result;
    }
    exports2.pkcs7Pad = pkcs7Pad;
    function pkcs7Strip(data) {
      if (data.length < 16) {
        throw new TypeError("PKCS#7 invalid length");
      }
      const padder = data[data.length - 1];
      if (padder > 16) {
        throw new TypeError("PKCS#7 padding byte out of range");
      }
      const length = data.length - padder;
      for (let i = 0; i < padder; i++) {
        if (data[length + i] !== padder) {
          throw new TypeError("PKCS#7 invalid padding byte");
        }
      }
      return new Uint8Array(data.subarray(0, length));
    }
    exports2.pkcs7Strip = pkcs7Strip;
  }
});

// node_modules/aes-js/lib.commonjs/index.js
var require_lib = __commonJS({
  "node_modules/aes-js/lib.commonjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pkcs7Strip = exports2.pkcs7Pad = exports2.OFB = exports2.ECB = exports2.CTR = exports2.CFB = exports2.CBC = exports2.ModeOfOperation = exports2.AES = void 0;
    var aes_js_1 = require_aes();
    Object.defineProperty(exports2, "AES", { enumerable: true, get: function() {
      return aes_js_1.AES;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports2, "ModeOfOperation", { enumerable: true, get: function() {
      return mode_js_1.ModeOfOperation;
    } });
    var mode_cbc_js_1 = require_mode_cbc();
    Object.defineProperty(exports2, "CBC", { enumerable: true, get: function() {
      return mode_cbc_js_1.CBC;
    } });
    var mode_cfb_js_1 = require_mode_cfb();
    Object.defineProperty(exports2, "CFB", { enumerable: true, get: function() {
      return mode_cfb_js_1.CFB;
    } });
    var mode_ctr_js_1 = require_mode_ctr();
    Object.defineProperty(exports2, "CTR", { enumerable: true, get: function() {
      return mode_ctr_js_1.CTR;
    } });
    var mode_ecb_js_1 = require_mode_ecb();
    Object.defineProperty(exports2, "ECB", { enumerable: true, get: function() {
      return mode_ecb_js_1.ECB;
    } });
    var mode_ofb_js_1 = require_mode_ofb();
    Object.defineProperty(exports2, "OFB", { enumerable: true, get: function() {
      return mode_ofb_js_1.OFB;
    } });
    var padding_js_1 = require_padding();
    Object.defineProperty(exports2, "pkcs7Pad", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Pad;
    } });
    Object.defineProperty(exports2, "pkcs7Strip", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Strip;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/utils.js
var require_utils4 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.spelunk = exports2.getPassword = exports2.zpad = exports2.looseArrayify = void 0;
    var index_js_1 = require_utils();
    function looseArrayify(hexString) {
      if (typeof hexString === "string" && !hexString.startsWith("0x")) {
        hexString = "0x" + hexString;
      }
      return (0, index_js_1.getBytesCopy)(hexString);
    }
    exports2.looseArrayify = looseArrayify;
    function zpad(value, length) {
      value = String(value);
      while (value.length < length) {
        value = "0" + value;
      }
      return value;
    }
    exports2.zpad = zpad;
    function getPassword(password) {
      if (typeof password === "string") {
        return (0, index_js_1.toUtf8Bytes)(password, "NFKC");
      }
      return (0, index_js_1.getBytesCopy)(password);
    }
    exports2.getPassword = getPassword;
    function spelunk(object, _path) {
      const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
      (0, index_js_1.assertArgument)(match != null, "invalid path", "path", _path);
      const path = match[1];
      const type = match[3];
      const reqd = match[4] === "!";
      let cur = object;
      for (const comp of path.toLowerCase().split(".")) {
        if (Array.isArray(cur)) {
          if (!comp.match(/^[0-9]+$/)) {
            break;
          }
          cur = cur[parseInt(comp)];
        } else if (typeof cur === "object") {
          let found = null;
          for (const key in cur) {
            if (key.toLowerCase() === comp) {
              found = cur[key];
              break;
            }
          }
          cur = found;
        } else {
          cur = null;
        }
        if (cur == null) {
          break;
        }
      }
      (0, index_js_1.assertArgument)(!reqd || cur != null, "missing required value", "path", path);
      if (type && cur != null) {
        if (type === "int") {
          if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
            return parseInt(cur);
          } else if (Number.isSafeInteger(cur)) {
            return cur;
          }
        }
        if (type === "number") {
          if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
            return parseFloat(cur);
          }
        }
        if (type === "data") {
          if (typeof cur === "string") {
            return looseArrayify(cur);
          }
        }
        if (type === "array" && Array.isArray(cur)) {
          return cur;
        }
        if (type === typeof cur) {
          return cur;
        }
        (0, index_js_1.assertArgument)(false, `wrong type found for ${type} `, "path", path);
      }
      return cur;
    }
    exports2.spelunk = spelunk;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-keystore.js
var require_json_keystore = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-keystore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encryptKeystoreJson = exports2.encryptKeystoreJsonSync = exports2.decryptKeystoreJson = exports2.decryptKeystoreJsonSync = exports2.isKeystoreJson = void 0;
    var aes_js_1 = require_lib();
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var utils_js_1 = require_utils4();
    var _version_js_1 = require_version();
    var defaultPath = "m/44'/60'/0'/0/0";
    function isKeystoreJson(json) {
      try {
        const data = JSON.parse(json);
        const version = data.version != null ? parseInt(data.version) : 0;
        if (version === 3) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports2.isKeystoreJson = isKeystoreJson;
    function decrypt(data, key, ciphertext) {
      const cipher = (0, utils_js_1.spelunk)(data, "crypto.cipher:string");
      if (cipher === "aes-128-ctr") {
        const iv = (0, utils_js_1.spelunk)(data, "crypto.cipherparams.iv:data!");
        const aesCtr = new aes_js_1.CTR(key, iv);
        return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));
      }
      (0, index_js_4.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
        operation: "decrypt"
      });
    }
    function getAccount(data, _key) {
      const key = (0, index_js_4.getBytes)(_key);
      const ciphertext = (0, utils_js_1.spelunk)(data, "crypto.ciphertext:data!");
      const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);
      (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
      const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
      const address = (0, index_js_3.computeAddress)(privateKey);
      if (data.address) {
        let check = data.address.toLowerCase();
        if (!check.startsWith("0x")) {
          check = "0x" + check;
        }
        (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, "keystore address/privateKey mismatch", "address", data.address);
      }
      const account = { address, privateKey };
      const version = (0, utils_js_1.spelunk)(data, "x-ethers.version:string");
      if (version === "0.1") {
        const mnemonicKey = key.slice(32, 64);
        const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCiphertext:data!");
        const mnemonicIv = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCounter:data!");
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        account.mnemonic = {
          path: (0, utils_js_1.spelunk)(data, "x-ethers.path:string") || defaultPath,
          locale: (0, utils_js_1.spelunk)(data, "x-ethers.locale:string") || "en",
          entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
        };
      }
      return account;
    }
    function getDecryptKdfParams(data) {
      const kdf = (0, utils_js_1.spelunk)(data, "crypto.kdf:string");
      if (kdf && typeof kdf === "string") {
        if (kdf.toLowerCase() === "scrypt") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const N = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.n:int!");
          const r = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.r:int!");
          const p = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.p:int!");
          (0, index_js_4.assertArgument)(N > 0 && (N & N - 1) === 0, "invalid kdf.N", "kdf.N", N);
          (0, index_js_4.assertArgument)(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
          return { name: "scrypt", salt, N, r, p, dkLen: 64 };
        } else if (kdf.toLowerCase() === "pbkdf2") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const prf = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.prf:string!");
          const algorithm = prf.split("-").pop();
          (0, index_js_4.assertArgument)(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
          const count = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.c:int!");
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
          return { name: "pbkdf2", salt, count, dkLen, algorithm };
        }
      }
      (0, index_js_4.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
    }
    function decryptKeystoreJsonSync(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N, r, p, dkLen } = params;
      const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);
      return getAccount(data, key);
    }
    exports2.decryptKeystoreJsonSync = decryptKeystoreJsonSync;
    function stall(duration) {
      return new Promise((resolve2) => {
        setTimeout(() => {
          resolve2();
        }, duration);
      });
    }
    async function decryptKeystoreJson(json, _password, progress) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        if (progress) {
          progress(0);
          await stall(0);
        }
        const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
        if (progress) {
          progress(1);
          await stall(0);
        }
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N, r, p, dkLen } = params;
      const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);
      return getAccount(data, key);
    }
    exports2.decryptKeystoreJson = decryptKeystoreJson;
    function getEncryptKdfParams(options) {
      const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, "options.salt") : (0, index_js_2.randomBytes)(32);
      let N = 1 << 17, r = 8, p = 1;
      if (options.scrypt) {
        if (options.scrypt.N) {
          N = options.scrypt.N;
        }
        if (options.scrypt.r) {
          r = options.scrypt.r;
        }
        if (options.scrypt.p) {
          p = options.scrypt.p;
        }
      }
      (0, index_js_4.assertArgument)(typeof N === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
      (0, index_js_4.assertArgument)(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
      (0, index_js_4.assertArgument)(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
      return { name: "scrypt", dkLen: 32, salt, N, r, p };
    }
    function _encryptKeystore(key, kdf, account, options) {
      const privateKey = (0, index_js_4.getBytes)(account.privateKey, "privateKey");
      const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, "options.iv") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
      const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, "options.uuid") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
      const derivedKey = key.slice(0, 16);
      const macPrefix = key.slice(16, 32);
      const aesCtr = new aes_js_1.CTR(derivedKey, iv);
      const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));
      const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));
      const data = {
        address: account.address.substring(2).toLowerCase(),
        id: (0, index_js_4.uuidV4)(uuidRandom),
        version: 3,
        Crypto: {
          cipher: "aes-128-ctr",
          cipherparams: {
            iv: (0, index_js_4.hexlify)(iv).substring(2)
          },
          ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),
          kdf: "scrypt",
          kdfparams: {
            salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),
            n: kdf.N,
            dklen: 32,
            p: kdf.p,
            r: kdf.r
          },
          mac: mac.substring(2)
        }
      };
      if (account.mnemonic) {
        const client = options.client != null ? options.client : `ethers/${_version_js_1.version}`;
        const path = account.mnemonic.path || defaultPath;
        const locale = account.mnemonic.locale || "en";
        const mnemonicKey = key.slice(32, 64);
        const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
        const mnemonicIv = (0, index_js_2.randomBytes)(16);
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));
        const now = /* @__PURE__ */ new Date();
        const timestamp = now.getUTCFullYear() + "-" + (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, utils_js_1.zpad)(now.getUTCDate(), 2) + "T" + (0, utils_js_1.zpad)(now.getUTCHours(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + ".0Z";
        const gethFilename = "UTC--" + timestamp + "--" + data.address;
        data["x-ethers"] = {
          client,
          gethFilename,
          path,
          locale,
          mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),
          mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),
          version: "0.1"
        };
      }
      return JSON.stringify(data);
    }
    function encryptKeystoreJsonSync(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports2.encryptKeystoreJsonSync = encryptKeystoreJsonSync;
    async function encryptKeystoreJson(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports2.encryptKeystoreJson = encryptKeystoreJson;
  }
});

// node_modules/ethers/lib.commonjs/wallet/hdwallet.js
var require_hdwallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/hdwallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getIndexedAccountPath = exports2.getAccountPath = exports2.HDNodeVoidWallet = exports2.HDNodeWallet = exports2.defaultPath = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_providers();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var lang_en_js_1 = require_lang_en();
    var base_wallet_js_1 = require_base_wallet();
    var mnemonic_js_1 = require_mnemonic();
    var json_keystore_js_1 = require_json_keystore();
    exports2.defaultPath = "m/44'/60'/0'/0/0";
    var MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
    var HardenedBit = 2147483648;
    var N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var Nibbles = "0123456789abcdef";
    function zpad(value, length) {
      let result = "";
      while (value) {
        result = Nibbles[value % 16] + result;
        value = Math.trunc(value / 16);
      }
      while (result.length < length * 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function encodeBase58Check(_value) {
      const value = (0, index_js_4.getBytes)(_value);
      const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);
      const bytes = (0, index_js_4.concat)([value, check]);
      return (0, index_js_4.encodeBase58)(bytes);
    }
    var _guard = {};
    function ser_I(index, chainCode, publicKey, privateKey) {
      const data = new Uint8Array(37);
      if (index & HardenedBit) {
        (0, index_js_4.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
          operation: "deriveChild"
        });
        data.set((0, index_js_4.getBytes)(privateKey), 1);
      } else {
        data.set((0, index_js_4.getBytes)(publicKey));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data[33 + (i >> 3)] = index >> 24 - i & 255;
      }
      const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", chainCode, data));
      return { IL: I.slice(0, 32), IR: I.slice(32) };
    }
    function derivePath(node, path) {
      const components = path.split("/");
      (0, index_js_4.assertArgument)(components.length > 0, "invalid path", "path", path);
      if (components[0] === "m") {
        (0, index_js_4.assertArgument)(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
        components.shift();
      }
      let result = node;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index = parseInt(component.substring(0, component.length - 1));
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          const index = parseInt(component);
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(index);
        } else {
          (0, index_js_4.assertArgument)(false, "invalid path component", `path[${i}]`, component);
        }
      }
      return result;
    }
    var HDNodeWallet = class _HDNodeWallet extends base_wallet_js_1.BaseWallet {
      /**
       *  The compressed public key.
       */
      publicKey;
      /**
       *  The fingerprint.
       *
       *  A fingerprint allows quick qay to detect parent and child nodes,
       *  but developers should be prepared to deal with collisions as it
       *  is only 4 bytes.
       */
      fingerprint;
      /**
       *  The parent fingerprint.
       */
      parentFingerprint;
      /**
       *  The mnemonic used to create this HD Node, if available.
       *
       *  Sources such as extended keys do not encode the mnemonic, in
       *  which case this will be ``null``.
       */
      mnemonic;
      /**
       *  The chaincode, which is effectively a public key used
       *  to derive children.
       */
      chainCode;
      /**
       *  The derivation path of this wallet.
       *
       *  Since extended keys do not provide full path details, this
       *  may be ``null``, if instantiated from a source that does not
       *  encode it.
       */
      path;
      /**
       *  The child index of this wallet. Values over ``2 *\* 31`` indicate
       *  the node is hardened.
       */
      index;
      /**
       *  The depth of this wallet, which is the number of components
       *  in its path.
       */
      depth;
      /**
       *  @private
       */
      constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
        super(signingKey, provider);
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeWallet");
        (0, index_js_4.defineProperties)(this, { publicKey: signingKey.compressedPublicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          parentFingerprint,
          fingerprint,
          chainCode,
          path,
          index,
          depth
        });
        (0, index_js_4.defineProperties)(this, { mnemonic });
      }
      connect(provider) {
        return new _HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
      }
      #account() {
        const account = { address: this.address, privateKey: this.privateKey };
        const m = this.mnemonic;
        if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
          account.mnemonic = {
            path: this.path,
            locale: "en",
            entropy: m.entropy
          };
        }
        return account;
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        return await (0, json_keystore_js_1.encryptKeystoreJson)(this.#account(), password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(this.#account(), password);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpriv`` and can be used to
       *  reconstruct this HD Node to derive its children.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488ADE4",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          (0, index_js_4.concat)(["0x00", this.privateKey])
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Returns a neutered HD Node, which removes the private details
       *  of an HD Node.
       *
       *  A neutered node has no private key, but can be used to derive
       *  child addresses and other public data about the HD Node.
       */
      neuter() {
        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));
        return new _HDNodeWallet(_guard, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
      }
      /**
       *  Return the HDNode for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
      static #fromSeed(_seed, mnemonic) {
        (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
        const seed = (0, index_js_4.getBytes)(_seed, "seed");
        (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
        const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", MasterSecret, seed));
        const signingKey = new index_js_1.SigningKey((0, index_js_4.hexlify)(I.slice(0, 32)));
        return new _HDNodeWallet(_guard, signingKey, "0x00000000", (0, index_js_4.hexlify)(I.slice(32)), "m", 0, 0, mnemonic, null);
      }
      /**
       *  Creates a new HD Node from %%extendedKey%%.
       *
       *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
       *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
       *  or full HD Node ([[HDNodeWallet) respectively.
       */
      static fromExtendedKey(extendedKey) {
        const bytes = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey));
        (0, index_js_4.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
        const depth = bytes[4];
        const parentFingerprint = (0, index_js_4.hexlify)(bytes.slice(5, 9));
        const index = parseInt((0, index_js_4.hexlify)(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = (0, index_js_4.hexlify)(bytes.slice(13, 45));
        const key = bytes.slice(45, 78);
        switch ((0, index_js_4.hexlify)(bytes.slice(0, 4))) {
          case "0x0488b21e":
          case "0x043587cf": {
            const publicKey = (0, index_js_4.hexlify)(key);
            return new HDNodeVoidWallet(_guard, (0, index_js_3.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
          }
          case "0x0488ade4":
          case "0x04358394 ":
            if (key[0] !== 0) {
              break;
            }
            return new _HDNodeWallet(_guard, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
        }
        (0, index_js_4.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
      }
      /**
       *  Creates a new random HDNode.
       */
      static createRandom(password, path, wordlist) {
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports2.defaultPath;
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist);
        return _HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Create an HD Node from %%mnemonic%%.
       */
      static fromMnemonic(mnemonic, path) {
        if (!path) {
          path = exports2.defaultPath;
        }
        return _HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a mnemonic %%phrase%%.
       */
      static fromPhrase(phrase, password, path, wordlist) {
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports2.defaultPath;
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist);
        return _HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a %%seed%%.
       */
      static fromSeed(seed) {
        return _HDNodeWallet.#fromSeed(seed, null);
      }
    };
    exports2.HDNodeWallet = HDNodeWallet;
    var HDNodeVoidWallet = class _HDNodeVoidWallet extends index_js_2.VoidSigner {
      /**
       *  The compressed public key.
       */
      publicKey;
      /**
       *  The fingerprint.
       *
       *  A fingerprint allows quick qay to detect parent and child nodes,
       *  but developers should be prepared to deal with collisions as it
       *  is only 4 bytes.
       */
      fingerprint;
      /**
       *  The parent node fingerprint.
       */
      parentFingerprint;
      /**
       *  The chaincode, which is effectively a public key used
       *  to derive children.
       */
      chainCode;
      /**
       *  The derivation path of this wallet.
       *
       *  Since extended keys do not provider full path details, this
       *  may be ``null``, if instantiated from a source that does not
       *  enocde it.
       */
      path;
      /**
       *  The child index of this wallet. Values over ``2 *\* 31`` indicate
       *  the node is hardened.
       */
      index;
      /**
       *  The depth of this wallet, which is the number of components
       *  in its path.
       */
      depth;
      /**
       *  @private
       */
      constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
        super(address, provider);
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeVoidWallet");
        (0, index_js_4.defineProperties)(this, { publicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          publicKey,
          fingerprint,
          parentFingerprint,
          chainCode,
          path,
          index,
          depth
        });
      }
      connect(provider) {
        return new _HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpub`` and can be used to
       *  reconstruct this neutered key to derive its children addresses.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488B21E",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          this.publicKey
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);
        const address = (0, index_js_3.computeAddress)(Ki);
        return new _HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.provider);
      }
      /**
       *  Return the signer for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
    };
    exports2.HDNodeVoidWallet = HDNodeVoidWallet;
    function getAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/${index}'/0/0`;
    }
    exports2.getAccountPath = getAccountPath;
    function getIndexedAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/0'/0/${index}`;
    }
    exports2.getIndexedAccountPath = getIndexedAccountPath;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js
var require_json_crowdsale = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decryptCrowdsaleJson = exports2.isCrowdsaleJson = void 0;
    var aes_js_1 = require_lib();
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_hash();
    var index_js_4 = require_utils();
    var utils_js_1 = require_utils4();
    function isCrowdsaleJson(json) {
      try {
        const data = JSON.parse(json);
        if (data.encseed) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports2.isCrowdsaleJson = isCrowdsaleJson;
    function decryptCrowdsaleJson(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, "ethaddr:string!"));
      const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, "encseed:string!"));
      (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
      const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2e3, 32, "sha256")).slice(0, 16);
      const iv = encseed.slice(0, 16);
      const encryptedSeed = encseed.slice(16);
      const aesCbc = new aes_js_1.CBC(key, iv);
      const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));
      let seedHex = "";
      for (let i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
      }
      return { address, privateKey: (0, index_js_3.id)(seedHex) };
    }
    exports2.decryptCrowdsaleJson = decryptCrowdsaleJson;
  }
});

// node_modules/ethers/lib.commonjs/wallet/wallet.js
var require_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/wallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Wallet = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var base_wallet_js_1 = require_base_wallet();
    var hdwallet_js_1 = require_hdwallet();
    var json_crowdsale_js_1 = require_json_crowdsale();
    var json_keystore_js_1 = require_json_keystore();
    var mnemonic_js_1 = require_mnemonic();
    function stall(duration) {
      return new Promise((resolve2) => {
        setTimeout(() => {
          resolve2();
        }, duration);
      });
    }
    var Wallet = class _Wallet extends base_wallet_js_1.BaseWallet {
      /**
       *  Create a new wallet for the private %%key%%, optionally connected
       *  to %%provider%%.
       */
      constructor(key, provider) {
        if (typeof key === "string" && !key.startsWith("0x")) {
          key = "0x" + key;
        }
        let signingKey = typeof key === "string" ? new index_js_1.SigningKey(key) : key;
        super(signingKey, provider);
      }
      connect(provider) {
        return new _Wallet(this.signingKey, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        const account = { address: this.address, privateKey: this.privateKey };
        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        const account = { address: this.address, privateKey: this.privateKey };
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
      }
      static #fromAccount(account) {
        (0, index_js_2.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
        if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
          const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);
          const wallet2 = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
          if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
            return wallet2;
          }
          console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
        }
        const wallet = new _Wallet(account.privateKey);
        (0, index_js_2.assertArgument)(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
        return wallet;
      }
      /**
       *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
       *  with %%password%%.
       *
       *  If %%progress%% is provided, it is called periodically during
       *  decryption so that any UI can be updated.
       */
      static async fromEncryptedJson(json, password, progress) {
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          if (progress) {
            progress(0);
            await stall(0);
          }
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
          if (progress) {
            progress(1);
            await stall(0);
          }
        }
        return _Wallet.#fromAccount(account);
      }
      /**
       *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
       *
       *  The [[fromEncryptedJson]] method is preferred, as this method
       *  will lock up and freeze the UI during decryption, which may take
       *  some time.
       */
      static fromEncryptedJsonSync(json, password) {
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
        } else {
          (0, index_js_2.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
        }
        return _Wallet.#fromAccount(account);
      }
      /**
       *  Creates a new random [[HDNodeWallet]] using the available
       *  [cryptographic random source](randomBytes).
       *
       *  If there is no crytographic random source, this will throw.
       */
      static createRandom(provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.createRandom();
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
      /**
       *  Creates a [[HDNodeWallet]] for %%phrase%%.
       */
      static fromPhrase(phrase, provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
    };
    exports2.Wallet = Wallet;
  }
});

// node_modules/ethers/lib.commonjs/wallet/index.js
var require_wallet2 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Wallet = exports2.Mnemonic = exports2.encryptKeystoreJsonSync = exports2.encryptKeystoreJson = exports2.decryptKeystoreJson = exports2.decryptKeystoreJsonSync = exports2.isKeystoreJson = exports2.decryptCrowdsaleJson = exports2.isCrowdsaleJson = exports2.HDNodeVoidWallet = exports2.HDNodeWallet = exports2.getIndexedAccountPath = exports2.getAccountPath = exports2.defaultPath = exports2.BaseWallet = void 0;
    var base_wallet_js_1 = require_base_wallet();
    Object.defineProperty(exports2, "BaseWallet", { enumerable: true, get: function() {
      return base_wallet_js_1.BaseWallet;
    } });
    var hdwallet_js_1 = require_hdwallet();
    Object.defineProperty(exports2, "defaultPath", { enumerable: true, get: function() {
      return hdwallet_js_1.defaultPath;
    } });
    Object.defineProperty(exports2, "getAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getAccountPath;
    } });
    Object.defineProperty(exports2, "getIndexedAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getIndexedAccountPath;
    } });
    Object.defineProperty(exports2, "HDNodeWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeWallet;
    } });
    Object.defineProperty(exports2, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeVoidWallet;
    } });
    var json_crowdsale_js_1 = require_json_crowdsale();
    Object.defineProperty(exports2, "isCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.isCrowdsaleJson;
    } });
    Object.defineProperty(exports2, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.decryptCrowdsaleJson;
    } });
    var json_keystore_js_1 = require_json_keystore();
    Object.defineProperty(exports2, "isKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.isKeystoreJson;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJsonSync;
    } });
    var mnemonic_js_1 = require_mnemonic();
    Object.defineProperty(exports2, "Mnemonic", { enumerable: true, get: function() {
      return mnemonic_js_1.Mnemonic;
    } });
    var wallet_js_1 = require_wallet();
    Object.defineProperty(exports2, "Wallet", { enumerable: true, get: function() {
      return wallet_js_1.Wallet;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wordlists/bit-reader.js
var require_bit_reader = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/bit-reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeBits = void 0;
    var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
    function decodeBits(width, data) {
      const maxValue = (1 << width) - 1;
      const result = [];
      let accum = 0, bits = 0, flood = 0;
      for (let i = 0; i < data.length; i++) {
        accum = accum << 6 | Base64.indexOf(data[i]);
        bits += 6;
        while (bits >= width) {
          const value = accum >> bits - width;
          accum &= (1 << bits - width) - 1;
          bits -= width;
          if (value === 0) {
            flood += maxValue;
          } else {
            result.push(value + flood);
            flood = 0;
          }
        }
      }
      return result;
    }
    exports2.decodeBits = decodeBits;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owla.js
var require_decode_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owla.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeOwlA = void 0;
    var index_js_1 = require_utils();
    var bit_reader_js_1 = require_bit_reader();
    var decode_owl_js_1 = require_decode_owl();
    function decodeOwlA(data, accents) {
      let words = (0, decode_owl_js_1.decodeOwl)(data).join(",");
      accents.split(/,/g).forEach((accent) => {
        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
        (0, index_js_1.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
        let posOffset = 0;
        const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);
        const charCode = parseInt(match[2]);
        const regex = new RegExp(`([${match[1]}])`, "g");
        words = words.replace(regex, (all, letter) => {
          const rem = --positions[posOffset];
          if (rem === 0) {
            letter = String.fromCharCode(letter.charCodeAt(0), charCode);
            posOffset++;
          }
          return letter;
        });
      });
      return words.split(",");
    }
    exports2.decodeOwlA = decodeOwlA;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js
var require_wordlist_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WordlistOwlA = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var decode_owla_js_1 = require_decode_owla();
    var WordlistOwlA = class extends wordlist_owl_js_1.WordlistOwl {
      #accent;
      /**
       *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
       *  and %%accent%% data and validated against the %%checksum%%.
       */
      constructor(locale, data, accent, checksum) {
        super(locale, data, checksum);
        this.#accent = accent;
      }
      /**
       *  The OWLA-encoded accent data.
       */
      get _accent() {
        return this.#accent;
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);
      }
    };
    exports2.WordlistOwlA = WordlistOwlA;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-cz.js
var require_lang_cz = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-cz.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangCz = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words = "0itatkastcenaovo$taouleraeki&chor*teci%enbalodaeladet'!Chn=0Di#%E%^1Resa2Rese3CeT'#0EjKohol0Pu)%0A&sDul#Ekdo)Ke)Ti#Ul|3}aOgan%0FaltI$@tPi,%TmaTronom0LasL{i#Ol0Tobus4Yl:B#}<CilCul#D!_Ge)GrHnoKterieLa^L{#LkonLon-LvanLzaMbusNkom!R[rR{RmanRokoRvaTer#TohVl&Zal#Zili#Zu#3D&RanSe^StieTonZin#ZmocZ)k3CyklD]Ft-KinyLan%Og,fO]gTvaZon2AhobytAt*/E/aEdu+EskIk!Iz&Ok|Oud Ud2B-BrDl.D~H!(JkotJ|K<ysLe$R>R'?TaUb_U/!U^U+Ur!Xer2A^v#Ambo,An#AtrEp)Ike)KoLohOnzOskevUn{#Usin#Z^Zy2Bl.Bn|})D _D#D'aF{Jar(Kv?LdokLvaN^NkrRzaTikVolZola3D+tL.T'#0Ukot:PartRev&3DrDu+J/JnLaLerLkemLn?N.Nn(N'#NtrumNz<StopisT#2AlupaAp`]Ar aA)E/t!EmieI/otIrurgL`Le[Lub M_Mu,ObotO/olOd[O+,Om=Op Oro[OvRapotRl RtRupTiv(Ud.Utn!V!Vil#V(Y[Y$!Yt 0Bu+Gare)H_&HlaNkotRkusSter&Ta%TrusZin>Z(2O&2KolivUv!4It_N(0Dn(Ke)KrPot0Ak~AlIkRkot2Kli$a:L-oRe[T_Tum1E,1B!a}'#Cib_Fic Fla%KlKr{Mokr!PreseRbyS#T-tiv3Kob,zKt|O^P]mSkSp+jV`]Vo/2AhaOuhoUhopis1Es0BroByt-C@t}ut DnesH+dHo^H,JemJn?Kl`KolaKt<Kum@tLarLevaL.MaM.ntMluv M'Nut P`PisPln PosudPr'odPu$ Raz R(RtSahSl'St!-SudSy)TazT-Tk~Uf!Utn!Voz%Z`uZn!Z<%2Aho)AkAm!ikAv>AzeDolObn(OgerieOzdSn(T Z(2B@}'noD-HaH'#S SnoT(0Oj?Or>2Nam :9O]gOnomie0EktronIpsa0AilIseO%P!ie2Izo^O/aOpejOs2EjEn%K<)Kymo0Ike)0F<ie0Olu%1Eku%KurzePed?P]zeP<tT,kt:C#Jf#Kul)N!ikN)zieRmacieV< Zo+3De,%J{onN#3Al#Gu,ntLozofLtrNan%N)Xa%0Ord1An_IrtOtila2NdSf<T[lT#Ton2Ak%Es#On)2KarNk%3Zi#:LejeRant3N{i#O]g3Lot.2Azu,Ejt2LemLfi$aTi#2AfAmofonAnu+EpIlOgOtes#2Ma:D?DrLaL@#N[NopisRfaRpu&V,n3Bk(J#lJnoJtmanK)rLmaM!omR>R&S]Zky3St<ik2Ad'#AsivkyAvaEd!EnO^v>OhOup(T!Ub.U/o)0AtO)Yz0IsOjivoOut0Bl.Boj}DinyDl!Dno)D|Jn(KejLin#L#LubMo+N [No,%RalR^RizontRkoRliv>RmonRn.RoskopR$voSpo^St.T'(U[UfUp!Us#V<2Ad[An?Av(Az^Bo+kD.D]D(N-Ob#Oma^OtOu^Oz@St#Ub(Yz!2B@(B~D[KotMrS aSto)0Ozd2Bn(D,ntGie&M&Sterik:2Yl#3Ned2O&0Uze0Un a0F-%Fla%KasoOva%Sp-%Tern{Vali^Ve$<Zer%3Onie:Blko})Ho^Kmi+K(L'>N)rRmarkRoSanSnoT#V<Zyk3Din>D+Dn!_HlanKotL@L oMn(NomP?S{erV Zd>Zero3NakNdyNo/Sk,Sto)Trn?Zva3En|1Gurt5R):Bar{B_Bin{}&D{Did]HanJakJu)KaoKtusLam aLhotyLibrLn(Me,MkolivM&Ni[lNoeNt<Pal.P_aP olaP#P+Po)PrPu$aPy[,Ram_Rot#RtonSaTa]gTed,U%UzaVa+cZaj#Ze)Ziv(2EkolivEsi0Dlub@MpRami#3No2A%kAdivoAmApotAsi#AunEcEn[Ep!Es~IdImaIs&Ob*kO#nOpaOubUb'&Us!Uzk(0EnIt!Otr0IhaOt0Al?Ber>B#BlihaBylaC*rH=J@>KosKtejlLapsLe^LizeLoMandoMe)MikMn!aMo,MpasMun aN!N%ptNd?N>NfeseNgresN.NkursN)ktNzervaPan>PieP~Pr'#Rb_R-t<Rmid]RoptevRpusRu&RytoRz{S!>St#T_T+)T*lUk!Up_&Us-Uz]VbojZaZ<oh2Ab?A/Aj.Al|AsopisAv!aEd EjcarEs[Eve)Ik{ItikIzeKav>Me+cMivoOcanOkOni#Op OupaOv#T-Uh`]Up?Ut(Vin#Y/+Yp)Y$alYt2Dlan#FrJn(KlaLaj^Li/L#Lom{Ltu,NaPodivuRtRz<Til0Al aAsin#E$<2No]gS_.Ta,T?T#T'>V`]:B,d<})nDn(IkKom>M_aMpaN'#S?SoStu,Tin#V.3B#CkdyD@Dn?D'#Dv.G@^GieG,%H%Hk(H~KtvarNo/odNtil#P@#Pid]T`]T>TmoTokruhVhartV a%Vobok3B,}ot#DojedDsk(H'.Jav>L-M{#NieN#No+umStop`T.T|5Bi$aDivodGi#GopedKal aK{Mc|P!aPu/RdSosTrU^lUhU#Usk!V>3Tiv(1Cer&CiferMpSkSt,%0I%2RaRi#S.:DamD]Gi$rHagonJ{-J _J< aKakK'?Kr_aL[L.L|Lv?Min#Nd+NkoRn(SakrSkotSopu$T?Tri#Tur aZan>ZivoZl Zur#2Lo[0}anikD a%D'.LasaL*nNtol#TlaTo^TrZe,3G,%H~Hu+K.KrofonL@>Lim{rL(Mi#Nc'&Ni[rNom{Nul(S#StrX|2Ad(HaH'.OkS!Uv 1I/Ohem0BilCn(D_#Dl [HylaKroL-ulaM@t#Nar/aNoklN$rumNt|NzunSazSkytStTiva%T<#Ty#U/aUdr(Zai#Z-Zol2Am<Av@>KevTvolaZ{Zut(0T _1DrcF]nL!MieN?S{Ta%ZeumZi#nt3Sliv>0Da:B*r!}yt!Da%Dbyt-DhozDobroDpisHlasHn!Hodi+H,d Iv aJedn*Ji$oJm=K]n Kon>Krm LevoMaz!Mluv Nom{rOkoOpakO$roP`!PevnoPln P~Pos+dPr(oRod RubyRy/]S` S-!S+poSt!TolikV@-Vr/Vzd<yZv!3Be}!CkyDa+koDb!DuhGa%H{Ho^J@JprveKlidLib(Mil(MocO/o)On#PokojR(RvSmyslS*l`Tv<UronV.Zvyk+3Co)JakKamKdyKlKte,kTro5C+hHav?M.%RaR-S _Sn(UzeVinyVo)Zd,5DaD+G{T Tn(Trie3Mfa:0AlArv AvaDivEcEhn!Ejm=Ez aHajo[Iln?Jasn J-tK]p La$L-Li[LohaLu^NosOh! Oj-OutRaz>R&Ru[RysSahSluhaS)r!UvVazVin VodVyk+Yv!_Z<0AsElEn Hl` Ho)H,&It~0BojByt}odCiz Ebr!Esl!Evzd!EzvaH`%Hod J{JinudKazK*p LivLu#Ml#Oln(P`PisPl=P<Pu$ Pyk!Raz#S*d StupSunTokTudVahaVe)Vol!V,%tZ&k1I&Sajd1LasNiskoRa^Roz Ryz-2ApEn?Li#NoOuzl OvyRasaResRs-RuhUpantUr#Us 0Ejn.Iz|0AkE+)Ez L`.L*v!LuvaYl0Ehdy1Ak|As-E,%I%Il(Is|O,Oz?RavduRoti1B al}e$rGieL?LojT_0A^}~I#IvoLavaLep Ln L' N'aO[Ol Pa+cT@T,haTu^Ty/Voj 0Epl IskOpRh!Rl(RokRubyV<1A~ArEsLivn O%1Id1Do[:}!_Ci@tD*/H<-KtLan^L>LivoLu[Mf+tMls-N@#Ni#N&N|N$voNtof+Pri#Rke)RodieR)Ru#Ry[Se#Siv aSt_#T@tTro&V*kZnehtZ*r-3C#DagogJs-K]LotonNal)Ndr-NzeRiskopRoStr(Tar^T?Tro+jVn.Xeso3Ani$aHaJav?K+KnikL.Ln(Lul#Nze)Pe)S!_Sto+Tev&Vn?V'ar2A%n)Ak!Am@Ane)A$i#At Avid]AzE/Em@oEn)EsEtivoEv_Iv!N NoO/aOd.Om[OutUkYn2Bav Byt}odC Ctiv>D!D%n Deps!Dh+dDiv Dkl`Dman DnikDo[Dpo,D,zD$!aDvodDzimEzieHan#Hnut#H'<HromaHybIn)Ji$#Jm=Kaz K+sKojKrokKu)KynLedneLib-Lk~LohaLynomMaluMi~Ml#MocM$aMys+tNe/!N<#Nur(P`!P_Pis-Pla/Pros Ps!PudR`%R%RodRu/aRyvS` SedSilaSkokSlan>S*d SpoluS)vaSud-SypTahT#nT+skTom-T,vaTupaTvo,U#zUtoUzdroVahaVidlaVlakVozVr/V$!VykVzde/Zd,vZem-Zn!-Z<Zv!2Ac|Ah<yAkti#A+sAot>Ap<-AseAv^IncipKnoObud O%ntoOdejOfeseOh,Oj-tO]m Omi+Onik!Op`OrokOs[OtonOut-OvazS#v#St@Udk(UtV-Voh<y0An>OvodTruh0Actvo0Ber)}DlKav>Kl.Kr+LtMpaNcP@SaSin#St.T|Ty#3Rami^SkT_::C-}otDia%Dn?DonFtGbyKe)K'.M@oMp*/NdeRa/R aS'&StrTo+$Zan%Zid]3Ag|Ak%CeptDakt<Fer@tF+xJnokKlamaK<dKrutKt<Pu)%VizeVmaVolverZerva3Sk|Ziko5Boti#Dokm@H'#K+KokoMan{oP'odPu/aRejsSolStl.Tmi$rTopedTun^Ub@#U/oUpU,V.Vn?Zb<Z/odZd!Zezn!Zhod%Zin#ZjezdZ#zZ]haZmarZp`Zru/ZsahZtokZumZvod5Bri#}`]Kav?Kopis3BaBol'}l(D]P`]T.Z(:Di$aH!KoM>Mizd!Mo)N #Rdin#San#T_ Z[Z@?0Or0H|1B,n#CeseD`]Dim@tD]Hn!Jm=Ke,K)Kun^KvojeM@oNoRvisS` Sho,SkokSl!St,SuvSyp!T[T.Tk!T~Trv!VerZ&m2O^R~0FonLn?R#Rot-RupTua%1AfandrAliskoAnz@AutEptikIcaL`[L@?LoLuzO[O#nOroRip)RzUp.V(Vr&0Abi#Adid]An.A$Avn(Ed|Ep>EvaEz.IbI&Izn?OnOup-OvoU/UhaUn%Up#Za0A,gdE)&Il$voL*vaOgR`RkRt#Ut-Ysl0AdAhaOb0Bo)}aD'#KolP#TvaUbojUc Ud%UhlasUl`Um,kUp,vaUsedUtokUvis{0Al'&As _IsLavOd-Oj@>OluOnz<Orn(Ou$aR/aU$ 1An^AzD%NaN>Ovn!P@StUb1An?Ar(aAti#Av[EhnoEz#OdolaO+kOpaOrnoOup!Ra/ResRh~RomRu&Ud&Upn?VolYk0Bj-tBtropy}arD(KnoNd!N=Rik!aR'.0AhAl$voEtrAt[Az-Is+It-Obo^Odid]Or#Rab2Kav#KotN-N'>P!Pk(R'(S_T(:B+t#Bu+H*nJemnoJfunJgaJ Jn(Kti#Mh+MponNc|N>NkerPe)V@.Z!_3}ni#HdyKut.LefonMno)Nd@%Ni$aN<P])P&PrveRapieRmos#Xtil3}oSkopisTu+k1Ad+cAn.0Ap#Esk!UkotUpa0El1A+)Pin#PolRzoUhaU+c2Ad?Akt<AmpAsaAverzaEf E$Ez<Hav.Hl.O/uOj?Os#Ou[P%P _Pk(Ub>U/l Uhl?UsV!2DyH~H(Nd,Ri$aR&jZemsko0ArohOr[Rd(Rz2GrKev:0Oh(OzeR!R*s-RusYt'&0HoTiv(0Iv 3R` 1Edn!I$ M=0Az!_Lidn Lon Otv Roj 0I%I)Ov 0Yv`]0Av If<maIk~1Ad~L!n Ly~Out!Rav 1AnAz 0Ed~Il|Mrt N`n N=Oud Tl!Tr~0Ah|K!Lum O~Op@>R*s 1Al Oln Oz'#3D,v ElEn.L.N!:GonL/aL*nNaN^lNil#RanRhanyR|1ElkuHod0Ova0DroGe)%J%Lbl*dL{rhL _LmocLry[Nk'Ran^RzeS_#SkrzeSn?SpoduS)Ter.Ver#3B,%}rDeoh,D.D+LaN?S{Tal aZeZ #0Ezd0L`Us0Aj#AkAs>EvoHk(IvN'#Oup!1Uc|Uk0DaDiv(Doz&kD$voJ@skyJ&JskoLantL[L LnoSk'#Zid]Z'&0Ravo1Ab>A%tAhA)Ba}o+kH!StvaTu+0Ad T*p Tup0Ip4Bav Br!}|D!D,Fot H+d!H~Hod H,d Hub Jasn J{Jm=K]p Kon!L-!Maz!Mez Miz{Mys+tNe/!Nik!Nut P`!Pl! P,v Pu$ Raz R'n!Rv!Sl' SokoS)v Su~Syp!Tas Tes!Tr! Vi~Vol!Vrh_Zdob Zn!0AduBud }op D<Du/Dy/!E$upH+demKazLyk!NikOr-P*,TahT-::993Lofon::Br!Byd+t}|DarmoDus F*k!Hlt Hod H,^Hy~J!>J{Ji$ K+p!K*p Lep Mez Mot!Mys+tNe/!Nik!Pl! Poj Ps!Raz S)v Su~Taj Temn Tk~Ujm=Val Ve+tVin Vol!Vrt!Zvon 0Av RusuUd|Yt-1A+#ArmaAtn(IvoOb RojVihYm`]0L@.ManM.Pt!Z`uZdola2At Lt~Lubo#Ot' Ru[0MaMn?0Emn 0Lam!Oum!R!#Umav#0AtoEh#O[OmO$Ozvyk0Ap|ArAt-IjeIz{Ocn Odr!Rzl.Ut|0AkAl(Am@!Ovu0B,z Tav Ub-Ufa+0Lod Omal RavaR( Rud#Rvu1A^An C`]N (NoOv&Y/l Zav(1I/aR! 0B'.Br0Ed~EnkuEs_aOnR!Uk'odYk";
    var checksum = "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a";
    var wordlist = null;
    var LangCz = class _LangCz extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the Czech language Wordlist.
       *
       *  Using the constructor should be unnecessary, instead use the
       *  [[wordlist]] singleton method.
       *
       *  @_ignore:
       */
      constructor() {
        super("cz", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangCz``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangCz();
        }
        return wordlist;
      }
    };
    exports2.LangCz = LangCz;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-es.js
var require_lang_es = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-es.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangEs = void 0;
    var wordlist_owla_js_1 = require_wordlist_owla();
    var words = "0arertoiotadonoaRteirroenaNonaLsolocoiliaralaorrenadaChoN$n0A>Dom,EjaI!#Oga&O'Or#RazoR*Ue=U<0Ab Adem@Ce<C~Ei)ElgaEn#Ept I&L  NeOg!O<TivoToTrizTu Ud*U!&Us 0Ic#Mit*Opt Or'Ua`Ul#0Reo0Ect Ic~In Irm 0IlIt On@Os#Ot Reg R$UaU&U?aUja0OgoOr+0ReSl 0Ed_zE'Us)1Ac[nAmb_ArmaBaBumCaldeDeaEg_Ej Er%E%F?!GaGo&nIa&I,#Iv$MaMejaMib T TezaTivoToTu[Um'Z 0AbleAn)Apo]ArgoAs B Bi#E'IgoIs%dOrP oPl$0|oC@'C]D D,Em@Gu=Il=ImoIsOt T,aTiguoTojoUalUl Unc$Ad*EjoO1Ag A[#Eti#IoLic O&Or)OyoR,d!Rob Ues%U+1A&A`ArBit+BolBus#|ivoCoD!D?]DuoEaI&IesM.i-esOmaPaP.Reg=RozRugaTeTis%0AA&Al#C,<Egur EoE<rI,#I=Ist*NoOmb+P!oT?]T+Tu#Um*Un#0AjoAqueArEn#EoI>Le%OmoRa!RozUn0DazD$GeLaM,#S,)T^0AlAnceA+EEl]`E`EstruzI.I<2ErU{U'0Af[nArO)Uc Uf_Ul:BaB^|eH@IleJ Lanz/c.LdeMbuN>Nd-oRb(>RnizR+Scu]S#nSu[Tal]T!@T*Tu%UlZ 3BeBid/=S SoSt@3|oEnNgo2An>OqueUsa2ABi`BoCaCi`DaDegaIn//!oLsaMb-{dNi#N}saiRdeRr SqueTeTinVe{Zal2AvoAzoEchaEveIl=In>IsaOcaOmaOnceO)UjaUs>U#2CeoCleE'EyFan{F.HoIt_L#Rbuj(l(+Sc TacaZ.:Bal=BezaBi`B[CaoDav!D,aErFeI{ImanJaJ.LLam Lc$L&Li{dLleLm/^LvoMaMb$Mel=Mi'Mp}c!Nd?Nel-gu+Nic-#N-.ObaOsPazPi%nPo)Pt Puch((b.RcelRe%Rg(i'RneRpe%R+R%SaS>S!oSpaS#rT^ceT_U{lUsaZo3Bol]D!D+Ld/eb_Lo<Lu]M,#Niz-t+Rc(&Rez(oRr R)zaSpedT+2AcalAle>AmpuAnc]ApaAr]I>Is)IvoOqueOzaUle%Up 0Cl.EgoE=EnEr#F[G +M->NeN%P_sR>Rue]SneTaU{d2Am^AnA+AseAveI,)ImaInica2B_Cc~|i'Ci`CoDigoDoF_G!He)JinJoL/ch/eg$Lg Lin/l LmoLum`Mba)M!Mi{Mo&Mpr-deNej}g-oc!Nsej}t PaPi(az.Rba%RchoR&nR.(r!S!SmosS%2AneoAt!E Ec!Ei&EmaIaIm,Ip%IsisOmoOnicaOque%U&Uz2Ad+Ar#At+BoBr*| aEl=En#Er{Es%EvaId Lebr/p/#Mb_Mpl*N-e%O%P.Pul( R$<R<RvaTis:M-z(R&T?3B!B?Ca{C*DoF,saFin*J LfinLga&Li#M^-<N%lP^)RechoR+%Sayu'SeoSf?eSnu&Sti'Sv$TalleT,!U{3AAb=AdemaAman)A`Ar$BujoCt En)E%EzFic?G'Lem/u*N!oRec#Rig*S>Se'Sf[zVaVi'5BleCeL^Ming}N Ra&Rm*R<SSis2Ag.Oga2|aDaE=E'LceOQueR Rez(o:0A'R$0H OUa&r0AdIc~Ific$I#rUc 1Ec#Icaz3EEmp=1Efan)Eg*Em,#Ev IpseI)Ix*Og$Ud*0Bu&It*Oc~Pa)Pe'PleoP_sa0A'C go|ufeC@EmigoE+Fa&F!moGa'Igm/aceOrmeRe&SayoS, T!oTr VaseV$1Oca0Uipo0Izo0Ca]C,aCol Crib*Cu&Enc@F!aFu!zoPa{PejoP@PosaPumaQuiT TeTi=Tufa0ApaEr'Ic-@1Ad*Alu En#It 1Ac#Am,Ce<CusaEn#Ig*Il$Ist*I#P!#Plic P.!T_mo:BricaBu]|a{C?C#rE`J/d/=L<Lt MaM?@Mo<Ra.Rmaci(olRsaSeTigaU`V^X3Br!o|/izORi(ozRt?Rv^Stin3AbleAnzaArB[Cc~|aDeoEb_ElE[Es%Gu[J JoL/e)L@lLt+NNc-g*Ni#Rma2A>Au%EchaOrO%U*UjoU^2B@CaGa%G.L$Lle#N&Rm(+Rtun(z SaTo2Aca<Ag?AnjaAseAudeE*E'EsaIoI#U%2EgoEn)ErzaGaM Nc~Nd(g.R@S?TbolTu+:Ce]FasI%JoL/!i/=Mb- Nch}g-<RajeRzaSoli`St ToV?an3Me=M*NN!}$N)Ran$R,)Rm,S#3Gan)M`s$R Ro2Aci OboOr@2LLfoLo<LpeM(&R?([TaTeoZ 2A{Afi>A'AsaAtisAveIe%Il=IpeIsI#O<rUaUe<UmoUpo2An)ApoArd@Er[IaI'I.I<It [Sa'St :B!B?Bl C!|aD/l Mac(i`ZZa`3B?]B[|oLa&L$Mbr(*Rma'RoeRv*3E=Er+Ga&Gi,eJoM'S#r@5Ci>G Gu!aJaMb_Ng}^Nr((mig('St?Yo5E>ElgaEr%E<EvoI{IrMa'Me&M?deM}d*RacanR#:1O'0EalIomaO=2Lesi/uUal4EgalUs~0Ag,AnIt P P!$P.!Pul<0CapazDiceEr)FielF^meG,$Ic$M,<MuneNa#Sec#S%n)T!esTimoTu*Ut?Vi!'3AIsOn@0L/o):BaliB.M.RabeRdinR[U]Zmin3FeRinga3Ne)5R`d(obaV,Ya5ErgaEvesEzGa&rGoGue)Ic$N>Ngl-$Nt Pit!R S#V,?Zg :7Lo5A]:B$C$C[DoD+nG #GrimaGu`I>M!Mi`Mp --ch-gos%NzaPizRgoRvaStimaTaTexT*U_lV Zo3AlCc~|eC#rErG~Gumb_Ja'Ngu-#NaOnOp &S~TalT[VeY,{3B!%dB+C^D!Di EnzoGaG!oMaMi)M.Mp$NceN&Ne-go)N}t!`Qui&SoS%T!aT$T+2AgaAmaAn#AveEg En Ev Or Ov!Uv@2BoC~CoCu[GicaG+MbrizM}jaTe5|aC*G J}-esPaSt+ToZ:Ce%|oD!aD_Du+Est+F@G@GoIzL{dLe%Ll/oMaMboMutN>N&Nej Ng-iquiNj N}<N%Na`PaQuin(R>Re(f?Rg,Ri&RmolR+nR)sRzoSaSc aSivoT T!@TizTrizXimoY^Z^ca3|aDal]D$Du]J?]J^L,/.M^i-^NsajeN)NuRca&R,gueRi#SS.TaT!To&T+Zc]3E&ElEmb+G/Lag+Lit Ll.M}-!}im}u#OpeR SaS!@S?SmoTadTo5|?aC~DaDe=HoJ LdeL!Li'M,#Mi- c-ed-j-#NoRad(d!Re'R*R+Rs(%lScaStr TivoV!V?Zo5|oD EbleE]Er)Est[G_J!L/e%L%N&Nec(alRoScu=SeoSgoSicaS=:C C~D IpeRanj(izRr SalTalTivoTu[lUseaValVeVi{d3C$Ct G Goc$G+OnRv$ToUt+V V!a3|oDoEb]E#NezNoTi&Vel5Bleza|eMin(i(m()TaTic@Va#Ve]V$5BeCaCleoD?=DoE[EveEzLoM!oTr@:Sis0E<IspoJe#R(!oS!v T,!V$0AA<Ea'H,%HoIoReTavoTub_Ul#Up Urr*0I IoIsea0S)0EnsaEr%Ic$Rec!0Ro1DoR0O1AEa{Fa#IvoLaMoOrVi&0Bligo0DaZa1A>C~E[In On!T TicaUes#1Ac~A&rAlBi%CaD,EjaGa'G@Gul=I,)Ig,Il]OQues%Uga0Ad@Cu+Ez'OT[0O'Ro1EjaU=1I&Ige'0En)0O':C#D_El]Gi`GoIsJ oLabr/>Le%Li&Lm/om/p NNalNi>Nt!-ue=PaPelP?]Que)R Rcel(edR*RoRpa&RqueR[foR)S SeoS~SoS%TaT$Tr@UsaU%VoYa<3A#nCa&C!a|oDalD*G IneL L{'Le/ig+LlejoLoLuc--s N.OnOrPi'Que'R(ch(d!Rez(f?Ri>Rl(mi<R+Rs.aSaScaSimoS%`Ta=T+leoZZu`3C |.EEd[Er`EzaJam/ Lo#Mi,%N}#rNz-aOjoP(a%S Sci`SoS%T.Zca2AcaAnA%AyaAzaEi#E'OmoUmaU[l2B_CoD!D$EmaEs@E%L,Lici/=LvoMa{Me=MoMp-!Rc~R%lSa{Se!SibleS)T,c@T+Zo2A&E>zEgun%Em$EnsaE<Ev$ImoIncipeIs~Iv OaOb Oce<Oduc#OezaOfe<rOg[maOleOmesaOn#Op$OximoUeba2Bli>|!oD^Eb=Er%Es#Lg/*Lm.LpoL<M-#NalNoPaP?(e:99Ed EjaEm Er!E<Ie#ImicaInceIt :Ba'B@BoC~DicalIzMaMp-ch}goPazPi&P#SgoSpaToYoZaZ.3Acc~Ali{dBa'Bo)Ca!Ce%|azoCog!C_oC#Cur<DD.&Duc*FlejoF^maF[nFug$Ga=G*G]G_<H,I'IrJ/a#LevoLieveLle'LojM Med$M}>rNd*N%P #Pet*Po<Pt?SSca)Si`Spe#S#Sum,T*oT^'T[#Un*VesVis%YZ 3CoEgoEn{EsgoFaGi&G^Nc.N.OQuezaSaTmoToZo5BleCeCi D DeoD?]ErJizoJoM!oMp!NN>N{PaP!oSaScaSt+T 5BiB^DoE{G*I&In/e%LoMboM^Ptu[TaTi`:Ba&B!B$BleC GazG[&L/&L!oL*Lm.L.Ls/#LudLv Mb-c~Ndi-e Ng_Ni{dN}#PoQueRdin()nSt_TanU`Xof.3Cc~CoC_#C%DGu*IsL=LvaMa`M?l-d-<rNalN^P  P@Qui(RieRm.Rv*S,%S~TaT,%V!oXoX#3D[Es%E)G=G'Lab/b L,c$L]Mbo=M$R,aS)maT$Tu 5B_C$D$LLap/{&Le{dLi&Lt Luc~Mbr-de}i&No+NrisaPaPl P^)R&Rp_s()oS)nTa'5AveB*Ce<D^Eg[E=E'Er)Fr*Je#L%nM P! Pl*P.!P_moRR>Re'Rg*S#T?:Ba>BiqueB]BuCoC#JoL L>L,#Ll/.Ma'Mb^Ng}quePaPe)P@P.Qu?l(deRe(if(je%RotR+R%TuajeU+ZaZ.3At+|oC]CnicaJa&J!Ji&L/efo'MaM^Mp=NazNd!N!NisN<Ori(api(>Rmi'Rnur(+rSisSo+StigoT!aX#Z3B$Bu+nEmpoEn{Er[E<G_J!/deMb_Mi&M}%OPi>PoR(.TanT!eTu=Za5Al]B?=C Ci'DoG/&M N}#P PeQueRaxR!oRm,%RneoRoRpe&R_R<RtugaSS>S!Xi>2AbajoAc#rA!Afi>AgoAjeAmoAnceA#AumaAz EbolEguaEin%EnEp EsIbuIgoIpaIs)IunfoOfeoOmpaOn>OpaO)OzoU>Ue'Ufa2B!@BoEr#MbaM^NelNic(bin(ismoR'T^:0Ic 9C!a0B[l0I{dIrIv!<OT A3Ba'BeG,)Na0ArU $0IlOp@1A:CaC$Cu`G GoI`J?l/eLi&LleL^Lvu]Mp*oR(i R.So3Ci'C#rHicu=In)JezL/!oLozN-c!Nd-e'Ng N*N%NusRRa'RboRdeRed(j(<Rt!3AAjeBr C$CtimaDaDeoDr$EjoErnesG^LLl-ag_N}e&OlinRalRgoRtudS^Sp!aS%Tami`U&VazV!oV*Vo5LcanLum,Lv!RazT ToZ5E=Lg :::C!Te3GuaM('So9DoGaGur:F*}jaPa#Rza93N(+5MoR&";
    var accents = "aeiou7695@@BZWWavwUJkO@Y-Kn))YEGq#E@O)cI@#ZkMHv$e*))M!!)D**$GW!oKm*Acoh^k&It-pi^SYW)$^n!G)bO!Wkzam(jS#X)Og*^l^RW!bQ#QygBKXfzE))hti!Qm)Cng%%c)mJiI*HJWbmYniCLwNdYyY%WKO^bnT$PuGOr!IvHu&G(GKbtBuhiW&!eO@XMeoYQeCa#!MrTJCq!OW&CHG(WCcW%%)$rfrIegu$)w!G)JGmWWw)MnD%SXXWIT^LWAZuVWB^W)eTL^x&$WGHW(nKWEMA)#$F$x$Waekqs,n7715)W*HM-$WAcCiu(a))VCZ)GG%(*CWWdW%$D!UCO$M";
    var checksum = "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300";
    var wordlist = null;
    var LangEs = class _LangEs extends wordlist_owla_js_1.WordlistOwlA {
      /**
       *  Creates a new instance of the Spanish language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langEs]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("es", words, accents, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangEs``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangEs();
        }
        return wordlist;
      }
    };
    exports2.LangEs = LangEs;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-fr.js
var require_lang_fr = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-fr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangFr = void 0;
    var wordlist_owla_js_1 = require_wordlist_owla();
    var words = "0erreleontiteurinueiriet cegeanseali medenel q)eniluxaus ch0Ais}And$Diqu E`#Ol*Ord Ou%rOy RasifReuv Ri,Rog RuptS_-SoluS'@UsifYss=0A@m+AjouAr+nCab]Cep,Clam Cola@Cro~eCu}ErbeHatHe,Idu]I Omp&Qu *R$y?Te'TifT)l0Ep&EquatHesifJec%fJug Mett!M* Op,Or Ouc*Res<RoitUl&V be0R R$ef0Fai!Fec,Fi~eF!{Fub]0Ac Enc I#I,Raf Reab#Ru?1D Gu`#L>Mab#S/-0Ou,Us,1Arm Chim+Er&Geb!G)I_ I?ntLeg Lia.Lou Lum O'd*PagaTes<Veo#0A&'BiguB!Enag Ertu?Id$Ir=Orc O'Ovib#Phib+P#'Us/t0Aly<Apho!Ar~+Atom+C+nE/%rG#Gois<Gu#{Im=Nex N$-N)lOd(Om=+Ony?Orm=T_[Tido&X+{1Ai}Eri%fL/*Olog+Pa!`Pe]Por,Puy 0UariumUeduc0Bit!Bus&De'Doi<G_tLequ(Matu!Me?ntMoi!Mu!P_,Ra~ Riv Ro}S_icT +lTic#0PectPh=&P* S|tS v*S+t&Soc>S' TicotT!Tu-0El>O?RiumRo-Ta^T_%fT* Trap 0Ba(eB .Da-Dib#G' Ro!Tom[Tru~e0A]Anc Ari-En*Er<Eug#Ia&'I@I$I}O(eOu R`1I=Io?:D.Fou Ga.G)t&Igna@L/c Lc$Le(eLisa.Mb(Ncai!Nda.Nl+)Nn>eNqu>Rb>R`R$R^Rra.Ss(S%$Ta`#Te|T,+Udr>Vard 3Let&L>Lo&Nefi-R-|Rg Rl(eRmudaSa-Sog[Ta`Ur!3B $Cyc#Du#JouL/L(g)LlardNai!Olog+Ops+OtypeScuitS$Sto'iTu?Zar!2AfardAg)An~*Ess/tInd OndOqu Ous$2BardB(eI!I}Li@Nb$Nd*Nhe'Nif>NusRdu!R[T&Uc#Ue{Ug+Ul$Uqu(Ur<Usso#U%^Xe'2An~eAs>AveEbisE~eEuva.Ico]Iga@Ill/tIo~eI^O~u!Od Onz Ous<Oye'U?Us^Ut=Uy/t2Ff#Iss$L#%nRe|R(S% T( To*Vab#Vet&:B/$B(eChet&De|D!Fe(eIllouIss$Lcu]Lep(Lib!Lm Lomn+Lvai!Mara@M aMi$Mpag[N=Net$N$N%[NularPab#Por=Pri-Psu#P,Pu~eRab(eRb$eRes}RibouRna.Rot&R!|Rt$Sca@S>S^Ssu!U}U%$V=>V [Viar3D`#Intu!Les&Llu#Ndr>Ns' Ntr=Rc#Rebr=Ri<Rn Rve|S}2Agr(Ai<A#'Amb!An-Apit!Arb$As<'At$Auss$Av* Emi<En`#Equ>Er~ Ev=I_Iff!Ign$Im eIotLoru!OcolatOis*O<O)t&Ro?U&0Ga!Gog[M_,NemaNtr Rcu]R R^T [Toy_Tr$V`2A*$A?'Aqu As<Av>I_tIgn ImatIva.O~eOna.Opor&2B=tBraCas<Co% D Dif>Ff!Gn Hesi$Iff Inc L eLibriLl(eLma,L$elMbatMed+Mm/@MpactNc tNdui!Nf>N.]Nno,Ns$[NtactNvexePa(P+Ra`Rbe|Rda.Rni~eRpusR!ctR&.Smi^Stu?T$U@Upu!Ura.U&|Uvr*Yo&2AbeA(&Ava&Ay$Eatu!Edi,E?{Eu}Evet&Ib]I Ist=I,eOi!Oqu Ota#Uci=UelYp,2Bi^E`l*Il]eIs(eIv!Lm( L%v Mu]Pi@Ra%fR<'3Anu!C#L(d!Ni^:Ign M>Ng N<'Uph(3Batt!Bi,Bord Brid But/tC= Cemb!Ch* Cid Clar Cor Cri!Cup]Da#Duc%fEs<F_sifFi]Fray Gag Givr Glu%rGraf Jeun Li-Log M/d Me' Mol*Ni~ Nou N&l#Nud PartP_}Pha}Plac Po}R/g Rob Sast!S-n&S tSign Sobe*Ss( Str>Ta~ Tes,To' T!s<V/c V_*V( Vo*3Ab#Alog)Am/tC,Ff  G  Git=G[Lu M/~eM(u Oxy@Rec%fRig Scu,Spo}Ssip St/-V %rVi}5Ci#C&'G?IgtMa(eMici#Mp,Na&'Nj$Nn Pam(eRto*Ru!Sa.Se'Ss>Ta%$U/>Ub#U-'U,Y_2Ag$Ap Es}Ibb]Oitu!2P +P#xeRab#Rc*3Nas%e:0Lou*0Ar,HarpeHel#La* Lip<Lo!Lu<O#Onom+Or-Ou,Ra}Rem Riva(RouU?U!u`0If>Uqu 1Fac Fec%fFig+FortFray Fusi$0Ali}Ar 2Ec,1Abor Arg*Ectr$Eg/tEph/tEveIgib#I%s?O.Ucid Ud 0B=]Bell*Bry$Er|@Issi$M_ O%$Ouvo*P e'Ploy Por,Pri<Ulsi$0Cadr Ch eClaveCo~eDigu Dos}DroitDui!Erg+F/-F m Fou*Gag G(Glob Ig?Jamb JeuLev NemiNuye{Ri~*Roba.Seig[Tas}T_d!T>To' Trav Um  Vah*Viab#Voy Zy?0L+n0Aiss*Arg[At/tAu#Ic +I@m+I Ilog)I[Iso@ItapheO^ReuveRouv Uis/t0U !Uipe0Ig Osi$Re'Up%$0C=>Pad$Pe-P+g#Po*PritQuiv Say S_-S+uSor Ti?TomacTra@0Ag eA]An~eA%^E(d!Endo*Er[lH/olHi^Hn+Ir Off Oi#Onn/tO'd*R/.RoitU@0Phor+0Alu Asi$Enta`I@n-I,Olu%fOqu 1ActAg  Auc Cel]Cit/tClusifCu<Ecu,Emp#Erc H= Hor,I.n-I]Is,O%^Ped>Plor Po}Prim QuisT_sifTrai!Ul,:B#Bu#{Cet&Ci#Ctu!Ibl*Lai<Me{M`#R-'RfeluR(eRou~eSc( T=Tig)Uc$U%fVe'Vori3Bri#C$d D  L(M?M'Ndo*Od=Rm Ro-Rve'S%v=U`#Ut!Vr>3AscoCe]C%fDe#Gu!Latu!Leta.L>eL#ulLm LouLtr N/c N*O#R?Ssu!X 2A* Am?As^At&'E|E~eE'Exi$Oc$O!Uctu Ui@Uvi=2L+Nd +Ngib#Nta(eRc Rg $Rmu]Rtu[Ssi#Ud!Ug eU`]Ulu!Urmi2Agi#Ai<An~*App Aye'Ega&E( El$Em*E[s+E!Iab#Ic%$Iss$Ivo#OidOma.Ont=Ot,Uit2Gi%fI&Re'R+{R%fSi$T':Gn Lax+L +Mbad R/%rRd+nRn*Rrig)Zel#Z$3AntLa%[Lu#Ndar?N =N+NouN%lOlog+O?t!R/iumR?St)lY}3B>C]RafeV!2A-AiveIs}ObeOi!Or+{2Lfe'M?Nf]R.R`#Udr$Uff!UlotUp`#Urm/dUt&2Ad)lAffi%A(eAndApp(AtuitAv*EnatIffu!Il]Imp Ogn Ond Ot&OupeUg U% Uy e2EpardErr>I@Im|veIta!Sta%f3Mnas&Rostat:Bitu@Cho*L&Me|NgarN[t$RicotRm$+Rp$Sard3LiumMato?RbeRiss$Rm(eR$Si,U!{3B n BouLar/tStoi!V 5MardMma.Mo.[N['Nor N&{R@Riz$Rlo.Rm$eRrib#U#{Us<5BlotI#{Ma(Mb#Mi@Mo'R]3Dro?lG+[M[Pno<:2Yl#2Nor U/e4Lici&Lusi$0A.Bib I,M_<Mobi#Muab#PactP i=Plor Po}Prim Pu,0Carn C_d+Ci@ntCl( Colo!Dex Di-Duc%fEditEp%eExactF(iFlig Form Fusi$G  H= Hib Jec,Ju!No-ntOcu]Ond Scri!Sec&Sig[Soli&Sp* S%nctSul,TactT_<Ti?Trig)Tui%fU%#Vasi$V_,Vi,Voqu 3Oni^Rad>ReelRi,0O]2Oi!Res<:GuarIll*MbeNv>Rd(Ug U[Velot3Tab#T$UdiU[s<9Ind!N~ Ng]Ue'UissifUrn=Vi=Y|Ye{5Bi]Ge?ntNiorP$Ris&S%-Te{V_i#:Yak7M$oOs^:BelBi=Bo' C  Cto<Gu[I[Is}I% Mbe|Mel#MpeN-'Nga.N,[P(R.'R?Ur>VaboVo*3Ctu!G=G Gu?SsiveTt!V>Xi^Zard3As<B  B!C_-Cor[E.Ev!Gatu!Go,G)M Mi&M$a@Mpi@Neai!NgotOn-|Qui@S>eS,ThiumTi.Ttor=V!'5Gi^Inta(Is*MbricT +U UrdUt!UveY=5B+Ci@Cra%fE'Gub!Is/tM>eNai!NdiR$T,X){:Ch(eGas(G_taGi^Ig!Ill$In%_Ir+Is$Jor Lax Lefi-Lhe'Li-L#t&MmouthNda,Niab#Nqu/tN&|N)lRath$Rb!R~/dRdiRi%?R^'Rr$R&]Scot&SsifT +lT>eTra^Udi!Ussa@UveXim=3Ch/tC$nuDa`#Dec(Di,Du<Il#'L/.Lod+Mb!Moi!Nac N Nh*Ns$.NtorRc!diRi&R#Ssag Su!T=Teo!Tho@T>Ub#3Au]CrobeEt&Gn$Gr L+uLli$Mi^N-N =Nim=Nor Nu&Rac#Roi,Ssi#X&5Bi#D [El#{Ndi=Ni&'Nna+Not$eNst!Ntag[Nu?ntQ)'R-|Rsu!R% Te'TifU~eUf#Ul(Uss$Ut$Uv/t5L%p#Ni%$Ra`#Re[Rmu!Sc#SeumSic+nTa%$T T)l3Ria@R%l#S,eThi^:Ge'PpeRquoisRr Ta%$Ti$Tu!Ufra.U%^Vi!3Bu#{CtarFas&Ga%$Glig Goc>I.Rve{Ttoy Ur$eUtr$Veu3CheCkelTra&Ve|5B#CifCt'[Ir-'I<t&Ma@Mb!{Mm Rma%fTab#Tif>Toi!Urr*Uve|Va&'Vemb!Vi-5A.Anc I!Isib#M oP%=Q)Tri%f:0E*Jec%fLig Sc'S v Stac#T_*T' 0Casi$Cup E/Tob!Troy Tup]Ulai!0E'Or/t1F_}Fic>Fr*0Ive1Se|S`l$2Fac%fIv>0Bra.Ett!0Ct){Du]E!{Iri^1A#A^Er Ini$PortunPrim T Ti^1A.{An.Bi&D$n E`#G/eG)`Ifi-Ne?ntQ)T+0C`]Mo<Satu!0Ar+0Rag/Rs$T`Trag Vra.0A%$1Y@Y.[1O[:Isib#La-Lma!sLo'@Lp Na~eNdaNgol(Niqu N[|NoramaNt=$PayeP>Po,PyrusRadoxeR-l#Res<Rfum R]Ro#Rra(R<m Rtag Ru!Rv_*Ssi$S&^T [lT+n-Tr$V`l$Voi}Y Ysa.3Ig[Int!La.Lic/L#Lou<Lu~eNdu#Netr Nib#NsifN'+Pi&PlumRdrixRfor Rio@Rmu,Rp#xeRs`R&S Ta#TitTr*Up#2Ara$Ob+O^Ot$Ra<Ysi^0AnoCt'=E-Er!Euv!Lo&N-|Pet&Qu Rog)Sc(eSt$Vo,XelZza2AcardAf$dAis*An A^Astr$A&|E' ExusIa.OmbOng U+Uma.2Chet&Es+E&In&Ir>Iss$Iv!Lai!Lic>L#nLyg$eMma@Mp>Nct)lNd  NeyR%^Si%$S<d Stu!Tag Te|Ti$U-Ula(Um$Urp!Uss(Uvo*2A*+A%^Ec+{Edi!EfixeElu@EnomE<n-E&x&Evo*Imi%fIn-Is$Iv Ob#?O-d Odi.Of$dOg!sO+Oje,Olog)O?n Op!Osp eO&g O)s<Ov beU@n-U[|0Y~o<1BlicC $I}LpeLsarNai<Ni%fPit!Rif>Zz#3Rami@:99AsarE!l#Es%$Ietu@It,O%_t:C(eC$,D+{G$d(I@'Is(L_%rLl$.Mas}Pi@Sa.Tis}Vag V(Y$n 3Ac%fAg*Ali}Anim Cevo*Ci,Clam Col,Cru,Cu]Cyc]Dig Dou,Fai!F#xeForm Fra(Fu.G=+nGi$Gla.Gul>I, Je,Jou La%fLev L+fMar^Me@Mi<M$,Mpl*Mu NardNfortNif]N$c Ntr NvoiPl>Por,Pri<P%#Qu(S veS(e{Soud!SpectS,SultatTabl*T_*Ticu#Tomb Trac Uni$Uss*V/~eViv!Vol&Vulsif3Ches<De|E'Gi@Go]Nc Pos,Sib#S^T)lV=V>e5Che{M/-Mp!N-Nd(Se|S>Ta%fTorTu#U.U`#U#|U%[Y|?5B/BisCheEl#G){In Is<|S S%^3Th?:B]Bo,B!Co~eFariGes<Is*La@LiveL$Lu MediNc%$Ngl>Rcas?Rd(eT' Ug!nuUm$U,Uva.V/tV$n 1AlpelAnda#E]atEnarioEpt!HemaI_-Ind O!Ru%nUlp,1An-Cab#Ch Cou C!,Da%fDui!Ig['Jo'Lec%fMa(eMb]M_-M(=Na&'Nsib#N&n-Par Q)n-Re(R.ntR+{Rru!RumRvi-Sa?V*Vra.Xtup#3D =Ec#Eg Ff]G#Gn=L_-LiciumMp#Nc eNist!Ph$RopSmi^Tu 1I 3Ci=C#DiumIg[{LdatLe`Litu@Lub#Mb!M?`Mno]N@N.'N[t&No!Rc>R%rS+T%<Uc+{Udu!Uff#U#v UpapeUr-U%r Uv_*0Ac+{A%=Eci=H eIr=3Ab#A%$ErnumImulusIpu]RictUd+{Upe'Ylis&0Bli?BstratB%lBv_*C-sC!FfixeGg  Ive'Lfa&P bePpl>Rfa-Rica&R?n Rpri<Rs|tRv+Spect3LlabeMbo#Metr+Nap<NtaxeS&?:BacBl>C%#Il]L_tLism/L$n Mbo'Mi}Ngib#PisQu( Rd RifR%[S<TamiToua.UpeU!|X 3Mo(Mpo!lNa`#Nd!Ne'N*Nsi$Rm( R[Rrib#T(eX&2E?Eor+Erap+Orax0BiaE@Mi@Reli!Ro*SsuT/eT!Tub 5Bogg/L /tMa&Ni^N[|P$y?R~eRd!Rna@Rp`#R!ntR<Rt)TemU~ Urna.Us}X(e2Ac%$AficAgi^Ah*A(An~ Ava`Ef#Emp EsorEu`Ia.Ibun=Ico,Ilog+IompheIp]It' Ivi=Omb$eOncOpic=Oupe|2I#LipeMul&N[lRb(eTe'Toy Y|3Mp/Ph$Pi^R/:0Ues^9Ti?Tras$1Ani?If>I$I^Itai!Iv s3AniumBa(Tic/t0A.I[UelU!0I#Op+:Car?Cc(Gab$dG)Ill/tInc!Is<|Lab#Li<Ll$LveMpi!N`#Pe'R>Se{Ss=S&3C&'Det&Get=Hicu#InardLo-Nd!diN  Ng Ni?{Ntou<Rdu!R(Rn*RrouR}RtuSt$T /Tus&X/tX 3AducAn@Ctoi!D/.DeoG[t&G)'La(Lla.Naig!Ol$P eRe?ntRtuo<RusSa.Se'Si$S^{S)lT=Tes<Tico#Tr(eVa-Vipa!5Ca%$Gu I#Is(Itu!La`#Lc/L%g Lu?Ra-R&xT Ulo*Ya.Yel#:G$:3N$:Cht:3B!NithS&9Olog+";
    var accents = "e7693&)U*o&)Ry^)*)W))))#X^))))@@)#Wf)m%)#!))AG)&IIAQIIIBIIHJNAgBIILIDJGo)))HIQIIIIA(IGgJHH(BIIxX#)Ou)@*IAAPIIIJHQJ)&QIQPYI(HYAQC%)!))QHJJ@)#)^f*^AXCJ))$%CP))%&m)u)@e^A#G#))W@!(IKK%!(I%))O@QA))@GG#e))))WHJIWh))my@IIBT^)!)HAYGETHI*))!QnUDG)))nBoKAC*HwyQh))$&)G&)UGO)G)))(BX#v**)%O,e7686)I))@)&)gdMP()))ud)p#L))I^FIHYdWG))D@DFV)QA)o%MyTh%*)Z)%)n(XANc^R)YS";
    var checksum = "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045";
    var wordlist = null;
    var LangFr = class _LangFr extends wordlist_owla_js_1.WordlistOwlA {
      /**
       *  Creates a new instance of the French language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langFr]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("fr", words, accents, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangFr``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangFr();
        }
        return wordlist;
      }
    };
    exports2.LangFr = LangFr;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-ja.js
var require_lang_ja = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-ja.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangJa = void 0;
    var index_js_1 = require_hash();
    var index_js_2 = require_utils();
    var wordlist_js_1 = require_wordlist();
    var data = [
      // 4-kana words
      "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
      // 5-kana words
      "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
      // 6-kana words
      "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
      // 7-kana words
      "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
      // 8-kana words
      "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
      // 9-kana words
      "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
      // 10-kana words
      "IJBEJqXZJ"
    ];
    var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
    var _wordlist = null;
    function hex(word) {
      return (0, index_js_2.hexlify)((0, index_js_2.toUtf8Bytes)(word));
    }
    var KiYoKu = "0xe3818de38284e3818f";
    var KyoKu = "0xe3818de38283e3818f";
    function toString(data2) {
      return (0, index_js_2.toUtf8String)(new Uint8Array(data2));
    }
    function loadWords() {
      if (_wordlist !== null) {
        return _wordlist;
      }
      const wordlist2 = [];
      const transform = {};
      transform[toString([227, 130, 154])] = false;
      transform[toString([227, 130, 153])] = false;
      transform[toString([227, 130, 133])] = toString([227, 130, 134]);
      transform[toString([227, 129, 163])] = toString([227, 129, 164]);
      transform[toString([227, 130, 131])] = toString([227, 130, 132]);
      transform[toString([227, 130, 135])] = toString([227, 130, 136]);
      function normalize(word) {
        let result = "";
        for (let i = 0; i < word.length; i++) {
          let kana = word[i];
          const target = transform[kana];
          if (target === false) {
            continue;
          }
          if (target) {
            kana = target;
          }
          result += kana;
        }
        return result;
      }
      function sortJapanese(a, b) {
        a = normalize(a);
        b = normalize(b);
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      for (let length = 3; length <= 9; length++) {
        const d = data[length - 3];
        for (let offset = 0; offset < d.length; offset += length) {
          const word = [];
          for (let i = 0; i < length; i++) {
            const k = mapping.indexOf(d[offset + i]);
            word.push(227);
            word.push(k & 64 ? 130 : 129);
            word.push((k & 63) + 128);
          }
          wordlist2.push(toString(word));
        }
      }
      wordlist2.sort(sortJapanese);
      if (hex(wordlist2[442]) === KiYoKu && hex(wordlist2[443]) === KyoKu) {
        const tmp = wordlist2[442];
        wordlist2[442] = wordlist2[443];
        wordlist2[443] = tmp;
      }
      const checksum = (0, index_js_1.id)(wordlist2.join("\n") + "\n");
      if (checksum !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
        throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
      }
      _wordlist = wordlist2;
      return wordlist2;
    }
    var wordlist = null;
    var LangJa = class _LangJa extends wordlist_js_1.Wordlist {
      /**
       *  Creates a new instance of the Japanese language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langJa]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("ja");
      }
      getWord(index) {
        const words = loadWords();
        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
        return words[index];
      }
      getWordIndex(word) {
        return loadWords().indexOf(word);
      }
      split(phrase) {
        return phrase.split(/(?:\u3000| )+/g);
      }
      join(words) {
        return words.join("\u3000");
      }
      /**
       *  Returns a singleton instance of a ``LangJa``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangJa();
        }
        return wordlist;
      }
    };
    exports2.LangJa = LangJa;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-ko.js
var require_lang_ko = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-ko.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangKo = void 0;
    var index_js_1 = require_hash();
    var index_js_2 = require_utils();
    var wordlist_js_1 = require_wordlist();
    var data = [
      "OYAa",
      "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
      "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
      "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
      "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
      "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
      "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
      "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
    ];
    var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
    function getHangul(code) {
      if (code >= 40) {
        code = code + 168 - 40;
      } else if (code >= 19) {
        code = code + 97 - 19;
      }
      return (0, index_js_2.toUtf8String)(new Uint8Array([225, (code >> 6) + 132, (code & 63) + 128]));
    }
    var _wordlist = null;
    function loadWords() {
      if (_wordlist != null) {
        return _wordlist;
      }
      const wordlist2 = [];
      data.forEach((data2, length) => {
        length += 4;
        for (let i = 0; i < data2.length; i += length) {
          let word = "";
          for (let j = 0; j < length; j++) {
            word += getHangul(codes.indexOf(data2[i + j]));
          }
          wordlist2.push(word);
        }
      });
      wordlist2.sort();
      const checksum = (0, index_js_1.id)(wordlist2.join("\n") + "\n");
      if (checksum !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
        throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
      }
      _wordlist = wordlist2;
      return wordlist2;
    }
    var wordlist = null;
    var LangKo = class _LangKo extends wordlist_js_1.Wordlist {
      /**
       *  Creates a new instance of the Korean language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langKo]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("ko");
      }
      getWord(index) {
        const words = loadWords();
        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
        return words[index];
      }
      getWordIndex(word) {
        return loadWords().indexOf(word);
      }
      /**
       *  Returns a singleton instance of a ``LangKo``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangKo();
        }
        return wordlist;
      }
    };
    exports2.LangKo = LangKo;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-it.js
var require_lang_it = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-it.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangIt = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words = "0torea noica!iosorolotaleratelanena%oiadoencotivomai t ca%a0A]Bagl'Bin#E.Is(Oli!Rasi_Rog#0Cade!C[$Cus#E <Hil,I@QuaReRil>Roba+U 0Ag'Deb{DomeEgu#Eri!IpeOtt&Ul&1Fabi,Fe|Fis(F-n Oris`O(R~$0AveEn.E_,Ganc'I!It&OnismoR>*Rume Uzzo4AbardaA Bat)Ber#BoBumeCeCol>E|<FaGeb-Ian.IbiIm[ Lag#Leg)Lie_Lo@/Lusi_Me$Oge$Pa}Pest!Ta,=Ter$T%c'T)veUn$Veo*Z&0Alga`Ani+A!=B{Br#EbaEr~E^s+I]Mas(M[daMir&Mon{O!P'Pli&U, 0A}r@Ag-feAlis+Arch?At-CaCel/Co-D&D!aEl*Ge*Gol&Gus I`Neg&Nid#NoNunc'OnimoT%ipoZi1At>Ertu-OdePari!Pe^ Pogg'P)@Pun Ri,1Ab~AchideAgos+Ald~Anc'Atu-AzzoBit)Chiv'D{Eni,G[ Gi<Gu IaMon?NeseRed#RingaRos S[>SoTef%eZil*0Ciu|Col EpsiEtt>Fal I$O/Pir#P)Sagg'SeSolu Sur@TaT[u T%eT-|0Av>EismoOm>O$TesaTiv&Tor$Tr{Tua,0Sil'Str?Tis+To$moTun$0Anz#E!V[i!Vi(Volge!3Io<O ZimoZur):Be,C}$Ci$CoDessaDi/+Gn#I+L]<L@Le=L/+Lza$Mbi$Ndi!RaondaRba)R}R{$RlumeRoc]Sil>S(Tos+Ttu U,VaVosa3C]FfaLg'LvaNdaNe_,Nig$Nzi=ReRli=Ta3Bi+CiDo<Fi@GaLanc?MboNo]*O*goPedePol&Rban.R-S]|Ses S$n$Son.SturiZzar)2An@At+2Ll{Nif>R@S]Tan>T^$Zzo*2Acc'AdipoA`An}Avu-E.l/Eve|EzzaIgl?Il/n.Ind&Oc]*O@Onzi=Ul*U$2Bbo<CaDi$Ffo<IoLboO$R*<R-s}S(/S+:De|Du]La`)L]*LesseLib)LmoLor?MbusaMe-+M%?Mmi$Mo/Mpa,NapaNde/NeNi$No|N^=PacePel*P{*Pogi)Ppe)P-Psu/RapaceR}ssaR@Ris`Rova=R!|R li=Sacc'S}+Ser`SoS(<S.l*Sua,Tas+Te=T-meU Vil*3Dibi,D-+Fa*Leb!Llul&NaNo<N.simoRam~Rc&R RumeRvel*So?SpoTo2E/Ia)Ic}Iede!Ime-I=IrurgoI+r-0AoClismoFr&G$Lind)O|*R}R)siTr>T+di$UffoVet+Vi,2Ass>In~O)2C]Dar@D%eE!n.G$meLl&Lm#Lo!Lpo(L^v#LzaMaMe+M`n@Mo@Mpu.rMu<Nci(Ndur!Nfer`Ngel&NiugeN<s(Nosce!NsumoN^nuoNveg$Per P'<Pp?Pr~poRazzaRda+R%#Rn%eRol/RpoR!@Rs?R.seSm>S+n.Ttu-V#2A.!Avat+E#Ede!Emo(Esci+E+Ice I=,IsiIt>OceO=}Os++Uc?,Us}2Ci!Cu*Gi$Ll#Po/R#!R(!R_Sci$S de:DoI$L`+Meri$Nie/N$(Nz&T#Van^Vve)3Bu|C[n'Ci(Cli$Col*C! D%#Fin{FormeG$Leg&Lfi$Lir'L+M[zaNot#Nt)Pos{Rapa+Riv&RogaScri|Ser Sider'Sume!Tersi_Vo 3Amet)Cemb!Ed)Fe(Ffu(Geri!Gi+,Luv'Nam>N=nziPin P*`Po*Rad&ReRo|RupoSag'Sc! Sf&Sge*Spos S+nzaSu`$ToVa$Vel Vide!Vor#5B*<C[.Ga=,G`LceM#M[~Min&N@*NoRmi!TeT !Vu Zzi=2AgoUi@2Bb'Bit&Ca,NaOmoPl%eRatu):0A$0Ces(CoLissiO$m?0E-I]/I,I r?Uc&2Emon?LiOismoReg'4Abor#Argi!Egan.Enc#E|Ev&F>I}MoSaU(0An#B,`Es(I)O^_Oz'<Pir>U*0Dem>Du)Erg?FasiO.}Tr&Zi`1A^.I*goI(d'O},Pu!0U#!0Ar'BaBo(EdeEmi+Ige!Met>OeOsi_Ran.0Ago$AmeAnimeAudi!CaEmp'Erc{Ib{Ig[.Is.!I OfagoOrt#O(Pan(P!s(S[zaSoTe(Tim&Ton?T)(Ult&0Il>N>Rus]To0ClideoRopa0A(Id[zaIt#Olu Viva:Bbr~Cc[daChi)L]Migl?Na,Nfa-NgoN+s`ReRfal/Ri$(R`]Sc?S (Sul*T%&ToVo*(3Bb!Co/DeG#LpaLt)Mmi=Nde!Nome$Rm[ R)R^,Ssu-S^_T+U@3AbaDuc?FaGur#LoNanzaNest-Ni!O!S},S>Ume2A]<Am[]EboEm`Ori@U[.Uo)2B>Cacc?Co(Der#Gl'La+Lc*!Lgo!Nd[.Net>N?N+=Rb{Rchet+Res+Rm~R='RoR.zzaRz&Sf#S(2A}s(A=Assi$A.l*Eccet+E=+Es]IgoOlli$OndeUga,Ut+2Ci/+Cs?Gg[.Lmi<L_Man.Me|Mo(NeNz'<O]RboRgo<Ro!SoTi,:Bb?$FfeLa.oLli=LoppoMbe)M`Ranz?RboRofa$Rzo<S@|Sol'Str>T Ud'ZeboZzel/3CoLa^=L(Mel*Mm#NeN{!N='No^poRgo2Epar@Iacc'Isa0Al*LdaNep)Oc&Oiel*Or$OveR#Ro<T++Udiz'Ur#Us 2Obu*U^<1Omo0BbaLfM{Mmo<Nf'N=Ver$2Aci,A@Af>AmmoAndeAtt&A_(Az?E}EggeIfo<Ig'InzaOt+Uppo2Adag$A'An Ard&FoId&::0Ern#0O=0Ent>Ill'O*RaR>Roge$2Ie<Na)Nor#4A!Le(Log>Lude!0Bal*Bevu Boc]Bu Ma<Mer(Mol#Pac]Pe PiegoPor P)n+0Al&Arc&At^_Can C[d'Chi$Cisi_Clu(Cont)C)c'CuboDagi<D?Do,Ed{Fat^Fil&Fli|Gagg'Geg$G,seGor@G)s(Nes]O@!Oltr&Ond#Sa$Se|SiemeSonn?Suli=Tas#Te)To=]Tu{Umidi!Vali@VeceV{1Erbo,Not>O.siP~1IdeLandaOn>Rig#Ror&0Ol#O poTer>Titu Tr%e0Al?Er&:::Bb)Birin C}Cer#Cri`Cu=D@veGoMpoNcet+N.r=R@(RgaRingeSt-T[zaTi$TtugaVag=Vo)3Ga,Gge)MboN.zzaNzaO<P!Si_Ss#S T.-,VaVig#3Be)DoEv{L/Matu-Mit&Mpi@Ne&NguaQui@RaR~S}TeTig'V!a5CandaDeG~Mb&Nd-Nge_QuaceR[zoToT.r?5CeCid#Ma}Mi$(NgoPoPpo*SingaS(T :Cab)Cchi=Ce)Cin#Da`G>Gl?G<.G)Iol~LafedeLg-@Lin.(Lsa$L Lumo!NaNc?N@r/Ngi&Nifes N=)Nov-NsardaN^deNubr'PpaR#=Rci!Ret+RmoRsup'Sche-Ssa?S^$Te-s(Tr>/T <Tu)Zur}3And)C}n>Ce=.DesimoDit&GaLassaLisLod?NingeNoN(/Rcur'R[daR*Schi$SeSse!S *Tal*To@T.!3Agol&CaCel'Che,C)boDol*E,Gl'!La$Li.MosaNe-,NiNo!Ri$R^l*Sce/SsivaS Sur&TezzaTig&T-T.n.4Emon>0Del*Dif~Du*Ga$G'LeLos(Nas.)N]Ndi=Ne+r'Ni,No $N(<Nt#Nvi(RaRde!Rs%#St)Tiv#TosegaT V[zaVim[ Zzo5C}CosaFfaGhe|G='La|Li<l*L^p*Mm?N Ove!Ra,SaS]*S~Te_,To:BabboF+Nomet)Rci(R%eRr#Sce!Str&Tu-,Ut~Vigl'3Bu*saC)siGa^_Goz'Mme$Ofi+Re|R_Ssu$Ttu$Ut-,VeV)t>3Cch?NfaTi@5Bi,Ci_DoMeMi=Rd>R`,RvegeseSt-$T&Tiz?Ttur$Vel/5C,oL/Me)O_Tri!Vo/Z?,:Si0Bedi!BligoElis]L'O*So, 0Cas'<Ch'Cid[.Cor!!Cult&RaUl#0Ier$Or&1Fer+Fri!Fusc#0Ge|GiNu$4AndeseFa|I#IvaOg-m`T!0Agg'Bel>B-EgaIss'<0Do(E!IceNi_)O!_,Ta1Er#In'<Pos 1A]*AfoDi<Ecchi$Ef%eFa$Gan>Igi<Izzon.MaMegg'Na^_O*g'R[@Ribi,T[s?T~Za+Zo0A!Cur&MosiPeda,Pi.SaSid&Ta]*Te0I.ReTago$TimoTob!1A,EstI$Ipa)Oc{UnqueVi&3Io:Cche|CeCif>Del/D)<EseGaGi=Lazzi=Les&Lli@LoLudeN@)N<l*O*O=zzoPr~Rabo/Rcel/Re!Rgo*RiRl#Ro/R^!Rv[zaRz?,Ssi_St%}Tac}To*g?TtumeVo<3Cc#Dal&Do=,Gg'Lo(N&Nd%eNi(/Nnu Nomb-Ns&N /PePi+Rbe<R]r(R@n#Rfor&Rgame=R'@Rmes(R$Rp,s(Rsua(Rtug'Rva(S#!Sis+SoS^fe)Ta*T^<Tu/n.Zzo3Ace!An+At^$Cci$CozzaEgaEt-Ffe)G?`Gol'G)LaLife)L*/Lo+Mpan.Ne+N=No*Ogg?OmboRamideRet>Ri.RolisiTo<Zz>2AceboAn&As`A+$E=r'2ChezzaDe)(DismoEs?Ggi&L[+Ligo$Ll%eLmoni.Lpet+L(Lt)=Lve!M%eMo@)N.Po*(Rfi@Ro(Rpo-R!R++SaSi^_Sses(Stul#Tass'Te!2AnzoAssiAt~Eclu(Ed~Efis(Egi#Elie_Eme!E$t&Epar#Es[zaE.s Eval(I`IncipeIv#Ob,`Ocu-Odur!OfumoOge|OlungaOmessaO$meOpos+O)gaO.(OvaUd[.Ug=Ur{0Iche1Bbl>D~Gil#G$LceL{Lsan.Nt&PazzoPil/Ro:99Ad)Al]saAsiE!/O+:C]l D@pp'D~,Dun#Ff~GazzoG'<G$Mar)MingoMoNdag'N l&P#Pi=Pp!(Satu-Schi#S[.Sseg=St!l*TaVvedu 3A,Cepi!Cin Clu+Cond{Cupe)Dd{Dime!Gal#Gist)Go/G!s(Laz'<M&Mo N=Pl~Prime!Put&SaSid[.Spon(S+u)TeTi=Tor~T^f~Voc#3Assun Badi!Bel,B!zzoCar~C]Ceve!C%l#Cor@C!du D>*Dur!Fas&F,s(For`Fug'G&Gett#Ghel*Lass#Lev#Ma<!MbalzoMed'Morch'Nasci+N})NforzoN$_Nom#Nsav{N c]Nunc?Nv[i!Par#Petu Pie$Port&P!saPuli!Sa+Sch'ServaSibi,SoSpe|S )Sult#S_l Tar@Teg$Tm>T)_Un'<VaVer(Vinci+Vol Zo`5BaBot>Bus Cc?CoDagg'De!D{!G{Ll'Mant>Mpe!Nz'Sol&SpoTan.Ton@Tu/Vesc'5BizzoBr~GaLli$Mi<Mo)(O*PeSs&St>:B#Bbi&Bot#Go`Las(Ldatu-Lgem`Liv&Lmo<Lo<Lt&Lu L_Pe!Pi@Por{Race$R}smoR S((Telli.Ti-Tol*Tur$Va=V'Zi#0Adigl'AlzoAnc#Ar-At.!Av&End&Irci&Locc#Occi#Rin&Ruffo<Uff&0Ab)(Ad[zaA/Ambi&Anda*Apo/Ar(A.n&Av#El En>Ett)HedaHie=IarpaI[zaInde!IppoI)ppoI_*Ler&Odel/Olp{Ompar Onfor Opri!Or+Os(<OzzeseRibaRoll&Ru^n'Uder?Ul !Uo/U)Us&0Ebit&Ogan&0C}tu-Con@Da$Gg'/G=l#G!g#Gu{Lci#Let^_L/Lvagg'Mafo)Mbr&MeMin#Mp!N(N^!Pol Qu[zaRa+Rb#Re$R'Rp[.R-gl'Rvi!S^=To/T^`=0Ace*Ald&Am#Arzo(At%#E-IdaIl#IngeOc#Oder&OgoOl^!Orz#Ra|Rutt#Ugg{Um&U(0Abel*Arb#Onfi&Orb'Rass#Uar@1Bi*C]meEr-G/G$!L[z'L/baMbo*Mpat>Mul#Nfon?Ngo*Nist)NoN.siNu(idePar'S`S ,Tu#2It+Ogatu-Ove$0Arr{Emor#En^ E-l@IlzoOnt&Ott#Uss#0Elli!Erv#O@0BbalzoBr'C]r(C?,Da,Ffi|G$Ld#L[<Li@L/zzoLoLubi,Lv[.Mat>M`NdaNe|Nnife)Pi!Ppe(P-Rge!Rpas(Rri(R(R.gg'R_l#Spi)S+T^,0AdaAl/Arge!A /Av[ Azzo/EcieEdi!Eg<!E/tu-E-nzaEs(!Ett-,Ezz#IaIgo*(Ill#I$(I-,L[di@Or^_O(RangaRec&Ron#RuzzoUn^$0Uil*0Ad%&O l#1Abi,Ac]AffaAgn&Amp#Ant'Arnu Ase-Atu E*EppaErzoI,|I`IrpeIva,Izzo(On#Or>RappoReg#Ridu*Rozz&Ru|Ucc&UfoUp[@0B[t)C](Do!Gger{GoL+$On&PerboPpor Rgel#R)g#Ssur)Tu-0Ag&EdeseEgl'El&Enu Ez?IluppoIs+Izze-Ol+Uot&:Bac]Bul#Cci&Citur$LeLis`$Mpo<Nni$RaRdi_Rg#RiffaRp&R+rugaS Tt>Ver=Vo/+Zza3CaCn>Lefo$Me-r'MpoMu N@<Ne)Ns'<N+]*O!`RmeR-zzoRze|SiSser#St#T)T ?3F&Gel/Mb)N P>Pog-foRagg'RoTan'To*Tuban.Z'Zzo<5Cc&L,r&L Mbo/MoNfoNsil/Paz'Po*g?PpaRbaRn&R)<R -S}$Ssi!S+tu-Ta$2Aboc]AcheaAfi/Aged?Alc'Amon Ans{Apa$Ar!As*]Att#AveEcc?Emol'Espo*Ibu Iche]Ifogl'Il*InceaIoIs.zzaItur#Ivel/OmbaO$OppoO|/Ov&Ucc#2Batu-Ff#Lipa$Mul Nis?Rb&Rchi$TaTe/:0Ic#0Cel*Ci(!0I!I^_1FaF%'0Ua,4IsseTim#0A$I,Orismo0Ci<|Ge!Ghe!seI]r$If%#I($I+r'Te0Vo0Upa1Aga$G[zaLo0AnzaA C{Ig$*U-'0Ensi,IlizzoOp?:Can.Ccin#Gabon@Gli#LangaLgoL>L,t+Lo)(Lut&L_/Mpa+Ng&N{(NoN+gg'Nve-Po!Ra$Rc#R?n.S}3Det+DovaDu Ge+,I]*Lc)Li=Llu LoceN#Ndemm?N RaceRba,Rgog=Rif~RoRru}Rt~,Sc~Ssil*S+,Te-$Tri=Tus 3Andan.B-n.C[daChingoCi=nzaDim&Gil?G< Go!LeL/$MiniNc{!O/Pe-Rgo/Ro*goRu,n S](S'<SpoSsu Su-TaTel*T^`VandaVi@Zi&5CeGaLa^,Le!LpeRagi<5L}$::::Mpog=N=Pp#T.-Vor-3Fi)Lan.LoNze)Rbi$3Be|N]R]<T 5L/T>5Cche)Fo*LuPpa";
    var checksum = "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620";
    var wordlist = null;
    var LangIt = class _LangIt extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the Italian language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langIt]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("it", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangIt``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangIt();
        }
        return wordlist;
      }
    };
    exports2.LangIt = LangIt;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-pt.js
var require_lang_pt = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-pt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangPt = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words = "0arad!ototealirertainrasoent hoandoaR#riareha!aroele'oronul0Aca%AixoAl A%rDuz'El]Er$IsmoO$ R<g(Revi Rig Rup$S*$Solu$Sur=Ut[0Ab#Alm Amp Anh A,Ei.El( En ErvoEss E$naHa.IdezImaI}#Irr Lam LiveOlhidaOmod Opl Ord Um~ Us?0Ap.EgaEnt_Ep$Equ Er-%EsivoEusI<%ItivoJetivoJun$M' Or Qu''UboV(,Vog#0R}ave0As.Er'EtivoIn?Iv` Li$Lu-%R}.0Ach Arr As&/Enci Iliz Io)It#O+R! Res%Rup U d Ul]2O`h Ud Us.1AmedaArmeAstr Av<caB(gueB*oCat+De@EcrimEgr@Er.FaceF*e%GumHeioI Ica%I- Inh Ivi Mof^Oc Pis%T( TitudeUc* Ug UnoUsivoVo0Aci A=rA[loAss BasBi-%EixaEniz I=Is$,Iz!eOl?On$ O_,Ost+P  Pli Pola0Ag+maAlis Arqu@A$m@DaimeElExoG~ Im JoOm&@Ot#Sio,T(i|Uid!eUnci Zol1Ag?Alp Anh#EgoEli=Ert^Es Eti%I$Lau,Lic^OioOn.Os)R-dizRov 0Uec(0AmeAn]A+C^D-%E@Ej Eni$Es)Gilo,GolaMaQuivoRai&Reba%Risc Rob>um S-&T(i&TigoVo[=0F&.Il#P' S?S* So&/Sun$Tr&0Ac#Adu+Al/A[f E End(Er_EuIng'Ir?IvoOl{oRac Revi=RizU&Um0Di$rM-.R>o+TismoT|@Tu 0Ali An%Ar@Ent&Es,I?Is Ul,1Ila1Ar E=Ei%Ulejo:B BosaC&]uCh `C@GagemI<oIl I}e)Ir_Ixis)J~ Le@LizaLsaN&Nd{aN/N'Nque%Ra$Rb#R}es>+c>~/Se#S)n%Ta)Te=rTidaTomTuc Unil]3B(IjoIr^IsebolLd!eLezaLgaLisc Ndi$Ng&aNz(RimbauRl*d>_Sou_XigaZ(_3CoCu=En&Foc&Furc G|naLhe%Mest[Mo$rOlog@OmboOsf(aPol Rr-$Scoi$Sne$SpoSsex$TolaZ _2Ind#OcoOque 2A$BagemC#CejoChec]Ico.L^LetimL]LoMb{oNdeNecoNi)Rb~h>d>e&R+c]V*oXe?2AncoAsaAvezaEuIgaIl/Inc OaOchu+Onze O$Uxo2C]DismoF LeRacoScaS$Z*a:B<aB`oBideBoBri$CauCet^C/r_CiqueDast_De#Fez&IaqueIp'aIxo%J#JuLafrioLc~ Ld{aLibr Lm<%Lo)M^Mbis)MisaMomilaMp<]Mufl Navi&Nc` Ne)NguruN/$Nive%NoaNs#N.Nu=Pac/P`aP* Po.Pric/Pt?PuzRacolRb}oRde&Rec>imb Rn{oRpe%R['>)zRv&/SacoScaSeb[S%loS~oT a)Tiv UleUs?U%l V&oV(na3BolaDil]G}]Lebr L~ Nou+N,N%ioRc Rr#R%'oRvejaTimV^2Aco)Al{aAm#Ap^ArmeAticeAveEfeEg^E'oEqueIco%If[In`oOc&/Ov(UmboU.Uva0CatrizCl}eD!eD['aEn%G<aM-$N$Nz><d>cui$Rurg@T 2A[zaE_Ic OneUbe2A=Ag'Ba@B($rBr C^El/Ent_E,Gum`oIb'IfaIo%L L{aLh(Lid'Lme@L}oLunaM<=Mb* M-.MitivaMov(MplexoMumNc]N=rNec.Nfu,Ng` Nhec(Njug Nsum'Nt+$Nvi%Op( P{oPi?PoQue%lRagemRdi&Rne)R}h>p|&R[ioR%joRuj>voSs-oS%laT}e%U_UveVilZ*]2A%+AvoEcheE=rEmeErEspoI^Im*&Io~oIseItic Os)UaUz{o2B<oEcaId#JoLat+Lm* Lp Ltu+Mpr'Nh#Pi=RativoRr&Rs R$Sp'S% T`o:MascoT 3Ba%rBi.BocheB~h C&queCim&CliveCo%C[.D&Dic#Duz'FesaFum G`oG+uGus.It#Ix La$rLeg#L*e L}gaM<daMit'Moli=Ntis)P-#Pil PoisP[ssaPur Riv>+m SafioSbo.Sc<,S-/Sfi#Sgas%Sigu&SlizeSmam SovaSpesaS)queSvi T&h T-$rT} Tri$UsaV(Vi=Vot#Z-a3Ag+maAle$Da)Fu,Gi.Lat#Lu-%M*u'Nast@Nh{oOceseRe$Sc[)Sf ceSp oSque%Ssip S)n%T?UrnoV(,Vi,rV~g Z(5Br?L|i=M?M*#NativoNz`>m-%Rs&SagemUr#U$r2EnagemIbleOg @2El EndeE$PloQues><%Vi=,:1Lod'O Olog@0Ific It&Uc#1Ei$Etiv 3E.1Ab| Eg(Ei$rEncoEv?Im* Ogi 0B goBol#Br~/Buti=EndaErg'Is,rPat@P-/P*#Polg P[goPurr Ul?0CaixeC-#Ch-%C}t_Deus Doss Faix Fei%FimGaj#G-/Glob Gom#G+x Gu@Jo La.Qu<$Raiz Rol#Rug SaioSe^S*oSop#T<$Te#Tid!eT|.Tr^T~/V(g Vi#Volv(XameX($Xof[Xu$1Id(me0Uip 0E$Gui=Ra)VaVil]0B<j B`$CamaColaCri)Cu)F*geFol F[g Fum#GrimaM&%P<$P`/PigaP}jaP[i)Pum Qu(daTacaT{aTic Tof#T[laTu=Vazi 0AnolIque)0F|i>opeu0Acu Ap| AsivoEntu&Id-%Olu'1Ag(oAl Am* A$Aus$Ces,Ci.Clam Ecu.EmploIb'Ig-%On( P<d'P`'P' Pl< Pos$P[s,P~s T(noT*$T+$:Bric B~o,Ce)Ci&DaDigaIxaL L)Mili Nd<goNf +N$cheRd#R`oR*h>of>p>tu+T@T|V|i)X*aZ-da3Ch#Ijo^I+n%L*oM**oNdaNoR>i#RrugemRv(S%j T&Ud&3ApoB_seC Ch{oGur#L{aL/LmeLtr RmezaSg^Ssu+TaV`aX?Xo2AcidezAm*goAn`aEch^O+Utu Uxo2C&C*/Foc GoGue%IceLg#Lhe$Rj Rmig>noR%ScoSsa2Aga)AldaAngoAscoA%rnoE'aEn%E.IezaI,Itu+On]Ustr U%'a2G'L<oLigemNd NgoNilR?Rio,Tebol:B i$B*e%DoIa$IolaIvo)LegaL/L*]Loc]Nh RagemRfoRg&oRimpoRoup>+faSodu$S$TaTil/Ve)Z`a3L#Le@LoM^M(Mi=N(o,NgivaNi&NomaN_Ologi>?Rm* S,S$r3Nas)Nc<aNg#Raf>*o2Aci&IcoseOb&Orio,2ElaIabaLfeLpe Rdu+Rje)R_S$,T{aV(n 2AcejoAdu&Afi%Al]AmpoAn^Atui$Ave$AxaEgoElh EveIloIs&/I.@Os,O%scoUd#Unhi=U)2AcheA+niAx*imEr[ I Inc/Is#LaLo,Ru:Bi.Rm}@S%V(3C.eRd Res@Si.3A$B(n D+.EnaNoPismoPnosePo%ca5JeLofo%MemNes$Nr#Rm}&Sped 5M|#:Te2E@O,2N|#RejaU<a4E,HaUdi=Um* Ustr 0AgemEd@$En,ErsivoIn-%It?Ort&Pac$Ped'Pl<%P|Pr-saPuneUniz 0Al?Ap$AtivoC-,Ch Cid'Clu'Col|Deci,D'e$Du$rEficazEr-%F<tilFes.F*i$Flam F|m&F+$rG('Ibi=Ici&ImigoJe.Oc-%O=_Ov?OxQuie$Scri$Se$Sist'Spe$rSt& S~$Tac$Tegr&Tim Toc#TrigaVa,rV(noVic$Voc 0Gur%2Ani<oOniz Re&Rit#0CaEn$Ol#Qu{o0Ali<o:N{oNg^N)R ac>dimR_SmimToV&iZida3Jum9An*]Elh^G?I>n&Rr Vem5BaDeuDocaIzLg?L/R#Ris)RoS)::B edaB|&C[C)n%Dril/G )GoaJeMb(M-.M* MpejoNchePid P,R<j>{>gu+S<]St_T(&Ti=V<daVou+Vr?X<%Z(3Ald!eB[G#G-d Gis)IgoIlo Itu+Mb[%MeNh?Ntil]OaSmaS%TivoT['oV VezaVi.3B(&Bi=D( G G{oMi.Mo{oMp?NdaNe N]gemQuidezS)gemSu+T|&V_XaX{a5C?Cu$rJis)MboNaNgeNt+RdeT#T(@Ucu+UsaUv 5ArCidezC_Ne)St[T?Va:CacoCe%Ch#CioD{aDr*]Gna)G[zaI|IsL<d_L]Lo%LucoMiloMo{oMu%N^Nc]Nda$NequimN/,Niv`aNobr NsaN%rNuse Pe#Qu* Rc?Resi>fimRgemR*/Rmi)Ro$RquiseR[coR%loRujoSco%Sm|+SsagemStig Tag&T(noT*&Tu.Xil 3D&]DidaDusaGaf}eIgaL<c@L/rMb_M|i&N*oNosNsagemNt&Rec(Rg~/S^Scl SmoSqui)St[T!eTeo_T+gemX(Xic<o3C_G&]Gr Lag[L- Lh M#N( N/caNist_N|@OloR<%RtiloStur 5Cid!eD(noD~ EdaErIn/I)Ldu+LezaL/L*e%LuscoN)n]Quec><goRcegoR=moR-aSaicoSque%S.daT`TimToTriz5DaI$La)Lh(L.Ndi&Ni=R&h>c/Sc~ SeuSic&:Ci}&D?JaMo_R*>r#Sc(TivaTu[zaV&]Veg Vio3Bl*aB~o,GativaGoci Gri$Rvo,TaUr&VascaVo{o3N N/TidezV` 5B[zaI%IvaMe M*&Rdes%R% T Tici TurnoV`oVil/Vo5Bl#DezM(&Pci&Tr'Vem:0Cec#Edec(JetivoRig#Scu_S%t+T(Tur 0Id-%Io,Orr(Ulis)Up#2Eg<%EnsivaEr-daIc*aUsc#0Iva4Ar@Eo,H Iv{a0B_Ele%Is,It'0D~#E_,Tem1Ci}&Er?On-%OrtunoOs$1ArBi.DemD*&F<a$GasmoG~/I-t&IgemIun=LaTo=xoV&/0Cil S^SoT-.0Imismo0S!@T}oTub_Vi=0El]Ul 1Id Ig- :Ca$Ci-%Co%Ctu D @Dr*/G GodeIn`Ir IsagemLav+Lest+Lhe)Li$Lm^Lpi.Nc^N`aNfle$NquecaN)n&PagaioP`^P'oRaf*>ci&Rd&RedeRtidaSmoSs#S%lTam T-%T* T_noUl^Us 3C~i D& Dest[D@t+D+G^I$r&IxeLeLic<oNcaNdur N{aN]scoNs?N%Rceb(Rfei$Rgun)Ri$Rmit'Rn>plexoRsi<>%nceRucaSc#SquisaS,aTisc 3AdaC#Ed!eGm-$Last+Lh#Lo.M-)Nc`NguimN]No%N.On{oPocaQue%R<h>esRue)Sc S$laT<gaVe%2An)Aque)At*aEbeuUmagemUvi&1Eu0DaE'aEtisaLeg^Lici Lu-%Lvil/M MbaNd( N.@P~o,R)Ssu'St&TeUp U,Vo 2A@Anc]A$AxeEceEd?Efei$Emi Ens Ep  Esil]E%x$Ev-'Ez Ima)IncesaIsmaIv#Oces,Odu$Ofe)Oibi=Oje$Ome%rOpag OsaO%$rOv?2Blic DimL Lm} Ls{aNh&N'PiloRezaX?:99Ad+Ant@Ar$AseEbr EdaEijoEn%Eri=Im}oInaIosque:B<^BiscoCh Ci} Di&I In]IoIvaJ^L#M&Ng(Nhu+P!u+P`PidezPosaQue%Rid!eS<%Scun/Sg Sp?S%'aSur Taz<aTo{a3AlezaAnim Av(Baix B`deBol C#C-%CheioCiboC|d Cru.Cu DeDim'D}daDuzidaEnvioF* Flet'Fog F[scoFugi G&@GimeG+In#I$rJei.LativoM?M-=M|,Nov#P oP`'Ple$Pol/P[saPudi Qu((S-]Sfri Sga.Sid'Solv(Spei$SsacaS)n%Sum'T&/T(T' Tom^T+.V` Vi,rVol)3Ac/CaGidezGo_,M NgueS^ScoS}/5B&oChe=D^DeioDov@E=rLe)M<oNc S#S{aS$TaT{oT*aT~ UcoUpaXo5B_Gi=Go,IvoMoPest[S,:B|Ci ColaCud'DioF'aGaGr^Ib_L^L{oLg#LivaLpic Lsic]L.Lv?Mb Mu+iN Nf}aNgueNid!ePa$Rd>g-$Rje)Tur Ud!eXof}eZ}&3C C~ DaD-$Di#Do,Du$rGm-$G[=Gun=IvaLe$LvagemM<&M-%N?N/rNsu&Nt#P #Rei>*g>+RvoTemb_T|3GiloLhue)Lic}eMetr@Mpat@M~ N&Nc(oNg~ NopseN$ni>-eRiTu#5B(<oB+C|_G_JaLdaLetr L%'oMbrioNa)Nd Neg Nh?NoP+noQue%Rr'R%ioSsegoTaqueT(r V#Z*/5Aviz BidaBm(,B,loBt+'Ca)Ces,CoDes%FixoG?G('Jei$Lfa$M'OrP(i|Plic Pos$Prim'Rd*>fis)Rp[s>[&Rt'Sp'oS%n$:B`aBle%Bu^C/G `aLh(LoLvezM</Mb|imMpaNg-%N$P Pioc>dioRef>j>+xaTuagemUr*oXativoXis)3Atr&C(Ci=Cl#Dio,IaIm Lef}eLh#Mp(oN-%N,rN.Rm&RnoRr-oSeSou+St#ToXtu+Xugo3A+G`aJoloMbr MidezNgi=N%'oRagemT~ 5Al]C]L( LiceM^Mil/N`Ntu+Pe%R>ci=RneioRqueRr!>$S.UcaUp{aX*a2Ab&/Acej Adu$rAfeg Aje$AmaAnc ApoAs{oAt?Av E*oEm(Epid EvoIagemIboIcicloId-%Ilog@Ind!eIploItur Iunf&Oc Ombe)OvaUnfoUque2B~ C<oDoLipaPiRboRm>quesaT` T|i&:7V 3Bigo0HaId!eIf|me3Olog@SoTigaUbu0A=InaUfru':C*aDi G o,I=,LaL-%Lid!eLo[sN)gemQu{oR<d>e)Rr(Sc~ Sil]S,u+Z Zio3A=D Ge.Ic~ L{oLhiceLu=Nce=rNdav&N( Nt[Rb&Rd!eRe?Rg}h>m`/RnizRs R%n%SpaSti=T|i&3Adu$AgemAj Atu+Br?D{aDr @ElaGaG-%Gi G| L ejoNcoNhe)NilOle)R!>tudeSi.S$Tr&V{oZ*/5A=rArG&L<%LeibolL)gemLumo,Nt!e5L$Vuz`a::D[zRope3QueRe.Rife3Ng ::Ng#Rp 3BuL?9Mb Olog@5Mbi=";
    var checksum = "0x2219000926df7b50d8aa0a3d495826b988287df4657fbd100e6fe596c8f737ac";
    var wordlist = null;
    var LangPt = class _LangPt extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the Portuguese language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langPt]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("pt", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangPt``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangPt();
        }
        return wordlist;
      }
    };
    exports2.LangPt = LangPt;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-zh.js
var require_lang_zh = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-zh.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LangZh = void 0;
    var index_js_1 = require_hash();
    var index_js_2 = require_utils();
    var wordlist_js_1 = require_wordlist();
    var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
    var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
    var _wordlist = {
      zh_cn: null,
      zh_tw: null
    };
    var Checks = {
      zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
      zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
    };
    var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
    function loadWords(locale) {
      if (_wordlist[locale] != null) {
        return _wordlist[locale];
      }
      const wordlist = [];
      let deltaOffset = 0;
      for (let i = 0; i < 2048; i++) {
        const s = style.indexOf(data[i * 3]);
        const bytes = [
          228 + (s >> 2),
          128 + codes.indexOf(data[i * 3 + 1]),
          128 + codes.indexOf(data[i * 3 + 2])
        ];
        if (locale === "zh_tw") {
          const common = s % 4;
          for (let i2 = common; i2 < 3; i2++) {
            bytes[i2] = codes.indexOf(deltaData[deltaOffset++]) + (i2 == 0 ? 228 : 128);
          }
        }
        wordlist.push((0, index_js_2.toUtf8String)(new Uint8Array(bytes)));
      }
      const checksum = (0, index_js_1.id)(wordlist.join("\n") + "\n");
      if (checksum !== Checks[locale]) {
        throw new Error(`BIP39 Wordlist for ${locale} (Chinese) FAILED`);
      }
      _wordlist[locale] = wordlist;
      return wordlist;
    }
    var wordlists = {};
    var LangZh = class _LangZh extends wordlist_js_1.Wordlist {
      /**
       *  Creates a new instance of the Chinese language Wordlist for
       *  the %%dialect%%, either ``"cn"`` or ``"tw"`` for simplified
       *  or traditional, respectively.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langZhCn]] and [[langZhTw]] should suffice.
       *
       *  @_ignore:
       */
      constructor(dialect) {
        super("zh_" + dialect);
      }
      getWord(index) {
        const words = loadWords(this.locale);
        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
        return words[index];
      }
      getWordIndex(word) {
        return loadWords(this.locale).indexOf(word);
      }
      split(phrase) {
        phrase = phrase.replace(/(?:\u3000| )+/g, "");
        return phrase.split("");
      }
      /**
       *  Returns a singleton instance of a ``LangZh`` for %%dialect%%,
       *  creating it if this is the first time being called.
       *
       *  Use the %%dialect%% ``"cn"`` or ``"tw"`` for simplified or
       *  traditional, respectively.
       */
      static wordlist(dialect) {
        if (wordlists[dialect] == null) {
          wordlists[dialect] = new _LangZh(dialect);
        }
        return wordlists[dialect];
      }
    };
    exports2.LangZh = LangZh;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlists.js
var require_wordlists = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wordlists = void 0;
    var lang_cz_js_1 = require_lang_cz();
    var lang_en_js_1 = require_lang_en();
    var lang_es_js_1 = require_lang_es();
    var lang_fr_js_1 = require_lang_fr();
    var lang_ja_js_1 = require_lang_ja();
    var lang_ko_js_1 = require_lang_ko();
    var lang_it_js_1 = require_lang_it();
    var lang_pt_js_1 = require_lang_pt();
    var lang_zh_js_1 = require_lang_zh();
    exports2.wordlists = {
      cz: lang_cz_js_1.LangCz.wordlist(),
      en: lang_en_js_1.LangEn.wordlist(),
      es: lang_es_js_1.LangEs.wordlist(),
      fr: lang_fr_js_1.LangFr.wordlist(),
      it: lang_it_js_1.LangIt.wordlist(),
      pt: lang_pt_js_1.LangPt.wordlist(),
      ja: lang_ja_js_1.LangJa.wordlist(),
      ko: lang_ko_js_1.LangKo.wordlist(),
      zh_cn: lang_zh_js_1.LangZh.wordlist("cn"),
      zh_tw: lang_zh_js_1.LangZh.wordlist("tw")
    };
  }
});

// node_modules/ethers/lib.commonjs/wordlists/index.js
var require_wordlists2 = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wordlists = exports2.WordlistOwlA = exports2.WordlistOwl = exports2.LangEn = exports2.Wordlist = void 0;
    var wordlist_js_1 = require_wordlist();
    Object.defineProperty(exports2, "Wordlist", { enumerable: true, get: function() {
      return wordlist_js_1.Wordlist;
    } });
    var lang_en_js_1 = require_lang_en();
    Object.defineProperty(exports2, "LangEn", { enumerable: true, get: function() {
      return lang_en_js_1.LangEn;
    } });
    var wordlist_owl_js_1 = require_wordlist_owl();
    Object.defineProperty(exports2, "WordlistOwl", { enumerable: true, get: function() {
      return wordlist_owl_js_1.WordlistOwl;
    } });
    var wordlist_owla_js_1 = require_wordlist_owla();
    Object.defineProperty(exports2, "WordlistOwlA", { enumerable: true, get: function() {
      return wordlist_owla_js_1.WordlistOwlA;
    } });
    var wordlists_js_1 = require_wordlists();
    Object.defineProperty(exports2, "wordlists", { enumerable: true, get: function() {
      return wordlists_js_1.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/ethers.js
var require_ethers = __commonJS({
  "node_modules/ethers/lib.commonjs/ethers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = exports2.keccak256 = exports2.randomBytes = exports2.computeHmac = exports2.UndecodedEventLog = exports2.EventLog = exports2.ContractUnknownEventPayload = exports2.ContractTransactionResponse = exports2.ContractTransactionReceipt = exports2.ContractEventPayload = exports2.ContractFactory = exports2.Contract = exports2.BaseContract = exports2.MessagePrefix = exports2.EtherSymbol = exports2.ZeroHash = exports2.N = exports2.MaxInt256 = exports2.MinInt256 = exports2.MaxUint256 = exports2.WeiPerEther = exports2.ZeroAddress = exports2.resolveAddress = exports2.isAddress = exports2.isAddressable = exports2.getCreate2Address = exports2.getCreateAddress = exports2.getIcapAddress = exports2.getAddress = exports2.Typed = exports2.TransactionDescription = exports2.Result = exports2.LogDescription = exports2.Interface = exports2.Indexed = exports2.ErrorDescription = exports2.checkResultErrors = exports2.StructFragment = exports2.ParamType = exports2.NamedFragment = exports2.FunctionFragment = exports2.FallbackFragment = exports2.Fragment = exports2.EventFragment = exports2.ErrorFragment = exports2.ConstructorFragment = exports2.AbiCoder = exports2.encodeBytes32String = exports2.decodeBytes32String = exports2.version = void 0;
    exports2.EnsPlugin = exports2.Network = exports2.EnsResolver = exports2.WebSocketProvider = exports2.SocketProvider = exports2.IpcSocketProvider = exports2.QuickNodeProvider = exports2.PocketProvider = exports2.InfuraWebSocketProvider = exports2.InfuraProvider = exports2.EtherscanProvider = exports2.CloudflareProvider = exports2.ChainstackProvider = exports2.AnkrProvider = exports2.AlchemyProvider = exports2.BrowserProvider = exports2.JsonRpcSigner = exports2.JsonRpcProvider = exports2.JsonRpcApiProvider = exports2.FallbackProvider = exports2.AbstractProvider = exports2.VoidSigner = exports2.NonceManager = exports2.AbstractSigner = exports2.TransactionResponse = exports2.TransactionReceipt = exports2.Log = exports2.FeeData = exports2.Block = exports2.getDefaultProvider = exports2.verifyTypedData = exports2.TypedDataEncoder = exports2.solidityPackedSha256 = exports2.solidityPackedKeccak256 = exports2.solidityPacked = exports2.verifyMessage = exports2.hashMessage = exports2.dnsEncode = exports2.namehash = exports2.isValidName = exports2.ensNormalize = exports2.id = exports2.SigningKey = exports2.Signature = exports2.lock = exports2.scryptSync = exports2.scrypt = exports2.pbkdf2 = exports2.sha512 = exports2.sha256 = void 0;
    exports2.getUint = exports2.getNumber = exports2.getBigInt = exports2.FixedNumber = exports2.FetchCancelSignal = exports2.FetchResponse = exports2.FetchRequest = exports2.EventPayload = exports2.isError = exports2.isCallException = exports2.makeError = exports2.assertPrivate = exports2.assertNormalize = exports2.assertArgumentCount = exports2.assertArgument = exports2.assert = exports2.resolveProperties = exports2.defineProperties = exports2.zeroPadValue = exports2.zeroPadBytes = exports2.stripZerosLeft = exports2.isBytesLike = exports2.isHexString = exports2.hexlify = exports2.getBytesCopy = exports2.getBytes = exports2.dataSlice = exports2.dataLength = exports2.concat = exports2.encodeBase64 = exports2.decodeBase64 = exports2.encodeBase58 = exports2.decodeBase58 = exports2.Transaction = exports2.recoverAddress = exports2.computeAddress = exports2.accessListify = exports2.showThrottleMessage = exports2.copyRequest = exports2.UnmanagedSubscriber = exports2.SocketSubscriber = exports2.SocketPendingSubscriber = exports2.SocketEventSubscriber = exports2.SocketBlockSubscriber = exports2.MulticoinProviderPlugin = exports2.NetworkPlugin = exports2.GasCostPlugin = exports2.FetchUrlFeeDataNetworkPlugin = exports2.FeeDataNetworkPlugin = exports2.EtherscanPlugin = void 0;
    exports2.wordlists = exports2.WordlistOwlA = exports2.WordlistOwl = exports2.LangEn = exports2.Wordlist = exports2.encryptKeystoreJsonSync = exports2.encryptKeystoreJson = exports2.decryptKeystoreJson = exports2.decryptKeystoreJsonSync = exports2.decryptCrowdsaleJson = exports2.isKeystoreJson = exports2.isCrowdsaleJson = exports2.getIndexedAccountPath = exports2.getAccountPath = exports2.defaultPath = exports2.Wallet = exports2.HDNodeVoidWallet = exports2.HDNodeWallet = exports2.BaseWallet = exports2.Mnemonic = exports2.uuidV4 = exports2.encodeRlp = exports2.decodeRlp = exports2.Utf8ErrorFuncs = exports2.toUtf8String = exports2.toUtf8CodePoints = exports2.toUtf8Bytes = exports2.parseUnits = exports2.formatUnits = exports2.parseEther = exports2.formatEther = exports2.mask = exports2.toTwos = exports2.fromTwos = exports2.toQuantity = exports2.toNumber = exports2.toBeHex = exports2.toBigInt = exports2.toBeArray = void 0;
    var _version_js_1 = require_version();
    Object.defineProperty(exports2, "version", { enumerable: true, get: function() {
      return _version_js_1.version;
    } });
    var index_js_1 = require_abi();
    Object.defineProperty(exports2, "decodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports2, "encodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.encodeBytes32String;
    } });
    Object.defineProperty(exports2, "AbiCoder", { enumerable: true, get: function() {
      return index_js_1.AbiCoder;
    } });
    Object.defineProperty(exports2, "ConstructorFragment", { enumerable: true, get: function() {
      return index_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports2, "ErrorFragment", { enumerable: true, get: function() {
      return index_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports2, "EventFragment", { enumerable: true, get: function() {
      return index_js_1.EventFragment;
    } });
    Object.defineProperty(exports2, "Fragment", { enumerable: true, get: function() {
      return index_js_1.Fragment;
    } });
    Object.defineProperty(exports2, "FallbackFragment", { enumerable: true, get: function() {
      return index_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports2, "FunctionFragment", { enumerable: true, get: function() {
      return index_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports2, "NamedFragment", { enumerable: true, get: function() {
      return index_js_1.NamedFragment;
    } });
    Object.defineProperty(exports2, "ParamType", { enumerable: true, get: function() {
      return index_js_1.ParamType;
    } });
    Object.defineProperty(exports2, "StructFragment", { enumerable: true, get: function() {
      return index_js_1.StructFragment;
    } });
    Object.defineProperty(exports2, "checkResultErrors", { enumerable: true, get: function() {
      return index_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports2, "ErrorDescription", { enumerable: true, get: function() {
      return index_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports2, "Indexed", { enumerable: true, get: function() {
      return index_js_1.Indexed;
    } });
    Object.defineProperty(exports2, "Interface", { enumerable: true, get: function() {
      return index_js_1.Interface;
    } });
    Object.defineProperty(exports2, "LogDescription", { enumerable: true, get: function() {
      return index_js_1.LogDescription;
    } });
    Object.defineProperty(exports2, "Result", { enumerable: true, get: function() {
      return index_js_1.Result;
    } });
    Object.defineProperty(exports2, "TransactionDescription", { enumerable: true, get: function() {
      return index_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports2, "Typed", { enumerable: true, get: function() {
      return index_js_1.Typed;
    } });
    var index_js_2 = require_address2();
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return index_js_2.getAddress;
    } });
    Object.defineProperty(exports2, "getIcapAddress", { enumerable: true, get: function() {
      return index_js_2.getIcapAddress;
    } });
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return index_js_2.getCreateAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return index_js_2.getCreate2Address;
    } });
    Object.defineProperty(exports2, "isAddressable", { enumerable: true, get: function() {
      return index_js_2.isAddressable;
    } });
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return index_js_2.isAddress;
    } });
    Object.defineProperty(exports2, "resolveAddress", { enumerable: true, get: function() {
      return index_js_2.resolveAddress;
    } });
    var index_js_3 = require_constants();
    Object.defineProperty(exports2, "ZeroAddress", { enumerable: true, get: function() {
      return index_js_3.ZeroAddress;
    } });
    Object.defineProperty(exports2, "WeiPerEther", { enumerable: true, get: function() {
      return index_js_3.WeiPerEther;
    } });
    Object.defineProperty(exports2, "MaxUint256", { enumerable: true, get: function() {
      return index_js_3.MaxUint256;
    } });
    Object.defineProperty(exports2, "MinInt256", { enumerable: true, get: function() {
      return index_js_3.MinInt256;
    } });
    Object.defineProperty(exports2, "MaxInt256", { enumerable: true, get: function() {
      return index_js_3.MaxInt256;
    } });
    Object.defineProperty(exports2, "N", { enumerable: true, get: function() {
      return index_js_3.N;
    } });
    Object.defineProperty(exports2, "ZeroHash", { enumerable: true, get: function() {
      return index_js_3.ZeroHash;
    } });
    Object.defineProperty(exports2, "EtherSymbol", { enumerable: true, get: function() {
      return index_js_3.EtherSymbol;
    } });
    Object.defineProperty(exports2, "MessagePrefix", { enumerable: true, get: function() {
      return index_js_3.MessagePrefix;
    } });
    var index_js_4 = require_contract2();
    Object.defineProperty(exports2, "BaseContract", { enumerable: true, get: function() {
      return index_js_4.BaseContract;
    } });
    Object.defineProperty(exports2, "Contract", { enumerable: true, get: function() {
      return index_js_4.Contract;
    } });
    Object.defineProperty(exports2, "ContractFactory", { enumerable: true, get: function() {
      return index_js_4.ContractFactory;
    } });
    Object.defineProperty(exports2, "ContractEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractEventPayload;
    } });
    Object.defineProperty(exports2, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports2, "ContractTransactionResponse", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionResponse;
    } });
    Object.defineProperty(exports2, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports2, "EventLog", { enumerable: true, get: function() {
      return index_js_4.EventLog;
    } });
    Object.defineProperty(exports2, "UndecodedEventLog", { enumerable: true, get: function() {
      return index_js_4.UndecodedEventLog;
    } });
    var index_js_5 = require_crypto2();
    Object.defineProperty(exports2, "computeHmac", { enumerable: true, get: function() {
      return index_js_5.computeHmac;
    } });
    Object.defineProperty(exports2, "randomBytes", { enumerable: true, get: function() {
      return index_js_5.randomBytes;
    } });
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return index_js_5.keccak256;
    } });
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return index_js_5.ripemd160;
    } });
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return index_js_5.sha256;
    } });
    Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
      return index_js_5.sha512;
    } });
    Object.defineProperty(exports2, "pbkdf2", { enumerable: true, get: function() {
      return index_js_5.pbkdf2;
    } });
    Object.defineProperty(exports2, "scrypt", { enumerable: true, get: function() {
      return index_js_5.scrypt;
    } });
    Object.defineProperty(exports2, "scryptSync", { enumerable: true, get: function() {
      return index_js_5.scryptSync;
    } });
    Object.defineProperty(exports2, "lock", { enumerable: true, get: function() {
      return index_js_5.lock;
    } });
    Object.defineProperty(exports2, "Signature", { enumerable: true, get: function() {
      return index_js_5.Signature;
    } });
    Object.defineProperty(exports2, "SigningKey", { enumerable: true, get: function() {
      return index_js_5.SigningKey;
    } });
    var index_js_6 = require_hash();
    Object.defineProperty(exports2, "id", { enumerable: true, get: function() {
      return index_js_6.id;
    } });
    Object.defineProperty(exports2, "ensNormalize", { enumerable: true, get: function() {
      return index_js_6.ensNormalize;
    } });
    Object.defineProperty(exports2, "isValidName", { enumerable: true, get: function() {
      return index_js_6.isValidName;
    } });
    Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
      return index_js_6.namehash;
    } });
    Object.defineProperty(exports2, "dnsEncode", { enumerable: true, get: function() {
      return index_js_6.dnsEncode;
    } });
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return index_js_6.hashMessage;
    } });
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return index_js_6.verifyMessage;
    } });
    Object.defineProperty(exports2, "solidityPacked", { enumerable: true, get: function() {
      return index_js_6.solidityPacked;
    } });
    Object.defineProperty(exports2, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports2, "solidityPackedSha256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedSha256;
    } });
    Object.defineProperty(exports2, "TypedDataEncoder", { enumerable: true, get: function() {
      return index_js_6.TypedDataEncoder;
    } });
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return index_js_6.verifyTypedData;
    } });
    var index_js_7 = require_providers();
    Object.defineProperty(exports2, "getDefaultProvider", { enumerable: true, get: function() {
      return index_js_7.getDefaultProvider;
    } });
    Object.defineProperty(exports2, "Block", { enumerable: true, get: function() {
      return index_js_7.Block;
    } });
    Object.defineProperty(exports2, "FeeData", { enumerable: true, get: function() {
      return index_js_7.FeeData;
    } });
    Object.defineProperty(exports2, "Log", { enumerable: true, get: function() {
      return index_js_7.Log;
    } });
    Object.defineProperty(exports2, "TransactionReceipt", { enumerable: true, get: function() {
      return index_js_7.TransactionReceipt;
    } });
    Object.defineProperty(exports2, "TransactionResponse", { enumerable: true, get: function() {
      return index_js_7.TransactionResponse;
    } });
    Object.defineProperty(exports2, "AbstractSigner", { enumerable: true, get: function() {
      return index_js_7.AbstractSigner;
    } });
    Object.defineProperty(exports2, "NonceManager", { enumerable: true, get: function() {
      return index_js_7.NonceManager;
    } });
    Object.defineProperty(exports2, "VoidSigner", { enumerable: true, get: function() {
      return index_js_7.VoidSigner;
    } });
    Object.defineProperty(exports2, "AbstractProvider", { enumerable: true, get: function() {
      return index_js_7.AbstractProvider;
    } });
    Object.defineProperty(exports2, "FallbackProvider", { enumerable: true, get: function() {
      return index_js_7.FallbackProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcProvider;
    } });
    Object.defineProperty(exports2, "JsonRpcSigner", { enumerable: true, get: function() {
      return index_js_7.JsonRpcSigner;
    } });
    Object.defineProperty(exports2, "BrowserProvider", { enumerable: true, get: function() {
      return index_js_7.BrowserProvider;
    } });
    Object.defineProperty(exports2, "AlchemyProvider", { enumerable: true, get: function() {
      return index_js_7.AlchemyProvider;
    } });
    Object.defineProperty(exports2, "AnkrProvider", { enumerable: true, get: function() {
      return index_js_7.AnkrProvider;
    } });
    Object.defineProperty(exports2, "ChainstackProvider", { enumerable: true, get: function() {
      return index_js_7.ChainstackProvider;
    } });
    Object.defineProperty(exports2, "CloudflareProvider", { enumerable: true, get: function() {
      return index_js_7.CloudflareProvider;
    } });
    Object.defineProperty(exports2, "EtherscanProvider", { enumerable: true, get: function() {
      return index_js_7.EtherscanProvider;
    } });
    Object.defineProperty(exports2, "InfuraProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraProvider;
    } });
    Object.defineProperty(exports2, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraWebSocketProvider;
    } });
    Object.defineProperty(exports2, "PocketProvider", { enumerable: true, get: function() {
      return index_js_7.PocketProvider;
    } });
    Object.defineProperty(exports2, "QuickNodeProvider", { enumerable: true, get: function() {
      return index_js_7.QuickNodeProvider;
    } });
    Object.defineProperty(exports2, "IpcSocketProvider", { enumerable: true, get: function() {
      return index_js_7.IpcSocketProvider;
    } });
    Object.defineProperty(exports2, "SocketProvider", { enumerable: true, get: function() {
      return index_js_7.SocketProvider;
    } });
    Object.defineProperty(exports2, "WebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.WebSocketProvider;
    } });
    Object.defineProperty(exports2, "EnsResolver", { enumerable: true, get: function() {
      return index_js_7.EnsResolver;
    } });
    Object.defineProperty(exports2, "Network", { enumerable: true, get: function() {
      return index_js_7.Network;
    } });
    Object.defineProperty(exports2, "EnsPlugin", { enumerable: true, get: function() {
      return index_js_7.EnsPlugin;
    } });
    Object.defineProperty(exports2, "EtherscanPlugin", { enumerable: true, get: function() {
      return index_js_7.EtherscanPlugin;
    } });
    Object.defineProperty(exports2, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports2, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FetchUrlFeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports2, "GasCostPlugin", { enumerable: true, get: function() {
      return index_js_7.GasCostPlugin;
    } });
    Object.defineProperty(exports2, "NetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.NetworkPlugin;
    } });
    Object.defineProperty(exports2, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return index_js_7.MulticoinProviderPlugin;
    } });
    Object.defineProperty(exports2, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports2, "SocketEventSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketEventSubscriber;
    } });
    Object.defineProperty(exports2, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports2, "SocketSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketSubscriber;
    } });
    Object.defineProperty(exports2, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return index_js_7.UnmanagedSubscriber;
    } });
    Object.defineProperty(exports2, "copyRequest", { enumerable: true, get: function() {
      return index_js_7.copyRequest;
    } });
    Object.defineProperty(exports2, "showThrottleMessage", { enumerable: true, get: function() {
      return index_js_7.showThrottleMessage;
    } });
    var index_js_8 = require_transaction2();
    Object.defineProperty(exports2, "accessListify", { enumerable: true, get: function() {
      return index_js_8.accessListify;
    } });
    Object.defineProperty(exports2, "computeAddress", { enumerable: true, get: function() {
      return index_js_8.computeAddress;
    } });
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return index_js_8.recoverAddress;
    } });
    Object.defineProperty(exports2, "Transaction", { enumerable: true, get: function() {
      return index_js_8.Transaction;
    } });
    var index_js_9 = require_utils();
    Object.defineProperty(exports2, "decodeBase58", { enumerable: true, get: function() {
      return index_js_9.decodeBase58;
    } });
    Object.defineProperty(exports2, "encodeBase58", { enumerable: true, get: function() {
      return index_js_9.encodeBase58;
    } });
    Object.defineProperty(exports2, "decodeBase64", { enumerable: true, get: function() {
      return index_js_9.decodeBase64;
    } });
    Object.defineProperty(exports2, "encodeBase64", { enumerable: true, get: function() {
      return index_js_9.encodeBase64;
    } });
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return index_js_9.concat;
    } });
    Object.defineProperty(exports2, "dataLength", { enumerable: true, get: function() {
      return index_js_9.dataLength;
    } });
    Object.defineProperty(exports2, "dataSlice", { enumerable: true, get: function() {
      return index_js_9.dataSlice;
    } });
    Object.defineProperty(exports2, "getBytes", { enumerable: true, get: function() {
      return index_js_9.getBytes;
    } });
    Object.defineProperty(exports2, "getBytesCopy", { enumerable: true, get: function() {
      return index_js_9.getBytesCopy;
    } });
    Object.defineProperty(exports2, "hexlify", { enumerable: true, get: function() {
      return index_js_9.hexlify;
    } });
    Object.defineProperty(exports2, "isHexString", { enumerable: true, get: function() {
      return index_js_9.isHexString;
    } });
    Object.defineProperty(exports2, "isBytesLike", { enumerable: true, get: function() {
      return index_js_9.isBytesLike;
    } });
    Object.defineProperty(exports2, "stripZerosLeft", { enumerable: true, get: function() {
      return index_js_9.stripZerosLeft;
    } });
    Object.defineProperty(exports2, "zeroPadBytes", { enumerable: true, get: function() {
      return index_js_9.zeroPadBytes;
    } });
    Object.defineProperty(exports2, "zeroPadValue", { enumerable: true, get: function() {
      return index_js_9.zeroPadValue;
    } });
    Object.defineProperty(exports2, "defineProperties", { enumerable: true, get: function() {
      return index_js_9.defineProperties;
    } });
    Object.defineProperty(exports2, "resolveProperties", { enumerable: true, get: function() {
      return index_js_9.resolveProperties;
    } });
    Object.defineProperty(exports2, "assert", { enumerable: true, get: function() {
      return index_js_9.assert;
    } });
    Object.defineProperty(exports2, "assertArgument", { enumerable: true, get: function() {
      return index_js_9.assertArgument;
    } });
    Object.defineProperty(exports2, "assertArgumentCount", { enumerable: true, get: function() {
      return index_js_9.assertArgumentCount;
    } });
    Object.defineProperty(exports2, "assertNormalize", { enumerable: true, get: function() {
      return index_js_9.assertNormalize;
    } });
    Object.defineProperty(exports2, "assertPrivate", { enumerable: true, get: function() {
      return index_js_9.assertPrivate;
    } });
    Object.defineProperty(exports2, "makeError", { enumerable: true, get: function() {
      return index_js_9.makeError;
    } });
    Object.defineProperty(exports2, "isCallException", { enumerable: true, get: function() {
      return index_js_9.isCallException;
    } });
    Object.defineProperty(exports2, "isError", { enumerable: true, get: function() {
      return index_js_9.isError;
    } });
    Object.defineProperty(exports2, "EventPayload", { enumerable: true, get: function() {
      return index_js_9.EventPayload;
    } });
    Object.defineProperty(exports2, "FetchRequest", { enumerable: true, get: function() {
      return index_js_9.FetchRequest;
    } });
    Object.defineProperty(exports2, "FetchResponse", { enumerable: true, get: function() {
      return index_js_9.FetchResponse;
    } });
    Object.defineProperty(exports2, "FetchCancelSignal", { enumerable: true, get: function() {
      return index_js_9.FetchCancelSignal;
    } });
    Object.defineProperty(exports2, "FixedNumber", { enumerable: true, get: function() {
      return index_js_9.FixedNumber;
    } });
    Object.defineProperty(exports2, "getBigInt", { enumerable: true, get: function() {
      return index_js_9.getBigInt;
    } });
    Object.defineProperty(exports2, "getNumber", { enumerable: true, get: function() {
      return index_js_9.getNumber;
    } });
    Object.defineProperty(exports2, "getUint", { enumerable: true, get: function() {
      return index_js_9.getUint;
    } });
    Object.defineProperty(exports2, "toBeArray", { enumerable: true, get: function() {
      return index_js_9.toBeArray;
    } });
    Object.defineProperty(exports2, "toBigInt", { enumerable: true, get: function() {
      return index_js_9.toBigInt;
    } });
    Object.defineProperty(exports2, "toBeHex", { enumerable: true, get: function() {
      return index_js_9.toBeHex;
    } });
    Object.defineProperty(exports2, "toNumber", { enumerable: true, get: function() {
      return index_js_9.toNumber;
    } });
    Object.defineProperty(exports2, "toQuantity", { enumerable: true, get: function() {
      return index_js_9.toQuantity;
    } });
    Object.defineProperty(exports2, "fromTwos", { enumerable: true, get: function() {
      return index_js_9.fromTwos;
    } });
    Object.defineProperty(exports2, "toTwos", { enumerable: true, get: function() {
      return index_js_9.toTwos;
    } });
    Object.defineProperty(exports2, "mask", { enumerable: true, get: function() {
      return index_js_9.mask;
    } });
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return index_js_9.formatEther;
    } });
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return index_js_9.parseEther;
    } });
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return index_js_9.formatUnits;
    } });
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return index_js_9.parseUnits;
    } });
    Object.defineProperty(exports2, "toUtf8Bytes", { enumerable: true, get: function() {
      return index_js_9.toUtf8Bytes;
    } });
    Object.defineProperty(exports2, "toUtf8CodePoints", { enumerable: true, get: function() {
      return index_js_9.toUtf8CodePoints;
    } });
    Object.defineProperty(exports2, "toUtf8String", { enumerable: true, get: function() {
      return index_js_9.toUtf8String;
    } });
    Object.defineProperty(exports2, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return index_js_9.Utf8ErrorFuncs;
    } });
    Object.defineProperty(exports2, "decodeRlp", { enumerable: true, get: function() {
      return index_js_9.decodeRlp;
    } });
    Object.defineProperty(exports2, "encodeRlp", { enumerable: true, get: function() {
      return index_js_9.encodeRlp;
    } });
    Object.defineProperty(exports2, "uuidV4", { enumerable: true, get: function() {
      return index_js_9.uuidV4;
    } });
    var index_js_10 = require_wallet2();
    Object.defineProperty(exports2, "Mnemonic", { enumerable: true, get: function() {
      return index_js_10.Mnemonic;
    } });
    Object.defineProperty(exports2, "BaseWallet", { enumerable: true, get: function() {
      return index_js_10.BaseWallet;
    } });
    Object.defineProperty(exports2, "HDNodeWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeWallet;
    } });
    Object.defineProperty(exports2, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeVoidWallet;
    } });
    Object.defineProperty(exports2, "Wallet", { enumerable: true, get: function() {
      return index_js_10.Wallet;
    } });
    Object.defineProperty(exports2, "defaultPath", { enumerable: true, get: function() {
      return index_js_10.defaultPath;
    } });
    Object.defineProperty(exports2, "getAccountPath", { enumerable: true, get: function() {
      return index_js_10.getAccountPath;
    } });
    Object.defineProperty(exports2, "getIndexedAccountPath", { enumerable: true, get: function() {
      return index_js_10.getIndexedAccountPath;
    } });
    Object.defineProperty(exports2, "isCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.isCrowdsaleJson;
    } });
    Object.defineProperty(exports2, "isKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.isKeystoreJson;
    } });
    Object.defineProperty(exports2, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.decryptCrowdsaleJson;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports2, "decryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJson;
    } });
    Object.defineProperty(exports2, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJsonSync;
    } });
    var index_js_11 = require_wordlists2();
    Object.defineProperty(exports2, "Wordlist", { enumerable: true, get: function() {
      return index_js_11.Wordlist;
    } });
    Object.defineProperty(exports2, "LangEn", { enumerable: true, get: function() {
      return index_js_11.LangEn;
    } });
    Object.defineProperty(exports2, "WordlistOwl", { enumerable: true, get: function() {
      return index_js_11.WordlistOwl;
    } });
    Object.defineProperty(exports2, "WordlistOwlA", { enumerable: true, get: function() {
      return index_js_11.WordlistOwlA;
    } });
    Object.defineProperty(exports2, "wordlists", { enumerable: true, get: function() {
      return index_js_11.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/index.js
var require_lib2 = __commonJS({
  "node_modules/ethers/lib.commonjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ethers = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ethers2 = tslib_1.__importStar(require_ethers());
    exports2.ethers = ethers2;
    tslib_1.__exportStar(require_ethers(), exports2);
  }
});

// node_modules/image-js/lib/image/core/bitMethods.js
var require_bitMethods = __commonJS({
  "node_modules/image-js/lib/image/core/bitMethods.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setBitMethods;
    var bitMethods = {
      /**
       * Get the bit of a pixel using a pixel index.
       * This method can only be called on binary images.
       * @memberof Image
       * @instance
       * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`
       * @return {number} 0: bit is unset, 1: bit is set
       */
      getBit(pixel) {
        return this.data[getSlot(pixel)] & 1 << getShift(pixel) ? 1 : 0;
      },
      /**
       * Set the bit of a pixel using a pixel index.
       * This method can only be called on binary images.
       * @memberof Image
       * @instance
       * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`
       */
      setBit(pixel) {
        this.data[getSlot(pixel)] |= 1 << getShift(pixel);
      },
      /**
       * Clear the bit of a pixel using a pixel index.
       * This method can only be called on binary images.
       * @memberof Image
       * @instance
       * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`
       */
      clearBit(pixel) {
        this.data[getSlot(pixel)] &= ~(1 << getShift(pixel));
      },
      /**
       * Toggle (invert) the bit of a pixel using a pixel index.
       * This method can only be called on binary images.
       * @memberof Image
       * @instance
       * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`
       */
      toggleBit(pixel) {
        this.data[getSlot(pixel)] ^= 1 << getShift(pixel);
      },
      /**
       * Get the bit of a pixel using coordinates.
       * This method can only be called on binary images.
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       * @return {number} 0: bit is unset, 1: bit is set
       */
      getBitXY(x, y) {
        if (x >= this.width || y >= this.height)
          return 0;
        return this.getBit(y * this.width + x);
      },
      /**
       * Set the bit of a pixel using coordinates.
       * This method can only be called on binary images.
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       */
      setBitXY(x, y) {
        this.setBit(y * this.width + x);
      },
      /**
       * Clear the bit of a pixel using coordinates.
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       */
      clearBitXY(x, y) {
        this.clearBit(y * this.width + x);
      },
      /**
       * Toggle (invert) the bit of a pixel using coordinates.
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       */
      toggleBitXY(x, y) {
        this.toggleBit(y * this.width + x);
      }
    };
    function getSlot(pixel) {
      return pixel >> 3;
    }
    function getShift(pixel) {
      return 7 - (pixel & 7);
    }
    function setBitMethods(Image3) {
      for (const i in bitMethods) {
        Image3.prototype[i] = bitMethods[i];
      }
    }
  }
});

// node_modules/image-js/lib/image/core/checkProcessable.js
var require_checkProcessable = __commonJS({
  "node_modules/image-js/lib/image/core/checkProcessable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = checkProcessable;
    function checkProcessable(processName, options = {}) {
      let {
        bitDepth,
        alpha,
        colorModel,
        components,
        channels
      } = options;
      if (typeof processName !== "string" || processName.length === 0) {
        throw new TypeError("processName must be a string");
      }
      if (bitDepth) {
        if (!Array.isArray(bitDepth)) {
          bitDepth = [bitDepth];
        }
        if (!bitDepth.includes(this.bitDepth)) {
          throw new TypeError(`The process: ${processName} can only be applied if bit depth is in: ${bitDepth}`);
        }
      }
      if (alpha) {
        if (!Array.isArray(alpha)) {
          alpha = [alpha];
        }
        if (!alpha.includes(this.alpha)) {
          throw new TypeError(`The process: ${processName} can only be applied if alpha is in: ${alpha}`);
        }
      }
      if (colorModel) {
        if (!Array.isArray(colorModel)) {
          colorModel = [colorModel];
        }
        if (!colorModel.includes(this.colorModel)) {
          throw new TypeError(`The process: ${processName} can only be applied if color model is in: ${colorModel}`);
        }
      }
      if (components) {
        if (!Array.isArray(components)) {
          components = [components];
        }
        if (!components.includes(this.components)) {
          let errorMessage = `The process: ${processName} can only be applied if the number of components is in: ${components}`;
          if (components.length === 1 && components[0] === 1) {
            throw new TypeError(`${errorMessage}.\rYou should transform your image using "image.grey()" before applying the algorithm.`);
          } else {
            throw new TypeError(errorMessage);
          }
        }
      }
      if (channels) {
        if (!Array.isArray(channels)) {
          channels = [channels];
        }
        if (!channels.includes(this.channels)) {
          throw new TypeError(`The process: ${processName} can only be applied if the number of channels is in: ${channels}`);
        }
      }
    }
  }
});

// node_modules/blob-util/dist/blob-util.cjs.js
var require_blob_util_cjs = __commonJS({
  "node_modules/blob-util/dist/blob-util.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function loadImage(src, crossOrigin) {
      return new Promise(function(resolve2, reject2) {
        var img = new Image();
        if (crossOrigin) {
          img.crossOrigin = crossOrigin;
        }
        img.onload = function() {
          resolve2(img);
        };
        img.onerror = reject2;
        img.src = src;
      });
    }
    function imgToCanvas(img) {
      var canvas = document.createElement("canvas");
      canvas.width = img.width;
      canvas.height = img.height;
      var context = canvas.getContext("2d");
      context.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);
      return canvas;
    }
    function createBlob(parts, properties) {
      parts = parts || [];
      properties = properties || {};
      if (typeof properties === "string") {
        properties = { type: properties };
      }
      try {
        return new Blob(parts, properties);
      } catch (e) {
        if (e.name !== "TypeError") {
          throw e;
        }
        var Builder = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
          builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
      }
    }
    function createObjectURL(blob) {
      return (typeof URL !== "undefined" ? URL : webkitURL).createObjectURL(blob);
    }
    function revokeObjectURL(url) {
      return (typeof URL !== "undefined" ? URL : webkitURL).revokeObjectURL(url);
    }
    function blobToBinaryString(blob) {
      return new Promise(function(resolve2, reject2) {
        var reader = new FileReader();
        var hasBinaryString = typeof reader.readAsBinaryString === "function";
        reader.onloadend = function() {
          var result = reader.result || "";
          if (hasBinaryString) {
            return resolve2(result);
          }
          resolve2(arrayBufferToBinaryString(result));
        };
        reader.onerror = reject2;
        if (hasBinaryString) {
          reader.readAsBinaryString(blob);
        } else {
          reader.readAsArrayBuffer(blob);
        }
      });
    }
    function base64StringToBlob(base64, type) {
      var parts = [binaryStringToArrayBuffer(atob(base64))];
      return type ? createBlob(parts, { type }) : createBlob(parts);
    }
    function binaryStringToBlob(binary, type) {
      return base64StringToBlob(btoa(binary), type);
    }
    function blobToBase64String(blob) {
      return blobToBinaryString(blob).then(btoa);
    }
    function dataURLToBlob(dataURL) {
      var type = dataURL.match(/data:([^;]+)/)[1];
      var base64 = dataURL.replace(/^[^,]+,/, "");
      var buff = binaryStringToArrayBuffer(atob(base64));
      return createBlob([buff], { type });
    }
    function blobToDataURL(blob) {
      return blobToBase64String(blob).then(function(base64String) {
        return "data:" + blob.type + ";base64," + base64String;
      });
    }
    function imgSrcToDataURL(src, type, crossOrigin, quality) {
      type = type || "image/png";
      return loadImage(src, crossOrigin).then(imgToCanvas).then(function(canvas) {
        return canvas.toDataURL(type, quality);
      });
    }
    function canvasToBlob(canvas, type, quality) {
      if (typeof canvas.toBlob === "function") {
        return new Promise(function(resolve2) {
          canvas.toBlob(resolve2, type, quality);
        });
      }
      return Promise.resolve(dataURLToBlob(canvas.toDataURL(type, quality)));
    }
    function imgSrcToBlob(src, type, crossOrigin, quality) {
      type = type || "image/png";
      return loadImage(src, crossOrigin).then(imgToCanvas).then(function(canvas) {
        return canvasToBlob(canvas, type, quality);
      });
    }
    function arrayBufferToBlob(buffer, type) {
      return createBlob([buffer], type);
    }
    function blobToArrayBuffer(blob) {
      return new Promise(function(resolve2, reject2) {
        var reader = new FileReader();
        reader.onloadend = function() {
          var result = reader.result || new ArrayBuffer(0);
          resolve2(result);
        };
        reader.onerror = reject2;
        reader.readAsArrayBuffer(blob);
      });
    }
    function arrayBufferToBinaryString(buffer) {
      var binary = "";
      var bytes = new Uint8Array(buffer);
      var length = bytes.byteLength;
      var i = -1;
      while (++i < length) {
        binary += String.fromCharCode(bytes[i]);
      }
      return binary;
    }
    function binaryStringToArrayBuffer(binary) {
      var length = binary.length;
      var buf = new ArrayBuffer(length);
      var arr = new Uint8Array(buf);
      var i = -1;
      while (++i < length) {
        arr[i] = binary.charCodeAt(i);
      }
      return buf;
    }
    exports2.createBlob = createBlob;
    exports2.createObjectURL = createObjectURL;
    exports2.revokeObjectURL = revokeObjectURL;
    exports2.blobToBinaryString = blobToBinaryString;
    exports2.base64StringToBlob = base64StringToBlob;
    exports2.binaryStringToBlob = binaryStringToBlob;
    exports2.blobToBase64String = blobToBase64String;
    exports2.dataURLToBlob = dataURLToBlob;
    exports2.blobToDataURL = blobToDataURL;
    exports2.imgSrcToDataURL = imgSrcToDataURL;
    exports2.canvasToBlob = canvasToBlob;
    exports2.imgSrcToBlob = imgSrcToBlob;
    exports2.arrayBufferToBlob = arrayBufferToBlob;
    exports2.blobToArrayBuffer = blobToArrayBuffer;
    exports2.arrayBufferToBinaryString = arrayBufferToBinaryString;
    exports2.binaryStringToArrayBuffer = binaryStringToArrayBuffer;
  }
});

// node_modules/iobuffer/lib/text.js
var require_text = __commonJS({
  "node_modules/iobuffer/lib/text.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decode = decode;
    exports2.encode = encode;
    function decode(bytes, encoding = "utf8") {
      const decoder = new TextDecoder(encoding);
      return decoder.decode(bytes);
    }
    var encoder = new TextEncoder();
    function encode(str) {
      return encoder.encode(str);
    }
  }
});

// node_modules/iobuffer/lib/IOBuffer.js
var require_IOBuffer = __commonJS({
  "node_modules/iobuffer/lib/IOBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IOBuffer = void 0;
    var text_1 = require_text();
    var defaultByteLength = 1024 * 8;
    var hostBigEndian = (() => {
      const array = new Uint8Array(4);
      const view = new Uint32Array(array.buffer);
      return !((view[0] = 1) & array[0]);
    })();
    var typedArrays = {
      int8: globalThis.Int8Array,
      uint8: globalThis.Uint8Array,
      int16: globalThis.Int16Array,
      uint16: globalThis.Uint16Array,
      int32: globalThis.Int32Array,
      uint32: globalThis.Uint32Array,
      uint64: globalThis.BigUint64Array,
      int64: globalThis.BigInt64Array,
      float32: globalThis.Float32Array,
      float64: globalThis.Float64Array
    };
    var IOBuffer = class _IOBuffer {
      /**
       * Reference to the internal ArrayBuffer object.
       */
      buffer;
      /**
       * Byte length of the internal ArrayBuffer.
       */
      byteLength;
      /**
       * Byte offset of the internal ArrayBuffer.
       */
      byteOffset;
      /**
       * Byte length of the internal ArrayBuffer.
       */
      length;
      /**
       * The current offset of the buffer's pointer.
       */
      offset;
      lastWrittenByte;
      littleEndian;
      _data;
      _mark;
      _marks;
      /**
       * Create a new IOBuffer.
       * @param data - The data to construct the IOBuffer with.
       * If data is a number, it will be the new buffer's length<br>
       * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>
       * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,
       * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.
       * @param options - An object for the options.
       * @returns A new IOBuffer instance.
       */
      constructor(data = defaultByteLength, options = {}) {
        let dataIsGiven = false;
        if (typeof data === "number") {
          data = new ArrayBuffer(data);
        } else {
          dataIsGiven = true;
          this.lastWrittenByte = data.byteLength;
        }
        const offset = options.offset ? options.offset >>> 0 : 0;
        const byteLength = data.byteLength - offset;
        let dvOffset = offset;
        if (ArrayBuffer.isView(data) || data instanceof _IOBuffer) {
          if (data.byteLength !== data.buffer.byteLength) {
            dvOffset = data.byteOffset + offset;
          }
          data = data.buffer;
        }
        if (dataIsGiven) {
          this.lastWrittenByte = byteLength;
        } else {
          this.lastWrittenByte = 0;
        }
        this.buffer = data;
        this.length = byteLength;
        this.byteLength = byteLength;
        this.byteOffset = dvOffset;
        this.offset = 0;
        this.littleEndian = true;
        this._data = new DataView(this.buffer, dvOffset, byteLength);
        this._mark = 0;
        this._marks = [];
      }
      /**
       * Checks if the memory allocated to the buffer is sufficient to store more
       * bytes after the offset.
       * @param byteLength - The needed memory in bytes.
       * @returns `true` if there is sufficient space and `false` otherwise.
       */
      available(byteLength = 1) {
        return this.offset + byteLength <= this.length;
      }
      /**
       * Check if little-endian mode is used for reading and writing multi-byte
       * values.
       * @returns `true` if little-endian mode is used, `false` otherwise.
       */
      isLittleEndian() {
        return this.littleEndian;
      }
      /**
       * Set little-endian mode for reading and writing multi-byte values.
       * @returns This.
       */
      setLittleEndian() {
        this.littleEndian = true;
        return this;
      }
      /**
       * Check if big-endian mode is used for reading and writing multi-byte values.
       * @returns `true` if big-endian mode is used, `false` otherwise.
       */
      isBigEndian() {
        return !this.littleEndian;
      }
      /**
       * Switches to big-endian mode for reading and writing multi-byte values.
       * @returns This.
       */
      setBigEndian() {
        this.littleEndian = false;
        return this;
      }
      /**
       * Move the pointer n bytes forward.
       * @param n - Number of bytes to skip.
       * @returns This.
       */
      skip(n = 1) {
        this.offset += n;
        return this;
      }
      /**
       * Move the pointer n bytes backward.
       * @param n - Number of bytes to move back.
       * @returns This.
       */
      back(n = 1) {
        this.offset -= n;
        return this;
      }
      /**
       * Move the pointer to the given offset.
       * @param offset - The offset to move to.
       * @returns This.
       */
      seek(offset) {
        this.offset = offset;
        return this;
      }
      /**
       * Store the current pointer offset.
       * @see {@link IOBuffer#reset}
       * @returns This.
       */
      mark() {
        this._mark = this.offset;
        return this;
      }
      /**
       * Move the pointer back to the last pointer offset set by mark.
       * @see {@link IOBuffer#mark}
       * @returns This.
       */
      reset() {
        this.offset = this._mark;
        return this;
      }
      /**
       * Push the current pointer offset to the mark stack.
       * @see {@link IOBuffer#popMark}
       * @returns This.
       */
      pushMark() {
        this._marks.push(this.offset);
        return this;
      }
      /**
       * Pop the last pointer offset from the mark stack, and set the current
       * pointer offset to the popped value.
       * @see {@link IOBuffer#pushMark}
       * @returns This.
       */
      popMark() {
        const offset = this._marks.pop();
        if (offset === void 0) {
          throw new Error("Mark stack empty");
        }
        this.seek(offset);
        return this;
      }
      /**
       * Move the pointer offset back to 0.
       * @returns This.
       */
      rewind() {
        this.offset = 0;
        return this;
      }
      /**
       * Make sure the buffer has sufficient memory to write a given byteLength at
       * the current pointer offset.
       * If the buffer's memory is insufficient, this method will create a new
       * buffer (a copy) with a length that is twice (byteLength + current offset).
       * @param byteLength - The needed memory in bytes.
       * @returns This.
       */
      ensureAvailable(byteLength = 1) {
        if (!this.available(byteLength)) {
          const lengthNeeded = this.offset + byteLength;
          const newLength = lengthNeeded * 2;
          const newArray = new Uint8Array(newLength);
          newArray.set(new Uint8Array(this.buffer));
          this.buffer = newArray.buffer;
          this.length = newLength;
          this.byteLength = newLength;
          this._data = new DataView(this.buffer);
        }
        return this;
      }
      /**
       * Read a byte and return false if the byte's value is 0, or true otherwise.
       * Moves pointer forward by one byte.
       * @returns The read boolean.
       */
      readBoolean() {
        return this.readUint8() !== 0;
      }
      /**
       * Read a signed 8-bit integer and move pointer forward by 1 byte.
       * @returns The read byte.
       */
      readInt8() {
        return this._data.getInt8(this.offset++);
      }
      /**
       * Read an unsigned 8-bit integer and move pointer forward by 1 byte.
       * @returns The read byte.
       */
      readUint8() {
        return this._data.getUint8(this.offset++);
      }
      /**
       * Alias for {@link IOBuffer#readUint8}.
       * @returns The read byte.
       */
      readByte() {
        return this.readUint8();
      }
      /**
       * Read `n` bytes and move pointer forward by `n` bytes.
       * @param n - Number of bytes to read.
       * @returns The read bytes.
       */
      readBytes(n = 1) {
        return this.readArray(n, "uint8");
      }
      /**
       * Creates an array of corresponding to the type `type` and size `size`.
       * For example type `uint8` will create a `Uint8Array`.
       * @param size - size of the resulting array
       * @param type - number type of elements to read
       * @returns The read array.
       */
      readArray(size, type) {
        const bytes = typedArrays[type].BYTES_PER_ELEMENT * size;
        const offset = this.byteOffset + this.offset;
        const slice = this.buffer.slice(offset, offset + bytes);
        if (this.littleEndian === hostBigEndian && type !== "uint8" && type !== "int8") {
          const slice2 = new Uint8Array(this.buffer.slice(offset, offset + bytes));
          slice2.reverse();
          const returnArray2 = new typedArrays[type](slice2.buffer);
          this.offset += bytes;
          returnArray2.reverse();
          return returnArray2;
        }
        const returnArray = new typedArrays[type](slice);
        this.offset += bytes;
        return returnArray;
      }
      /**
       * Read a 16-bit signed integer and move pointer forward by 2 bytes.
       * @returns The read value.
       */
      readInt16() {
        const value = this._data.getInt16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
      }
      /**
       * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.
       * @returns The read value.
       */
      readUint16() {
        const value = this._data.getUint16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
      }
      /**
       * Read a 32-bit signed integer and move pointer forward by 4 bytes.
       * @returns The read value.
       */
      readInt32() {
        const value = this._data.getInt32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      /**
       * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.
       * @returns The read value.
       */
      readUint32() {
        const value = this._data.getUint32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      /**
       * Read a 32-bit floating number and move pointer forward by 4 bytes.
       * @returns The read value.
       */
      readFloat32() {
        const value = this._data.getFloat32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      /**
       * Read a 64-bit floating number and move pointer forward by 8 bytes.
       * @returns The read value.
       */
      readFloat64() {
        const value = this._data.getFloat64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
      }
      /**
       * Read a 64-bit signed integer number and move pointer forward by 8 bytes.
       * @returns The read value.
       */
      readBigInt64() {
        const value = this._data.getBigInt64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
      }
      /**
       * Read a 64-bit unsigned integer number and move pointer forward by 8 bytes.
       * @returns The read value.
       */
      readBigUint64() {
        const value = this._data.getBigUint64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
      }
      /**
       * Read a 1-byte ASCII character and move pointer forward by 1 byte.
       * @returns The read character.
       */
      readChar() {
        return String.fromCharCode(this.readInt8());
      }
      /**
       * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.
       * @param n - Number of characters to read.
       * @returns The read characters.
       */
      readChars(n = 1) {
        let result = "";
        for (let i = 0; i < n; i++) {
          result += this.readChar();
        }
        return result;
      }
      /**
       * Read the next `n` bytes, return a UTF-8 decoded string and move pointer
       * forward by `n` bytes.
       * @param n - Number of bytes to read.
       * @returns The decoded string.
       */
      readUtf8(n = 1) {
        return (0, text_1.decode)(this.readBytes(n));
      }
      /**
       * Read the next `n` bytes, return a string decoded with `encoding` and move pointer
       * forward by `n` bytes.
       * If no encoding is passed, the function is equivalent to @see {@link IOBuffer#readUtf8}
       * @param n - Number of bytes to read.
       * @param encoding - The encoding to use. Default is 'utf8'.
       * @returns The decoded string.
       */
      decodeText(n = 1, encoding = "utf8") {
        return (0, text_1.decode)(this.readBytes(n), encoding);
      }
      /**
       * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer
       * forward by 1 byte.
       * @param value - The value to write.
       * @returns This.
       */
      writeBoolean(value) {
        this.writeUint8(value ? 255 : 0);
        return this;
      }
      /**
       * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.
       * @param value - The value to write.
       * @returns This.
       */
      writeInt8(value) {
        this.ensureAvailable(1);
        this._data.setInt8(this.offset++, value);
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as an 8-bit unsigned integer and move pointer forward by 1
       * byte.
       * @param value - The value to write.
       * @returns This.
       */
      writeUint8(value) {
        this.ensureAvailable(1);
        this._data.setUint8(this.offset++, value);
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * An alias for {@link IOBuffer#writeUint8}.
       * @param value - The value to write.
       * @returns This.
       */
      writeByte(value) {
        return this.writeUint8(value);
      }
      /**
       * Write all elements of `bytes` as uint8 values and move pointer forward by
       * `bytes.length` bytes.
       * @param bytes - The array of bytes to write.
       * @returns This.
       */
      writeBytes(bytes) {
        this.ensureAvailable(bytes.length);
        for (let i = 0; i < bytes.length; i++) {
          this._data.setUint8(this.offset++, bytes[i]);
        }
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 16-bit signed integer and move pointer forward by 2
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeInt16(value) {
        this.ensureAvailable(2);
        this._data.setInt16(this.offset, value, this.littleEndian);
        this.offset += 2;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 16-bit unsigned integer and move pointer forward by 2
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeUint16(value) {
        this.ensureAvailable(2);
        this._data.setUint16(this.offset, value, this.littleEndian);
        this.offset += 2;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 32-bit signed integer and move pointer forward by 4
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeInt32(value) {
        this.ensureAvailable(4);
        this._data.setInt32(this.offset, value, this.littleEndian);
        this.offset += 4;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 32-bit unsigned integer and move pointer forward by 4
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeUint32(value) {
        this.ensureAvailable(4);
        this._data.setUint32(this.offset, value, this.littleEndian);
        this.offset += 4;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 32-bit floating number and move pointer forward by 4
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeFloat32(value) {
        this.ensureAvailable(4);
        this._data.setFloat32(this.offset, value, this.littleEndian);
        this.offset += 4;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 64-bit floating number and move pointer forward by 8
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeFloat64(value) {
        this.ensureAvailable(8);
        this._data.setFloat64(this.offset, value, this.littleEndian);
        this.offset += 8;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 64-bit signed bigint and move pointer forward by 8
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeBigInt64(value) {
        this.ensureAvailable(8);
        this._data.setBigInt64(this.offset, value, this.littleEndian);
        this.offset += 8;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write `value` as a 64-bit unsigned bigint and move pointer forward by 8
       * bytes.
       * @param value - The value to write.
       * @returns This.
       */
      writeBigUint64(value) {
        this.ensureAvailable(8);
        this._data.setBigUint64(this.offset, value, this.littleEndian);
        this.offset += 8;
        this._updateLastWrittenByte();
        return this;
      }
      /**
       * Write the charCode of `str`'s first character as an 8-bit unsigned integer
       * and move pointer forward by 1 byte.
       * @param str - The character to write.
       * @returns This.
       */
      writeChar(str) {
        return this.writeUint8(str.charCodeAt(0));
      }
      /**
       * Write the charCodes of all `str`'s characters as 8-bit unsigned integers
       * and move pointer forward by `str.length` bytes.
       * @param str - The characters to write.
       * @returns This.
       */
      writeChars(str) {
        for (let i = 0; i < str.length; i++) {
          this.writeUint8(str.charCodeAt(i));
        }
        return this;
      }
      /**
       * UTF-8 encode and write `str` to the current pointer offset and move pointer
       * forward according to the encoded length.
       * @param str - The string to write.
       * @returns This.
       */
      writeUtf8(str) {
        return this.writeBytes((0, text_1.encode)(str));
      }
      /**
       * Export a Uint8Array view of the internal buffer.
       * The view starts at the byte offset and its length
       * is calculated to stop at the last written byte or the original length.
       * @returns A new Uint8Array view.
       */
      toArray() {
        return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);
      }
      /**
       *  Get the total number of bytes written so far, regardless of the current offset.
       * @returns - Total number of bytes.
       */
      getWrittenByteLength() {
        return this.lastWrittenByte - this.byteOffset;
      }
      /**
       * Update the last written byte offset
       * @private
       */
      _updateLastWrittenByte() {
        if (this.offset > this.lastWrittenByte) {
          this.lastWrittenByte = this.offset;
        }
      }
    };
    exports2.IOBuffer = IOBuffer;
  }
});

// node_modules/fast-bmp/src/constants.js
var require_constants3 = __commonJS({
  "node_modules/fast-bmp/src/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      BITMAPV5HEADER: {
        LogicalColorSpace: {
          // https://msdn.microsoft.com/en-us/library/cc250396.aspx
          LCS_CALIBRATED_RGB: 0,
          LCS_sRGB: 1934772034,
          // eslint-disable-line camelcase
          LCS_WINDOWS_COLOR_SPACE: 1466527264
        },
        Compression: {
          // https://msdn.microsoft.com/en-us/library/cc250415.aspx
          BI_RGB: 0,
          // No compression
          BI_RLE8: 1,
          BI_RLE4: 2,
          BI_BITFIELDS: 3,
          BI_JPEG: 4,
          BI_PNG: 5,
          BI_CMYK: 11,
          BI_CMYKRLE8: 12,
          BI_CMYKRLE4: 13
        },
        GamutMappingIntent: {
          // https://msdn.microsoft.com/en-us/library/cc250392.aspx
          LCS_GM_ABS_COLORIMETRIC: 8,
          LCS_GM_BUSINESS: 1,
          LCS_GM_GRAPHICS: 2,
          LCS_GM_IMAGES: 4
        }
      }
    };
  }
});

// node_modules/fast-bmp/src/BMPEncoder.js
var require_BMPEncoder = __commonJS({
  "node_modules/fast-bmp/src/BMPEncoder.js"(exports2, module2) {
    "use strict";
    var { IOBuffer } = require_IOBuffer();
    var constants = require_constants3();
    var tableLeft = [];
    for (let i = 0; i <= 8; i++) {
      tableLeft.push(255 << i);
    }
    var BMPEncoder = class extends IOBuffer {
      constructor(data) {
        if (data.bitDepth !== 1) {
          throw new Error("Only bitDepth of 1 is supported");
        }
        if (!data.height || !data.width) {
          throw new Error("ImageData width and height are required");
        }
        super(data.data);
        this.width = data.width;
        this.height = data.height;
        this.bitDepth = data.bitDepth;
        this.channels = data.channels;
        this.components = data.components;
      }
      encode() {
        this.encoded = new IOBuffer();
        this.encoded.skip(14);
        this.writeBitmapV5Header();
        this.writeColorTable();
        const offset = this.encoded.offset;
        this.writePixelArray();
        this.encoded.rewind();
        this.writeBitmapFileHeader(offset);
        return this.encoded.toArray();
      }
      writePixelArray() {
        let io = this.encoded;
        const rowSize = Math.floor((this.bitDepth * this.width + 31) / 32) * 4;
        const dataRowSize = Math.ceil(this.bitDepth * this.width / 8);
        const skipSize = rowSize - dataRowSize;
        const bitOverflow = this.bitDepth * this.width % 8;
        const bitSkip = bitOverflow === 0 ? 0 : 8 - bitOverflow;
        const totalBytes = rowSize * this.height;
        let byteA, byteB;
        let offset = 0;
        let relOffset = 0;
        let iOffset = 8;
        io.mark();
        byteB = this.readUint8();
        for (let i = this.height - 1; i >= 0; i--) {
          const lastRow = i === 0;
          io.reset();
          io.skip(i * rowSize);
          for (let j = 0; j < dataRowSize; j++) {
            const lastCol = j === dataRowSize - 1;
            if (relOffset <= bitSkip && lastCol) {
              io.writeByte(byteB << relOffset);
              if ((bitSkip === 0 || bitSkip === relOffset) && !lastRow) {
                byteA = byteB;
                byteB = this.readByte();
              }
            } else if (relOffset === 0) {
              byteA = byteB;
              byteB = this.readUint8();
              io.writeByte(byteA);
            } else {
              byteA = byteB;
              byteB = this.readUint8();
              io.writeByte(
                byteA << relOffset & tableLeft[relOffset] | byteB >> iOffset
              );
            }
            if (lastCol) {
              offset += bitOverflow || 0;
              io.skip(skipSize);
              relOffset = offset % 8;
              iOffset = 8 - relOffset;
            }
          }
        }
        if (rowSize > dataRowSize) {
          io.reset();
          io.skip(totalBytes - 1);
          io.writeUint8(0);
        }
      }
      writeColorTable() {
        this.encoded.writeUint32(0).writeUint32(16777215);
      }
      writeBitmapFileHeader(imageOffset) {
        this.encoded.writeChars("BM").writeInt32(this.encoded.lastWrittenByte).writeUint16(0).writeUint16(0).writeUint32(imageOffset);
      }
      writeBitmapV5Header() {
        const rowSize = Math.floor((this.bitDepth * this.width + 31) / 32) * 4;
        const totalBytes = rowSize * this.height;
        this.encoded.writeUint32(124).writeInt32(this.width).writeInt32(this.height).writeUint16(1).writeUint16(this.bitDepth).writeUint32(constants.BITMAPV5HEADER.Compression.BI_RGB).writeUint32(totalBytes).writeInt32(0).writeInt32(0).writeUint32(Math.pow(2, this.bitDepth)).writeUint32(Math.pow(2, this.bitDepth)).writeUint32(4278190080).writeUint32(16711680).writeUint32(65280).writeUint32(255).writeUint32(constants.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB).skip(36).skip(12).writeUint32(constants.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES).skip(12);
      }
    };
    module2.exports = BMPEncoder;
  }
});

// node_modules/fast-bmp/src/index.js
var require_src = __commonJS({
  "node_modules/fast-bmp/src/index.js"(exports2) {
    "use strict";
    var Encoder = require_BMPEncoder();
    exports2.encode = function encode(data) {
      const encoder = new Encoder(data);
      return encoder.encode();
    };
  }
});

// node_modules/pako/lib/zlib/trees.js
var require_trees = __commonJS({
  "node_modules/pako/lib/zlib/trees.js"(exports2, module2) {
    "use strict";
    var Z_FIXED = 4;
    var Z_BINARY = 0;
    var Z_TEXT = 1;
    var Z_UNKNOWN = 2;
    function zero(buf) {
      let len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    }
    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES = 2;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var Buf_size = 16;
    var MAX_BL_BITS = 7;
    var END_BLOCK = 256;
    var REP_3_6 = 16;
    var REPZ_3_10 = 17;
    var REPZ_11_138 = 18;
    var extra_lbits = (
      /* extra bits for each length code */
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0])
    );
    var extra_dbits = (
      /* extra bits for each distance code */
      new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13])
    );
    var extra_blbits = (
      /* extra bits for each bit length code */
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7])
    );
    var bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    var DIST_CODE_LEN = 512;
    var static_ltree = new Array((L_CODES + 2) * 2);
    zero(static_ltree);
    var static_dtree = new Array(D_CODES * 2);
    zero(static_dtree);
    var _dist_code = new Array(DIST_CODE_LEN);
    zero(_dist_code);
    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
    zero(_length_code);
    var base_length = new Array(LENGTH_CODES);
    zero(base_length);
    var base_dist = new Array(D_CODES);
    zero(base_dist);
    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
      this.static_tree = static_tree;
      this.extra_bits = extra_bits;
      this.extra_base = extra_base;
      this.elems = elems;
      this.max_length = max_length;
      this.has_stree = static_tree && static_tree.length;
    }
    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;
    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;
      this.max_code = 0;
      this.stat_desc = stat_desc;
    }
    var d_code = (dist) => {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    };
    var put_short = (s, w) => {
      s.pending_buf[s.pending++] = w & 255;
      s.pending_buf[s.pending++] = w >>> 8 & 255;
    };
    var send_bits = (s, value, length) => {
      if (s.bi_valid > Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 65535;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> Buf_size - s.bi_valid;
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= value << s.bi_valid & 65535;
        s.bi_valid += length;
      }
    };
    var send_code = (s, c, tree) => {
      send_bits(
        s,
        tree[c * 2],
        tree[c * 2 + 1]
        /*.Len*/
      );
    };
    var bi_reverse = (code, len) => {
      let res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    };
    var bi_flush = (s) => {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 255;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    };
    var gen_bitlen = (s, desc) => {
      const tree = desc.dyn_tree;
      const max_code = desc.max_code;
      const stree = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const extra = desc.stat_desc.extra_bits;
      const base = desc.stat_desc.extra_base;
      const max_length = desc.stat_desc.max_length;
      let h;
      let n, m;
      let bits;
      let xbits;
      let f;
      let overflow = 0;
      for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      }
      tree[s.heap[s.heap_max] * 2 + 1] = 0;
      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1] = bits;
        if (n > max_code) {
          continue;
        }
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2];
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1] + xbits);
        }
      }
      if (overflow === 0) {
        return;
      }
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) {
          bits--;
        }
        s.bl_count[bits]--;
        s.bl_count[bits + 1] += 2;
        s.bl_count[max_length]--;
        overflow -= 2;
      } while (overflow > 0);
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) {
            continue;
          }
          if (tree[m * 2 + 1] !== bits) {
            s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
            tree[m * 2 + 1] = bits;
          }
          n--;
        }
      }
    };
    var gen_codes = (tree, max_code, bl_count) => {
      const next_code = new Array(MAX_BITS + 1);
      let code = 0;
      let bits;
      let n;
      for (bits = 1; bits <= MAX_BITS; bits++) {
        code = code + bl_count[bits - 1] << 1;
        next_code[bits] = code;
      }
      for (n = 0; n <= max_code; n++) {
        let len = tree[n * 2 + 1];
        if (len === 0) {
          continue;
        }
        tree[n * 2] = bi_reverse(next_code[len]++, len);
      }
    };
    var tr_static_init = () => {
      let n;
      let bits;
      let length;
      let code;
      let dist;
      const bl_count = new Array(MAX_BITS + 1);
      length = 0;
      for (code = 0; code < LENGTH_CODES - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < 1 << extra_lbits[code]; n++) {
          _length_code[length++] = code;
        }
      }
      _length_code[length - 1] = code;
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < 1 << extra_dbits[code]; n++) {
          _dist_code[dist++] = code;
        }
      }
      dist >>= 7;
      for (; code < D_CODES; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }
      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      gen_codes(static_ltree, L_CODES + 1, bl_count);
      for (n = 0; n < D_CODES; n++) {
        static_dtree[n * 2 + 1] = 5;
        static_dtree[n * 2] = bi_reverse(n, 5);
      }
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
    };
    var init_block = (s) => {
      let n;
      for (n = 0; n < L_CODES; n++) {
        s.dyn_ltree[n * 2] = 0;
      }
      for (n = 0; n < D_CODES; n++) {
        s.dyn_dtree[n * 2] = 0;
      }
      for (n = 0; n < BL_CODES; n++) {
        s.bl_tree[n * 2] = 0;
      }
      s.dyn_ltree[END_BLOCK * 2] = 1;
      s.opt_len = s.static_len = 0;
      s.sym_next = s.matches = 0;
    };
    var bi_windup = (s) => {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    };
    var smaller = (tree, n, m, depth) => {
      const _n2 = n * 2;
      const _m2 = m * 2;
      return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
    };
    var pqdownheap = (s, tree, k) => {
      const v = s.heap[k];
      let j = k << 1;
      while (j <= s.heap_len) {
        if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        if (smaller(tree, v, s.heap[j], s.depth)) {
          break;
        }
        s.heap[k] = s.heap[j];
        k = j;
        j <<= 1;
      }
      s.heap[k] = v;
    };
    var compress_block = (s, ltree, dtree) => {
      let dist;
      let lc;
      let sx = 0;
      let code;
      let extra;
      if (s.sym_next !== 0) {
        do {
          dist = s.pending_buf[s.sym_buf + sx++] & 255;
          dist += (s.pending_buf[s.sym_buf + sx++] & 255) << 8;
          lc = s.pending_buf[s.sym_buf + sx++];
          if (dist === 0) {
            send_code(s, lc, ltree);
          } else {
            code = _length_code[lc];
            send_code(s, code + LITERALS + 1, ltree);
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);
            }
            dist--;
            code = d_code(dist);
            send_code(s, code, dtree);
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);
            }
          }
        } while (sx < s.sym_next);
      }
      send_code(s, END_BLOCK, ltree);
    };
    var build_tree = (s, desc) => {
      const tree = desc.dyn_tree;
      const stree = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const elems = desc.stat_desc.elems;
      let n, m;
      let max_code = -1;
      let node;
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;
      for (n = 0; n < elems; n++) {
        if (tree[n * 2] !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;
        } else {
          tree[n * 2 + 1] = 0;
        }
      }
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (has_stree) {
          s.static_len -= stree[node * 2 + 1];
        }
      }
      desc.max_code = max_code;
      for (n = s.heap_len >> 1; n >= 1; n--) {
        pqdownheap(s, tree, n);
      }
      node = elems;
      do {
        n = s.heap[
          1
          /*SMALLEST*/
        ];
        s.heap[
          1
          /*SMALLEST*/
        ] = s.heap[s.heap_len--];
        pqdownheap(
          s,
          tree,
          1
          /*SMALLEST*/
        );
        m = s.heap[
          1
          /*SMALLEST*/
        ];
        s.heap[--s.heap_max] = n;
        s.heap[--s.heap_max] = m;
        tree[node * 2] = tree[n * 2] + tree[m * 2];
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node;
        s.heap[
          1
          /*SMALLEST*/
        ] = node++;
        pqdownheap(
          s,
          tree,
          1
          /*SMALLEST*/
        );
      } while (s.heap_len >= 2);
      s.heap[--s.heap_max] = s.heap[
        1
        /*SMALLEST*/
      ];
      gen_bitlen(s, desc);
      gen_codes(tree, max_code, s.bl_count);
    };
    var scan_tree = (s, tree, max_code) => {
      let n;
      let prevlen = -1;
      let curlen;
      let nextlen = tree[0 * 2 + 1];
      let count = 0;
      let max_count = 7;
      let min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1] = 65535;
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          s.bl_tree[curlen * 2] += count;
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            s.bl_tree[curlen * 2]++;
          }
          s.bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]++;
        } else {
          s.bl_tree[REPZ_11_138 * 2]++;
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };
    var send_tree = (s, tree, max_code) => {
      let n;
      let prevlen = -1;
      let curlen;
      let nextlen = tree[0 * 2 + 1];
      let count = 0;
      let max_count = 7;
      let min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          do {
            send_code(s, curlen, s.bl_tree);
          } while (--count !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);
        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);
        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };
    var build_bl_tree = (s) => {
      let max_blindex;
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
      build_tree(s, s.bl_desc);
      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
          break;
        }
      }
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      return max_blindex;
    };
    var send_all_trees = (s, lcodes, dcodes, blcodes) => {
      let rank;
      send_bits(s, lcodes - 257, 5);
      send_bits(s, dcodes - 1, 5);
      send_bits(s, blcodes - 4, 4);
      for (rank = 0; rank < blcodes; rank++) {
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
      }
      send_tree(s, s.dyn_ltree, lcodes - 1);
      send_tree(s, s.dyn_dtree, dcodes - 1);
    };
    var detect_data_type = (s) => {
      let block_mask = 4093624447;
      let n;
      for (n = 0; n <= 31; n++, block_mask >>>= 1) {
        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
          return Z_BINARY;
        }
      }
      if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS; n++) {
        if (s.dyn_ltree[n * 2] !== 0) {
          return Z_TEXT;
        }
      }
      return Z_BINARY;
    };
    var static_init_done = false;
    var _tr_init = (s) => {
      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }
      s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
      s.bi_buf = 0;
      s.bi_valid = 0;
      init_block(s);
    };
    var _tr_stored_block = (s, buf, stored_len, last) => {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
      bi_windup(s);
      put_short(s, stored_len);
      put_short(s, ~stored_len);
      if (stored_len) {
        s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
      }
      s.pending += stored_len;
    };
    var _tr_align = (s) => {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    };
    var _tr_flush_block = (s, buf, stored_len, last) => {
      let opt_lenb, static_lenb;
      let max_blindex = 0;
      if (s.level > 0) {
        if (s.strm.data_type === Z_UNKNOWN) {
          s.strm.data_type = detect_data_type(s);
        }
        build_tree(s, s.l_desc);
        build_tree(s, s.d_desc);
        max_blindex = build_bl_tree(s);
        opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        if (static_lenb <= opt_lenb) {
          opt_lenb = static_lenb;
        }
      } else {
        opt_lenb = static_lenb = stored_len + 5;
      }
      if (stored_len + 4 <= opt_lenb && buf !== -1) {
        _tr_stored_block(s, buf, stored_len, last);
      } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);
      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      init_block(s);
      if (last) {
        bi_windup(s);
      }
    };
    var _tr_tally = (s, dist, lc) => {
      s.pending_buf[s.sym_buf + s.sym_next++] = dist;
      s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
      s.pending_buf[s.sym_buf + s.sym_next++] = lc;
      if (dist === 0) {
        s.dyn_ltree[lc * 2]++;
      } else {
        s.matches++;
        dist--;
        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
        s.dyn_dtree[d_code(dist) * 2]++;
      }
      return s.sym_next === s.sym_end;
    };
    module2.exports._tr_init = _tr_init;
    module2.exports._tr_stored_block = _tr_stored_block;
    module2.exports._tr_flush_block = _tr_flush_block;
    module2.exports._tr_tally = _tr_tally;
    module2.exports._tr_align = _tr_align;
  }
});

// node_modules/pako/lib/zlib/adler32.js
var require_adler32 = __commonJS({
  "node_modules/pako/lib/zlib/adler32.js"(exports2, module2) {
    "use strict";
    var adler32 = (adler, buf, len, pos) => {
      let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
      while (len !== 0) {
        n = len > 2e3 ? 2e3 : len;
        len -= n;
        do {
          s1 = s1 + buf[pos++] | 0;
          s2 = s2 + s1 | 0;
        } while (--n);
        s1 %= 65521;
        s2 %= 65521;
      }
      return s1 | s2 << 16 | 0;
    };
    module2.exports = adler32;
  }
});

// node_modules/pako/lib/zlib/crc32.js
var require_crc32 = __commonJS({
  "node_modules/pako/lib/zlib/crc32.js"(exports2, module2) {
    "use strict";
    var makeTable = () => {
      let c, table = [];
      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
        }
        table[n] = c;
      }
      return table;
    };
    var crcTable = new Uint32Array(makeTable());
    var crc32 = (crc, buf, len, pos) => {
      const t = crcTable;
      const end = pos + len;
      crc ^= -1;
      for (let i = pos; i < end; i++) {
        crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
      }
      return crc ^ -1;
    };
    module2.exports = crc32;
  }
});

// node_modules/pako/lib/zlib/messages.js
var require_messages = __commonJS({
  "node_modules/pako/lib/zlib/messages.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      2: "need dictionary",
      /* Z_NEED_DICT       2  */
      1: "stream end",
      /* Z_STREAM_END      1  */
      0: "",
      /* Z_OK              0  */
      "-1": "file error",
      /* Z_ERRNO         (-1) */
      "-2": "stream error",
      /* Z_STREAM_ERROR  (-2) */
      "-3": "data error",
      /* Z_DATA_ERROR    (-3) */
      "-4": "insufficient memory",
      /* Z_MEM_ERROR     (-4) */
      "-5": "buffer error",
      /* Z_BUF_ERROR     (-5) */
      "-6": "incompatible version"
      /* Z_VERSION_ERROR (-6) */
    };
  }
});

// node_modules/pako/lib/zlib/constants.js
var require_constants4 = __commonJS({
  "node_modules/pako/lib/zlib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_MEM_ERROR: -4,
      Z_BUF_ERROR: -5,
      //Z_VERSION_ERROR: -6,
      /* compression levels */
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY: 0,
      Z_TEXT: 1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN: 2,
      /* The deflate compression method */
      Z_DEFLATED: 8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };
  }
});

// node_modules/pako/lib/zlib/deflate.js
var require_deflate = __commonJS({
  "node_modules/pako/lib/zlib/deflate.js"(exports2, module2) {
    "use strict";
    var { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = require_trees();
    var adler32 = require_adler32();
    var crc32 = require_crc32();
    var msg = require_messages();
    var {
      Z_NO_FLUSH,
      Z_PARTIAL_FLUSH,
      Z_FULL_FLUSH,
      Z_FINISH,
      Z_BLOCK,
      Z_OK,
      Z_STREAM_END,
      Z_STREAM_ERROR,
      Z_DATA_ERROR,
      Z_BUF_ERROR,
      Z_DEFAULT_COMPRESSION,
      Z_FILTERED,
      Z_HUFFMAN_ONLY,
      Z_RLE,
      Z_FIXED,
      Z_DEFAULT_STRATEGY,
      Z_UNKNOWN,
      Z_DEFLATED
    } = require_constants4();
    var MAX_MEM_LEVEL = 9;
    var MAX_WBITS = 15;
    var DEF_MEM_LEVEL = 8;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
    var PRESET_DICT = 32;
    var INIT_STATE = 42;
    var GZIP_STATE = 57;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;
    var BS_NEED_MORE = 1;
    var BS_BLOCK_DONE = 2;
    var BS_FINISH_STARTED = 3;
    var BS_FINISH_DONE = 4;
    var OS_CODE = 3;
    var err = (strm, errorCode) => {
      strm.msg = msg[errorCode];
      return errorCode;
    };
    var rank = (f) => {
      return f * 2 - (f > 4 ? 9 : 0);
    };
    var zero = (buf) => {
      let len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    };
    var slide_hash = (s) => {
      let n, m;
      let p;
      let wsize = s.w_size;
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= wsize ? m - wsize : 0;
      } while (--n);
      n = wsize;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= wsize ? m - wsize : 0;
      } while (--n);
    };
    var HASH_ZLIB = (s, prev, data) => (prev << s.hash_shift ^ data) & s.hash_mask;
    var HASH = HASH_ZLIB;
    var flush_pending = (strm) => {
      const s = strm.state;
      let len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) {
        return;
      }
      strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    };
    var flush_block_only = (s, last) => {
      _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    };
    var put_byte = (s, b) => {
      s.pending_buf[s.pending++] = b;
    };
    var putShortMSB = (s, b) => {
      s.pending_buf[s.pending++] = b >>> 8 & 255;
      s.pending_buf[s.pending++] = b & 255;
    };
    var read_buf = (strm, buf, start, size) => {
      let len = strm.avail_in;
      if (len > size) {
        len = size;
      }
      if (len === 0) {
        return 0;
      }
      strm.avail_in -= len;
      buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      } else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }
      strm.next_in += len;
      strm.total_in += len;
      return len;
    };
    var longest_match = (s, cur_match) => {
      let chain_length = s.max_chain_length;
      let scan = s.strstart;
      let match;
      let len;
      let best_len = s.prev_length;
      let nice_match = s.nice_match;
      const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
      const _win = s.window;
      const wmask = s.w_mask;
      const prev = s.prev;
      const strend = s.strstart + MAX_MATCH;
      let scan_end1 = _win[scan + best_len - 1];
      let scan_end = _win[scan + best_len];
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      if (nice_match > s.lookahead) {
        nice_match = s.lookahead;
      }
      do {
        match = cur_match;
        if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
          continue;
        }
        scan += 2;
        match++;
        do {
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    };
    var fill_window = (s) => {
      const _w_size = s.w_size;
      let n, more, str;
      do {
        more = s.window_size - s.lookahead - s.strstart;
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
          s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          s.block_start -= _w_size;
          if (s.insert > s.strstart) {
            s.insert = s.strstart;
          }
          slide_hash(s);
          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];
          s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
          while (s.insert) {
            s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
    };
    var deflate_stored = (s, flush) => {
      let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
      let len, left, have, last = 0;
      let used = s.strm.avail_in;
      do {
        len = 65535;
        have = s.bi_valid + 42 >> 3;
        if (s.strm.avail_out < have) {
          break;
        }
        have = s.strm.avail_out - have;
        left = s.strstart - s.block_start;
        if (len > left + s.strm.avail_in) {
          len = left + s.strm.avail_in;
        }
        if (len > have) {
          len = have;
        }
        if (len < min_block && (len === 0 && flush !== Z_FINISH || flush === Z_NO_FLUSH || len !== left + s.strm.avail_in)) {
          break;
        }
        last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;
        _tr_stored_block(s, 0, 0, last);
        s.pending_buf[s.pending - 4] = len;
        s.pending_buf[s.pending - 3] = len >> 8;
        s.pending_buf[s.pending - 2] = ~len;
        s.pending_buf[s.pending - 1] = ~len >> 8;
        flush_pending(s.strm);
        if (left) {
          if (left > len) {
            left = len;
          }
          s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
          s.strm.next_out += left;
          s.strm.avail_out -= left;
          s.strm.total_out += left;
          s.block_start += left;
          len -= left;
        }
        if (len) {
          read_buf(s.strm, s.strm.output, s.strm.next_out, len);
          s.strm.next_out += len;
          s.strm.avail_out -= len;
          s.strm.total_out += len;
        }
      } while (last === 0);
      used -= s.strm.avail_in;
      if (used) {
        if (used >= s.w_size) {
          s.matches = 2;
          s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
          s.strstart = s.w_size;
          s.insert = s.strstart;
        } else {
          if (s.window_size - s.strstart <= used) {
            s.strstart -= s.w_size;
            s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
            if (s.matches < 2) {
              s.matches++;
            }
            if (s.insert > s.strstart) {
              s.insert = s.strstart;
            }
          }
          s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
          s.strstart += used;
          s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
        }
        s.block_start = s.strstart;
      }
      if (s.high_water < s.strstart) {
        s.high_water = s.strstart;
      }
      if (last) {
        return BS_FINISH_DONE;
      }
      if (flush !== Z_NO_FLUSH && flush !== Z_FINISH && s.strm.avail_in === 0 && s.strstart === s.block_start) {
        return BS_BLOCK_DONE;
      }
      have = s.window_size - s.strstart;
      if (s.strm.avail_in > have && s.block_start >= s.w_size) {
        s.block_start -= s.w_size;
        s.strstart -= s.w_size;
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;
        }
        have += s.w_size;
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      if (have > s.strm.avail_in) {
        have = s.strm.avail_in;
      }
      if (have) {
        read_buf(s.strm, s.window, s.strstart, have);
        s.strstart += have;
        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
      }
      if (s.high_water < s.strstart) {
        s.high_water = s.strstart;
      }
      have = s.bi_valid + 42 >> 3;
      have = s.pending_buf_size - have > 65535 ? 65535 : s.pending_buf_size - have;
      min_block = have > s.w_size ? s.w_size : have;
      left = s.strstart - s.block_start;
      if (left >= min_block || (left || flush === Z_FINISH) && flush !== Z_NO_FLUSH && s.strm.avail_in === 0 && left <= have) {
        len = left > have ? have : left;
        last = flush === Z_FINISH && s.strm.avail_in === 0 && len === left ? 1 : 0;
        _tr_stored_block(s, s.block_start, len, last);
        s.block_start += len;
        flush_pending(s.strm);
      }
      return last ? BS_FINISH_STARTED : BS_NEED_MORE;
    };
    var deflate_fast = (s, flush) => {
      let hash_head;
      let bflush;
      for (; ; ) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
            s.match_length--;
            do {
              s.strstart++;
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            } while (--s.match_length !== 0);
            s.strstart++;
          } else {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
          }
        } else {
          bflush = _tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    var deflate_slow = (s, flush) => {
      let hash_head;
      let bflush;
      let max_insert;
      for (; ; ) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;
        if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
          if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
            s.match_length = MIN_MATCH - 1;
          }
        }
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;
          if (bflush) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
        } else if (s.match_available) {
          bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
          if (bflush) {
            flush_block_only(s, false);
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      if (s.match_available) {
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    var deflate_rle = (s, flush) => {
      let bflush;
      let prev;
      let scan, strend;
      const _win = s.window;
      for (; ; ) {
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
            } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          bflush = _tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    var deflate_huff = (s, flush) => {
      let bflush;
      for (; ; ) {
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }
            break;
          }
        }
        s.match_length = 0;
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }
    var configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),
      /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),
      /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),
      /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),
      /* 3 */
      new Config(4, 4, 16, 16, deflate_slow),
      /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),
      /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),
      /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),
      /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),
      /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)
      /* 9 max compression */
    ];
    var lm_init = (s) => {
      s.window_size = 2 * s.w_size;
      zero(s.head);
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;
      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    };
    function DeflateState() {
      this.strm = null;
      this.status = 0;
      this.pending_buf = null;
      this.pending_buf_size = 0;
      this.pending_out = 0;
      this.pending = 0;
      this.wrap = 0;
      this.gzhead = null;
      this.gzindex = 0;
      this.method = Z_DEFLATED;
      this.last_flush = -1;
      this.w_size = 0;
      this.w_bits = 0;
      this.w_mask = 0;
      this.window = null;
      this.window_size = 0;
      this.prev = null;
      this.head = null;
      this.ins_h = 0;
      this.hash_size = 0;
      this.hash_bits = 0;
      this.hash_mask = 0;
      this.hash_shift = 0;
      this.block_start = 0;
      this.match_length = 0;
      this.prev_match = 0;
      this.match_available = 0;
      this.strstart = 0;
      this.match_start = 0;
      this.lookahead = 0;
      this.prev_length = 0;
      this.max_chain_length = 0;
      this.max_lazy_match = 0;
      this.level = 0;
      this.strategy = 0;
      this.good_match = 0;
      this.nice_match = 0;
      this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
      this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
      this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);
      this.l_desc = null;
      this.d_desc = null;
      this.bl_desc = null;
      this.bl_count = new Uint16Array(MAX_BITS + 1);
      this.heap = new Uint16Array(2 * L_CODES + 1);
      zero(this.heap);
      this.heap_len = 0;
      this.heap_max = 0;
      this.depth = new Uint16Array(2 * L_CODES + 1);
      zero(this.depth);
      this.sym_buf = 0;
      this.lit_bufsize = 0;
      this.sym_next = 0;
      this.sym_end = 0;
      this.opt_len = 0;
      this.static_len = 0;
      this.matches = 0;
      this.insert = 0;
      this.bi_buf = 0;
      this.bi_valid = 0;
    }
    var deflateStateCheck = (strm) => {
      if (!strm) {
        return 1;
      }
      const s = strm.state;
      if (!s || s.strm !== strm || s.status !== INIT_STATE && //#ifdef GZIP
      s.status !== GZIP_STATE && //#endif
      s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {
        return 1;
      }
      return 0;
    };
    var deflateResetKeep = (strm) => {
      if (deflateStateCheck(strm)) {
        return err(strm, Z_STREAM_ERROR);
      }
      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;
      const s = strm.state;
      s.pending = 0;
      s.pending_out = 0;
      if (s.wrap < 0) {
        s.wrap = -s.wrap;
      }
      s.status = //#ifdef GZIP
      s.wrap === 2 ? GZIP_STATE : (
        //#endif
        s.wrap ? INIT_STATE : BUSY_STATE
      );
      strm.adler = s.wrap === 2 ? 0 : 1;
      s.last_flush = -2;
      _tr_init(s);
      return Z_OK;
    };
    var deflateReset = (strm) => {
      const ret = deflateResetKeep(strm);
      if (ret === Z_OK) {
        lm_init(strm.state);
      }
      return ret;
    };
    var deflateSetHeader = (strm, head) => {
      if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
        return Z_STREAM_ERROR;
      }
      strm.state.gzhead = head;
      return Z_OK;
    };
    var deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      let wrap = 1;
      if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2;
        windowBits -= 16;
      }
      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {
        return err(strm, Z_STREAM_ERROR);
      }
      if (windowBits === 8) {
        windowBits = 9;
      }
      const s = new DeflateState();
      strm.state = s;
      s.strm = strm;
      s.status = INIT_STATE;
      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;
      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      s.window = new Uint8Array(s.w_size * 2);
      s.head = new Uint16Array(s.hash_size);
      s.prev = new Uint16Array(s.w_size);
      s.lit_bufsize = 1 << memLevel + 6;
      s.pending_buf_size = s.lit_bufsize * 4;
      s.pending_buf = new Uint8Array(s.pending_buf_size);
      s.sym_buf = s.lit_bufsize;
      s.sym_end = (s.lit_bufsize - 1) * 3;
      s.level = level;
      s.strategy = strategy;
      s.method = method;
      return deflateReset(strm);
    };
    var deflateInit = (strm, level) => {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    };
    var deflate = (strm, flush) => {
      if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }
      const s = strm.state;
      if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH) {
        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }
      const old_flush = s.last_flush;
      s.last_flush = flush;
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      }
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      }
      if (s.status === INIT_STATE && s.wrap === 0) {
        s.status = BUSY_STATE;
      }
      if (s.status === INIT_STATE) {
        let header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
        let level_flags = -1;
        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= level_flags << 6;
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - header % 31;
        putShortMSB(s, header);
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 65535);
        }
        strm.adler = 1;
        s.status = BUSY_STATE;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      if (s.status === GZIP_STATE) {
        strm.adler = 0;
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) {
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
        } else {
          put_byte(
            s,
            (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 255);
          put_byte(s, s.gzhead.time >> 8 & 255);
          put_byte(s, s.gzhead.time >> 16 & 255);
          put_byte(s, s.gzhead.time >> 24 & 255);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, s.gzhead.os & 255);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 255);
            put_byte(s, s.gzhead.extra.length >> 8 & 255);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      }
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra) {
          let beg = s.pending;
          let left = (s.gzhead.extra.length & 65535) - s.gzindex;
          while (s.pending + left > s.pending_buf_size) {
            let copy = s.pending_buf_size - s.pending;
            s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
            s.pending = s.pending_buf_size;
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            s.gzindex += copy;
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK;
            }
            beg = 0;
            left -= copy;
          }
          let gzhead_extra = new Uint8Array(s.gzhead.extra);
          s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
          s.pending += left;
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          s.gzindex = 0;
        }
        s.status = NAME_STATE;
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name) {
          let beg = s.pending;
          let val;
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK;
              }
              beg = 0;
            }
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          s.gzindex = 0;
        }
        s.status = COMMENT_STATE;
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment) {
          let beg = s.pending;
          let val;
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK;
              }
              beg = 0;
            }
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
        }
        s.status = HCRC_STATE;
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK;
            }
          }
          put_byte(s, strm.adler & 255);
          put_byte(s, strm.adler >> 8 & 255);
          strm.adler = 0;
        }
        s.status = BUSY_STATE;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
        let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
          }
          return Z_OK;
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            _tr_align(s);
          } else if (flush !== Z_BLOCK) {
            _tr_stored_block(s, 0, 0, false);
            if (flush === Z_FULL_FLUSH) {
              zero(s.head);
              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            return Z_OK;
          }
        }
      }
      if (flush !== Z_FINISH) {
        return Z_OK;
      }
      if (s.wrap <= 0) {
        return Z_STREAM_END;
      }
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        put_byte(s, strm.adler >> 16 & 255);
        put_byte(s, strm.adler >> 24 & 255);
        put_byte(s, strm.total_in & 255);
        put_byte(s, strm.total_in >> 8 & 255);
        put_byte(s, strm.total_in >> 16 & 255);
        put_byte(s, strm.total_in >> 24 & 255);
      } else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      flush_pending(strm);
      if (s.wrap > 0) {
        s.wrap = -s.wrap;
      }
      return s.pending !== 0 ? Z_OK : Z_STREAM_END;
    };
    var deflateEnd = (strm) => {
      if (deflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const status = strm.state.status;
      strm.state = null;
      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    };
    var deflateSetDictionary = (strm, dictionary) => {
      let dictLength = dictionary.length;
      if (deflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const s = strm.state;
      const wrap = s.wrap;
      if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
        return Z_STREAM_ERROR;
      }
      if (wrap === 1) {
        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
      }
      s.wrap = 0;
      if (dictLength >= s.w_size) {
        if (wrap === 0) {
          zero(s.head);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      const avail = strm.avail_in;
      const next = strm.next_in;
      const input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        let str = s.strstart;
        let n = s.lookahead - (MIN_MATCH - 1);
        do {
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK;
    };
    module2.exports.deflateInit = deflateInit;
    module2.exports.deflateInit2 = deflateInit2;
    module2.exports.deflateReset = deflateReset;
    module2.exports.deflateResetKeep = deflateResetKeep;
    module2.exports.deflateSetHeader = deflateSetHeader;
    module2.exports.deflate = deflate;
    module2.exports.deflateEnd = deflateEnd;
    module2.exports.deflateSetDictionary = deflateSetDictionary;
    module2.exports.deflateInfo = "pako deflate (from Nodeca project)";
  }
});

// node_modules/pako/lib/utils/common.js
var require_common = __commonJS({
  "node_modules/pako/lib/utils/common.js"(exports2, module2) {
    "use strict";
    var _has = (obj, key) => {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };
    module2.exports.assign = function(obj) {
      const sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        const source = sources.shift();
        if (!source) {
          continue;
        }
        if (typeof source !== "object") {
          throw new TypeError(source + "must be non-object");
        }
        for (const p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }
      return obj;
    };
    module2.exports.flattenChunks = (chunks) => {
      let len = 0;
      for (let i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }
      const result = new Uint8Array(len);
      for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }
      return result;
    };
  }
});

// node_modules/pako/lib/utils/strings.js
var require_strings2 = __commonJS({
  "node_modules/pako/lib/utils/strings.js"(exports2, module2) {
    "use strict";
    var STR_APPLY_UIA_OK = true;
    try {
      String.fromCharCode.apply(null, new Uint8Array(1));
    } catch (__) {
      STR_APPLY_UIA_OK = false;
    }
    var _utf8len = new Uint8Array(256);
    for (let q = 0; q < 256; q++) {
      _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
    }
    _utf8len[254] = _utf8len[254] = 1;
    module2.exports.string2buf = (str) => {
      if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
        return new TextEncoder().encode(str);
      }
      let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 64512) === 56320) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
      }
      buf = new Uint8Array(buf_len);
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 64512) === 56320) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        if (c < 128) {
          buf[i++] = c;
        } else if (c < 2048) {
          buf[i++] = 192 | c >>> 6;
          buf[i++] = 128 | c & 63;
        } else if (c < 65536) {
          buf[i++] = 224 | c >>> 12;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | c & 63;
        } else {
          buf[i++] = 240 | c >>> 18;
          buf[i++] = 128 | c >>> 12 & 63;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | c & 63;
        }
      }
      return buf;
    };
    var buf2binstring = (buf, len) => {
      if (len < 65534) {
        if (buf.subarray && STR_APPLY_UIA_OK) {
          return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
        }
      }
      let result = "";
      for (let i = 0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    };
    module2.exports.buf2string = (buf, max) => {
      const len = max || buf.length;
      if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
        return new TextDecoder().decode(buf.subarray(0, max));
      }
      let i, out;
      const utf16buf = new Array(len * 2);
      for (out = 0, i = 0; i < len; ) {
        let c = buf[i++];
        if (c < 128) {
          utf16buf[out++] = c;
          continue;
        }
        let c_len = _utf8len[c];
        if (c_len > 4) {
          utf16buf[out++] = 65533;
          i += c_len - 1;
          continue;
        }
        c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
        while (c_len > 1 && i < len) {
          c = c << 6 | buf[i++] & 63;
          c_len--;
        }
        if (c_len > 1) {
          utf16buf[out++] = 65533;
          continue;
        }
        if (c < 65536) {
          utf16buf[out++] = c;
        } else {
          c -= 65536;
          utf16buf[out++] = 55296 | c >> 10 & 1023;
          utf16buf[out++] = 56320 | c & 1023;
        }
      }
      return buf2binstring(utf16buf, out);
    };
    module2.exports.utf8border = (buf, max) => {
      max = max || buf.length;
      if (max > buf.length) {
        max = buf.length;
      }
      let pos = max - 1;
      while (pos >= 0 && (buf[pos] & 192) === 128) {
        pos--;
      }
      if (pos < 0) {
        return max;
      }
      if (pos === 0) {
        return max;
      }
      return pos + _utf8len[buf[pos]] > max ? pos : max;
    };
  }
});

// node_modules/pako/lib/zlib/zstream.js
var require_zstream = __commonJS({
  "node_modules/pako/lib/zlib/zstream.js"(exports2, module2) {
    "use strict";
    function ZStream() {
      this.input = null;
      this.next_in = 0;
      this.avail_in = 0;
      this.total_in = 0;
      this.output = null;
      this.next_out = 0;
      this.avail_out = 0;
      this.total_out = 0;
      this.msg = "";
      this.state = null;
      this.data_type = 2;
      this.adler = 0;
    }
    module2.exports = ZStream;
  }
});

// node_modules/pako/lib/deflate.js
var require_deflate2 = __commonJS({
  "node_modules/pako/lib/deflate.js"(exports2, module2) {
    "use strict";
    var zlib_deflate = require_deflate();
    var utils = require_common();
    var strings = require_strings2();
    var msg = require_messages();
    var ZStream = require_zstream();
    var toString = Object.prototype.toString;
    var {
      Z_NO_FLUSH,
      Z_SYNC_FLUSH,
      Z_FULL_FLUSH,
      Z_FINISH,
      Z_OK,
      Z_STREAM_END,
      Z_DEFAULT_COMPRESSION,
      Z_DEFAULT_STRATEGY,
      Z_DEFLATED
    } = require_constants4();
    function Deflate(options) {
      this.options = utils.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY
      }, options || {});
      let opt = this.options;
      if (opt.raw && opt.windowBits > 0) {
        opt.windowBits = -opt.windowBits;
      } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
        opt.windowBits += 16;
      }
      this.err = 0;
      this.msg = "";
      this.ended = false;
      this.chunks = [];
      this.strm = new ZStream();
      this.strm.avail_out = 0;
      let status = zlib_deflate.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
      if (opt.header) {
        zlib_deflate.deflateSetHeader(this.strm, opt.header);
      }
      if (opt.dictionary) {
        let dict;
        if (typeof opt.dictionary === "string") {
          dict = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
          dict = new Uint8Array(opt.dictionary);
        } else {
          dict = opt.dictionary;
        }
        status = zlib_deflate.deflateSetDictionary(this.strm, dict);
        if (status !== Z_OK) {
          throw new Error(msg[status]);
        }
        this._dict_set = true;
      }
    }
    Deflate.prototype.push = function(data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      let status, _flush_mode;
      if (this.ended) {
        return false;
      }
      if (flush_mode === ~~flush_mode)
        _flush_mode = flush_mode;
      else
        _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
      if (typeof data === "string") {
        strm.input = strings.string2buf(data);
      } else if (toString.call(data) === "[object ArrayBuffer]") {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
      for (; ; ) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }
        status = zlib_deflate.deflate(strm, _flush_mode);
        if (status === Z_STREAM_END) {
          if (strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
          }
          status = zlib_deflate.deflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === Z_OK;
        }
        if (strm.avail_out === 0) {
          this.onData(strm.output);
          continue;
        }
        if (_flush_mode > 0 && strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }
        if (strm.avail_in === 0)
          break;
      }
      return true;
    };
    Deflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    Deflate.prototype.onEnd = function(status) {
      if (status === Z_OK) {
        this.result = utils.flattenChunks(this.chunks);
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    function deflate(input, options) {
      const deflator = new Deflate(options);
      deflator.push(input, true);
      if (deflator.err) {
        throw deflator.msg || msg[deflator.err];
      }
      return deflator.result;
    }
    function deflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return deflate(input, options);
    }
    function gzip(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate(input, options);
    }
    module2.exports.Deflate = Deflate;
    module2.exports.deflate = deflate;
    module2.exports.deflateRaw = deflateRaw;
    module2.exports.gzip = gzip;
    module2.exports.constants = require_constants4();
  }
});

// node_modules/pako/lib/zlib/inffast.js
var require_inffast = __commonJS({
  "node_modules/pako/lib/zlib/inffast.js"(exports2, module2) {
    "use strict";
    var BAD = 16209;
    var TYPE = 16191;
    module2.exports = function inflate_fast(strm, start) {
      let _in;
      let last;
      let _out;
      let beg;
      let end;
      let dmax;
      let wsize;
      let whave;
      let wnext;
      let s_window;
      let hold;
      let bits;
      let lcode;
      let dcode;
      let lmask;
      let dmask;
      let here;
      let op;
      let len;
      let dist;
      let from;
      let from_source;
      let input, output;
      const state = strm.state;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
      dmax = state.dmax;
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;
      top:
        do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = lcode[hold & lmask];
          dolen:
            for (; ; ) {
              op = here >>> 24;
              hold >>>= op;
              bits -= op;
              op = here >>> 16 & 255;
              if (op === 0) {
                output[_out++] = here & 65535;
              } else if (op & 16) {
                len = here & 65535;
                op &= 15;
                if (op) {
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                  len += hold & (1 << op) - 1;
                  hold >>>= op;
                  bits -= op;
                }
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                here = dcode[hold & dmask];
                dodist:
                  for (; ; ) {
                    op = here >>> 24;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 255;
                    if (op & 16) {
                      dist = here & 65535;
                      op &= 15;
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }
                      }
                      dist += hold & (1 << op) - 1;
                      if (dist > dmax) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD;
                        break top;
                      }
                      hold >>>= op;
                      bits -= op;
                      op = _out - beg;
                      if (dist > op) {
                        op = dist - op;
                        if (op > whave) {
                          if (state.sane) {
                            strm.msg = "invalid distance too far back";
                            state.mode = BAD;
                            break top;
                          }
                        }
                        from = 0;
                        from_source = s_window;
                        if (wnext === 0) {
                          from += wsize - op;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        } else if (wnext < op) {
                          from += wsize + wnext - op;
                          op -= wnext;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = 0;
                            if (wnext < len) {
                              op = wnext;
                              len -= op;
                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);
                              from = _out - dist;
                              from_source = output;
                            }
                          }
                        } else {
                          from += wnext - op;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        }
                        while (len > 2) {
                          output[_out++] = from_source[from++];
                          output[_out++] = from_source[from++];
                          output[_out++] = from_source[from++];
                          len -= 3;
                        }
                        if (len) {
                          output[_out++] = from_source[from++];
                          if (len > 1) {
                            output[_out++] = from_source[from++];
                          }
                        }
                      } else {
                        from = _out - dist;
                        do {
                          output[_out++] = output[from++];
                          output[_out++] = output[from++];
                          output[_out++] = output[from++];
                          len -= 3;
                        } while (len > 2);
                        if (len) {
                          output[_out++] = output[from++];
                          if (len > 1) {
                            output[_out++] = output[from++];
                          }
                        }
                      }
                    } else if ((op & 64) === 0) {
                      here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                      continue dodist;
                    } else {
                      strm.msg = "invalid distance code";
                      state.mode = BAD;
                      break top;
                    }
                    break;
                  }
              } else if ((op & 64) === 0) {
                here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                continue dolen;
              } else if (op & 32) {
                state.mode = TYPE;
                break top;
              } else {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break top;
              }
              break;
            }
        } while (_in < last && _out < end);
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
      strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
      state.hold = hold;
      state.bits = bits;
      return;
    };
  }
});

// node_modules/pako/lib/zlib/inftrees.js
var require_inftrees = __commonJS({
  "node_modules/pako/lib/zlib/inftrees.js"(exports2, module2) {
    "use strict";
    var MAXBITS = 15;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var lbase = new Uint16Array([
      /* Length codes 257..285 base */
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258,
      0,
      0
    ]);
    var lext = new Uint8Array([
      /* Length codes 257..285 extra */
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      16,
      72,
      78
    ]);
    var dbase = new Uint16Array([
      /* Distance codes 0..29 base */
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577,
      0,
      0
    ]);
    var dext = new Uint8Array([
      /* Distance codes 0..29 extra */
      16,
      16,
      16,
      16,
      17,
      17,
      18,
      18,
      19,
      19,
      20,
      20,
      21,
      21,
      22,
      22,
      23,
      23,
      24,
      24,
      25,
      25,
      26,
      26,
      27,
      27,
      28,
      28,
      29,
      29,
      64,
      64
    ]);
    var inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
      const bits = opts.bits;
      let len = 0;
      let sym = 0;
      let min = 0, max = 0;
      let root = 0;
      let curr = 0;
      let drop = 0;
      let left = 0;
      let used = 0;
      let huff = 0;
      let incr;
      let fill;
      let low;
      let mask;
      let next;
      let base = null;
      let match;
      const count = new Uint16Array(MAXBITS + 1);
      const offs = new Uint16Array(MAXBITS + 1);
      let extra = null;
      let here_bits, here_op, here_val;
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) {
          break;
        }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        opts.bits = 1;
        return 0;
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) {
          break;
        }
      }
      if (root < min) {
        root = min;
      }
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }
      }
      if (left > 0 && (type === CODES || max !== 1)) {
        return -1;
      }
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }
      if (type === CODES) {
        base = extra = work;
        match = 20;
      } else if (type === LENS) {
        base = lbase;
        extra = lext;
        match = 257;
      } else {
        base = dbase;
        extra = dext;
        match = 0;
      }
      huff = 0;
      sym = 0;
      len = min;
      next = table_index;
      curr = root;
      drop = 0;
      low = -1;
      used = 1 << root;
      mask = used - 1;
      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      for (; ; ) {
        here_bits = len - drop;
        if (work[sym] + 1 < match) {
          here_op = 0;
          here_val = work[sym];
        } else if (work[sym] >= match) {
          here_op = extra[work[sym] - match];
          here_val = base[work[sym] - match];
        } else {
          here_op = 32 + 64;
          here_val = 0;
        }
        incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill;
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        } while (fill !== 0);
        incr = 1 << len - 1;
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }
        sym++;
        if (--count[len] === 0) {
          if (len === max) {
            break;
          }
          len = lens[lens_index + work[sym]];
        }
        if (len > root && (huff & mask) !== low) {
          if (drop === 0) {
            drop = root;
          }
          next += min;
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) {
              break;
            }
            curr++;
            left <<= 1;
          }
          used += 1 << curr;
          if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
            return 1;
          }
          low = huff & mask;
          table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
      }
      if (huff !== 0) {
        table[next + huff] = len - drop << 24 | 64 << 16 | 0;
      }
      opts.bits = root;
      return 0;
    };
    module2.exports = inflate_table;
  }
});

// node_modules/pako/lib/zlib/inflate.js
var require_inflate = __commonJS({
  "node_modules/pako/lib/zlib/inflate.js"(exports2, module2) {
    "use strict";
    var adler32 = require_adler32();
    var crc32 = require_crc32();
    var inflate_fast = require_inffast();
    var inflate_table = require_inftrees();
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var {
      Z_FINISH,
      Z_BLOCK,
      Z_TREES,
      Z_OK,
      Z_STREAM_END,
      Z_NEED_DICT,
      Z_STREAM_ERROR,
      Z_DATA_ERROR,
      Z_MEM_ERROR,
      Z_BUF_ERROR,
      Z_DEFLATED
    } = require_constants4();
    var HEAD = 16180;
    var FLAGS = 16181;
    var TIME = 16182;
    var OS = 16183;
    var EXLEN = 16184;
    var EXTRA = 16185;
    var NAME = 16186;
    var COMMENT = 16187;
    var HCRC = 16188;
    var DICTID = 16189;
    var DICT = 16190;
    var TYPE = 16191;
    var TYPEDO = 16192;
    var STORED = 16193;
    var COPY_ = 16194;
    var COPY = 16195;
    var TABLE = 16196;
    var LENLENS = 16197;
    var CODELENS = 16198;
    var LEN_ = 16199;
    var LEN = 16200;
    var LENEXT = 16201;
    var DIST = 16202;
    var DISTEXT = 16203;
    var MATCH = 16204;
    var LIT = 16205;
    var CHECK = 16206;
    var LENGTH = 16207;
    var DONE = 16208;
    var BAD = 16209;
    var MEM = 16210;
    var SYNC = 16211;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var MAX_WBITS = 15;
    var DEF_WBITS = MAX_WBITS;
    var zswap32 = (q) => {
      return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
    };
    function InflateState() {
      this.strm = null;
      this.mode = 0;
      this.last = false;
      this.wrap = 0;
      this.havedict = false;
      this.flags = 0;
      this.dmax = 0;
      this.check = 0;
      this.total = 0;
      this.head = null;
      this.wbits = 0;
      this.wsize = 0;
      this.whave = 0;
      this.wnext = 0;
      this.window = null;
      this.hold = 0;
      this.bits = 0;
      this.length = 0;
      this.offset = 0;
      this.extra = 0;
      this.lencode = null;
      this.distcode = null;
      this.lenbits = 0;
      this.distbits = 0;
      this.ncode = 0;
      this.nlen = 0;
      this.ndist = 0;
      this.have = 0;
      this.next = null;
      this.lens = new Uint16Array(320);
      this.work = new Uint16Array(288);
      this.lendyn = null;
      this.distdyn = null;
      this.sane = 0;
      this.back = 0;
      this.was = 0;
    }
    var inflateStateCheck = (strm) => {
      if (!strm) {
        return 1;
      }
      const state = strm.state;
      if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
        return 1;
      }
      return 0;
    };
    var inflateResetKeep = (strm) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = "";
      if (state.wrap) {
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.flags = -1;
      state.dmax = 32768;
      state.head = null;
      state.hold = 0;
      state.bits = 0;
      state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
      state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
      state.sane = 1;
      state.back = -1;
      return Z_OK;
    };
    var inflateReset = (strm) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);
    };
    var inflateReset2 = (strm, windowBits) => {
      let wrap;
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else {
        wrap = (windowBits >> 4) + 5;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    };
    var inflateInit2 = (strm, windowBits) => {
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      const state = new InflateState();
      strm.state = state;
      state.strm = strm;
      state.window = null;
      state.mode = HEAD;
      const ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null;
      }
      return ret;
    };
    var inflateInit = (strm) => {
      return inflateInit2(strm, DEF_WBITS);
    };
    var virgin = true;
    var lenfix;
    var distfix;
    var fixedtables = (state) => {
      if (virgin) {
        lenfix = new Int32Array(512);
        distfix = new Int32Array(32);
        let sym = 0;
        while (sym < 144) {
          state.lens[sym++] = 8;
        }
        while (sym < 256) {
          state.lens[sym++] = 9;
        }
        while (sym < 280) {
          state.lens[sym++] = 7;
        }
        while (sym < 288) {
          state.lens[sym++] = 8;
        }
        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
        sym = 0;
        while (sym < 32) {
          state.lens[sym++] = 5;
        }
        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
        virgin = false;
      }
      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    };
    var updatewindow = (strm, src, end, copy) => {
      let dist;
      const state = strm.state;
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new Uint8Array(state.wsize);
      }
      if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
      } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
          state.window.set(src.subarray(end - copy, end), 0);
          state.wnext = copy;
          state.whave = state.wsize;
        } else {
          state.wnext += dist;
          if (state.wnext === state.wsize) {
            state.wnext = 0;
          }
          if (state.whave < state.wsize) {
            state.whave += dist;
          }
        }
      }
      return 0;
    };
    var inflate = (strm, flush) => {
      let state;
      let input, output;
      let next;
      let put;
      let have, left;
      let hold;
      let bits;
      let _in, _out;
      let copy;
      let from;
      let from_source;
      let here = 0;
      let here_bits, here_op, here_val;
      let last_bits, last_op, last_val;
      let len;
      let ret;
      const hbuf = new Uint8Array(4);
      let opts;
      let n;
      const order = (
        /* permutation of code lengths */
        new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
      );
      if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (state.mode === TYPE) {
        state.mode = TYPEDO;
      }
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      _in = have;
      _out = left;
      ret = Z_OK;
      inf_leave:
        for (; ; ) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              }
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.wrap & 2 && hold === 35615) {
                if (state.wbits === 0) {
                  state.wbits = 15;
                }
                state.check = 0;
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
                hold = 0;
                bits = 0;
                state.mode = FLAGS;
                break;
              }
              if (state.head) {
                state.head.done = false;
              }
              if (!(state.wrap & 1) || /* check if zlib header allowed */
              (((hold & 255) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state.mode = BAD;
                break;
              }
              if ((hold & 15) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              hold >>>= 4;
              bits -= 4;
              len = (hold & 15) + 8;
              if (state.wbits === 0) {
                state.wbits = len;
              }
              if (len > 15 || len > state.wbits) {
                strm.msg = "invalid window size";
                state.mode = BAD;
                break;
              }
              state.dmax = 1 << state.wbits;
              state.flags = 0;
              strm.adler = state.check = 1;
              state.mode = hold & 512 ? DICTID : TYPE;
              hold = 0;
              bits = 0;
              break;
            case FLAGS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.flags = hold;
              if ((state.flags & 255) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              if (state.flags & 57344) {
                strm.msg = "unknown header flags set";
                state.mode = BAD;
                break;
              }
              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = TIME;
            case TIME:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.head) {
                state.head.time = hold;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                hbuf[2] = hold >>> 16 & 255;
                hbuf[3] = hold >>> 24 & 255;
                state.check = crc32(state.check, hbuf, 4, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = OS;
            case OS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.head) {
                state.head.xflags = hold & 255;
                state.head.os = hold >> 8;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = EXLEN;
            case EXLEN:
              if (state.flags & 1024) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.length = hold;
                if (state.head) {
                  state.head.extra_len = hold;
                }
                if (state.flags & 512 && state.wrap & 4) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
              } else if (state.head) {
                state.head.extra = null;
              }
              state.mode = EXTRA;
            case EXTRA:
              if (state.flags & 1024) {
                copy = state.length;
                if (copy > have) {
                  copy = have;
                }
                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;
                    if (!state.head.extra) {
                      state.head.extra = new Uint8Array(state.head.extra_len);
                    }
                    state.head.extra.set(
                      input.subarray(
                        next,
                        // extra field is limited to 65536 bytes
                        // - no need for additional size check
                        next + copy
                      ),
                      /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                      len
                    );
                  }
                  if (state.flags & 512 && state.wrap & 4) {
                    state.check = crc32(state.check, input, copy, next);
                  }
                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }
                if (state.length) {
                  break inf_leave;
                }
              }
              state.length = 0;
              state.mode = NAME;
            case NAME:
              if (state.flags & 2048) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (state.flags & 512 && state.wrap & 4) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }
              state.length = 0;
              state.mode = COMMENT;
            case COMMENT:
              if (state.flags & 4096) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (state.flags & 512 && state.wrap & 4) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }
              state.mode = HCRC;
            case HCRC:
              if (state.flags & 512) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.wrap & 4 && hold !== (state.check & 65535)) {
                  strm.msg = "header crc mismatch";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }
              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;
            case DICTID:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              strm.adler = state.check = zswap32(hold);
              hold = 0;
              bits = 0;
              state.mode = DICT;
            case DICT:
              if (state.havedict === 0) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                return Z_NEED_DICT;
              }
              strm.adler = state.check = 1;
              state.mode = TYPE;
            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }
            case TYPEDO:
              if (state.last) {
                hold >>>= bits & 7;
                bits -= bits & 7;
                state.mode = CHECK;
                break;
              }
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.last = hold & 1;
              hold >>>= 1;
              bits -= 1;
              switch (hold & 3) {
                case 0:
                  state.mode = STORED;
                  break;
                case 1:
                  fixedtables(state);
                  state.mode = LEN_;
                  if (flush === Z_TREES) {
                    hold >>>= 2;
                    bits -= 2;
                    break inf_leave;
                  }
                  break;
                case 2:
                  state.mode = TABLE;
                  break;
                case 3:
                  strm.msg = "invalid block type";
                  state.mode = BAD;
              }
              hold >>>= 2;
              bits -= 2;
              break;
            case STORED:
              hold >>>= bits & 7;
              bits -= bits & 7;
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                strm.msg = "invalid stored block lengths";
                state.mode = BAD;
                break;
              }
              state.length = hold & 65535;
              hold = 0;
              bits = 0;
              state.mode = COPY_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case COPY_:
              state.mode = COPY;
            case COPY:
              copy = state.length;
              if (copy) {
                if (copy > have) {
                  copy = have;
                }
                if (copy > left) {
                  copy = left;
                }
                if (copy === 0) {
                  break inf_leave;
                }
                output.set(input.subarray(next, next + copy), put);
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              }
              state.mode = TYPE;
              break;
            case TABLE:
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.nlen = (hold & 31) + 257;
              hold >>>= 5;
              bits -= 5;
              state.ndist = (hold & 31) + 1;
              hold >>>= 5;
              bits -= 5;
              state.ncode = (hold & 15) + 4;
              hold >>>= 4;
              bits -= 4;
              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = LENLENS;
            case LENLENS:
              while (state.have < state.ncode) {
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.lens[order[state.have++]] = hold & 7;
                hold >>>= 3;
                bits -= 3;
              }
              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              }
              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = { bits: state.lenbits };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid code lengths set";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = CODELENS;
            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (; ; ) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (here_val < 16) {
                  hold >>>= here_bits;
                  bits -= here_bits;
                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    n = here_bits + 2;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    if (state.have === 0) {
                      strm.msg = "invalid bit length repeat";
                      state.mode = BAD;
                      break;
                    }
                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 3);
                    hold >>>= 2;
                    bits -= 2;
                  } else if (here_val === 17) {
                    n = here_bits + 3;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len = 0;
                    copy = 3 + (hold & 7);
                    hold >>>= 3;
                    bits -= 3;
                  } else {
                    n = here_bits + 7;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len = 0;
                    copy = 11 + (hold & 127);
                    hold >>>= 7;
                    bits -= 7;
                  }
                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = "invalid bit length repeat";
                    state.mode = BAD;
                    break;
                  }
                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              if (state.mode === BAD) {
                break;
              }
              if (state.lens[256] === 0) {
                strm.msg = "invalid code -- missing end-of-block";
                state.mode = BAD;
                break;
              }
              state.lenbits = 9;
              opts = { bits: state.lenbits };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid literal/lengths set";
                state.mode = BAD;
                break;
              }
              state.distbits = 6;
              state.distcode = state.distdyn;
              opts = { bits: state.distbits };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
              state.distbits = opts.bits;
              if (ret) {
                strm.msg = "invalid distances set";
                state.mode = BAD;
                break;
              }
              state.mode = LEN_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case LEN_:
              state.mode = LEN;
            case LEN:
              if (have >= 6 && left >= 258) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                inflate_fast(strm, _out);
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                if (state.mode === TYPE) {
                  state.back = -1;
                }
                break;
              }
              state.back = 0;
              for (; ; ) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (here_op && (here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state.back += here_bits;
              state.length = here_val;
              if (here_op === 0) {
                state.mode = LIT;
                break;
              }
              if (here_op & 32) {
                state.back = -1;
                state.mode = TYPE;
                break;
              }
              if (here_op & 64) {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break;
              }
              state.extra = here_op & 15;
              state.mode = LENEXT;
            case LENEXT:
              if (state.extra) {
                n = state.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.length += hold & (1 << state.extra) - 1;
                hold >>>= state.extra;
                bits -= state.extra;
                state.back += state.extra;
              }
              state.was = state.length;
              state.mode = DIST;
            case DIST:
              for (; ; ) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state.back += here_bits;
              if (here_op & 64) {
                strm.msg = "invalid distance code";
                state.mode = BAD;
                break;
              }
              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;
            case DISTEXT:
              if (state.extra) {
                n = state.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.offset += hold & (1 << state.extra) - 1;
                hold >>>= state.extra;
                bits -= state.extra;
                state.back += state.extra;
              }
              if (state.offset > state.dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
              state.mode = MATCH;
            case MATCH:
              if (left === 0) {
                break inf_leave;
              }
              copy = _out - left;
              if (state.offset > copy) {
                copy = state.offset - copy;
                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD;
                    break;
                  }
                }
                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }
                if (copy > state.length) {
                  copy = state.length;
                }
                from_source = state.window;
              } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }
              if (copy > left) {
                copy = left;
              }
              left -= copy;
              state.length -= copy;
              do {
                output[put++] = from_source[from++];
              } while (--copy);
              if (state.length === 0) {
                state.mode = LEN;
              }
              break;
            case LIT:
              if (left === 0) {
                break inf_leave;
              }
              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;
            case CHECK:
              if (state.wrap) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold |= input[next++] << bits;
                  bits += 8;
                }
                _out -= left;
                strm.total_out += _out;
                state.total += _out;
                if (state.wrap & 4 && _out) {
                  strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }
                _out = left;
                if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
                  strm.msg = "incorrect data check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = LENGTH;
            case LENGTH:
              if (state.wrap && state.flags) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
                  strm.msg = "incorrect length check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = DONE;
            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;
            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;
            case MEM:
              return Z_MEM_ERROR;
            case SYNC:
            default:
              return Z_STREAM_ERROR;
          }
        }
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap & 4 && _out) {
        strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
        state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    };
    var inflateEnd = (strm) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      let state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK;
    };
    var inflateGetHeader = (strm, head) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      if ((state.wrap & 2) === 0) {
        return Z_STREAM_ERROR;
      }
      state.head = head;
      head.done = false;
      return Z_OK;
    };
    var inflateSetDictionary = (strm, dictionary) => {
      const dictLength = dictionary.length;
      let state;
      let dictid;
      let ret;
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR;
      }
      if (state.mode === DICT) {
        dictid = 1;
        dictid = adler32(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR;
        }
      }
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      state.havedict = 1;
      return Z_OK;
    };
    module2.exports.inflateReset = inflateReset;
    module2.exports.inflateReset2 = inflateReset2;
    module2.exports.inflateResetKeep = inflateResetKeep;
    module2.exports.inflateInit = inflateInit;
    module2.exports.inflateInit2 = inflateInit2;
    module2.exports.inflate = inflate;
    module2.exports.inflateEnd = inflateEnd;
    module2.exports.inflateGetHeader = inflateGetHeader;
    module2.exports.inflateSetDictionary = inflateSetDictionary;
    module2.exports.inflateInfo = "pako inflate (from Nodeca project)";
  }
});

// node_modules/pako/lib/zlib/gzheader.js
var require_gzheader = __commonJS({
  "node_modules/pako/lib/zlib/gzheader.js"(exports2, module2) {
    "use strict";
    function GZheader() {
      this.text = 0;
      this.time = 0;
      this.xflags = 0;
      this.os = 0;
      this.extra = null;
      this.extra_len = 0;
      this.name = "";
      this.comment = "";
      this.hcrc = 0;
      this.done = false;
    }
    module2.exports = GZheader;
  }
});

// node_modules/pako/lib/inflate.js
var require_inflate2 = __commonJS({
  "node_modules/pako/lib/inflate.js"(exports2, module2) {
    "use strict";
    var zlib_inflate = require_inflate();
    var utils = require_common();
    var strings = require_strings2();
    var msg = require_messages();
    var ZStream = require_zstream();
    var GZheader = require_gzheader();
    var toString = Object.prototype.toString;
    var {
      Z_NO_FLUSH,
      Z_FINISH,
      Z_OK,
      Z_STREAM_END,
      Z_NEED_DICT,
      Z_STREAM_ERROR,
      Z_DATA_ERROR,
      Z_MEM_ERROR
    } = require_constants4();
    function Inflate(options) {
      this.options = utils.assign({
        chunkSize: 1024 * 64,
        windowBits: 15,
        to: ""
      }, options || {});
      const opt = this.options;
      if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) {
          opt.windowBits = -15;
        }
      }
      if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
        opt.windowBits += 32;
      }
      if (opt.windowBits > 15 && opt.windowBits < 48) {
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }
      this.err = 0;
      this.msg = "";
      this.ended = false;
      this.chunks = [];
      this.strm = new ZStream();
      this.strm.avail_out = 0;
      let status = zlib_inflate.inflateInit2(
        this.strm,
        opt.windowBits
      );
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
      this.header = new GZheader();
      zlib_inflate.inflateGetHeader(this.strm, this.header);
      if (opt.dictionary) {
        if (typeof opt.dictionary === "string") {
          opt.dictionary = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
          opt.dictionary = new Uint8Array(opt.dictionary);
        }
        if (opt.raw) {
          status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
          if (status !== Z_OK) {
            throw new Error(msg[status]);
          }
        }
      }
    }
    Inflate.prototype.push = function(data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      const dictionary = this.options.dictionary;
      let status, _flush_mode, last_avail_out;
      if (this.ended)
        return false;
      if (flush_mode === ~~flush_mode)
        _flush_mode = flush_mode;
      else
        _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
      if (toString.call(data) === "[object ArrayBuffer]") {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
      for (; ; ) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        status = zlib_inflate.inflate(strm, _flush_mode);
        if (status === Z_NEED_DICT && dictionary) {
          status = zlib_inflate.inflateSetDictionary(strm, dictionary);
          if (status === Z_OK) {
            status = zlib_inflate.inflate(strm, _flush_mode);
          } else if (status === Z_DATA_ERROR) {
            status = Z_NEED_DICT;
          }
        }
        while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {
          zlib_inflate.inflateReset(strm);
          status = zlib_inflate.inflate(strm, _flush_mode);
        }
        switch (status) {
          case Z_STREAM_ERROR:
          case Z_DATA_ERROR:
          case Z_NEED_DICT:
          case Z_MEM_ERROR:
            this.onEnd(status);
            this.ended = true;
            return false;
        }
        last_avail_out = strm.avail_out;
        if (strm.next_out) {
          if (strm.avail_out === 0 || status === Z_STREAM_END) {
            if (this.options.to === "string") {
              let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
              let tail = strm.next_out - next_out_utf8;
              let utf8str = strings.buf2string(strm.output, next_out_utf8);
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail)
                strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
              this.onData(utf8str);
            } else {
              this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
          }
        }
        if (status === Z_OK && last_avail_out === 0)
          continue;
        if (status === Z_STREAM_END) {
          status = zlib_inflate.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return true;
        }
        if (strm.avail_in === 0)
          break;
      }
      return true;
    };
    Inflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    Inflate.prototype.onEnd = function(status) {
      if (status === Z_OK) {
        if (this.options.to === "string") {
          this.result = this.chunks.join("");
        } else {
          this.result = utils.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    function inflate(input, options) {
      const inflator = new Inflate(options);
      inflator.push(input);
      if (inflator.err)
        throw inflator.msg || msg[inflator.err];
      return inflator.result;
    }
    function inflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return inflate(input, options);
    }
    module2.exports.Inflate = Inflate;
    module2.exports.inflate = inflate;
    module2.exports.inflateRaw = inflateRaw;
    module2.exports.ungzip = inflate;
    module2.exports.constants = require_constants4();
  }
});

// node_modules/pako/index.js
var require_pako = __commonJS({
  "node_modules/pako/index.js"(exports2, module2) {
    "use strict";
    var { Deflate, deflate, deflateRaw, gzip } = require_deflate2();
    var { Inflate, inflate, inflateRaw, ungzip } = require_inflate2();
    var constants = require_constants4();
    module2.exports.Deflate = Deflate;
    module2.exports.deflate = deflate;
    module2.exports.deflateRaw = deflateRaw;
    module2.exports.gzip = gzip;
    module2.exports.Inflate = Inflate;
    module2.exports.inflate = inflate;
    module2.exports.inflateRaw = inflateRaw;
    module2.exports.ungzip = ungzip;
    module2.exports.constants = constants;
  }
});

// node_modules/fast-png/lib/helpers/crc.js
var require_crc = __commonJS({
  "node_modules/fast-png/lib/helpers/crc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkCrc = checkCrc;
    exports2.writeCrc = writeCrc;
    var crcTable = [];
    for (let n = 0; n < 256; n++) {
      let c = n;
      for (let k = 0; k < 8; k++) {
        if (c & 1) {
          c = 3988292384 ^ c >>> 1;
        } else {
          c = c >>> 1;
        }
      }
      crcTable[n] = c;
    }
    var initialCrc = 4294967295;
    function updateCrc(currentCrc, data, length) {
      let c = currentCrc;
      for (let n = 0; n < length; n++) {
        c = crcTable[(c ^ data[n]) & 255] ^ c >>> 8;
      }
      return c;
    }
    function crc(data, length) {
      return (updateCrc(initialCrc, data, length) ^ initialCrc) >>> 0;
    }
    function checkCrc(buffer, crcLength, chunkName) {
      const expectedCrc = buffer.readUint32();
      const actualCrc = crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - crcLength - 4, crcLength), crcLength);
      if (actualCrc !== expectedCrc) {
        throw new Error(`CRC mismatch for chunk ${chunkName}. Expected ${expectedCrc}, found ${actualCrc}`);
      }
    }
    function writeCrc(buffer, length) {
      buffer.writeUint32(crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - length, length), length));
    }
  }
});

// node_modules/fast-png/lib/helpers/unfilter.js
var require_unfilter = __commonJS({
  "node_modules/fast-png/lib/helpers/unfilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unfilterNone = unfilterNone;
    exports2.unfilterSub = unfilterSub;
    exports2.unfilterUp = unfilterUp;
    exports2.unfilterAverage = unfilterAverage;
    exports2.unfilterPaeth = unfilterPaeth;
    function unfilterNone(currentLine, newLine, bytesPerLine) {
      for (let i = 0; i < bytesPerLine; i++) {
        newLine[i] = currentLine[i];
      }
    }
    function unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {
      let i = 0;
      for (; i < bytesPerPixel; i++) {
        newLine[i] = currentLine[i];
      }
      for (; i < bytesPerLine; i++) {
        newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 255;
      }
    }
    function unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {
      let i = 0;
      if (prevLine.length === 0) {
        for (; i < bytesPerLine; i++) {
          newLine[i] = currentLine[i];
        }
      } else {
        for (; i < bytesPerLine; i++) {
          newLine[i] = currentLine[i] + prevLine[i] & 255;
        }
      }
    }
    function unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {
      let i = 0;
      if (prevLine.length === 0) {
        for (; i < bytesPerPixel; i++) {
          newLine[i] = currentLine[i];
        }
        for (; i < bytesPerLine; i++) {
          newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] >> 1) & 255;
        }
      } else {
        for (; i < bytesPerPixel; i++) {
          newLine[i] = currentLine[i] + (prevLine[i] >> 1) & 255;
        }
        for (; i < bytesPerLine; i++) {
          newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] + prevLine[i] >> 1) & 255;
        }
      }
    }
    function unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {
      let i = 0;
      if (prevLine.length === 0) {
        for (; i < bytesPerPixel; i++) {
          newLine[i] = currentLine[i];
        }
        for (; i < bytesPerLine; i++) {
          newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 255;
        }
      } else {
        for (; i < bytesPerPixel; i++) {
          newLine[i] = currentLine[i] + prevLine[i] & 255;
        }
        for (; i < bytesPerLine; i++) {
          newLine[i] = currentLine[i] + paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel]) & 255;
        }
      }
    }
    function paethPredictor(a, b, c) {
      const p = a + b - c;
      const pa = Math.abs(p - a);
      const pb = Math.abs(p - b);
      const pc = Math.abs(p - c);
      if (pa <= pb && pa <= pc)
        return a;
      else if (pb <= pc)
        return b;
      else
        return c;
    }
  }
});

// node_modules/fast-png/lib/helpers/decodeInterlaceNull.js
var require_decodeInterlaceNull = __commonJS({
  "node_modules/fast-png/lib/helpers/decodeInterlaceNull.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeInterlaceNull = decodeInterlaceNull;
    var unfilter_1 = require_unfilter();
    var uint16 = new Uint16Array([255]);
    var uint8 = new Uint8Array(uint16.buffer);
    var osIsLittleEndian = uint8[0] === 255;
    var empty = new Uint8Array(0);
    function decodeInterlaceNull(params) {
      const { data, width, height, channels, depth } = params;
      const bytesPerPixel = channels * depth / 8;
      const bytesPerLine = width * bytesPerPixel;
      const newData = new Uint8Array(height * bytesPerLine);
      let prevLine = empty;
      let offset = 0;
      let currentLine;
      let newLine;
      for (let i = 0; i < height; i++) {
        currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);
        newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);
        switch (data[offset]) {
          case 0:
            (0, unfilter_1.unfilterNone)(currentLine, newLine, bytesPerLine);
            break;
          case 1:
            (0, unfilter_1.unfilterSub)(currentLine, newLine, bytesPerLine, bytesPerPixel);
            break;
          case 2:
            (0, unfilter_1.unfilterUp)(currentLine, newLine, prevLine, bytesPerLine);
            break;
          case 3:
            (0, unfilter_1.unfilterAverage)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);
            break;
          case 4:
            (0, unfilter_1.unfilterPaeth)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);
            break;
          default:
            throw new Error(`Unsupported filter: ${data[offset]}`);
        }
        prevLine = newLine;
        offset += bytesPerLine + 1;
      }
      if (depth === 16) {
        const uint16Data = new Uint16Array(newData.buffer);
        if (osIsLittleEndian) {
          for (let k = 0; k < uint16Data.length; k++) {
            uint16Data[k] = swap16(uint16Data[k]);
          }
        }
        return uint16Data;
      } else {
        return newData;
      }
    }
    function swap16(val) {
      return (val & 255) << 8 | val >> 8 & 255;
    }
  }
});

// node_modules/fast-png/lib/helpers/signature.js
var require_signature2 = __commonJS({
  "node_modules/fast-png/lib/helpers/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeSignature = writeSignature;
    exports2.checkSignature = checkSignature;
    exports2.hasPngSignature = hasPngSignature;
    var pngSignature = Uint8Array.of(137, 80, 78, 71, 13, 10, 26, 10);
    function writeSignature(buffer) {
      buffer.writeBytes(pngSignature);
    }
    function checkSignature(buffer) {
      if (!hasPngSignature(buffer.readBytes(pngSignature.length))) {
        throw new Error("wrong PNG signature");
      }
    }
    function hasPngSignature(array) {
      if (array.length < pngSignature.length) {
        return false;
      }
      for (let i = 0; i < pngSignature.length; i++) {
        if (array[i] !== pngSignature[i]) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/fast-png/lib/helpers/text.js
var require_text2 = __commonJS({
  "node_modules/fast-png/lib/helpers/text.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.textChunkName = void 0;
    exports2.decodetEXt = decodetEXt;
    exports2.encodetEXt = encodetEXt;
    exports2.readKeyword = readKeyword;
    exports2.readLatin1 = readLatin1;
    var crc_1 = require_crc();
    exports2.textChunkName = "tEXt";
    var NULL = 0;
    var latin1Decoder = new TextDecoder("latin1");
    function validateKeyword(keyword) {
      validateLatin1(keyword);
      if (keyword.length === 0 || keyword.length > 79) {
        throw new Error("keyword length must be between 1 and 79");
      }
    }
    var latin1Regex = /^[\u0000-\u00FF]*$/;
    function validateLatin1(text) {
      if (!latin1Regex.test(text)) {
        throw new Error("invalid latin1 text");
      }
    }
    function decodetEXt(text, buffer, length) {
      const keyword = readKeyword(buffer);
      text[keyword] = readLatin1(buffer, length - keyword.length - 1);
    }
    function encodetEXt(buffer, keyword, text) {
      validateKeyword(keyword);
      validateLatin1(text);
      const length = keyword.length + 1 + text.length;
      buffer.writeUint32(length);
      buffer.writeChars(exports2.textChunkName);
      buffer.writeChars(keyword);
      buffer.writeByte(NULL);
      buffer.writeChars(text);
      (0, crc_1.writeCrc)(buffer, length + 4);
    }
    function readKeyword(buffer) {
      buffer.mark();
      while (buffer.readByte() !== NULL) {
      }
      const end = buffer.offset;
      buffer.reset();
      const keyword = latin1Decoder.decode(buffer.readBytes(end - buffer.offset - 1));
      buffer.skip(1);
      validateKeyword(keyword);
      return keyword;
    }
    function readLatin1(buffer, length) {
      return latin1Decoder.decode(buffer.readBytes(length));
    }
  }
});

// node_modules/fast-png/lib/internalTypes.js
var require_internalTypes = __commonJS({
  "node_modules/fast-png/lib/internalTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InterlaceMethod = exports2.FilterMethod = exports2.CompressionMethod = exports2.ColorType = void 0;
    exports2.ColorType = {
      UNKNOWN: -1,
      GREYSCALE: 0,
      TRUECOLOUR: 2,
      INDEXED_COLOUR: 3,
      GREYSCALE_ALPHA: 4,
      TRUECOLOUR_ALPHA: 6
    };
    exports2.CompressionMethod = {
      UNKNOWN: -1,
      DEFLATE: 0
    };
    exports2.FilterMethod = {
      UNKNOWN: -1,
      ADAPTIVE: 0
    };
    exports2.InterlaceMethod = {
      UNKNOWN: -1,
      NO_INTERLACE: 0,
      ADAM7: 1
    };
  }
});

// node_modules/fast-png/lib/PngDecoder.js
var require_PngDecoder = __commonJS({
  "node_modules/fast-png/lib/PngDecoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var iobuffer_1 = require_IOBuffer();
    var pako_1 = require_pako();
    var crc_1 = require_crc();
    var decodeInterlaceNull_1 = require_decodeInterlaceNull();
    var signature_1 = require_signature2();
    var text_1 = require_text2();
    var internalTypes_1 = require_internalTypes();
    var PngDecoder = class extends iobuffer_1.IOBuffer {
      _checkCrc;
      _inflator;
      _png;
      _end;
      _hasPalette;
      _palette;
      _hasTransparency;
      _transparency;
      _compressionMethod;
      _filterMethod;
      _interlaceMethod;
      _colorType;
      constructor(data, options = {}) {
        super(data);
        const { checkCrc = false } = options;
        this._checkCrc = checkCrc;
        this._inflator = new pako_1.Inflate();
        this._png = {
          width: -1,
          height: -1,
          channels: -1,
          data: new Uint8Array(0),
          depth: 1,
          text: {}
        };
        this._end = false;
        this._hasPalette = false;
        this._palette = [];
        this._hasTransparency = false;
        this._transparency = new Uint16Array(0);
        this._compressionMethod = internalTypes_1.CompressionMethod.UNKNOWN;
        this._filterMethod = internalTypes_1.FilterMethod.UNKNOWN;
        this._interlaceMethod = internalTypes_1.InterlaceMethod.UNKNOWN;
        this._colorType = internalTypes_1.ColorType.UNKNOWN;
        this.setBigEndian();
      }
      decode() {
        (0, signature_1.checkSignature)(this);
        while (!this._end) {
          this.decodeChunk();
        }
        this.decodeImage();
        return this._png;
      }
      // https://www.w3.org/TR/PNG/#5Chunk-layout
      decodeChunk() {
        const length = this.readUint32();
        const type = this.readChars(4);
        const offset = this.offset;
        switch (type) {
          case "IHDR":
            this.decodeIHDR();
            break;
          case "PLTE":
            this.decodePLTE(length);
            break;
          case "IDAT":
            this.decodeIDAT(length);
            break;
          case "IEND":
            this._end = true;
            break;
          case "tRNS":
            this.decodetRNS(length);
            break;
          case "iCCP":
            this.decodeiCCP(length);
            break;
          case text_1.textChunkName:
            (0, text_1.decodetEXt)(this._png.text, this, length);
            break;
          case "pHYs":
            this.decodepHYs();
            break;
          default:
            this.skip(length);
            break;
        }
        if (this.offset - offset !== length) {
          throw new Error(`Length mismatch while decoding chunk ${type}`);
        }
        if (this._checkCrc) {
          (0, crc_1.checkCrc)(this, length + 4, type);
        } else {
          this.skip(4);
        }
      }
      // https://www.w3.org/TR/PNG/#11IHDR
      decodeIHDR() {
        const image = this._png;
        image.width = this.readUint32();
        image.height = this.readUint32();
        image.depth = checkBitDepth(this.readUint8());
        const colorType = this.readUint8();
        this._colorType = colorType;
        let channels;
        switch (colorType) {
          case internalTypes_1.ColorType.GREYSCALE:
            channels = 1;
            break;
          case internalTypes_1.ColorType.TRUECOLOUR:
            channels = 3;
            break;
          case internalTypes_1.ColorType.INDEXED_COLOUR:
            channels = 1;
            break;
          case internalTypes_1.ColorType.GREYSCALE_ALPHA:
            channels = 2;
            break;
          case internalTypes_1.ColorType.TRUECOLOUR_ALPHA:
            channels = 4;
            break;
          case internalTypes_1.ColorType.UNKNOWN:
          default:
            throw new Error(`Unknown color type: ${colorType}`);
        }
        this._png.channels = channels;
        this._compressionMethod = this.readUint8();
        if (this._compressionMethod !== internalTypes_1.CompressionMethod.DEFLATE) {
          throw new Error(`Unsupported compression method: ${this._compressionMethod}`);
        }
        this._filterMethod = this.readUint8();
        this._interlaceMethod = this.readUint8();
      }
      // https://www.w3.org/TR/PNG/#11PLTE
      decodePLTE(length) {
        if (length % 3 !== 0) {
          throw new RangeError(`PLTE field length must be a multiple of 3. Got ${length}`);
        }
        const l = length / 3;
        this._hasPalette = true;
        const palette = [];
        this._palette = palette;
        for (let i = 0; i < l; i++) {
          palette.push([this.readUint8(), this.readUint8(), this.readUint8()]);
        }
      }
      // https://www.w3.org/TR/PNG/#11IDAT
      decodeIDAT(length) {
        this._inflator.push(new Uint8Array(this.buffer, this.offset + this.byteOffset, length));
        this.skip(length);
      }
      // https://www.w3.org/TR/PNG/#11tRNS
      decodetRNS(length) {
        switch (this._colorType) {
          case internalTypes_1.ColorType.GREYSCALE:
          case internalTypes_1.ColorType.TRUECOLOUR: {
            if (length % 2 !== 0) {
              throw new RangeError(`tRNS chunk length must be a multiple of 2. Got ${length}`);
            }
            if (length / 2 > this._png.width * this._png.height) {
              throw new Error(`tRNS chunk contains more alpha values than there are pixels (${length / 2} vs ${this._png.width * this._png.height})`);
            }
            this._hasTransparency = true;
            this._transparency = new Uint16Array(length / 2);
            for (let i = 0; i < length / 2; i++) {
              this._transparency[i] = this.readUint16();
            }
            break;
          }
          case internalTypes_1.ColorType.INDEXED_COLOUR: {
            if (length > this._palette.length) {
              throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${length} vs ${this._palette.length})`);
            }
            let i = 0;
            for (; i < length; i++) {
              const alpha = this.readByte();
              this._palette[i].push(alpha);
            }
            for (; i < this._palette.length; i++) {
              this._palette[i].push(255);
            }
            break;
          }
          case internalTypes_1.ColorType.UNKNOWN:
          case internalTypes_1.ColorType.GREYSCALE_ALPHA:
          case internalTypes_1.ColorType.TRUECOLOUR_ALPHA:
          default: {
            throw new Error(`tRNS chunk is not supported for color type ${this._colorType}`);
          }
        }
      }
      // https://www.w3.org/TR/PNG/#11iCCP
      decodeiCCP(length) {
        const name = (0, text_1.readKeyword)(this);
        const compressionMethod = this.readUint8();
        if (compressionMethod !== internalTypes_1.CompressionMethod.DEFLATE) {
          throw new Error(`Unsupported iCCP compression method: ${compressionMethod}`);
        }
        const compressedProfile = this.readBytes(length - name.length - 2);
        this._png.iccEmbeddedProfile = {
          name,
          profile: (0, pako_1.inflate)(compressedProfile)
        };
      }
      // https://www.w3.org/TR/PNG/#11pHYs
      decodepHYs() {
        const ppuX = this.readUint32();
        const ppuY = this.readUint32();
        const unitSpecifier = this.readByte();
        this._png.resolution = { x: ppuX, y: ppuY, unit: unitSpecifier };
      }
      decodeImage() {
        if (this._inflator.err) {
          throw new Error(`Error while decompressing the data: ${this._inflator.err}`);
        }
        const data = this._inflator.result;
        if (this._filterMethod !== internalTypes_1.FilterMethod.ADAPTIVE) {
          throw new Error(`Filter method ${this._filterMethod} not supported`);
        }
        if (this._interlaceMethod === internalTypes_1.InterlaceMethod.NO_INTERLACE) {
          this._png.data = (0, decodeInterlaceNull_1.decodeInterlaceNull)({
            data,
            width: this._png.width,
            height: this._png.height,
            channels: this._png.channels,
            depth: this._png.depth
          });
        } else {
          throw new Error(`Interlace method ${this._interlaceMethod} not supported`);
        }
        if (this._hasPalette) {
          this._png.palette = this._palette;
        }
        if (this._hasTransparency) {
          this._png.transparency = this._transparency;
        }
      }
    };
    exports2.default = PngDecoder;
    function checkBitDepth(value) {
      if (value !== 1 && value !== 2 && value !== 4 && value !== 8 && value !== 16) {
        throw new Error(`invalid bit depth: ${value}`);
      }
      return value;
    }
  }
});

// node_modules/fast-png/lib/PngEncoder.js
var require_PngEncoder = __commonJS({
  "node_modules/fast-png/lib/PngEncoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var iobuffer_1 = require_IOBuffer();
    var pako_1 = require_pako();
    var crc_1 = require_crc();
    var signature_1 = require_signature2();
    var text_1 = require_text2();
    var internalTypes_1 = require_internalTypes();
    var defaultZlibOptions = {
      level: 3
    };
    var PngEncoder = class extends iobuffer_1.IOBuffer {
      _png;
      _zlibOptions;
      _colorType;
      constructor(data, options = {}) {
        super();
        this._colorType = internalTypes_1.ColorType.UNKNOWN;
        this._zlibOptions = { ...defaultZlibOptions, ...options.zlib };
        this._png = this._checkData(data);
        this.setBigEndian();
      }
      encode() {
        (0, signature_1.writeSignature)(this);
        this.encodeIHDR();
        this.encodeData();
        if (this._png.text) {
          for (const [keyword, text] of Object.entries(this._png.text)) {
            (0, text_1.encodetEXt)(this, keyword, text);
          }
        }
        this.encodeIEND();
        return this.toArray();
      }
      // https://www.w3.org/TR/PNG/#11IHDR
      encodeIHDR() {
        this.writeUint32(13);
        this.writeChars("IHDR");
        this.writeUint32(this._png.width);
        this.writeUint32(this._png.height);
        this.writeByte(this._png.depth);
        this.writeByte(this._colorType);
        this.writeByte(internalTypes_1.CompressionMethod.DEFLATE);
        this.writeByte(internalTypes_1.FilterMethod.ADAPTIVE);
        this.writeByte(internalTypes_1.InterlaceMethod.NO_INTERLACE);
        (0, crc_1.writeCrc)(this, 17);
      }
      // https://www.w3.org/TR/PNG/#11IEND
      encodeIEND() {
        this.writeUint32(0);
        this.writeChars("IEND");
        (0, crc_1.writeCrc)(this, 4);
      }
      // https://www.w3.org/TR/PNG/#11IDAT
      encodeIDAT(data) {
        this.writeUint32(data.length);
        this.writeChars("IDAT");
        this.writeBytes(data);
        (0, crc_1.writeCrc)(this, data.length + 4);
      }
      encodeData() {
        const { width, height, channels, depth, data } = this._png;
        const slotsPerLine = channels * width;
        const newData = new iobuffer_1.IOBuffer().setBigEndian();
        let offset = 0;
        for (let i = 0; i < height; i++) {
          newData.writeByte(0);
          if (depth === 8) {
            offset = writeDataBytes(data, newData, slotsPerLine, offset);
          } else if (depth === 16) {
            offset = writeDataUint16(data, newData, slotsPerLine, offset);
          } else {
            throw new Error("unreachable");
          }
        }
        const buffer = newData.toArray();
        const compressed = (0, pako_1.deflate)(buffer, this._zlibOptions);
        this.encodeIDAT(compressed);
      }
      _checkData(data) {
        const { colorType, channels, depth } = getColorType(data);
        const png = {
          width: checkInteger(data.width, "width"),
          height: checkInteger(data.height, "height"),
          channels,
          data: data.data,
          depth,
          text: data.text
        };
        this._colorType = colorType;
        const expectedSize = png.width * png.height * channels;
        if (png.data.length !== expectedSize) {
          throw new RangeError(`wrong data size. Found ${png.data.length}, expected ${expectedSize}`);
        }
        return png;
      }
    };
    exports2.default = PngEncoder;
    function checkInteger(value, name) {
      if (Number.isInteger(value) && value > 0) {
        return value;
      }
      throw new TypeError(`${name} must be a positive integer`);
    }
    function getColorType(data) {
      const { channels = 4, depth = 8 } = data;
      if (channels !== 4 && channels !== 3 && channels !== 2 && channels !== 1) {
        throw new RangeError(`unsupported number of channels: ${channels}`);
      }
      if (depth !== 8 && depth !== 16) {
        throw new RangeError(`unsupported bit depth: ${depth}`);
      }
      const returnValue = {
        channels,
        depth,
        colorType: internalTypes_1.ColorType.UNKNOWN
      };
      switch (channels) {
        case 4:
          returnValue.colorType = internalTypes_1.ColorType.TRUECOLOUR_ALPHA;
          break;
        case 3:
          returnValue.colorType = internalTypes_1.ColorType.TRUECOLOUR;
          break;
        case 1:
          returnValue.colorType = internalTypes_1.ColorType.GREYSCALE;
          break;
        case 2:
          returnValue.colorType = internalTypes_1.ColorType.GREYSCALE_ALPHA;
          break;
        default:
          throw new Error("unsupported number of channels");
      }
      return returnValue;
    }
    function writeDataBytes(data, newData, slotsPerLine, offset) {
      for (let j = 0; j < slotsPerLine; j++) {
        newData.writeByte(data[offset++]);
      }
      return offset;
    }
    function writeDataUint16(data, newData, slotsPerLine, offset) {
      for (let j = 0; j < slotsPerLine; j++) {
        newData.writeUint16(data[offset++]);
      }
      return offset;
    }
  }
});

// node_modules/fast-png/lib/types.js
var require_types = __commonJS({
  "node_modules/fast-png/lib/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResolutionUnitSpecifier = void 0;
    var ResolutionUnitSpecifier;
    (function(ResolutionUnitSpecifier2) {
      ResolutionUnitSpecifier2[ResolutionUnitSpecifier2["UNKNOWN"] = 0] = "UNKNOWN";
      ResolutionUnitSpecifier2[ResolutionUnitSpecifier2["METRE"] = 1] = "METRE";
    })(ResolutionUnitSpecifier || (exports2.ResolutionUnitSpecifier = ResolutionUnitSpecifier = {}));
  }
});

// node_modules/fast-png/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/fast-png/lib/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding2(exports3, m, p);
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasPngSignature = void 0;
    exports2.decode = decodePng;
    exports2.encode = encodePng;
    var PngDecoder_1 = __importDefault2(require_PngDecoder());
    var PngEncoder_1 = __importDefault2(require_PngEncoder());
    var signature_1 = require_signature2();
    Object.defineProperty(exports2, "hasPngSignature", { enumerable: true, get: function() {
      return signature_1.hasPngSignature;
    } });
    __exportStar2(require_types(), exports2);
    function decodePng(data, options) {
      const decoder = new PngDecoder_1.default(data, options);
      return decoder.decode();
    }
    function encodePng(png, options) {
      const encoder = new PngEncoder_1.default(png, options);
      return encoder.encode();
    }
  }
});

// node_modules/jpeg-js/lib/encoder.js
var require_encoder = __commonJS({
  "node_modules/jpeg-js/lib/encoder.js"(exports2, module2) {
    var btoa2 = btoa2 || function(buf) {
      return Buffer.from(buf).toString("base64");
    };
    function JPEGEncoder(quality) {
      var self2 = this;
      var fround = Math.round;
      var ffloor = Math.floor;
      var YTable = new Array(64);
      var UVTable = new Array(64);
      var fdtbl_Y = new Array(64);
      var fdtbl_UV = new Array(64);
      var YDC_HT;
      var UVDC_HT;
      var YAC_HT;
      var UVAC_HT;
      var bitcode = new Array(65535);
      var category = new Array(65535);
      var outputfDCTQuant = new Array(64);
      var DU = new Array(64);
      var byteout = [];
      var bytenew = 0;
      var bytepos = 7;
      var YDU = new Array(64);
      var UDU = new Array(64);
      var VDU = new Array(64);
      var clt = new Array(256);
      var RGB_YUV_TABLE = new Array(2048);
      var currentQuality;
      var ZigZag = [
        0,
        1,
        5,
        6,
        14,
        15,
        27,
        28,
        2,
        4,
        7,
        13,
        16,
        26,
        29,
        42,
        3,
        8,
        12,
        17,
        25,
        30,
        41,
        43,
        9,
        11,
        18,
        24,
        31,
        40,
        44,
        53,
        10,
        19,
        23,
        32,
        39,
        45,
        52,
        54,
        20,
        22,
        33,
        38,
        46,
        51,
        55,
        60,
        21,
        34,
        37,
        47,
        50,
        56,
        59,
        61,
        35,
        36,
        48,
        49,
        57,
        58,
        62,
        63
      ];
      var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
      var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
      var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125];
      var std_ac_luminance_values = [
        1,
        2,
        3,
        0,
        4,
        17,
        5,
        18,
        33,
        49,
        65,
        6,
        19,
        81,
        97,
        7,
        34,
        113,
        20,
        50,
        129,
        145,
        161,
        8,
        35,
        66,
        177,
        193,
        21,
        82,
        209,
        240,
        36,
        51,
        98,
        114,
        130,
        9,
        10,
        22,
        23,
        24,
        25,
        26,
        37,
        38,
        39,
        40,
        41,
        42,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
      ];
      var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
      var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
      var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119];
      var std_ac_chrominance_values = [
        0,
        1,
        2,
        3,
        17,
        4,
        5,
        33,
        49,
        6,
        18,
        65,
        81,
        7,
        97,
        113,
        19,
        34,
        50,
        129,
        8,
        20,
        66,
        145,
        161,
        177,
        193,
        9,
        35,
        51,
        82,
        240,
        21,
        98,
        114,
        209,
        10,
        22,
        36,
        52,
        225,
        37,
        241,
        23,
        24,
        25,
        26,
        38,
        39,
        40,
        41,
        42,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
      ];
      function initQuantTables(sf) {
        var YQT = [
          16,
          11,
          10,
          16,
          24,
          40,
          51,
          61,
          12,
          12,
          14,
          19,
          26,
          58,
          60,
          55,
          14,
          13,
          16,
          24,
          40,
          57,
          69,
          56,
          14,
          17,
          22,
          29,
          51,
          87,
          80,
          62,
          18,
          22,
          37,
          56,
          68,
          109,
          103,
          77,
          24,
          35,
          55,
          64,
          81,
          104,
          113,
          92,
          49,
          64,
          78,
          87,
          103,
          121,
          120,
          101,
          72,
          92,
          95,
          98,
          112,
          100,
          103,
          99
        ];
        for (var i = 0; i < 64; i++) {
          var t = ffloor((YQT[i] * sf + 50) / 100);
          if (t < 1) {
            t = 1;
          } else if (t > 255) {
            t = 255;
          }
          YTable[ZigZag[i]] = t;
        }
        var UVQT = [
          17,
          18,
          24,
          47,
          99,
          99,
          99,
          99,
          18,
          21,
          26,
          66,
          99,
          99,
          99,
          99,
          24,
          26,
          56,
          99,
          99,
          99,
          99,
          99,
          47,
          66,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99,
          99
        ];
        for (var j = 0; j < 64; j++) {
          var u = ffloor((UVQT[j] * sf + 50) / 100);
          if (u < 1) {
            u = 1;
          } else if (u > 255) {
            u = 255;
          }
          UVTable[ZigZag[j]] = u;
        }
        var aasf = [
          1,
          1.387039845,
          1.306562965,
          1.175875602,
          1,
          0.785694958,
          0.5411961,
          0.275899379
        ];
        var k = 0;
        for (var row = 0; row < 8; row++) {
          for (var col = 0; col < 8; col++) {
            fdtbl_Y[k] = 1 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8);
            fdtbl_UV[k] = 1 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8);
            k++;
          }
        }
      }
      function computeHuffmanTbl(nrcodes, std_table) {
        var codevalue = 0;
        var pos_in_table = 0;
        var HT = new Array();
        for (var k = 1; k <= 16; k++) {
          for (var j = 1; j <= nrcodes[k]; j++) {
            HT[std_table[pos_in_table]] = [];
            HT[std_table[pos_in_table]][0] = codevalue;
            HT[std_table[pos_in_table]][1] = k;
            pos_in_table++;
            codevalue++;
          }
          codevalue *= 2;
        }
        return HT;
      }
      function initHuffmanTbl() {
        YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
        UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
        YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
        UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
      }
      function initCategoryNumber() {
        var nrlower = 1;
        var nrupper = 2;
        for (var cat = 1; cat <= 15; cat++) {
          for (var nr = nrlower; nr < nrupper; nr++) {
            category[32767 + nr] = cat;
            bitcode[32767 + nr] = [];
            bitcode[32767 + nr][1] = cat;
            bitcode[32767 + nr][0] = nr;
          }
          for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
            category[32767 + nrneg] = cat;
            bitcode[32767 + nrneg] = [];
            bitcode[32767 + nrneg][1] = cat;
            bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
          }
          nrlower <<= 1;
          nrupper <<= 1;
        }
      }
      function initRGBYUVTable() {
        for (var i = 0; i < 256; i++) {
          RGB_YUV_TABLE[i] = 19595 * i;
          RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;
          RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 32768;
          RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;
          RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;
          RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 8421375;
          RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;
          RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;
        }
      }
      function writeBits(bs) {
        var value = bs[0];
        var posval = bs[1] - 1;
        while (posval >= 0) {
          if (value & 1 << posval) {
            bytenew |= 1 << bytepos;
          }
          posval--;
          bytepos--;
          if (bytepos < 0) {
            if (bytenew == 255) {
              writeByte(255);
              writeByte(0);
            } else {
              writeByte(bytenew);
            }
            bytepos = 7;
            bytenew = 0;
          }
        }
      }
      function writeByte(value) {
        byteout.push(value);
      }
      function writeWord(value) {
        writeByte(value >> 8 & 255);
        writeByte(value & 255);
      }
      function fDCTQuant(data, fdtbl) {
        var d0, d1, d2, d3, d4, d5, d6, d7;
        var dataOff = 0;
        var i;
        var I8 = 8;
        var I64 = 64;
        for (i = 0; i < I8; ++i) {
          d0 = data[dataOff];
          d1 = data[dataOff + 1];
          d2 = data[dataOff + 2];
          d3 = data[dataOff + 3];
          d4 = data[dataOff + 4];
          d5 = data[dataOff + 5];
          d6 = data[dataOff + 6];
          d7 = data[dataOff + 7];
          var tmp0 = d0 + d7;
          var tmp7 = d0 - d7;
          var tmp1 = d1 + d6;
          var tmp6 = d1 - d6;
          var tmp2 = d2 + d5;
          var tmp5 = d2 - d5;
          var tmp3 = d3 + d4;
          var tmp4 = d3 - d4;
          var tmp10 = tmp0 + tmp3;
          var tmp13 = tmp0 - tmp3;
          var tmp11 = tmp1 + tmp2;
          var tmp12 = tmp1 - tmp2;
          data[dataOff] = tmp10 + tmp11;
          data[dataOff + 4] = tmp10 - tmp11;
          var z1 = (tmp12 + tmp13) * 0.707106781;
          data[dataOff + 2] = tmp13 + z1;
          data[dataOff + 6] = tmp13 - z1;
          tmp10 = tmp4 + tmp5;
          tmp11 = tmp5 + tmp6;
          tmp12 = tmp6 + tmp7;
          var z5 = (tmp10 - tmp12) * 0.382683433;
          var z2 = 0.5411961 * tmp10 + z5;
          var z4 = 1.306562965 * tmp12 + z5;
          var z3 = tmp11 * 0.707106781;
          var z11 = tmp7 + z3;
          var z13 = tmp7 - z3;
          data[dataOff + 5] = z13 + z2;
          data[dataOff + 3] = z13 - z2;
          data[dataOff + 1] = z11 + z4;
          data[dataOff + 7] = z11 - z4;
          dataOff += 8;
        }
        dataOff = 0;
        for (i = 0; i < I8; ++i) {
          d0 = data[dataOff];
          d1 = data[dataOff + 8];
          d2 = data[dataOff + 16];
          d3 = data[dataOff + 24];
          d4 = data[dataOff + 32];
          d5 = data[dataOff + 40];
          d6 = data[dataOff + 48];
          d7 = data[dataOff + 56];
          var tmp0p2 = d0 + d7;
          var tmp7p2 = d0 - d7;
          var tmp1p2 = d1 + d6;
          var tmp6p2 = d1 - d6;
          var tmp2p2 = d2 + d5;
          var tmp5p2 = d2 - d5;
          var tmp3p2 = d3 + d4;
          var tmp4p2 = d3 - d4;
          var tmp10p2 = tmp0p2 + tmp3p2;
          var tmp13p2 = tmp0p2 - tmp3p2;
          var tmp11p2 = tmp1p2 + tmp2p2;
          var tmp12p2 = tmp1p2 - tmp2p2;
          data[dataOff] = tmp10p2 + tmp11p2;
          data[dataOff + 32] = tmp10p2 - tmp11p2;
          var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;
          data[dataOff + 16] = tmp13p2 + z1p2;
          data[dataOff + 48] = tmp13p2 - z1p2;
          tmp10p2 = tmp4p2 + tmp5p2;
          tmp11p2 = tmp5p2 + tmp6p2;
          tmp12p2 = tmp6p2 + tmp7p2;
          var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
          var z2p2 = 0.5411961 * tmp10p2 + z5p2;
          var z4p2 = 1.306562965 * tmp12p2 + z5p2;
          var z3p2 = tmp11p2 * 0.707106781;
          var z11p2 = tmp7p2 + z3p2;
          var z13p2 = tmp7p2 - z3p2;
          data[dataOff + 40] = z13p2 + z2p2;
          data[dataOff + 24] = z13p2 - z2p2;
          data[dataOff + 8] = z11p2 + z4p2;
          data[dataOff + 56] = z11p2 - z4p2;
          dataOff++;
        }
        var fDCTQuant2;
        for (i = 0; i < I64; ++i) {
          fDCTQuant2 = data[i] * fdtbl[i];
          outputfDCTQuant[i] = fDCTQuant2 > 0 ? fDCTQuant2 + 0.5 | 0 : fDCTQuant2 - 0.5 | 0;
        }
        return outputfDCTQuant;
      }
      function writeAPP0() {
        writeWord(65504);
        writeWord(16);
        writeByte(74);
        writeByte(70);
        writeByte(73);
        writeByte(70);
        writeByte(0);
        writeByte(1);
        writeByte(1);
        writeByte(0);
        writeWord(1);
        writeWord(1);
        writeByte(0);
        writeByte(0);
      }
      function writeAPP1(exifBuffer) {
        if (!exifBuffer)
          return;
        writeWord(65505);
        if (exifBuffer[0] === 69 && exifBuffer[1] === 120 && exifBuffer[2] === 105 && exifBuffer[3] === 102) {
          writeWord(exifBuffer.length + 2);
        } else {
          writeWord(exifBuffer.length + 5 + 2);
          writeByte(69);
          writeByte(120);
          writeByte(105);
          writeByte(102);
          writeByte(0);
        }
        for (var i = 0; i < exifBuffer.length; i++) {
          writeByte(exifBuffer[i]);
        }
      }
      function writeSOF0(width, height) {
        writeWord(65472);
        writeWord(17);
        writeByte(8);
        writeWord(height);
        writeWord(width);
        writeByte(3);
        writeByte(1);
        writeByte(17);
        writeByte(0);
        writeByte(2);
        writeByte(17);
        writeByte(1);
        writeByte(3);
        writeByte(17);
        writeByte(1);
      }
      function writeDQT() {
        writeWord(65499);
        writeWord(132);
        writeByte(0);
        for (var i = 0; i < 64; i++) {
          writeByte(YTable[i]);
        }
        writeByte(1);
        for (var j = 0; j < 64; j++) {
          writeByte(UVTable[j]);
        }
      }
      function writeDHT() {
        writeWord(65476);
        writeWord(418);
        writeByte(0);
        for (var i = 0; i < 16; i++) {
          writeByte(std_dc_luminance_nrcodes[i + 1]);
        }
        for (var j = 0; j <= 11; j++) {
          writeByte(std_dc_luminance_values[j]);
        }
        writeByte(16);
        for (var k = 0; k < 16; k++) {
          writeByte(std_ac_luminance_nrcodes[k + 1]);
        }
        for (var l = 0; l <= 161; l++) {
          writeByte(std_ac_luminance_values[l]);
        }
        writeByte(1);
        for (var m = 0; m < 16; m++) {
          writeByte(std_dc_chrominance_nrcodes[m + 1]);
        }
        for (var n = 0; n <= 11; n++) {
          writeByte(std_dc_chrominance_values[n]);
        }
        writeByte(17);
        for (var o = 0; o < 16; o++) {
          writeByte(std_ac_chrominance_nrcodes[o + 1]);
        }
        for (var p = 0; p <= 161; p++) {
          writeByte(std_ac_chrominance_values[p]);
        }
      }
      function writeCOM(comments) {
        if (typeof comments === "undefined" || comments.constructor !== Array)
          return;
        comments.forEach((e) => {
          if (typeof e !== "string")
            return;
          writeWord(65534);
          var l = e.length;
          writeWord(l + 2);
          var i;
          for (i = 0; i < l; i++)
            writeByte(e.charCodeAt(i));
        });
      }
      function writeSOS() {
        writeWord(65498);
        writeWord(12);
        writeByte(3);
        writeByte(1);
        writeByte(0);
        writeByte(2);
        writeByte(17);
        writeByte(3);
        writeByte(17);
        writeByte(0);
        writeByte(63);
        writeByte(0);
      }
      function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
        var EOB = HTAC[0];
        var M16zeroes = HTAC[240];
        var pos;
        var I16 = 16;
        var I63 = 63;
        var I64 = 64;
        var DU_DCT = fDCTQuant(CDU, fdtbl);
        for (var j = 0; j < I64; ++j) {
          DU[ZigZag[j]] = DU_DCT[j];
        }
        var Diff = DU[0] - DC;
        DC = DU[0];
        if (Diff == 0) {
          writeBits(HTDC[0]);
        } else {
          pos = 32767 + Diff;
          writeBits(HTDC[category[pos]]);
          writeBits(bitcode[pos]);
        }
        var end0pos = 63;
        for (; end0pos > 0 && DU[end0pos] == 0; end0pos--) {
        }
        ;
        if (end0pos == 0) {
          writeBits(EOB);
          return DC;
        }
        var i = 1;
        var lng;
        while (i <= end0pos) {
          var startpos = i;
          for (; DU[i] == 0 && i <= end0pos; ++i) {
          }
          var nrzeroes = i - startpos;
          if (nrzeroes >= I16) {
            lng = nrzeroes >> 4;
            for (var nrmarker = 1; nrmarker <= lng; ++nrmarker)
              writeBits(M16zeroes);
            nrzeroes = nrzeroes & 15;
          }
          pos = 32767 + DU[i];
          writeBits(HTAC[(nrzeroes << 4) + category[pos]]);
          writeBits(bitcode[pos]);
          i++;
        }
        if (end0pos != I63) {
          writeBits(EOB);
        }
        return DC;
      }
      function initCharLookupTable() {
        var sfcc = String.fromCharCode;
        for (var i = 0; i < 256; i++) {
          clt[i] = sfcc(i);
        }
      }
      this.encode = function(image, quality2) {
        var time_start = (/* @__PURE__ */ new Date()).getTime();
        if (quality2)
          setQuality(quality2);
        byteout = new Array();
        bytenew = 0;
        bytepos = 7;
        writeWord(65496);
        writeAPP0();
        writeCOM(image.comments);
        writeAPP1(image.exifBuffer);
        writeDQT();
        writeSOF0(image.width, image.height);
        writeDHT();
        writeSOS();
        var DCY = 0;
        var DCU = 0;
        var DCV = 0;
        bytenew = 0;
        bytepos = 7;
        this.encode.displayName = "_encode_";
        var imageData = image.data;
        var width = image.width;
        var height = image.height;
        var quadWidth = width * 4;
        var tripleWidth = width * 3;
        var x, y = 0;
        var r, g, b;
        var start, p, col, row, pos;
        while (y < height) {
          x = 0;
          while (x < quadWidth) {
            start = quadWidth * y + x;
            p = start;
            col = -1;
            row = 0;
            for (pos = 0; pos < 64; pos++) {
              row = pos >> 3;
              col = (pos & 7) * 4;
              p = start + row * quadWidth + col;
              if (y + row >= height) {
                p -= quadWidth * (y + 1 + row - height);
              }
              if (x + col >= quadWidth) {
                p -= x + col - quadWidth + 4;
              }
              r = imageData[p++];
              g = imageData[p++];
              b = imageData[p++];
              YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;
              UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;
              VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
            }
            DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
            DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
            DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
            x += 32;
          }
          y += 8;
        }
        if (bytepos >= 0) {
          var fillbits = [];
          fillbits[1] = bytepos + 1;
          fillbits[0] = (1 << bytepos + 1) - 1;
          writeBits(fillbits);
        }
        writeWord(65497);
        if (typeof module2 === "undefined")
          return new Uint8Array(byteout);
        return Buffer.from(byteout);
        var jpegDataUri = "data:image/jpeg;base64," + btoa2(byteout.join(""));
        byteout = [];
        var duration = (/* @__PURE__ */ new Date()).getTime() - time_start;
        return jpegDataUri;
      };
      function setQuality(quality2) {
        if (quality2 <= 0) {
          quality2 = 1;
        }
        if (quality2 > 100) {
          quality2 = 100;
        }
        if (currentQuality == quality2)
          return;
        var sf = 0;
        if (quality2 < 50) {
          sf = Math.floor(5e3 / quality2);
        } else {
          sf = Math.floor(200 - quality2 * 2);
        }
        initQuantTables(sf);
        currentQuality = quality2;
      }
      function init() {
        var time_start = (/* @__PURE__ */ new Date()).getTime();
        if (!quality)
          quality = 50;
        initCharLookupTable();
        initHuffmanTbl();
        initCategoryNumber();
        initRGBYUVTable();
        setQuality(quality);
        var duration = (/* @__PURE__ */ new Date()).getTime() - time_start;
      }
      init();
    }
    if (typeof module2 !== "undefined") {
      module2.exports = encode;
    } else if (typeof window !== "undefined") {
      window["jpeg-js"] = window["jpeg-js"] || {};
      window["jpeg-js"].encode = encode;
    }
    function encode(imgData, qu) {
      if (typeof qu === "undefined")
        qu = 50;
      var encoder = new JPEGEncoder(qu);
      var data = encoder.encode(imgData, qu);
      return {
        data,
        width: imgData.width,
        height: imgData.height
      };
    }
  }
});

// node_modules/jpeg-js/lib/decoder.js
var require_decoder = __commonJS({
  "node_modules/jpeg-js/lib/decoder.js"(exports2, module2) {
    var JpegImage = function jpegImage() {
      "use strict";
      var dctZigZag = new Int32Array([
        0,
        1,
        8,
        16,
        9,
        2,
        3,
        10,
        17,
        24,
        32,
        25,
        18,
        11,
        4,
        5,
        12,
        19,
        26,
        33,
        40,
        48,
        41,
        34,
        27,
        20,
        13,
        6,
        7,
        14,
        21,
        28,
        35,
        42,
        49,
        56,
        57,
        50,
        43,
        36,
        29,
        22,
        15,
        23,
        30,
        37,
        44,
        51,
        58,
        59,
        52,
        45,
        38,
        31,
        39,
        46,
        53,
        60,
        61,
        54,
        47,
        55,
        62,
        63
      ]);
      var dctCos1 = 4017;
      var dctSin1 = 799;
      var dctCos3 = 3406;
      var dctSin3 = 2276;
      var dctCos6 = 1567;
      var dctSin6 = 3784;
      var dctSqrt2 = 5793;
      var dctSqrt1d2 = 2896;
      function constructor() {
      }
      function buildHuffmanTable(codeLengths, values) {
        var k = 0, code = [], i, j, length = 16;
        while (length > 0 && !codeLengths[length - 1])
          length--;
        code.push({ children: [], index: 0 });
        var p = code[0], q;
        for (i = 0; i < length; i++) {
          for (j = 0; j < codeLengths[i]; j++) {
            p = code.pop();
            p.children[p.index] = values[k];
            while (p.index > 0) {
              if (code.length === 0)
                throw new Error("Could not recreate Huffman Table");
              p = code.pop();
            }
            p.index++;
            code.push(p);
            while (code.length <= i) {
              code.push(q = { children: [], index: 0 });
              p.children[p.index] = q.children;
              p = q;
            }
            k++;
          }
          if (i + 1 < length) {
            code.push(q = { children: [], index: 0 });
            p.children[p.index] = q.children;
            p = q;
          }
        }
        return code[0].children;
      }
      function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, opts) {
        var precision = frame.precision;
        var samplesPerLine = frame.samplesPerLine;
        var scanLines = frame.scanLines;
        var mcusPerLine = frame.mcusPerLine;
        var progressive = frame.progressive;
        var maxH = frame.maxH, maxV = frame.maxV;
        var startOffset = offset, bitsData = 0, bitsCount = 0;
        function readBit() {
          if (bitsCount > 0) {
            bitsCount--;
            return bitsData >> bitsCount & 1;
          }
          bitsData = data[offset++];
          if (bitsData == 255) {
            var nextByte = data[offset++];
            if (nextByte) {
              throw new Error("unexpected marker: " + (bitsData << 8 | nextByte).toString(16));
            }
          }
          bitsCount = 7;
          return bitsData >>> 7;
        }
        function decodeHuffman(tree) {
          var node = tree, bit;
          while ((bit = readBit()) !== null) {
            node = node[bit];
            if (typeof node === "number")
              return node;
            if (typeof node !== "object")
              throw new Error("invalid huffman sequence");
          }
          return null;
        }
        function receive(length) {
          var n2 = 0;
          while (length > 0) {
            var bit = readBit();
            if (bit === null)
              return;
            n2 = n2 << 1 | bit;
            length--;
          }
          return n2;
        }
        function receiveAndExtend(length) {
          var n2 = receive(length);
          if (n2 >= 1 << length - 1)
            return n2;
          return n2 + (-1 << length) + 1;
        }
        function decodeBaseline(component2, zz) {
          var t = decodeHuffman(component2.huffmanTableDC);
          var diff = t === 0 ? 0 : receiveAndExtend(t);
          zz[0] = component2.pred += diff;
          var k2 = 1;
          while (k2 < 64) {
            var rs = decodeHuffman(component2.huffmanTableAC);
            var s = rs & 15, r = rs >> 4;
            if (s === 0) {
              if (r < 15)
                break;
              k2 += 16;
              continue;
            }
            k2 += r;
            var z = dctZigZag[k2];
            zz[z] = receiveAndExtend(s);
            k2++;
          }
        }
        function decodeDCFirst(component2, zz) {
          var t = decodeHuffman(component2.huffmanTableDC);
          var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
          zz[0] = component2.pred += diff;
        }
        function decodeDCSuccessive(component2, zz) {
          zz[0] |= readBit() << successive;
        }
        var eobrun = 0;
        function decodeACFirst(component2, zz) {
          if (eobrun > 0) {
            eobrun--;
            return;
          }
          var k2 = spectralStart, e = spectralEnd;
          while (k2 <= e) {
            var rs = decodeHuffman(component2.huffmanTableAC);
            var s = rs & 15, r = rs >> 4;
            if (s === 0) {
              if (r < 15) {
                eobrun = receive(r) + (1 << r) - 1;
                break;
              }
              k2 += 16;
              continue;
            }
            k2 += r;
            var z = dctZigZag[k2];
            zz[z] = receiveAndExtend(s) * (1 << successive);
            k2++;
          }
        }
        var successiveACState = 0, successiveACNextValue;
        function decodeACSuccessive(component2, zz) {
          var k2 = spectralStart, e = spectralEnd, r = 0;
          while (k2 <= e) {
            var z = dctZigZag[k2];
            var direction = zz[z] < 0 ? -1 : 1;
            switch (successiveACState) {
              case 0:
                var rs = decodeHuffman(component2.huffmanTableAC);
                var s = rs & 15, r = rs >> 4;
                if (s === 0) {
                  if (r < 15) {
                    eobrun = receive(r) + (1 << r);
                    successiveACState = 4;
                  } else {
                    r = 16;
                    successiveACState = 1;
                  }
                } else {
                  if (s !== 1)
                    throw new Error("invalid ACn encoding");
                  successiveACNextValue = receiveAndExtend(s);
                  successiveACState = r ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                if (zz[z])
                  zz[z] += (readBit() << successive) * direction;
                else {
                  r--;
                  if (r === 0)
                    successiveACState = successiveACState == 2 ? 3 : 0;
                }
                break;
              case 3:
                if (zz[z])
                  zz[z] += (readBit() << successive) * direction;
                else {
                  zz[z] = successiveACNextValue << successive;
                  successiveACState = 0;
                }
                break;
              case 4:
                if (zz[z])
                  zz[z] += (readBit() << successive) * direction;
                break;
            }
            k2++;
          }
          if (successiveACState === 4) {
            eobrun--;
            if (eobrun === 0)
              successiveACState = 0;
          }
        }
        function decodeMcu(component2, decode2, mcu2, row, col) {
          var mcuRow = mcu2 / mcusPerLine | 0;
          var mcuCol = mcu2 % mcusPerLine;
          var blockRow = mcuRow * component2.v + row;
          var blockCol = mcuCol * component2.h + col;
          if (component2.blocks[blockRow] === void 0 && opts.tolerantDecoding)
            return;
          decode2(component2, component2.blocks[blockRow][blockCol]);
        }
        function decodeBlock(component2, decode2, mcu2) {
          var blockRow = mcu2 / component2.blocksPerLine | 0;
          var blockCol = mcu2 % component2.blocksPerLine;
          if (component2.blocks[blockRow] === void 0 && opts.tolerantDecoding)
            return;
          decode2(component2, component2.blocks[blockRow][blockCol]);
        }
        var componentsLength = components.length;
        var component, i, j, k, n;
        var decodeFn;
        if (progressive) {
          if (spectralStart === 0)
            decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
          else
            decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
        } else {
          decodeFn = decodeBaseline;
        }
        var mcu = 0, marker;
        var mcuExpected;
        if (componentsLength == 1) {
          mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
        } else {
          mcuExpected = mcusPerLine * frame.mcusPerColumn;
        }
        if (!resetInterval)
          resetInterval = mcuExpected;
        var h, v;
        while (mcu < mcuExpected) {
          for (i = 0; i < componentsLength; i++)
            components[i].pred = 0;
          eobrun = 0;
          if (componentsLength == 1) {
            component = components[0];
            for (n = 0; n < resetInterval; n++) {
              decodeBlock(component, decodeFn, mcu);
              mcu++;
            }
          } else {
            for (n = 0; n < resetInterval; n++) {
              for (i = 0; i < componentsLength; i++) {
                component = components[i];
                h = component.h;
                v = component.v;
                for (j = 0; j < v; j++) {
                  for (k = 0; k < h; k++) {
                    decodeMcu(component, decodeFn, mcu, j, k);
                  }
                }
              }
              mcu++;
              if (mcu === mcuExpected)
                break;
            }
          }
          if (mcu === mcuExpected) {
            do {
              if (data[offset] === 255) {
                if (data[offset + 1] !== 0) {
                  break;
                }
              }
              offset += 1;
            } while (offset < data.length - 2);
          }
          bitsCount = 0;
          marker = data[offset] << 8 | data[offset + 1];
          if (marker < 65280) {
            throw new Error("marker was not found");
          }
          if (marker >= 65488 && marker <= 65495) {
            offset += 2;
          } else
            break;
        }
        return offset - startOffset;
      }
      function buildComponentData(frame, component) {
        var lines = [];
        var blocksPerLine = component.blocksPerLine;
        var blocksPerColumn = component.blocksPerColumn;
        var samplesPerLine = blocksPerLine << 3;
        var R = new Int32Array(64), r = new Uint8Array(64);
        function quantizeAndInverse(zz, dataOut, dataIn) {
          var qt = component.quantizationTable;
          var v0, v1, v2, v3, v4, v5, v6, v7, t;
          var p = dataIn;
          var i2;
          for (i2 = 0; i2 < 64; i2++)
            p[i2] = zz[i2] * qt[i2];
          for (i2 = 0; i2 < 8; ++i2) {
            var row = 8 * i2;
            if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 && p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 && p[7 + row] == 0) {
              t = dctSqrt2 * p[0 + row] + 512 >> 10;
              p[0 + row] = t;
              p[1 + row] = t;
              p[2 + row] = t;
              p[3 + row] = t;
              p[4 + row] = t;
              p[5 + row] = t;
              p[6 + row] = t;
              p[7 + row] = t;
              continue;
            }
            v0 = dctSqrt2 * p[0 + row] + 128 >> 8;
            v1 = dctSqrt2 * p[4 + row] + 128 >> 8;
            v2 = p[2 + row];
            v3 = p[6 + row];
            v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;
            v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;
            v5 = p[3 + row] << 4;
            v6 = p[5 + row] << 4;
            t = v0 - v1 + 1 >> 1;
            v0 = v0 + v1 + 1 >> 1;
            v1 = t;
            t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
            v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
            v3 = t;
            t = v4 - v6 + 1 >> 1;
            v4 = v4 + v6 + 1 >> 1;
            v6 = t;
            t = v7 + v5 + 1 >> 1;
            v5 = v7 - v5 + 1 >> 1;
            v7 = t;
            t = v0 - v3 + 1 >> 1;
            v0 = v0 + v3 + 1 >> 1;
            v3 = t;
            t = v1 - v2 + 1 >> 1;
            v1 = v1 + v2 + 1 >> 1;
            v2 = t;
            t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
            v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
            v7 = t;
            t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
            v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
            v6 = t;
            p[0 + row] = v0 + v7;
            p[7 + row] = v0 - v7;
            p[1 + row] = v1 + v6;
            p[6 + row] = v1 - v6;
            p[2 + row] = v2 + v5;
            p[5 + row] = v2 - v5;
            p[3 + row] = v3 + v4;
            p[4 + row] = v3 - v4;
          }
          for (i2 = 0; i2 < 8; ++i2) {
            var col = i2;
            if (p[1 * 8 + col] == 0 && p[2 * 8 + col] == 0 && p[3 * 8 + col] == 0 && p[4 * 8 + col] == 0 && p[5 * 8 + col] == 0 && p[6 * 8 + col] == 0 && p[7 * 8 + col] == 0) {
              t = dctSqrt2 * dataIn[i2 + 0] + 8192 >> 14;
              p[0 * 8 + col] = t;
              p[1 * 8 + col] = t;
              p[2 * 8 + col] = t;
              p[3 * 8 + col] = t;
              p[4 * 8 + col] = t;
              p[5 * 8 + col] = t;
              p[6 * 8 + col] = t;
              p[7 * 8 + col] = t;
              continue;
            }
            v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;
            v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;
            v2 = p[2 * 8 + col];
            v3 = p[6 * 8 + col];
            v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;
            v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;
            v5 = p[3 * 8 + col];
            v6 = p[5 * 8 + col];
            t = v0 - v1 + 1 >> 1;
            v0 = v0 + v1 + 1 >> 1;
            v1 = t;
            t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
            v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
            v3 = t;
            t = v4 - v6 + 1 >> 1;
            v4 = v4 + v6 + 1 >> 1;
            v6 = t;
            t = v7 + v5 + 1 >> 1;
            v5 = v7 - v5 + 1 >> 1;
            v7 = t;
            t = v0 - v3 + 1 >> 1;
            v0 = v0 + v3 + 1 >> 1;
            v3 = t;
            t = v1 - v2 + 1 >> 1;
            v1 = v1 + v2 + 1 >> 1;
            v2 = t;
            t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
            v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
            v7 = t;
            t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
            v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
            v6 = t;
            p[0 * 8 + col] = v0 + v7;
            p[7 * 8 + col] = v0 - v7;
            p[1 * 8 + col] = v1 + v6;
            p[6 * 8 + col] = v1 - v6;
            p[2 * 8 + col] = v2 + v5;
            p[5 * 8 + col] = v2 - v5;
            p[3 * 8 + col] = v3 + v4;
            p[4 * 8 + col] = v3 - v4;
          }
          for (i2 = 0; i2 < 64; ++i2) {
            var sample2 = 128 + (p[i2] + 8 >> 4);
            dataOut[i2] = sample2 < 0 ? 0 : sample2 > 255 ? 255 : sample2;
          }
        }
        requestMemoryAllocation(samplesPerLine * blocksPerColumn * 8);
        var i, j;
        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
          var scanLine = blockRow << 3;
          for (i = 0; i < 8; i++)
            lines.push(new Uint8Array(samplesPerLine));
          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
            quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);
            var offset = 0, sample = blockCol << 3;
            for (j = 0; j < 8; j++) {
              var line = lines[scanLine + j];
              for (i = 0; i < 8; i++)
                line[sample + i] = r[offset++];
            }
          }
        }
        return lines;
      }
      function clampTo8bit(a) {
        return a < 0 ? 0 : a > 255 ? 255 : a;
      }
      constructor.prototype = {
        load: function load(path) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", path, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = function() {
            var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
            this.parse(data);
            if (this.onload)
              this.onload();
          }.bind(this);
          xhr.send(null);
        },
        parse: function parse(data) {
          var maxResolutionInPixels = this.opts.maxResolutionInMP * 1e3 * 1e3;
          var offset = 0, length = data.length;
          function readUint16() {
            var value = data[offset] << 8 | data[offset + 1];
            offset += 2;
            return value;
          }
          function readDataBlock() {
            var length2 = readUint16();
            var array = data.subarray(offset, offset + length2 - 2);
            offset += array.length;
            return array;
          }
          function prepareComponents(frame2) {
            var maxH2 = 1, maxV2 = 1;
            var component2, componentId2;
            for (componentId2 in frame2.components) {
              if (frame2.components.hasOwnProperty(componentId2)) {
                component2 = frame2.components[componentId2];
                if (maxH2 < component2.h)
                  maxH2 = component2.h;
                if (maxV2 < component2.v)
                  maxV2 = component2.v;
              }
            }
            var mcusPerLine = Math.ceil(frame2.samplesPerLine / 8 / maxH2);
            var mcusPerColumn = Math.ceil(frame2.scanLines / 8 / maxV2);
            for (componentId2 in frame2.components) {
              if (frame2.components.hasOwnProperty(componentId2)) {
                component2 = frame2.components[componentId2];
                var blocksPerLine = Math.ceil(Math.ceil(frame2.samplesPerLine / 8) * component2.h / maxH2);
                var blocksPerColumn = Math.ceil(Math.ceil(frame2.scanLines / 8) * component2.v / maxV2);
                var blocksPerLineForMcu = mcusPerLine * component2.h;
                var blocksPerColumnForMcu = mcusPerColumn * component2.v;
                var blocksToAllocate = blocksPerColumnForMcu * blocksPerLineForMcu;
                var blocks = [];
                requestMemoryAllocation(blocksToAllocate * 256);
                for (var i2 = 0; i2 < blocksPerColumnForMcu; i2++) {
                  var row = [];
                  for (var j2 = 0; j2 < blocksPerLineForMcu; j2++)
                    row.push(new Int32Array(64));
                  blocks.push(row);
                }
                component2.blocksPerLine = blocksPerLine;
                component2.blocksPerColumn = blocksPerColumn;
                component2.blocks = blocks;
              }
            }
            frame2.maxH = maxH2;
            frame2.maxV = maxV2;
            frame2.mcusPerLine = mcusPerLine;
            frame2.mcusPerColumn = mcusPerColumn;
          }
          var jfif = null;
          var adobe = null;
          var pixels = null;
          var frame, resetInterval;
          var quantizationTables = [], frames = [];
          var huffmanTablesAC = [], huffmanTablesDC = [];
          var fileMarker = readUint16();
          var malformedDataOffset = -1;
          this.comments = [];
          if (fileMarker != 65496) {
            throw new Error("SOI not found");
          }
          fileMarker = readUint16();
          while (fileMarker != 65497) {
            var i, j, l;
            switch (fileMarker) {
              case 65280:
                break;
              case 65504:
              case 65505:
              case 65506:
              case 65507:
              case 65508:
              case 65509:
              case 65510:
              case 65511:
              case 65512:
              case 65513:
              case 65514:
              case 65515:
              case 65516:
              case 65517:
              case 65518:
              case 65519:
              case 65534:
                var appData = readDataBlock();
                if (fileMarker === 65534) {
                  var comment = String.fromCharCode.apply(null, appData);
                  this.comments.push(comment);
                }
                if (fileMarker === 65504) {
                  if (appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {
                    jfif = {
                      version: { major: appData[5], minor: appData[6] },
                      densityUnits: appData[7],
                      xDensity: appData[8] << 8 | appData[9],
                      yDensity: appData[10] << 8 | appData[11],
                      thumbWidth: appData[12],
                      thumbHeight: appData[13],
                      thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                    };
                  }
                }
                if (fileMarker === 65505) {
                  if (appData[0] === 69 && appData[1] === 120 && appData[2] === 105 && appData[3] === 102 && appData[4] === 0) {
                    this.exifBuffer = appData.subarray(5, appData.length);
                  }
                }
                if (fileMarker === 65518) {
                  if (appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101 && appData[5] === 0) {
                    adobe = {
                      version: appData[6],
                      flags0: appData[7] << 8 | appData[8],
                      flags1: appData[9] << 8 | appData[10],
                      transformCode: appData[11]
                    };
                  }
                }
                break;
              case 65499:
                var quantizationTablesLength = readUint16();
                var quantizationTablesEnd = quantizationTablesLength + offset - 2;
                while (offset < quantizationTablesEnd) {
                  var quantizationTableSpec = data[offset++];
                  requestMemoryAllocation(64 * 4);
                  var tableData = new Int32Array(64);
                  if (quantizationTableSpec >> 4 === 0) {
                    for (j = 0; j < 64; j++) {
                      var z = dctZigZag[j];
                      tableData[z] = data[offset++];
                    }
                  } else if (quantizationTableSpec >> 4 === 1) {
                    for (j = 0; j < 64; j++) {
                      var z = dctZigZag[j];
                      tableData[z] = readUint16();
                    }
                  } else
                    throw new Error("DQT: invalid table spec");
                  quantizationTables[quantizationTableSpec & 15] = tableData;
                }
                break;
              case 65472:
              case 65473:
              case 65474:
                readUint16();
                frame = {};
                frame.extended = fileMarker === 65473;
                frame.progressive = fileMarker === 65474;
                frame.precision = data[offset++];
                frame.scanLines = readUint16();
                frame.samplesPerLine = readUint16();
                frame.components = {};
                frame.componentsOrder = [];
                var pixelsInFrame = frame.scanLines * frame.samplesPerLine;
                if (pixelsInFrame > maxResolutionInPixels) {
                  var exceededAmount = Math.ceil((pixelsInFrame - maxResolutionInPixels) / 1e6);
                  throw new Error(`maxResolutionInMP limit exceeded by ${exceededAmount}MP`);
                }
                var componentsCount = data[offset++], componentId;
                var maxH = 0, maxV = 0;
                for (i = 0; i < componentsCount; i++) {
                  componentId = data[offset];
                  var h = data[offset + 1] >> 4;
                  var v = data[offset + 1] & 15;
                  var qId = data[offset + 2];
                  if (h <= 0 || v <= 0) {
                    throw new Error("Invalid sampling factor, expected values above 0");
                  }
                  frame.componentsOrder.push(componentId);
                  frame.components[componentId] = {
                    h,
                    v,
                    quantizationIdx: qId
                  };
                  offset += 3;
                }
                prepareComponents(frame);
                frames.push(frame);
                break;
              case 65476:
                var huffmanLength = readUint16();
                for (i = 2; i < huffmanLength; ) {
                  var huffmanTableSpec = data[offset++];
                  var codeLengths = new Uint8Array(16);
                  var codeLengthSum = 0;
                  for (j = 0; j < 16; j++, offset++) {
                    codeLengthSum += codeLengths[j] = data[offset];
                  }
                  requestMemoryAllocation(16 + codeLengthSum);
                  var huffmanValues = new Uint8Array(codeLengthSum);
                  for (j = 0; j < codeLengthSum; j++, offset++)
                    huffmanValues[j] = data[offset];
                  i += 17 + codeLengthSum;
                  (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                }
                break;
              case 65501:
                readUint16();
                resetInterval = readUint16();
                break;
              case 65500:
                readUint16();
                readUint16();
                break;
              case 65498:
                var scanLength = readUint16();
                var selectorsCount = data[offset++];
                var components = [], component;
                for (i = 0; i < selectorsCount; i++) {
                  component = frame.components[data[offset++]];
                  var tableSpec = data[offset++];
                  component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                  component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                  components.push(component);
                }
                var spectralStart = data[offset++];
                var spectralEnd = data[offset++];
                var successiveApproximation = data[offset++];
                var processed = decodeScan(
                  data,
                  offset,
                  frame,
                  components,
                  resetInterval,
                  spectralStart,
                  spectralEnd,
                  successiveApproximation >> 4,
                  successiveApproximation & 15,
                  this.opts
                );
                offset += processed;
                break;
              case 65535:
                if (data[offset] !== 255) {
                  offset--;
                }
                break;
              default:
                if (data[offset - 3] == 255 && data[offset - 2] >= 192 && data[offset - 2] <= 254) {
                  offset -= 3;
                  break;
                } else if (fileMarker === 224 || fileMarker == 225) {
                  if (malformedDataOffset !== -1) {
                    throw new Error(`first unknown JPEG marker at offset ${malformedDataOffset.toString(16)}, second unknown JPEG marker ${fileMarker.toString(16)} at offset ${(offset - 1).toString(16)}`);
                  }
                  malformedDataOffset = offset - 1;
                  const nextOffset = readUint16();
                  if (data[offset + nextOffset - 2] === 255) {
                    offset += nextOffset - 2;
                    break;
                  }
                }
                throw new Error("unknown JPEG marker " + fileMarker.toString(16));
            }
            fileMarker = readUint16();
          }
          if (frames.length != 1)
            throw new Error("only single frame JPEGs supported");
          for (var i = 0; i < frames.length; i++) {
            var cp = frames[i].components;
            for (var j in cp) {
              cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];
              delete cp[j].quantizationIdx;
            }
          }
          this.width = frame.samplesPerLine;
          this.height = frame.scanLines;
          this.jfif = jfif;
          this.adobe = adobe;
          this.components = [];
          for (var i = 0; i < frame.componentsOrder.length; i++) {
            var component = frame.components[frame.componentsOrder[i]];
            this.components.push({
              lines: buildComponentData(frame, component),
              scaleX: component.h / frame.maxH,
              scaleY: component.v / frame.maxV
            });
          }
        },
        getData: function getData(width, height) {
          var scaleX = this.width / width, scaleY = this.height / height;
          var component1, component2, component3, component4;
          var component1Line, component2Line, component3Line, component4Line;
          var x, y;
          var offset = 0;
          var Y, Cb, Cr, K, C, M, Ye, R, G, B;
          var colorTransform;
          var dataLength = width * height * this.components.length;
          requestMemoryAllocation(dataLength);
          var data = new Uint8Array(dataLength);
          switch (this.components.length) {
            case 1:
              component1 = this.components[0];
              for (y = 0; y < height; y++) {
                component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                for (x = 0; x < width; x++) {
                  Y = component1Line[0 | x * component1.scaleX * scaleX];
                  data[offset++] = Y;
                }
              }
              break;
            case 2:
              component1 = this.components[0];
              component2 = this.components[1];
              for (y = 0; y < height; y++) {
                component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                for (x = 0; x < width; x++) {
                  Y = component1Line[0 | x * component1.scaleX * scaleX];
                  data[offset++] = Y;
                  Y = component2Line[0 | x * component2.scaleX * scaleX];
                  data[offset++] = Y;
                }
              }
              break;
            case 3:
              colorTransform = true;
              if (this.adobe && this.adobe.transformCode)
                colorTransform = true;
              else if (typeof this.opts.colorTransform !== "undefined")
                colorTransform = !!this.opts.colorTransform;
              component1 = this.components[0];
              component2 = this.components[1];
              component3 = this.components[2];
              for (y = 0; y < height; y++) {
                component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                component3Line = component3.lines[0 | y * component3.scaleY * scaleY];
                for (x = 0; x < width; x++) {
                  if (!colorTransform) {
                    R = component1Line[0 | x * component1.scaleX * scaleX];
                    G = component2Line[0 | x * component2.scaleX * scaleX];
                    B = component3Line[0 | x * component3.scaleX * scaleX];
                  } else {
                    Y = component1Line[0 | x * component1.scaleX * scaleX];
                    Cb = component2Line[0 | x * component2.scaleX * scaleX];
                    Cr = component3Line[0 | x * component3.scaleX * scaleX];
                    R = clampTo8bit(Y + 1.402 * (Cr - 128));
                    G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                    B = clampTo8bit(Y + 1.772 * (Cb - 128));
                  }
                  data[offset++] = R;
                  data[offset++] = G;
                  data[offset++] = B;
                }
              }
              break;
            case 4:
              if (!this.adobe)
                throw new Error("Unsupported color mode (4 components)");
              colorTransform = false;
              if (this.adobe && this.adobe.transformCode)
                colorTransform = true;
              else if (typeof this.opts.colorTransform !== "undefined")
                colorTransform = !!this.opts.colorTransform;
              component1 = this.components[0];
              component2 = this.components[1];
              component3 = this.components[2];
              component4 = this.components[3];
              for (y = 0; y < height; y++) {
                component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                component3Line = component3.lines[0 | y * component3.scaleY * scaleY];
                component4Line = component4.lines[0 | y * component4.scaleY * scaleY];
                for (x = 0; x < width; x++) {
                  if (!colorTransform) {
                    C = component1Line[0 | x * component1.scaleX * scaleX];
                    M = component2Line[0 | x * component2.scaleX * scaleX];
                    Ye = component3Line[0 | x * component3.scaleX * scaleX];
                    K = component4Line[0 | x * component4.scaleX * scaleX];
                  } else {
                    Y = component1Line[0 | x * component1.scaleX * scaleX];
                    Cb = component2Line[0 | x * component2.scaleX * scaleX];
                    Cr = component3Line[0 | x * component3.scaleX * scaleX];
                    K = component4Line[0 | x * component4.scaleX * scaleX];
                    C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));
                    M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                    Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));
                  }
                  data[offset++] = 255 - C;
                  data[offset++] = 255 - M;
                  data[offset++] = 255 - Ye;
                  data[offset++] = 255 - K;
                }
              }
              break;
            default:
              throw new Error("Unsupported color mode");
          }
          return data;
        },
        copyToImageData: function copyToImageData(imageData, formatAsRGBA) {
          var width = imageData.width, height = imageData.height;
          var imageDataArray = imageData.data;
          var data = this.getData(width, height);
          var i = 0, j = 0, x, y;
          var Y, K, C, M, R, G, B;
          switch (this.components.length) {
            case 1:
              for (y = 0; y < height; y++) {
                for (x = 0; x < width; x++) {
                  Y = data[i++];
                  imageDataArray[j++] = Y;
                  imageDataArray[j++] = Y;
                  imageDataArray[j++] = Y;
                  if (formatAsRGBA) {
                    imageDataArray[j++] = 255;
                  }
                }
              }
              break;
            case 3:
              for (y = 0; y < height; y++) {
                for (x = 0; x < width; x++) {
                  R = data[i++];
                  G = data[i++];
                  B = data[i++];
                  imageDataArray[j++] = R;
                  imageDataArray[j++] = G;
                  imageDataArray[j++] = B;
                  if (formatAsRGBA) {
                    imageDataArray[j++] = 255;
                  }
                }
              }
              break;
            case 4:
              for (y = 0; y < height; y++) {
                for (x = 0; x < width; x++) {
                  C = data[i++];
                  M = data[i++];
                  Y = data[i++];
                  K = data[i++];
                  R = 255 - clampTo8bit(C * (1 - K / 255) + K);
                  G = 255 - clampTo8bit(M * (1 - K / 255) + K);
                  B = 255 - clampTo8bit(Y * (1 - K / 255) + K);
                  imageDataArray[j++] = R;
                  imageDataArray[j++] = G;
                  imageDataArray[j++] = B;
                  if (formatAsRGBA) {
                    imageDataArray[j++] = 255;
                  }
                }
              }
              break;
            default:
              throw new Error("Unsupported color mode");
          }
        }
      };
      var totalBytesAllocated = 0;
      var maxMemoryUsageBytes = 0;
      function requestMemoryAllocation(increaseAmount = 0) {
        var totalMemoryImpactBytes = totalBytesAllocated + increaseAmount;
        if (totalMemoryImpactBytes > maxMemoryUsageBytes) {
          var exceededAmount = Math.ceil((totalMemoryImpactBytes - maxMemoryUsageBytes) / 1024 / 1024);
          throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${exceededAmount}MB`);
        }
        totalBytesAllocated = totalMemoryImpactBytes;
      }
      constructor.resetMaxMemoryUsage = function(maxMemoryUsageBytes_) {
        totalBytesAllocated = 0;
        maxMemoryUsageBytes = maxMemoryUsageBytes_;
      };
      constructor.getBytesAllocated = function() {
        return totalBytesAllocated;
      };
      constructor.requestMemoryAllocation = requestMemoryAllocation;
      return constructor;
    }();
    if (typeof module2 !== "undefined") {
      module2.exports = decode;
    } else if (typeof window !== "undefined") {
      window["jpeg-js"] = window["jpeg-js"] || {};
      window["jpeg-js"].decode = decode;
    }
    function decode(jpegData, userOpts = {}) {
      var defaultOpts = {
        // "undefined" means "Choose whether to transform colors based on the image’s color model."
        colorTransform: void 0,
        useTArray: false,
        formatAsRGBA: true,
        tolerantDecoding: true,
        maxResolutionInMP: 100,
        // Don't decode more than 100 megapixels
        maxMemoryUsageInMB: 512
        // Don't decode if memory footprint is more than 512MB
      };
      var opts = { ...defaultOpts, ...userOpts };
      var arr = new Uint8Array(jpegData);
      var decoder = new JpegImage();
      decoder.opts = opts;
      JpegImage.resetMaxMemoryUsage(opts.maxMemoryUsageInMB * 1024 * 1024);
      decoder.parse(arr);
      var channels = opts.formatAsRGBA ? 4 : 3;
      var bytesNeeded = decoder.width * decoder.height * channels;
      try {
        JpegImage.requestMemoryAllocation(bytesNeeded);
        var image = {
          width: decoder.width,
          height: decoder.height,
          exifBuffer: decoder.exifBuffer,
          data: opts.useTArray ? new Uint8Array(bytesNeeded) : Buffer.alloc(bytesNeeded)
        };
        if (decoder.comments.length > 0) {
          image["comments"] = decoder.comments;
        }
      } catch (err) {
        if (err instanceof RangeError) {
          throw new Error("Could not allocate enough memory for the image. Required: " + bytesNeeded);
        }
        if (err instanceof ReferenceError) {
          if (err.message === "Buffer is not defined") {
            throw new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true");
          }
        }
        throw err;
      }
      decoder.copyToImageData(image, opts.formatAsRGBA);
      return image;
    }
  }
});

// node_modules/jpeg-js/index.js
var require_jpeg_js = __commonJS({
  "node_modules/jpeg-js/index.js"(exports2, module2) {
    var encode = require_encoder();
    var decode = require_decoder();
    module2.exports = {
      encode,
      decode
    };
  }
});

// node_modules/image-js/lib/util/base64.js
var require_base642 = __commonJS({
  "node_modules/image-js/lib/util/base64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.decode = decode;
    exports2.encode = encode;
    exports2.toBase64URL = toBase64URL;
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var lookup = new Uint8Array(256);
    for (let i = 0; i < chars.length; i++) {
      lookup[chars.charCodeAt(i)] = i;
    }
    function encode(bytes) {
      let i;
      let len = bytes.length;
      let base64 = "";
      for (i = 0; i < len; i += 3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64 += chars[bytes[i + 2] & 63];
      }
      if (len % 3 === 2) {
        base64 = `${base64.substring(0, base64.length - 1)}=`;
      } else if (len % 3 === 1) {
        base64 = `${base64.substring(0, base64.length - 2)}==`;
      }
      return base64;
    }
    function decode(base64) {
      let bufferLength = base64.length * 0.75;
      let len = base64.length;
      let p = 0;
      let encoded1, encoded2, encoded3, encoded4;
      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }
      const bytes = new Uint8Array(bufferLength);
      for (let i = 0; i < len; i += 4) {
        encoded1 = lookup[base64.charCodeAt(i)];
        encoded2 = lookup[base64.charCodeAt(i + 1)];
        encoded3 = lookup[base64.charCodeAt(i + 2)];
        encoded4 = lookup[base64.charCodeAt(i + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }
      return bytes;
    }
    function toBase64URL(u8, type) {
      const base64 = encode(u8);
      return `data:${type};base64,${base64}`;
    }
  }
});

// node_modules/image-js/lib/image/core/environment.js
var require_environment = __commonJS({
  "node_modules/image-js/lib/image/core/environment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createCanvas = exports2.ImageData = exports2.DOMImage = void 0;
    Object.defineProperty(exports2, "createWriteStream", {
      enumerable: true,
      get: function() {
        return _fs.createWriteStream;
      }
    });
    exports2.env = void 0;
    exports2.fetchBinary = fetchBinary;
    Object.defineProperty(exports2, "writeFile", {
      enumerable: true,
      get: function() {
        return _fs.writeFile;
      }
    });
    var _fs = require("fs");
    var message = "requires the canvas library. Install it with `npm install canvas@next`.";
    var createCanvas = exports2.createCanvas = void 0;
    var DOMImage = exports2.DOMImage = void 0;
    var ImageData = exports2.ImageData = void 0;
    try {
      const canvas = require("canvas");
      exports2.createCanvas = createCanvas = canvas.createCanvas;
      exports2.DOMImage = DOMImage = canvas.Image;
      exports2.ImageData = ImageData = canvas.ImageData;
    } catch (e) {
      exports2.createCanvas = createCanvas = function() {
        throw new Error(`createCanvas ${message}`);
      };
      exports2.DOMImage = DOMImage = function() {
        throw new Error(`DOMImage ${message}`);
      };
      exports2.ImageData = ImageData = function() {
        throw new Error(`ImageData ${message}`);
      };
    }
    var env = exports2.env = "node";
    function fetchBinary(path) {
      return new Promise(function(resolve2, reject2) {
        (0, _fs.readFile)(path, function(err, data) {
          if (err)
            reject2(err);
          else
            resolve2(data.buffer);
        });
      });
    }
  }
});

// node_modules/image-js/lib/image/core/mediaTypes.js
var require_mediaTypes = __commonJS({
  "node_modules/image-js/lib/image/core/mediaTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getType = getType;
    function getType(type) {
      if (!type.includes("/")) {
        type = `image/${type}`;
      }
      return type;
    }
  }
});

// node_modules/image-js/lib/image/core/export.js
var require_export = __commonJS({
  "node_modules/image-js/lib/image/core/export.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setExportMethods;
    var _blobUtil = require_blob_util_cjs();
    var _fastBmp = require_src();
    var _fastPng = require_lib3();
    var _jpegJs = require_jpeg_js();
    var _base = require_base642();
    var _environment = require_environment();
    var _mediaTypes = require_mediaTypes();
    function encodeJpeg(image, options = {}) {
      const data = {
        width: image.width,
        height: image.height,
        data: image.getRGBAData()
      };
      return (0, _jpegJs.encode)(data, options.quality).data;
    }
    function encodePng(image, options) {
      const data = {
        width: image.width,
        height: image.height,
        channels: image.channels,
        depth: image.bitDepth,
        data: image.data
      };
      if (data.depth === 1 || data.depth === 32) {
        data.depth = 8;
        data.channels = 4;
        data.data = image.getRGBAData();
      }
      return (0, _fastPng.encode)(data, options);
    }
    var exportMethods = {
      /**
       * Save the image to disk (Node.js only)
       * @memberof Image
       * @instance
       * @param {string} path
       * @param {object} [options]
       * @param {string} [options.format] - One of: png, jpg, bmp (limited support for bmp). If not specified will try to infer from filename
       * @param {boolean} [options.useCanvas=false] - Force use of the canvas API to save the image instead of a JavaScript implementation
       * @param {object} [options.encoder] - Specify options for the encoder if applicable.
       * @return {Promise} - Resolves when the file is fully written
       */
      save(path, options = {}) {
        const {
          useCanvas = false,
          encoder: encoderOptions = void 0
        } = options;
        let {
          format
        } = options;
        if (!format) {
          const m = /\.(?<format>[a-zA-Z]+)$/.exec(path);
          if (m) {
            format = m.groups.format.toLowerCase();
          }
        }
        if (!format) {
          throw new Error("file format not provided");
        }
        return new Promise((resolve2, reject2) => {
          let stream2, buffer;
          switch (format.toLowerCase()) {
            case "png": {
              if (useCanvas) {
                stream2 = this.getCanvas().pngStream();
              } else {
                buffer = encodePng(this, encoderOptions);
              }
              break;
            }
            case "jpg":
            case "jpeg":
              if (useCanvas) {
                stream2 = this.getCanvas().jpegStream();
              } else {
                buffer = encodeJpeg(this, encoderOptions);
              }
              break;
            case "bmp":
              buffer = (0, _fastBmp.encode)(this, encoderOptions);
              break;
            default:
              throw new RangeError(`invalid output format: ${format}`);
          }
          if (stream2) {
            let out = (0, _environment.createWriteStream)(path);
            out.on("finish", resolve2);
            out.on("error", reject2);
            stream2.pipe(out);
          } else if (buffer) {
            (0, _environment.writeFile)(path, buffer, (err) => {
              if (err) {
                reject2(err);
                return;
              }
              resolve2();
            });
          }
        });
      },
      /**
       * Creates a dataURL string from the image.
       * @memberof Image
       * @instance
       * @param {string} [type='image/png']
       * @param {object} [options]
       * @param {boolean} [options.useCanvas=false] - Force use of the canvas API to save the image instead of JavaScript implementation.
       * @param {object} [options.encoder] - Specify options for the encoder if applicable.
       * @return {string|Promise<string>}
       */
      toDataURL(type = "image/png", options = {}) {
        if (typeof type === "object") {
          options = type;
          type = "image/png";
        }
        const {
          useCanvas = false,
          encoder: encoderOptions = void 0
        } = options;
        type = (0, _mediaTypes.getType)(type);
        function dataUrl(encoder, ctx) {
          const u8 = encoder(ctx, encoderOptions);
          return (0, _base.toBase64URL)(u8, type);
        }
        if (type === "image/bmp") {
          return dataUrl(_fastBmp.encode, this);
        } else if (type === "image/png" && !useCanvas) {
          return dataUrl(encodePng, this);
        } else if (type === "image/jpeg" && !useCanvas) {
          return dataUrl(encodeJpeg, this);
        } else {
          return this.getCanvas().toDataURL(type);
        }
      },
      /**
       * Encodes the image and returns a buffer
       * @memberof Image
       * @instance
       * @param {object} [options]
       * @param {string} [options.format='png']
       * @param {object} [options.encoder] - Specify options for the encoder if applicable.
       * @return {Uint8Array}
       */
      toBuffer(options = {}) {
        const {
          format = "png",
          encoder: encoderOptions = void 0
        } = options;
        switch (format.toLowerCase()) {
          case "png":
            return encodePng(this, encoderOptions);
          case "jpeg":
          case "jpg":
            return encodeJpeg(this, encoderOptions);
          case "bmp":
            return (0, _fastBmp.encode)(this, encoderOptions);
          default:
            throw new RangeError(`invalid output format: ${format}`);
        }
      },
      /**
       * Creates a base64 string from the image.
       * @memberof Image
       * @instance
       * @param {string} [type='image/png']
       * @param {object} [options] - Same options as toDataURL
       * @return {string|Promise<string>}
       */
      toBase64(type = "image/png", options = {}) {
        if (options.async) {
          return this.toDataURL(type, options).then(function(dataURL) {
            return dataURL.substring(dataURL.indexOf(",") + 1);
          });
        } else {
          const dataURL = this.toDataURL(type, options);
          return dataURL.substring(dataURL.indexOf(",") + 1);
        }
      },
      /**
       * Creates a blob from the image and return a Promise.
       * This function is only available in the browser.
       * @memberof Image
       * @instance
       * @param {string} [type='image/png'] A String indicating the image format. The default type is image/png.
       * @param {string} [quality=0.8] A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. If this argument is anything else, the default value for image quality is used. Other arguments are ignored.
       * @return {Promise}
       */
      toBlob(type = "image/png", quality = 0.8) {
        return (0, _blobUtil.canvasToBlob)(this.getCanvas(), type, quality);
      },
      /**
       * Creates a new canvas element and draw the image inside it
       * @memberof Image
       * @instance
       * @return {Canvas}
       */
      getCanvas() {
        const data = new _environment.ImageData(this.getRGBAData({
          clamped: true
        }), this.width, this.height);
        let canvas = (0, _environment.createCanvas)(this.width, this.height);
        let ctx = canvas.getContext("2d");
        ctx.putImageData(data, 0, 0);
        return canvas;
      }
    };
    function setExportMethods(Image3) {
      for (const i in exportMethods) {
        Image3.prototype[i] = exportMethods[i];
      }
    }
  }
});

// node_modules/has-own/package.json
var require_package = __commonJS({
  "node_modules/has-own/package.json"(exports2, module2) {
    module2.exports = {
      name: "has-own",
      version: "1.0.1",
      description: "A safer .hasOwnProperty() - hasOwn(name, obj)",
      main: "index.js",
      scripts: {
        test: "make test"
      },
      author: "Aaron Heckmann <aaron.heckmann+github@gmail.com>",
      license: "MIT",
      repository: {
        type: "git",
        url: "git://github.com/aheckmann/has-own.git"
      },
      homepage: "https://github.com/aheckmann/has-own/",
      devDependencies: {
        mocha: "^6.2.2"
      }
    };
  }
});

// node_modules/has-own/index.js
var require_has_own = __commonJS({
  "node_modules/has-own/index.js"(exports2, module2) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    module2.exports = exports2 = function hasOwn(prop, obj) {
      return hasOwnProperty.call(obj, prop);
    };
    exports2.version = require_package().version;
  }
});

// node_modules/image-js/lib/image/core/extend.js
var require_extend = __commonJS({
  "node_modules/image-js/lib/image/core/extend.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.extendMethod = extendMethod;
    exports2.extendProperty = extendProperty;
    var _hasOwn = _interopRequireDefault(require_has_own());
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var computedPropertyDescriptor = {
      configurable: true,
      enumerable: false,
      get: void 0
    };
    function extendMethod(name, method, options = {}) {
      let {
        inPlace = false,
        returnThis = true,
        partialArgs = []
      } = options;
      if (inPlace) {
        _Image.default.prototype[name] = function(...args) {
          this.computed = null;
          let result = method.apply(this, [...partialArgs, ...args]);
          if (returnThis) {
            return this;
          }
          return result;
        };
      } else {
        _Image.default.prototype[name] = function(...args) {
          return method.apply(this, [...partialArgs, ...args]);
        };
      }
      return _Image.default;
    }
    function extendProperty(name, method, options = {}) {
      let {
        partialArgs = []
      } = options;
      computedPropertyDescriptor.get = function() {
        if (this.computed === null) {
          this.computed = {};
        } else if ((0, _hasOwn.default)(name, this.computed)) {
          return this.computed[name];
        }
        let result = method.apply(this, partialArgs);
        this.computed[name] = result;
        return result;
      };
      Object.defineProperty(_Image.default.prototype, name, computedPropertyDescriptor);
      return _Image.default;
    }
  }
});

// node_modules/image-js/lib/image/model/model.js
var require_model = __commonJS({
  "node_modules/image-js/lib/image/model/model.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.RGB = exports2.HSV = exports2.HSL = exports2.GREY = exports2.CMYK = void 0;
    var GREY = exports2.GREY = "GREY";
    var RGB = exports2.RGB = "RGB";
    var HSL = exports2.HSL = "HSL";
    var HSV = exports2.HSV = "HSV";
    var CMYK = exports2.CMYK = "CMYK";
  }
});

// node_modules/image-js/lib/image/core/getRGBAData.js
var require_getRGBAData = __commonJS({
  "node_modules/image-js/lib/image/core/getRGBAData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getRGBAData;
    var _model = require_model();
    function getRGBAData(options = {}) {
      const {
        clamped
      } = options;
      this.checkProcessable("getRGBAData", {
        components: [1, 3],
        bitDepth: [1, 8, 16, 32]
      });
      const arrayLength = this.width * this.height * 4;
      let newData = clamped ? new Uint8ClampedArray(arrayLength) : new Uint8Array(arrayLength);
      if (this.bitDepth === 1) {
        fillDataFromBinary(this, newData);
      } else if (this.bitDepth === 32) {
        this.checkProcessable("getRGBAData", {
          alpha: 0
        });
        if (this.components === 1) {
          fillDataFromGrey32(this, newData);
        } else if (this.components === 3) {
          this.checkProcessable("getRGBAData", {
            colorModel: [_model.RGB]
          });
          fillDataFromRGB32(this, newData);
        }
      } else {
        if (this.components === 1) {
          fillDataFromGrey(this, newData);
        } else if (this.components === 3) {
          this.checkProcessable("getRGBAData", {
            colorModel: [_model.RGB]
          });
          fillDataFromRGB(this, newData);
        }
      }
      if (this.alpha === 1) {
        this.checkProcessable("getRGBAData", {
          bitDepth: [8, 16]
        });
        copyAlpha(this, newData);
      } else {
        fillAlpha(this, newData);
      }
      return newData;
    }
    function fillDataFromBinary(image, newData) {
      for (let i = 0; i < image.size; i++) {
        const value = image.getBit(i);
        newData[i * 4] = value * 255;
        newData[i * 4 + 1] = value * 255;
        newData[i * 4 + 2] = value * 255;
      }
    }
    function fillDataFromGrey32(image, newData) {
      const min = image.min[0];
      const max = image.max[0];
      const range = max - min;
      for (let i = 0; i < image.size; i++) {
        const val = Math.floor(255 * (image.data[i] - min) / range);
        newData[i * 4] = val;
        newData[i * 4 + 1] = val;
        newData[i * 4 + 2] = val;
      }
    }
    function fillDataFromRGB32(image, newData) {
      const min = Math.min(...image.min);
      const max = Math.max(...image.max);
      const range = max - min;
      for (let i = 0; i < image.size; i++) {
        const val1 = Math.floor(255 * (image.data[i * 3] - min) / range);
        const val2 = Math.floor(255 * (image.data[i * 3 + 1] - min) / range);
        const val3 = Math.floor(255 * (image.data[i * 3 + 2] - min) / range);
        newData[i * 4] = val1;
        newData[i * 4 + 1] = val2;
        newData[i * 4 + 2] = val3;
      }
    }
    function fillDataFromGrey(image, newData) {
      for (let i = 0; i < image.size; i++) {
        newData[i * 4] = image.data[i * image.channels] >>> image.bitDepth - 8;
        newData[i * 4 + 1] = image.data[i * image.channels] >>> image.bitDepth - 8;
        newData[i * 4 + 2] = image.data[i * image.channels] >>> image.bitDepth - 8;
      }
    }
    function fillDataFromRGB(image, newData) {
      for (let i = 0; i < image.size; i++) {
        newData[i * 4] = image.data[i * image.channels] >>> image.bitDepth - 8;
        newData[i * 4 + 1] = image.data[i * image.channels + 1] >>> image.bitDepth - 8;
        newData[i * 4 + 2] = image.data[i * image.channels + 2] >>> image.bitDepth - 8;
      }
    }
    function copyAlpha(image, newData) {
      for (let i = 0; i < image.size; i++) {
        newData[i * 4 + 3] = image.data[i * image.channels + image.components] >> image.bitDepth - 8;
      }
    }
    function fillAlpha(image, newData) {
      for (let i = 0; i < image.size; i++) {
        newData[i * 4 + 3] = 255;
      }
    }
  }
});

// node_modules/image-js/lib/image/core/kindNames.js
var require_kindNames = __commonJS({
  "node_modules/image-js/lib/image/core/kindNames.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.RGBA = exports2.RGB = exports2.GREYA = exports2.GREY = exports2.CMYKA = exports2.CMYK = exports2.BINARY = void 0;
    var BINARY = exports2.BINARY = "BINARY";
    var GREY = exports2.GREY = "GREY";
    var GREYA = exports2.GREYA = "GREYA";
    var RGB = exports2.RGB = "RGB";
    var RGBA = exports2.RGBA = "RGBA";
    var CMYK = exports2.CMYK = "CMYK";
    var CMYKA = exports2.CMYKA = "CMYKA";
  }
});

// node_modules/image-js/lib/image/core/kind.js
var require_kind = __commonJS({
  "node_modules/image-js/lib/image/core/kind.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createPixelArray = createPixelArray;
    exports2.getKind = getKind;
    exports2.getTheoreticalPixelArraySize = getTheoreticalPixelArraySize;
    exports2.verifyKindDefinition = verifyKindDefinition;
    var ColorModel = _interopRequireWildcard(require_model());
    var Kind = _interopRequireWildcard(require_kindNames());
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    var kinds = {};
    kinds[Kind.BINARY] = {
      components: 1,
      alpha: 0,
      bitDepth: 1,
      colorModel: ColorModel.GREY
    };
    kinds[Kind.GREYA] = {
      components: 1,
      alpha: 1,
      bitDepth: 8,
      colorModel: ColorModel.GREY
    };
    kinds[Kind.GREY] = {
      components: 1,
      alpha: 0,
      bitDepth: 8,
      colorModel: ColorModel.GREY
    };
    kinds[Kind.RGBA] = {
      components: 3,
      alpha: 1,
      bitDepth: 8,
      colorModel: ColorModel.RGB
    };
    kinds[Kind.RGB] = {
      components: 3,
      alpha: 0,
      bitDepth: 8,
      colorModel: ColorModel.RGB
    };
    kinds[Kind.CMYK] = {
      components: 4,
      alpha: 0,
      bitDepth: 8,
      colorModel: ColorModel.CMYK
    };
    kinds[Kind.CMYKA] = {
      components: 4,
      alpha: 1,
      bitDepth: 8,
      colorModel: ColorModel.CMYK
    };
    function getKind(kind) {
      const result = kinds[kind];
      if (!result) {
        throw new RangeError(`invalid image kind: ${kind}`);
      }
      return result;
    }
    var validBitDepth = [1, 8, 16, 32];
    function verifyKindDefinition(definition) {
      const {
        components,
        alpha,
        bitDepth,
        colorModel
      } = definition;
      if (!Number.isInteger(components) || components <= 0) {
        throw new RangeError(`invalid components: ${components}. Must be a positive integer`);
      }
      if (alpha !== 0 && alpha !== 1 && typeof alpha !== "boolean") {
        throw new TypeError(`invalid alpha: ${alpha}: must be a boolean, 0 or 1`);
      }
      if (!validBitDepth.includes(bitDepth)) {
        throw new RangeError(`invalid bitDepth: ${bitDepth}. Must be one of ${validBitDepth.join(", ")}`);
      }
      if (!ColorModel[colorModel]) {
        throw new RangeError(`invalid colorModel: ${colorModel}. Must be one of ${Object.keys(ColorModel).join(", ")}`);
      }
    }
    function getTheoreticalPixelArraySize(size, channels, bitDepth) {
      let length = channels * size;
      if (bitDepth === 1) {
        length = Math.ceil(length / 8);
      }
      return length;
    }
    function createPixelArray(size, components, alpha, channels, bitDepth, maxValue) {
      const length = channels * size;
      let arr;
      switch (bitDepth) {
        case 1:
          arr = new Uint8Array(Math.ceil(length / 8));
          break;
        case 8:
          arr = new Uint8Array(length);
          break;
        case 16:
          arr = new Uint16Array(length);
          break;
        case 32:
          arr = new Float32Array(length);
          break;
        default:
          throw new Error(`Cannot create pixel array for bit depth ${bitDepth}`);
      }
      if (alpha) {
        for (let i = components; i < arr.length; i += channels) {
          arr[i] = maxValue;
        }
      }
      return arr;
    }
  }
});

// node_modules/fast-jpeg/node_modules/iobuffer/IOBuffer.js
var require_IOBuffer2 = __commonJS({
  "node_modules/fast-jpeg/node_modules/iobuffer/IOBuffer.js"(exports2, module2) {
    "use strict";
    var defaultByteLength = 1024 * 8;
    var charArray = [];
    var IOBuffer = class {
      constructor(data, options) {
        options = options || {};
        if (data === void 0) {
          data = defaultByteLength;
        }
        if (typeof data === "number") {
          data = new ArrayBuffer(data);
        }
        let length = data.byteLength;
        const offset = options.offset ? options.offset >>> 0 : 0;
        if (data.buffer) {
          length = data.byteLength - offset;
          if (data.byteLength !== data.buffer.byteLength) {
            data = data.buffer.slice(data.byteOffset + offset, data.byteOffset + data.byteLength);
          } else if (offset) {
            data = data.buffer.slice(offset);
          } else {
            data = data.buffer;
          }
        }
        this.buffer = data;
        this.length = length;
        this.byteLength = length;
        this.byteOffset = 0;
        this.offset = 0;
        this.littleEndian = true;
        this._data = new DataView(this.buffer);
        this._increment = length || defaultByteLength;
        this._mark = 0;
      }
      available(byteLength) {
        if (byteLength === void 0)
          byteLength = 1;
        return this.offset + byteLength <= this.length;
      }
      isLittleEndian() {
        return this.littleEndian;
      }
      setLittleEndian() {
        this.littleEndian = true;
      }
      isBigEndian() {
        return !this.littleEndian;
      }
      setBigEndian() {
        this.littleEndian = false;
      }
      skip(n) {
        if (n === void 0)
          n = 1;
        this.offset += n;
      }
      seek(offset) {
        this.offset = offset;
      }
      mark() {
        this._mark = this.offset;
      }
      reset() {
        this.offset = this._mark;
      }
      rewind() {
        this.offset = 0;
      }
      ensureAvailable(byteLength) {
        if (byteLength === void 0)
          byteLength = 1;
        if (!this.available(byteLength)) {
          const newIncrement = this._increment + this._increment;
          this._increment = newIncrement;
          const newLength = this.length + newIncrement;
          const newArray = new Uint8Array(newLength);
          newArray.set(new Uint8Array(this.buffer));
          this.buffer = newArray.buffer;
          this.length = newLength;
          this._data = new DataView(this.buffer);
        }
      }
      readBoolean() {
        return this.readUint8() !== 0;
      }
      readInt8() {
        return this._data.getInt8(this.offset++);
      }
      readUint8() {
        return this._data.getUint8(this.offset++);
      }
      readByte() {
        return this.readUint8();
      }
      readBytes(n) {
        if (n === void 0)
          n = 1;
        var bytes = new Uint8Array(n);
        for (var i = 0; i < n; i++) {
          bytes[i] = this.readByte();
        }
        return bytes;
      }
      readInt16() {
        var value = this._data.getInt16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
      }
      readUint16() {
        var value = this._data.getUint16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
      }
      readInt32() {
        var value = this._data.getInt32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      readUint32() {
        var value = this._data.getUint32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      readFloat32() {
        var value = this._data.getFloat32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      readFloat64() {
        var value = this._data.getFloat64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
      }
      readChar() {
        return String.fromCharCode(this.readInt8());
      }
      readChars(n) {
        if (n === void 0)
          n = 1;
        charArray.length = n;
        for (var i = 0; i < n; i++) {
          charArray[i] = this.readChar();
        }
        return charArray.join("");
      }
      writeBoolean(bool) {
        this.writeUint8(bool ? 255 : 0);
      }
      writeInt8(value) {
        this.ensureAvailable(1);
        this._data.setInt8(this.offset++, value);
      }
      writeUint8(value) {
        this.ensureAvailable(1);
        this._data.setUint8(this.offset++, value);
      }
      writeByte(value) {
        this.writeUint8(value);
      }
      writeBytes(bytes) {
        this.ensureAvailable(bytes.length);
        for (var i = 0; i < bytes.length; i++) {
          this._data.setUint8(this.offset++, bytes[i]);
        }
      }
      writeInt16(value) {
        this.ensureAvailable(2);
        this._data.setInt16(this.offset, value, this.littleEndian);
        this.offset += 2;
      }
      writeUint16(value) {
        this.ensureAvailable(2);
        this._data.setUint16(this.offset, value, this.littleEndian);
        this.offset += 2;
      }
      writeInt32(value) {
        this.ensureAvailable(4);
        this._data.setInt32(this.offset, value, this.littleEndian);
        this.offset += 4;
      }
      writeUint32(value) {
        this.ensureAvailable(4);
        this._data.setUint32(this.offset, value, this.littleEndian);
        this.offset += 4;
      }
      writeFloat32(value) {
        this.ensureAvailable(4);
        this._data.setFloat32(this.offset, value, this.littleEndian);
        this.offset += 4;
      }
      writeFloat64(value) {
        this.ensureAvailable(8);
        this._data.setFloat64(this.offset, value, this.littleEndian);
        this.offset += 8;
      }
      writeChar(str) {
        this.writeUint8(str.charCodeAt(0));
      }
      writeChars(str) {
        for (var i = 0; i < str.length; i++) {
          this.writeUint8(str.charCodeAt(i));
        }
      }
      toArray() {
        return new Uint8Array(this.buffer, 0, this.offset);
      }
    };
    module2.exports = IOBuffer;
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/tags/standard.js
var require_standard = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/tags/standard.js"(exports2, module2) {
    "use strict";
    var tagsById = {
      // Baseline tags
      254: "NewSubfileType",
      255: "SubfileType",
      256: "ImageWidth",
      257: "ImageLength",
      258: "BitsPerSample",
      259: "Compression",
      262: "PhotometricInterpretation",
      263: "Threshholding",
      264: "CellWidth",
      265: "CellLength",
      266: "FillOrder",
      270: "ImageDescription",
      271: "Make",
      272: "Model",
      273: "StripOffsets",
      274: "Orientation",
      277: "SamplesPerPixel",
      278: "RowsPerStrip",
      279: "StripByteCounts",
      280: "MinSampleValue",
      281: "MaxSampleValue",
      282: "XResolution",
      283: "YResolution",
      284: "PlanarConfiguration",
      288: "FreeOffsets",
      289: "FreeByteCounts",
      290: "GrayResponseUnit",
      291: "GrayResponseCurve",
      296: "ResolutionUnit",
      305: "Software",
      306: "DateTime",
      315: "Artist",
      316: "HostComputer",
      320: "ColorMap",
      338: "ExtraSamples",
      33432: "Copyright",
      // Extension tags
      269: "DocumentName",
      285: "PageName",
      286: "XPosition",
      287: "YPosition",
      292: "T4Options",
      293: "T6Options",
      297: "PageNumber",
      301: "TransferFunction",
      317: "Predictor",
      318: "WhitePoint",
      319: "PrimaryChromaticities",
      321: "HalftoneHints",
      322: "TileWidth",
      323: "TileLength",
      324: "TileOffsets",
      325: "TileByteCounts",
      326: "BadFaxLines",
      327: "CleanFaxData",
      328: "ConsecutiveBadFaxLines",
      330: "SubIFDs",
      332: "InkSet",
      333: "InkNames",
      334: "NumberOfInks",
      336: "DotRange",
      337: "TargetPrinter",
      339: "SampleFormat",
      340: "SMinSampleValue",
      341: "SMaxSampleValue",
      342: "TransferRange",
      343: "ClipPath",
      344: "XClipPathUnits",
      345: "YClipPathUnits",
      346: "Indexed",
      347: "JPEGTables",
      351: "OPIProxy",
      400: "GlobalParametersIFD",
      401: "ProfileType",
      402: "FaxProfile",
      403: "CodingMethods",
      404: "VersionYear",
      405: "ModeNumber",
      433: "Decode",
      434: "DefaultImageColor",
      512: "JPEGProc",
      513: "JPEGInterchangeFormat",
      514: "JPEGInterchangeFormatLength",
      515: "JPEGRestartInterval",
      517: "JPEGLosslessPredictors",
      518: "JPEGPointTransforms",
      519: "JPEGQTables",
      520: "JPEGDCTables",
      521: "JPEGACTables",
      529: "YCbCrCoefficients",
      530: "YCbCrSubSampling",
      531: "YCbCrPositioning",
      532: "ReferenceBlackWhite",
      559: "StripRowCounts",
      700: "XMP",
      32781: "ImageID",
      34732: "ImageLayer",
      // Private tags
      32932: "WangAnnotatio",
      33445: "MDFileTag",
      33446: "MDScalePixel",
      33447: "MDColorTable",
      33448: "MDLabName",
      33449: "MDSampleInfo",
      33450: "MDPrepDate",
      33451: "MDPrepTime",
      33452: "MDFileUnits",
      33550: "ModelPixelScaleTag",
      33723: "IPTC",
      33918: "INGRPacketDataTag",
      33919: "INGRFlagRegisters",
      33920: "IrasBTransformationMatrix",
      33922: "ModelTiepointTag",
      34264: "ModelTransformationTag",
      34377: "Photoshop",
      34665: "ExifIFD",
      34675: "ICCProfile",
      34735: "GeoKeyDirectoryTag",
      34736: "GeoDoubleParamsTag",
      34737: "GeoAsciiParamsTag",
      34853: "GPSIFD",
      34908: "HylaFAXFaxRecvParams",
      34909: "HylaFAXFaxSubAddress",
      34910: "HylaFAXFaxRecvTime",
      37724: "ImageSourceData",
      40965: "InteroperabilityIFD",
      42112: "GDAL_METADATA",
      42113: "GDAL_NODATA",
      50215: "OceScanjobDescription",
      50216: "OceApplicationSelector",
      50217: "OceIdentificationNumber",
      50218: "OceImageLogicCharacteristics",
      50706: "DNGVersion",
      50707: "DNGBackwardVersion",
      50708: "UniqueCameraModel",
      50709: "LocalizedCameraModel",
      50710: "CFAPlaneColor",
      50711: "CFALayout",
      50712: "LinearizationTable",
      50713: "BlackLevelRepeatDim",
      50714: "BlackLevel",
      50715: "BlackLevelDeltaH",
      50716: "BlackLevelDeltaV",
      50717: "WhiteLevel",
      50718: "DefaultScale",
      50719: "DefaultCropOrigin",
      50720: "DefaultCropSize",
      50721: "ColorMatrix1",
      50722: "ColorMatrix2",
      50723: "CameraCalibration1",
      50724: "CameraCalibration2",
      50725: "ReductionMatrix1",
      50726: "ReductionMatrix2",
      50727: "AnalogBalance",
      50728: "AsShotNeutral",
      50729: "AsShotWhiteXY",
      50730: "BaselineExposure",
      50731: "BaselineNoise",
      50732: "BaselineSharpness",
      50733: "BayerGreenSplit",
      50734: "LinearResponseLimit",
      50735: "CameraSerialNumber",
      50736: "LensInfo",
      50737: "ChromaBlurRadius",
      50738: "AntiAliasStrength",
      50740: "DNGPrivateData",
      50741: "MakerNoteSafety",
      50778: "CalibrationIlluminant1",
      50779: "CalibrationIlluminant2",
      50780: "BestQualityScale",
      50784: "AliasLayerMetadata"
    };
    var tagsByName = {};
    for (i in tagsById) {
      tagsByName[tagsById[i]] = i;
    }
    var i;
    module2.exports = {
      tagsById,
      tagsByName
    };
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/tags/exif.js
var require_exif = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/tags/exif.js"(exports2, module2) {
    "use strict";
    var tagsById = {
      33434: "ExposureTime",
      33437: "FNumber",
      34850: "ExposureProgram",
      34852: "SpectralSensitivity",
      34855: "ISOSpeedRatings",
      34856: "OECF",
      34864: "SensitivityType",
      34865: "StandardOutputSensitivity",
      34866: "RecommendedExposureIndex",
      34867: "ISOSpeed",
      34868: "ISOSpeedLatitudeyyy",
      34869: "ISOSpeedLatitudezzz",
      36864: "ExifVersion",
      36867: "DateTimeOriginal",
      36868: "DateTimeDigitized",
      37121: "ComponentsConfiguration",
      37122: "CompressedBitsPerPixel",
      37377: "ShutterSpeedValue",
      37378: "ApertureValue",
      37379: "BrightnessValue",
      37380: "ExposureBiasValue",
      37381: "MaxApertureValue",
      37382: "SubjectDistance",
      37383: "MeteringMode",
      37384: "LightSource",
      37385: "Flash",
      37386: "FocalLength",
      37396: "SubjectArea",
      37500: "MakerNote",
      37510: "UserComment",
      37520: "SubsecTime",
      37521: "SubsecTimeOriginal",
      37522: "SubsecTimeDigitized",
      40960: "FlashpixVersion",
      40961: "ColorSpace",
      40962: "PixelXDimension",
      40963: "PixelYDimension",
      40964: "RelatedSoundFile",
      41483: "FlashEnergy",
      41484: "SpatialFrequencyResponse",
      41486: "FocalPlaneXResolution",
      41487: "FocalPlaneYResolution",
      41488: "FocalPlaneResolutionUnit",
      41492: "SubjectLocation",
      41493: "ExposureIndex",
      41495: "SensingMethod",
      41728: "FileSource",
      41729: "SceneType",
      41730: "CFAPattern",
      41985: "CustomRendered",
      41986: "ExposureMode",
      41987: "WhiteBalance",
      41988: "DigitalZoomRatio",
      41989: "FocalLengthIn35mmFilm",
      41990: "SceneCaptureType",
      41991: "GainControl",
      41992: "Contrast",
      41993: "Saturation",
      41994: "Sharpness",
      41995: "DeviceSettingDescription",
      41996: "SubjectDistanceRange",
      42016: "ImageUniqueID",
      42032: "CameraOwnerName",
      42033: "BodySerialNumber",
      42034: "LensSpecification",
      42035: "LensMake",
      42036: "LensModel",
      42037: "LensSerialNumber",
      42240: "Gamma"
    };
    var tagsByName = {};
    for (i in tagsById) {
      tagsByName[tagsById[i]] = i;
    }
    var i;
    module2.exports = {
      tagsById,
      tagsByName
    };
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/tags/gps.js
var require_gps = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/tags/gps.js"(exports2, module2) {
    "use strict";
    var tagsById = {
      0: "GPSVersionID",
      1: "GPSLatitudeRef",
      2: "GPSLatitude",
      3: "GPSLongitudeRef",
      4: "GPSLongitude",
      5: "GPSAltitudeRef",
      6: "GPSAltitude",
      7: "GPSTimeStamp",
      8: "GPSSatellites",
      9: "GPSStatus",
      10: "GPSMeasureMode",
      11: "GPSDOP",
      12: "GPSSpeedRef",
      13: "GPSSpeed",
      14: "GPSTrackRef",
      15: "GPSTrack",
      16: "GPSImgDirectionRef",
      17: "GPSImgDirection",
      18: "GPSMapDatum",
      19: "GPSDestLatitudeRef",
      20: "GPSDestLatitude",
      21: "GPSDestLongitudeRef",
      22: "GPSDestLongitude",
      23: "GPSDestBearingRef",
      24: "GPSDestBearing",
      25: "GPSDestDistanceRef",
      26: "GPSDestDistance",
      27: "GPSProcessingMethod",
      28: "GPSAreaInformation",
      29: "GPSDateStamp",
      30: "GPSDifferential",
      31: "GPSHPositioningError"
    };
    var tagsByName = {};
    for (i in tagsById) {
      tagsByName[tagsById[i]] = i;
    }
    var i;
    module2.exports = {
      tagsById,
      tagsByName
    };
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/ifd.js
var require_ifd = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/ifd.js"(exports2, module2) {
    "use strict";
    var tags = {
      standard: require_standard(),
      exif: require_exif(),
      gps: require_gps()
    };
    var IFD = class {
      constructor(kind) {
        if (!kind) {
          throw new Error("missing kind");
        }
        this.data = null;
        this.fields = /* @__PURE__ */ new Map();
        this.kind = kind;
        this._map = null;
      }
      get(tag) {
        if (typeof tag === "number") {
          return this.fields.get(tag);
        } else if (typeof tag === "string") {
          return this.fields.get(tags[this.kind].tagsByName[tag]);
        } else {
          throw new Error("expected a number or string");
        }
      }
      get map() {
        if (!this._map) {
          this._map = {};
          const taglist = tags[this.kind].tagsById;
          for (var key of this.fields.keys()) {
            if (taglist[key]) {
              this._map[taglist[key]] = this.fields.get(key);
            }
          }
        }
        return this._map;
      }
    };
    module2.exports = IFD;
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/tiffIfd.js
var require_tiffIfd = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/tiffIfd.js"(exports2, module2) {
    "use strict";
    var Ifd = require_ifd();
    var dateTimeRegex = /^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;
    var TiffIfd = class extends Ifd {
      constructor() {
        super("standard");
      }
      // Custom fields
      get size() {
        return this.width * this.height;
      }
      get width() {
        return this.imageWidth;
      }
      get height() {
        return this.imageLength;
      }
      get components() {
        return this.samplesPerPixel;
      }
      get date() {
        var date = /* @__PURE__ */ new Date();
        var result = dateTimeRegex.exec(this.dateTime);
        date.setFullYear(result[1], result[2] - 1, result[3]);
        date.setHours(result[4], result[5], result[6]);
        return date;
      }
      // IFD fields
      get newSubfileType() {
        return this.get(254);
      }
      get imageWidth() {
        return this.get(256);
      }
      get imageLength() {
        return this.get(257);
      }
      get bitsPerSample() {
        return this.get(258);
      }
      get compression() {
        return this.get(259) || 1;
      }
      get type() {
        return this.get(262);
      }
      get fillOrder() {
        return this.get(266) || 1;
      }
      get documentName() {
        return this.get(269);
      }
      get imageDescription() {
        return this.get(270);
      }
      get stripOffsets() {
        return alwaysArray(this.get(273));
      }
      get orientation() {
        return this.get(274);
      }
      get samplesPerPixel() {
        return this.get(277);
      }
      get rowsPerStrip() {
        return this.get(278);
      }
      get stripByteCounts() {
        return alwaysArray(this.get(279));
      }
      get minSampleValue() {
        return this.get(280) || 0;
      }
      get maxSampleValue() {
        return this.get(281) || Math.pow(2, this.bitsPerSample) - 1;
      }
      get xResolution() {
        return this.get(282);
      }
      get yResolution() {
        return this.get(283);
      }
      get planarConfiguration() {
        return this.get(284) || 1;
      }
      get resolutionUnit() {
        return this.get(296) || 2;
      }
      get dateTime() {
        return this.get(306);
      }
      get predictor() {
        return this.get(317) || 1;
      }
      get sampleFormat() {
        return this.get(339) || 1;
      }
      get sMinSampleValue() {
        return this.get(340) || this.minSampleValue;
      }
      get sMaxSampleValue() {
        return this.get(341) || this.maxSampleValue;
      }
    };
    function alwaysArray(value) {
      if (typeof value === "number")
        return [value];
      return value;
    }
    module2.exports = TiffIfd;
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/ifdValue.js
var require_ifdValue = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/ifdValue.js"(exports2) {
    "use strict";
    var types = /* @__PURE__ */ new Map([
      [1, [1, readByte]],
      // BYTE
      [2, [1, readASCII]],
      // ASCII
      [3, [2, readShort]],
      // SHORT
      [4, [4, readLong]],
      // LONG
      [5, [8, readRational]],
      // RATIONAL
      [6, [1, readSByte]],
      // SBYTE
      [7, [1, readByte]],
      // UNDEFINED
      [8, [2, readSShort]],
      // SSHORT
      [9, [4, readSLong]],
      // SLONG
      [10, [8, readSRational]],
      // SRATIONAL
      [11, [4, readFloat]],
      // FLOAT
      [12, [8, readDouble]]
      // DOUBLE
    ]);
    exports2.getByteLength = function(type, count) {
      return types.get(type)[0] * count;
    };
    exports2.readData = function(decoder, type, count) {
      return types.get(type)[1](decoder, count);
    };
    function readByte(decoder, count) {
      if (count === 1)
        return decoder.readUint8();
      var array = new Uint8Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readUint8();
      }
      return array;
    }
    function readASCII(decoder, count) {
      var strings = [];
      var currentString = "";
      for (var i = 0; i < count; i++) {
        var char = String.fromCharCode(decoder.readUint8());
        if (char === "\0") {
          strings.push(currentString);
          currentString = "";
        } else {
          currentString += char;
        }
      }
      if (strings.length === 1) {
        return strings[0];
      } else {
        return strings;
      }
    }
    function readShort(decoder, count) {
      if (count === 1)
        return decoder.readUint16();
      var array = new Uint16Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readUint16();
      }
      return array;
    }
    function readLong(decoder, count) {
      if (count === 1)
        return decoder.readUint32();
      var array = new Uint32Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readUint32();
      }
      return array;
    }
    function readRational(decoder, count) {
      if (count === 1) {
        return decoder.readUint32() / decoder.readUint32();
      }
      var rationals = new Array(count);
      for (var i = 0; i < count; i++) {
        rationals[i] = decoder.readUint32() / decoder.readUint32();
      }
      return rationals;
    }
    function readSByte(decoder, count) {
      if (count === 1)
        return decoder.readInt8();
      var array = new Int8Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readInt8();
      }
      return array;
    }
    function readSShort(decoder, count) {
      if (count === 1)
        return decoder.readInt16();
      var array = new Int16Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readInt16();
      }
      return array;
    }
    function readSLong(decoder, count) {
      if (count === 1)
        return decoder.readInt32();
      var array = new Int32Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readInt32();
      }
      return array;
    }
    function readSRational(decoder, count) {
      if (count === 1) {
        return decoder.readInt32() / decoder.readInt32();
      }
      var rationals = new Array(count);
      for (var i = 0; i < count; i++) {
        rationals[i] = decoder.readInt32() / decoder.readInt32();
      }
      return rationals;
    }
    function readFloat(decoder, count) {
      if (count === 1)
        return decoder.readFloat32();
      var array = new Float32Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readFloat32();
      }
      return array;
    }
    function readDouble(decoder, count) {
      if (count === 1)
        return decoder.readFloat64();
      var array = new Float64Array(count);
      for (var i = 0; i < count; i++) {
        array[i] = decoder.readFloat64();
      }
      return array;
    }
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/tiffDecoder.js
var require_tiffDecoder = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/tiffDecoder.js"(exports2, module2) {
    "use strict";
    var IOBuffer = require_IOBuffer2();
    var IFD = require_ifd();
    var TiffIFD = require_tiffIfd();
    var IFDValue = require_ifdValue();
    var defaultOptions = {
      ignoreImageData: false,
      onlyFirst: false
    };
    var TIFFDecoder = class extends IOBuffer {
      constructor(data, options) {
        super(data, options);
        this._nextIFD = 0;
      }
      decode(options) {
        options = Object.assign({}, defaultOptions, options);
        const result = [];
        this.decodeHeader();
        while (this._nextIFD) {
          result.push(this.decodeIFD(options));
          if (options.onlyFirst) {
            return result[0];
          }
        }
        return result;
      }
      decodeHeader() {
        let value = this.readUint16();
        if (value === 18761) {
          this.setLittleEndian();
        } else if (value === 19789) {
          this.setBigEndian();
        } else {
          throw new Error("invalid byte order: 0x" + value.toString(16));
        }
        value = this.readUint16();
        if (value !== 42) {
          throw new Error("not a TIFF file");
        }
        this._nextIFD = this.readUint32();
      }
      decodeIFD(options) {
        this.seek(this._nextIFD);
        var ifd;
        if (!options.kind) {
          ifd = new TiffIFD();
        } else {
          ifd = new IFD(options.kind);
        }
        const numEntries = this.readUint16();
        for (var i = 0; i < numEntries; i++) {
          this.decodeIFDEntry(ifd);
        }
        if (!options.ignoreImageData) {
          this.decodeImageData(ifd);
        }
        this._nextIFD = this.readUint32();
        return ifd;
      }
      decodeIFDEntry(ifd) {
        const offset = this.offset;
        const tag = this.readUint16();
        const type = this.readUint16();
        const numValues = this.readUint32();
        if (type < 1 || type > 12) {
          this.skip(4);
          return;
        }
        const valueByteLength = IFDValue.getByteLength(type, numValues);
        if (valueByteLength > 4) {
          this.seek(this.readUint32());
        }
        const value = IFDValue.readData(this, type, numValues);
        ifd.fields.set(tag, value);
        if (tag === 34665 || tag === 34853) {
          let currentOffset = this.offset;
          let kind;
          if (tag === 34665) {
            kind = "exif";
          } else if (tag === 34853) {
            kind = "gps";
          }
          this._nextIFD = value;
          ifd[kind] = this.decodeIFD({
            kind,
            ignoreImageData: true
          });
          this.offset = currentOffset;
        }
        this.seek(offset);
        this.skip(12);
      }
      decodeImageData(ifd) {
        const orientation = ifd.orientation;
        if (orientation && orientation !== 1) {
          unsupported("orientation", orientation);
        }
        switch (ifd.type) {
          case 1:
          case 2:
            this.readStripData(ifd);
            break;
          default:
            unsupported("image type", ifd.type);
            break;
        }
      }
      readStripData(ifd) {
        const width = ifd.width;
        const height = ifd.height;
        const bitDepth = validateBitDepth(ifd.bitsPerSample);
        const sampleFormat = ifd.sampleFormat;
        let size = width * height;
        const data = getDataArray(size, 1, bitDepth, sampleFormat);
        const compression = ifd.compression;
        const rowsPerStrip = ifd.rowsPerStrip;
        const maxPixels = rowsPerStrip * width;
        const stripOffsets = ifd.stripOffsets;
        const stripByteCounts = ifd.stripByteCounts;
        var pixel = 0;
        for (var i = 0; i < stripOffsets.length; i++) {
          var stripData = this.getStripData(compression, stripOffsets[i], stripByteCounts[i]);
          var length = size > maxPixels ? maxPixels : size;
          size -= length;
          if (bitDepth === 8) {
            pixel = fill8bit(data, stripData, pixel, length);
          } else if (bitDepth === 16) {
            pixel = fill16bit(data, stripData, pixel, length, this.isLittleEndian());
          } else if (bitDepth === 32 && sampleFormat === 3) {
            pixel = fillFloat32(data, stripData, pixel, length, this.isLittleEndian());
          } else {
            unsupported("bitDepth", bitDepth);
          }
        }
        ifd.data = data;
      }
      getStripData(compression, offset, byteCounts) {
        switch (compression) {
          case 1:
            return new DataView(this.buffer, offset, byteCounts);
          case 2:
          case 32773:
            return unsupported("Compression", compression);
          default:
            throw new Error("invalid compression: " + compression);
        }
      }
    };
    module2.exports = TIFFDecoder;
    function getDataArray(size, channels, bitDepth, sampleFormat) {
      if (bitDepth === 8) {
        return new Uint8Array(size * channels);
      } else if (bitDepth === 16) {
        return new Uint16Array(size * channels);
      } else if (bitDepth === 32 && sampleFormat === 3) {
        return new Float32Array(size * channels);
      } else {
        return unsupported("bit depth / sample format", bitDepth + " / " + sampleFormat);
      }
    }
    function fill8bit(dataTo, dataFrom, index, length) {
      for (var i = 0; i < length; i++) {
        dataTo[index++] = dataFrom.getUint8(i);
      }
      return index;
    }
    function fill16bit(dataTo, dataFrom, index, length, littleEndian) {
      for (var i = 0; i < length * 2; i += 2) {
        dataTo[index++] = dataFrom.getUint16(i, littleEndian);
      }
      return index;
    }
    function fillFloat32(dataTo, dataFrom, index, length, littleEndian) {
      for (var i = 0; i < length * 4; i += 4) {
        dataTo[index++] = dataFrom.getFloat32(i, littleEndian);
      }
      return index;
    }
    function unsupported(type, value) {
      throw new Error("Unsupported " + type + ": " + value);
    }
    function validateBitDepth(bitDepth) {
      if (bitDepth.length) {
        const bitDepthArray = bitDepth;
        bitDepth = bitDepthArray[0];
        for (var i = 0; i < bitDepthArray.length; i++) {
          if (bitDepthArray[i] !== bitDepth) {
            unsupported("bit depth", bitDepthArray);
          }
        }
      }
      return bitDepth;
    }
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/decode.js
var require_decode = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/decode.js"(exports2, module2) {
    "use strict";
    var TIFFDecoder = require_tiffDecoder();
    module2.exports = function decodeTIFF(data, options) {
      const decoder = new TIFFDecoder(data, options);
      return decoder.decode(options);
    };
  }
});

// node_modules/fast-jpeg/node_modules/tiff/src/index.js
var require_src2 = __commonJS({
  "node_modules/fast-jpeg/node_modules/tiff/src/index.js"(exports2) {
    "use strict";
    exports2.decode = require_decode();
  }
});

// node_modules/fast-jpeg/src/decode.js
var require_decode2 = __commonJS({
  "node_modules/fast-jpeg/src/decode.js"(exports2, module2) {
    "use strict";
    var IOBuffer = require_IOBuffer2();
    var tiff = require_src2();
    function decode(data) {
      const buffer = new IOBuffer(data);
      const result = {};
      buffer.setBigEndian();
      const val = buffer.readUint16();
      if (val !== 65496) {
        throw new Error("SOI marker not found. Not a valid JPEG file");
      }
      const next = buffer.readUint16();
      if (next === 65505) {
        const length = buffer.readUint16();
        const header = buffer.readBytes(6);
        if (header[0] === 69 && // E
        header[1] === 120 && // x
        header[2] === 105 && // i
        header[3] === 102 && // f
        header[4] === 0 && header[5] === 0) {
          const exif = tiff.decode(buffer, {
            onlyFirst: true,
            ignoreImageData: true,
            offset: buffer.offset
          });
          result.exif = exif;
        }
      }
      return result;
    }
    module2.exports = decode;
  }
});

// node_modules/fast-jpeg/src/index.js
var require_src3 = __commonJS({
  "node_modules/fast-jpeg/src/index.js"(exports2) {
    "use strict";
    exports2.decode = require_decode2();
  }
});

// node_modules/file-type/index.js
var require_file_type = __commonJS({
  "node_modules/file-type/index.js"(exports, module) {
    "use strict";
    var toBytes = (s) => [...s].map((c) => c.charCodeAt(0));
    var xpiZipFilename = toBytes("META-INF/mozilla.rsa");
    var oxmlContentTypes = toBytes("[Content_Types].xml");
    var oxmlRels = toBytes("_rels/.rels");
    function readUInt64LE(buf, offset = 0) {
      let n = buf[offset];
      let mul = 1;
      let i = 0;
      while (++i < 8) {
        mul *= 256;
        n += buf[offset + i] * mul;
      }
      return n;
    }
    var fileType = (input) => {
      if (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {
        throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof input}\``);
      }
      const buf = input instanceof Uint8Array ? input : new Uint8Array(input);
      if (!(buf && buf.length > 1)) {
        return null;
      }
      const check = (header, options) => {
        options = Object.assign({
          offset: 0
        }, options);
        for (let i = 0; i < header.length; i++) {
          if (options.mask) {
            if (header[i] !== (options.mask[i] & buf[i + options.offset])) {
              return false;
            }
          } else if (header[i] !== buf[i + options.offset]) {
            return false;
          }
        }
        return true;
      };
      const checkString = (header, options) => check(toBytes(header), options);
      if (check([255, 216, 255])) {
        return {
          ext: "jpg",
          mime: "image/jpeg"
        };
      }
      if (check([137, 80, 78, 71, 13, 10, 26, 10])) {
        return {
          ext: "png",
          mime: "image/png"
        };
      }
      if (check([71, 73, 70])) {
        return {
          ext: "gif",
          mime: "image/gif"
        };
      }
      if (check([87, 69, 66, 80], { offset: 8 })) {
        return {
          ext: "webp",
          mime: "image/webp"
        };
      }
      if (check([70, 76, 73, 70])) {
        return {
          ext: "flif",
          mime: "image/flif"
        };
      }
      if ((check([73, 73, 42, 0]) || check([77, 77, 0, 42])) && check([67, 82], { offset: 8 })) {
        return {
          ext: "cr2",
          mime: "image/x-canon-cr2"
        };
      }
      if (check([73, 73, 42, 0]) || check([77, 77, 0, 42])) {
        return {
          ext: "tif",
          mime: "image/tiff"
        };
      }
      if (check([66, 77])) {
        return {
          ext: "bmp",
          mime: "image/bmp"
        };
      }
      if (check([73, 73, 188])) {
        return {
          ext: "jxr",
          mime: "image/vnd.ms-photo"
        };
      }
      if (check([56, 66, 80, 83])) {
        return {
          ext: "psd",
          mime: "image/vnd.adobe.photoshop"
        };
      }
      if (check([80, 75, 3, 4])) {
        if (check([109, 105, 109, 101, 116, 121, 112, 101, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 101, 112, 117, 98, 43, 122, 105, 112], { offset: 30 })) {
          return {
            ext: "epub",
            mime: "application/epub+zip"
          };
        }
        if (check(xpiZipFilename, { offset: 30 })) {
          return {
            ext: "xpi",
            mime: "application/x-xpinstall"
          };
        }
        if (checkString("mimetypeapplication/vnd.oasis.opendocument.text", { offset: 30 })) {
          return {
            ext: "odt",
            mime: "application/vnd.oasis.opendocument.text"
          };
        }
        if (checkString("mimetypeapplication/vnd.oasis.opendocument.spreadsheet", { offset: 30 })) {
          return {
            ext: "ods",
            mime: "application/vnd.oasis.opendocument.spreadsheet"
          };
        }
        if (checkString("mimetypeapplication/vnd.oasis.opendocument.presentation", { offset: 30 })) {
          return {
            ext: "odp",
            mime: "application/vnd.oasis.opendocument.presentation"
          };
        }
        const findNextZipHeaderIndex = (arr, startAt = 0) => arr.findIndex((el, i, arr2) => i >= startAt && arr2[i] === 80 && arr2[i + 1] === 75 && arr2[i + 2] === 3 && arr2[i + 3] === 4);
        let zipHeaderIndex = 0;
        let oxmlFound = false;
        let type = null;
        do {
          const offset = zipHeaderIndex + 30;
          if (!oxmlFound) {
            oxmlFound = check(oxmlContentTypes, { offset }) || check(oxmlRels, { offset });
          }
          if (!type) {
            if (checkString("word/", { offset })) {
              type = {
                ext: "docx",
                mime: "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
              };
            } else if (checkString("ppt/", { offset })) {
              type = {
                ext: "pptx",
                mime: "application/vnd.openxmlformats-officedocument.presentationml.presentation"
              };
            } else if (checkString("xl/", { offset })) {
              type = {
                ext: "xlsx",
                mime: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
              };
            }
          }
          if (oxmlFound && type) {
            return type;
          }
          zipHeaderIndex = findNextZipHeaderIndex(buf, offset);
        } while (zipHeaderIndex >= 0);
        if (type) {
          return type;
        }
      }
      if (check([80, 75]) && (buf[2] === 3 || buf[2] === 5 || buf[2] === 7) && (buf[3] === 4 || buf[3] === 6 || buf[3] === 8)) {
        return {
          ext: "zip",
          mime: "application/zip"
        };
      }
      if (check([117, 115, 116, 97, 114], { offset: 257 })) {
        return {
          ext: "tar",
          mime: "application/x-tar"
        };
      }
      if (check([82, 97, 114, 33, 26, 7]) && (buf[6] === 0 || buf[6] === 1)) {
        return {
          ext: "rar",
          mime: "application/x-rar-compressed"
        };
      }
      if (check([31, 139, 8])) {
        return {
          ext: "gz",
          mime: "application/gzip"
        };
      }
      if (check([66, 90, 104])) {
        return {
          ext: "bz2",
          mime: "application/x-bzip2"
        };
      }
      if (check([55, 122, 188, 175, 39, 28])) {
        return {
          ext: "7z",
          mime: "application/x-7z-compressed"
        };
      }
      if (check([120, 1])) {
        return {
          ext: "dmg",
          mime: "application/x-apple-diskimage"
        };
      }
      if (check([51, 103, 112, 53]) || // 3gp5
      check([0, 0, 0]) && check([102, 116, 121, 112], { offset: 4 }) && (check([109, 112, 52, 49], { offset: 8 }) || // MP41
      check([109, 112, 52, 50], { offset: 8 }) || // MP42
      check([105, 115, 111, 109], { offset: 8 }) || // ISOM
      check([105, 115, 111, 50], { offset: 8 }) || // ISO2
      check([109, 109, 112, 52], { offset: 8 }) || // MMP4
      check([77, 52, 86], { offset: 8 }) || // M4V
      check([100, 97, 115, 104], { offset: 8 }))) {
        return {
          ext: "mp4",
          mime: "video/mp4"
        };
      }
      if (check([77, 84, 104, 100])) {
        return {
          ext: "mid",
          mime: "audio/midi"
        };
      }
      if (check([26, 69, 223, 163])) {
        const sliced = buf.subarray(4, 4 + 4096);
        const idPos = sliced.findIndex((el, i, arr) => arr[i] === 66 && arr[i + 1] === 130);
        if (idPos !== -1) {
          const docTypePos = idPos + 3;
          const findDocType = (type) => [...type].every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));
          if (findDocType("matroska")) {
            return {
              ext: "mkv",
              mime: "video/x-matroska"
            };
          }
          if (findDocType("webm")) {
            return {
              ext: "webm",
              mime: "video/webm"
            };
          }
        }
      }
      if (check([0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32]) || check([102, 114, 101, 101], { offset: 4 }) || // Type: `free`
      check([102, 116, 121, 112, 113, 116, 32, 32], { offset: 4 }) || check([109, 100, 97, 116], { offset: 4 }) || // MJPEG
      check([109, 111, 111, 118], { offset: 4 }) || // Type: `moov`
      check([119, 105, 100, 101], { offset: 4 })) {
        return {
          ext: "mov",
          mime: "video/quicktime"
        };
      }
      if (check([82, 73, 70, 70])) {
        if (check([65, 86, 73], { offset: 8 })) {
          return {
            ext: "avi",
            mime: "video/vnd.avi"
          };
        }
        if (check([87, 65, 86, 69], { offset: 8 })) {
          return {
            ext: "wav",
            mime: "audio/vnd.wave"
          };
        }
        if (check([81, 76, 67, 77], { offset: 8 })) {
          return {
            ext: "qcp",
            mime: "audio/qcelp"
          };
        }
      }
      if (check([48, 38, 178, 117, 142, 102, 207, 17, 166, 217])) {
        let offset = 30;
        do {
          const objectSize = readUInt64LE(buf, offset + 16);
          if (check([145, 7, 220, 183, 183, 169, 207, 17, 142, 230, 0, 192, 12, 32, 83, 101], { offset })) {
            if (check([64, 158, 105, 248, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43], { offset: offset + 24 })) {
              return {
                ext: "wma",
                mime: "audio/x-ms-wma"
              };
            }
            if (check([192, 239, 25, 188, 77, 91, 207, 17, 168, 253, 0, 128, 95, 92, 68, 43], { offset: offset + 24 })) {
              return {
                ext: "wmv",
                mime: "video/x-ms-asf"
              };
            }
            break;
          }
          offset += objectSize;
        } while (offset + 24 <= buf.length);
        return {
          ext: "asf",
          mime: "application/vnd.ms-asf"
        };
      }
      if (check([0, 0, 1, 186]) || check([0, 0, 1, 179])) {
        return {
          ext: "mpg",
          mime: "video/mpeg"
        };
      }
      if (check([102, 116, 121, 112, 51, 103], { offset: 4 })) {
        return {
          ext: "3gp",
          mime: "video/3gpp"
        };
      }
      for (let start = 0; start < 2 && start < buf.length - 16; start++) {
        if (check([73, 68, 51], { offset: start }) || // ID3 header
        check([255, 226], { offset: start, mask: [255, 226] })) {
          return {
            ext: "mp3",
            mime: "audio/mpeg"
          };
        }
        if (check([255, 228], { offset: start, mask: [255, 228] })) {
          return {
            ext: "mp2",
            mime: "audio/mpeg"
          };
        }
        if (check([255, 248], { offset: start, mask: [255, 252] })) {
          return {
            ext: "mp2",
            mime: "audio/mpeg"
          };
        }
        if (check([255, 240], { offset: start, mask: [255, 252] })) {
          return {
            ext: "mp4",
            mime: "audio/mpeg"
          };
        }
      }
      if (check([102, 116, 121, 112, 77, 52, 65], { offset: 4 })) {
        return {
          // MPEG-4 layer 3 (audio)
          ext: "m4a",
          mime: "audio/mp4"
          // RFC 4337
        };
      }
      if (check([79, 112, 117, 115, 72, 101, 97, 100], { offset: 28 })) {
        return {
          ext: "opus",
          mime: "audio/opus"
        };
      }
      if (check([79, 103, 103, 83])) {
        if (check([128, 116, 104, 101, 111, 114, 97], { offset: 28 })) {
          return {
            ext: "ogv",
            mime: "video/ogg"
          };
        }
        if (check([1, 118, 105, 100, 101, 111, 0], { offset: 28 })) {
          return {
            ext: "ogm",
            mime: "video/ogg"
          };
        }
        if (check([127, 70, 76, 65, 67], { offset: 28 })) {
          return {
            ext: "oga",
            mime: "audio/ogg"
          };
        }
        if (check([83, 112, 101, 101, 120, 32, 32], { offset: 28 })) {
          return {
            ext: "spx",
            mime: "audio/ogg"
          };
        }
        if (check([1, 118, 111, 114, 98, 105, 115], { offset: 28 })) {
          return {
            ext: "ogg",
            mime: "audio/ogg"
          };
        }
        return {
          ext: "ogx",
          mime: "application/ogg"
        };
      }
      if (check([102, 76, 97, 67])) {
        return {
          ext: "flac",
          mime: "audio/x-flac"
        };
      }
      if (check([77, 65, 67, 32])) {
        return {
          ext: "ape",
          mime: "audio/ape"
        };
      }
      if (check([119, 118, 112, 107])) {
        return {
          ext: "wv",
          mime: "audio/wavpack"
        };
      }
      if (check([35, 33, 65, 77, 82, 10])) {
        return {
          ext: "amr",
          mime: "audio/amr"
        };
      }
      if (check([37, 80, 68, 70])) {
        return {
          ext: "pdf",
          mime: "application/pdf"
        };
      }
      if (check([77, 90])) {
        return {
          ext: "exe",
          mime: "application/x-msdownload"
        };
      }
      if ((buf[0] === 67 || buf[0] === 70) && check([87, 83], { offset: 1 })) {
        return {
          ext: "swf",
          mime: "application/x-shockwave-flash"
        };
      }
      if (check([123, 92, 114, 116, 102])) {
        return {
          ext: "rtf",
          mime: "application/rtf"
        };
      }
      if (check([0, 97, 115, 109])) {
        return {
          ext: "wasm",
          mime: "application/wasm"
        };
      }
      if (check([119, 79, 70, 70]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff",
          mime: "font/woff"
        };
      }
      if (check([119, 79, 70, 50]) && (check([0, 1, 0, 0], { offset: 4 }) || check([79, 84, 84, 79], { offset: 4 }))) {
        return {
          ext: "woff2",
          mime: "font/woff2"
        };
      }
      if (check([76, 80], { offset: 34 }) && (check([0, 0, 1], { offset: 8 }) || check([1, 0, 2], { offset: 8 }) || check([2, 0, 2], { offset: 8 }))) {
        return {
          ext: "eot",
          mime: "application/vnd.ms-fontobject"
        };
      }
      if (check([0, 1, 0, 0, 0])) {
        return {
          ext: "ttf",
          mime: "font/ttf"
        };
      }
      if (check([79, 84, 84, 79, 0])) {
        return {
          ext: "otf",
          mime: "font/otf"
        };
      }
      if (check([0, 0, 1, 0])) {
        return {
          ext: "ico",
          mime: "image/x-icon"
        };
      }
      if (check([0, 0, 2, 0])) {
        return {
          ext: "cur",
          mime: "image/x-icon"
        };
      }
      if (check([70, 76, 86, 1])) {
        return {
          ext: "flv",
          mime: "video/x-flv"
        };
      }
      if (check([37, 33])) {
        return {
          ext: "ps",
          mime: "application/postscript"
        };
      }
      if (check([253, 55, 122, 88, 90, 0])) {
        return {
          ext: "xz",
          mime: "application/x-xz"
        };
      }
      if (check([83, 81, 76, 105])) {
        return {
          ext: "sqlite",
          mime: "application/x-sqlite3"
        };
      }
      if (check([78, 69, 83, 26])) {
        return {
          ext: "nes",
          mime: "application/x-nintendo-nes-rom"
        };
      }
      if (check([67, 114, 50, 52])) {
        return {
          ext: "crx",
          mime: "application/x-google-chrome-extension"
        };
      }
      if (check([77, 83, 67, 70]) || check([73, 83, 99, 40])) {
        return {
          ext: "cab",
          mime: "application/vnd.ms-cab-compressed"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62, 10, 100, 101, 98, 105, 97, 110, 45, 98, 105, 110, 97, 114, 121])) {
        return {
          ext: "deb",
          mime: "application/x-deb"
        };
      }
      if (check([33, 60, 97, 114, 99, 104, 62])) {
        return {
          ext: "ar",
          mime: "application/x-unix-archive"
        };
      }
      if (check([237, 171, 238, 219])) {
        return {
          ext: "rpm",
          mime: "application/x-rpm"
        };
      }
      if (check([31, 160]) || check([31, 157])) {
        return {
          ext: "Z",
          mime: "application/x-compress"
        };
      }
      if (check([76, 90, 73, 80])) {
        return {
          ext: "lz",
          mime: "application/x-lzip"
        };
      }
      if (check([208, 207, 17, 224, 161, 177, 26, 225])) {
        return {
          ext: "msi",
          mime: "application/x-msi"
        };
      }
      if (check([6, 14, 43, 52, 2, 5, 1, 1, 13, 1, 2, 1, 1, 2])) {
        return {
          ext: "mxf",
          mime: "application/mxf"
        };
      }
      if (check([71], { offset: 4 }) && (check([71], { offset: 192 }) || check([71], { offset: 196 }))) {
        return {
          ext: "mts",
          mime: "video/mp2t"
        };
      }
      if (check([66, 76, 69, 78, 68, 69, 82])) {
        return {
          ext: "blend",
          mime: "application/x-blender"
        };
      }
      if (check([66, 80, 71, 251])) {
        return {
          ext: "bpg",
          mime: "image/bpg"
        };
      }
      if (check([0, 0, 0, 12, 106, 80, 32, 32, 13, 10, 135, 10])) {
        if (check([106, 112, 50, 32], { offset: 20 })) {
          return {
            ext: "jp2",
            mime: "image/jp2"
          };
        }
        if (check([106, 112, 120, 32], { offset: 20 })) {
          return {
            ext: "jpx",
            mime: "image/jpx"
          };
        }
        if (check([106, 112, 109, 32], { offset: 20 })) {
          return {
            ext: "jpm",
            mime: "image/jpm"
          };
        }
        if (check([109, 106, 112, 50], { offset: 20 })) {
          return {
            ext: "mj2",
            mime: "image/mj2"
          };
        }
      }
      if (check([70, 79, 82, 77])) {
        return {
          ext: "aif",
          mime: "audio/aiff"
        };
      }
      if (checkString("<?xml ")) {
        return {
          ext: "xml",
          mime: "application/xml"
        };
      }
      if (check([66, 79, 79, 75, 77, 79, 66, 73], { offset: 60 })) {
        return {
          ext: "mobi",
          mime: "application/x-mobipocket-ebook"
        };
      }
      if (check([102, 116, 121, 112], { offset: 4 })) {
        if (check([109, 105, 102, 49], { offset: 8 })) {
          return {
            ext: "heic",
            mime: "image/heif"
          };
        }
        if (check([109, 115, 102, 49], { offset: 8 })) {
          return {
            ext: "heic",
            mime: "image/heif-sequence"
          };
        }
        if (check([104, 101, 105, 99], { offset: 8 }) || check([104, 101, 105, 120], { offset: 8 })) {
          return {
            ext: "heic",
            mime: "image/heic"
          };
        }
        if (check([104, 101, 118, 99], { offset: 8 }) || check([104, 101, 118, 120], { offset: 8 })) {
          return {
            ext: "heic",
            mime: "image/heic-sequence"
          };
        }
      }
      if (check([171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10])) {
        return {
          ext: "ktx",
          mime: "image/ktx"
        };
      }
      if (check([68, 73, 67, 77], { offset: 128 })) {
        return {
          ext: "dcm",
          mime: "application/dicom"
        };
      }
      if (check([77, 80, 43])) {
        return {
          ext: "mpc",
          mime: "audio/x-musepack"
        };
      }
      if (check([77, 80, 67, 75])) {
        return {
          ext: "mpc",
          mime: "audio/x-musepack"
        };
      }
      if (check([66, 69, 71, 73, 78, 58])) {
        return {
          ext: "ics",
          mime: "text/calendar"
        };
      }
      if (check([103, 108, 84, 70, 2, 0, 0, 0])) {
        return {
          ext: "glb",
          mime: "model/gltf-binary"
        };
      }
      if (check([212, 195, 178, 161]) || check([161, 178, 195, 212])) {
        return {
          ext: "pcap",
          mime: "application/vnd.tcpdump.pcap"
        };
      }
      return null;
    };
    module.exports = fileType;
    module.exports.default = fileType;
    Object.defineProperty(fileType, "minimumBytes", { value: 4100 });
    module.exports.stream = (readableStream) => new Promise((resolve, reject) => {
      const stream = eval("require")("stream");
      readableStream.once("readable", () => {
        const pass = new stream.PassThrough();
        const chunk = readableStream.read(module.exports.minimumBytes) || readableStream.read();
        try {
          pass.fileType = fileType(chunk);
        } catch (error) {
          reject(error);
        }
        readableStream.unshift(chunk);
        if (stream.pipeline) {
          resolve(stream.pipeline(readableStream, pass, () => {
          }));
        } else {
          resolve(readableStream.pipe(pass));
        }
      });
    });
  }
});

// node_modules/image-type/index.js
var require_image_type = __commonJS({
  "node_modules/image-type/index.js"(exports2, module2) {
    "use strict";
    var fileType2 = require_file_type();
    var imageExts = /* @__PURE__ */ new Set([
      "jpg",
      "png",
      "gif",
      "webp",
      "flif",
      "cr2",
      "tif",
      "bmp",
      "jxr",
      "psd",
      "ico",
      "bpg",
      "jp2",
      "jpm",
      "jpx",
      "heic",
      "cur",
      "dcm"
    ]);
    var imageType = (input) => {
      const ret = fileType2(input);
      return imageExts.has(ret && ret.ext) ? ret : null;
    };
    module2.exports = imageType;
    module2.exports.default = imageType;
    Object.defineProperty(imageType, "minimumBytes", { value: fileType2.minimumBytes });
  }
});

// node_modules/tiff/lib/hacks.js
var require_hacks = __commonJS({
  "node_modules/tiff/lib/hacks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.guessStripByteCounts = void 0;
    function guessStripByteCounts(ifd) {
      if (ifd.compression !== 1) {
        throw new Error("missing mandatory StripByteCounts field in compressed image");
      }
      const bytesPerStrip = ifd.rowsPerStrip * ifd.width * ifd.samplesPerPixel * (ifd.bitsPerSample / 8);
      return new Array(ifd.stripOffsets.length).fill(bytesPerStrip);
    }
    exports2.guessStripByteCounts = guessStripByteCounts;
  }
});

// node_modules/tiff/lib/horizontalDifferencing.js
var require_horizontalDifferencing = __commonJS({
  "node_modules/tiff/lib/horizontalDifferencing.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.applyHorizontalDifferencing16Bit = exports2.applyHorizontalDifferencing8Bit = void 0;
    function applyHorizontalDifferencing8Bit(data, width, components) {
      let i = 0;
      while (i < data.length) {
        for (let j = components; j < width * components; j += components) {
          for (let k = 0; k < components; k++) {
            data[i + j + k] = data[i + j + k] + data[i + j - (components - k)] & 255;
          }
        }
        i += width * components;
      }
    }
    exports2.applyHorizontalDifferencing8Bit = applyHorizontalDifferencing8Bit;
    function applyHorizontalDifferencing16Bit(data, width, components) {
      let i = 0;
      while (i < data.length) {
        for (let j = components; j < width * components; j += components) {
          for (let k = 0; k < components; k++) {
            data[i + j + k] = data[i + j + k] + data[i + j - (components - k)] & 65535;
          }
        }
        i += width * components;
      }
    }
    exports2.applyHorizontalDifferencing16Bit = applyHorizontalDifferencing16Bit;
  }
});

// node_modules/tiff/lib/tags/exif.js
var require_exif2 = __commonJS({
  "node_modules/tiff/lib/tags/exif.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tagsByName = exports2.tagsById = void 0;
    var tagsById = {
      33434: "ExposureTime",
      33437: "FNumber",
      34850: "ExposureProgram",
      34852: "SpectralSensitivity",
      34855: "ISOSpeedRatings",
      34856: "OECF",
      34864: "SensitivityType",
      34865: "StandardOutputSensitivity",
      34866: "RecommendedExposureIndex",
      34867: "ISOSpeed",
      34868: "ISOSpeedLatitudeyyy",
      34869: "ISOSpeedLatitudezzz",
      36864: "ExifVersion",
      36867: "DateTimeOriginal",
      36868: "DateTimeDigitized",
      37121: "ComponentsConfiguration",
      37122: "CompressedBitsPerPixel",
      37377: "ShutterSpeedValue",
      37378: "ApertureValue",
      37379: "BrightnessValue",
      37380: "ExposureBiasValue",
      37381: "MaxApertureValue",
      37382: "SubjectDistance",
      37383: "MeteringMode",
      37384: "LightSource",
      37385: "Flash",
      37386: "FocalLength",
      37396: "SubjectArea",
      37500: "MakerNote",
      37510: "UserComment",
      37520: "SubsecTime",
      37521: "SubsecTimeOriginal",
      37522: "SubsecTimeDigitized",
      40960: "FlashpixVersion",
      40961: "ColorSpace",
      40962: "PixelXDimension",
      40963: "PixelYDimension",
      40964: "RelatedSoundFile",
      41483: "FlashEnergy",
      41484: "SpatialFrequencyResponse",
      41486: "FocalPlaneXResolution",
      41487: "FocalPlaneYResolution",
      41488: "FocalPlaneResolutionUnit",
      41492: "SubjectLocation",
      41493: "ExposureIndex",
      41495: "SensingMethod",
      41728: "FileSource",
      41729: "SceneType",
      41730: "CFAPattern",
      41985: "CustomRendered",
      41986: "ExposureMode",
      41987: "WhiteBalance",
      41988: "DigitalZoomRatio",
      41989: "FocalLengthIn35mmFilm",
      41990: "SceneCaptureType",
      41991: "GainControl",
      41992: "Contrast",
      41993: "Saturation",
      41994: "Sharpness",
      41995: "DeviceSettingDescription",
      41996: "SubjectDistanceRange",
      42016: "ImageUniqueID",
      42032: "CameraOwnerName",
      42033: "BodySerialNumber",
      42034: "LensSpecification",
      42035: "LensMake",
      42036: "LensModel",
      42037: "LensSerialNumber",
      42240: "Gamma"
    };
    exports2.tagsById = tagsById;
    var tagsByName = {};
    exports2.tagsByName = tagsByName;
    for (let i in tagsById) {
      tagsByName[tagsById[i]] = Number(i);
    }
  }
});

// node_modules/tiff/lib/tags/gps.js
var require_gps2 = __commonJS({
  "node_modules/tiff/lib/tags/gps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tagsByName = exports2.tagsById = void 0;
    var tagsById = {
      0: "GPSVersionID",
      1: "GPSLatitudeRef",
      2: "GPSLatitude",
      3: "GPSLongitudeRef",
      4: "GPSLongitude",
      5: "GPSAltitudeRef",
      6: "GPSAltitude",
      7: "GPSTimeStamp",
      8: "GPSSatellites",
      9: "GPSStatus",
      10: "GPSMeasureMode",
      11: "GPSDOP",
      12: "GPSSpeedRef",
      13: "GPSSpeed",
      14: "GPSTrackRef",
      15: "GPSTrack",
      16: "GPSImgDirectionRef",
      17: "GPSImgDirection",
      18: "GPSMapDatum",
      19: "GPSDestLatitudeRef",
      20: "GPSDestLatitude",
      21: "GPSDestLongitudeRef",
      22: "GPSDestLongitude",
      23: "GPSDestBearingRef",
      24: "GPSDestBearing",
      25: "GPSDestDistanceRef",
      26: "GPSDestDistance",
      27: "GPSProcessingMethod",
      28: "GPSAreaInformation",
      29: "GPSDateStamp",
      30: "GPSDifferential",
      31: "GPSHPositioningError"
    };
    exports2.tagsById = tagsById;
    var tagsByName = {};
    exports2.tagsByName = tagsByName;
    for (let i in tagsById) {
      tagsByName[tagsById[i]] = Number(i);
    }
  }
});

// node_modules/tiff/lib/tags/standard.js
var require_standard2 = __commonJS({
  "node_modules/tiff/lib/tags/standard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tagsByName = exports2.tagsById = void 0;
    var tagsById = {
      // Baseline tags
      254: "NewSubfileType",
      255: "SubfileType",
      256: "ImageWidth",
      257: "ImageLength",
      258: "BitsPerSample",
      259: "Compression",
      262: "PhotometricInterpretation",
      263: "Threshholding",
      264: "CellWidth",
      265: "CellLength",
      266: "FillOrder",
      270: "ImageDescription",
      271: "Make",
      272: "Model",
      273: "StripOffsets",
      274: "Orientation",
      277: "SamplesPerPixel",
      278: "RowsPerStrip",
      279: "StripByteCounts",
      280: "MinSampleValue",
      281: "MaxSampleValue",
      282: "XResolution",
      283: "YResolution",
      284: "PlanarConfiguration",
      288: "FreeOffsets",
      289: "FreeByteCounts",
      290: "GrayResponseUnit",
      291: "GrayResponseCurve",
      296: "ResolutionUnit",
      305: "Software",
      306: "DateTime",
      315: "Artist",
      316: "HostComputer",
      320: "ColorMap",
      338: "ExtraSamples",
      33432: "Copyright",
      // Extension tags
      269: "DocumentName",
      285: "PageName",
      286: "XPosition",
      287: "YPosition",
      292: "T4Options",
      293: "T6Options",
      297: "PageNumber",
      301: "TransferFunction",
      317: "Predictor",
      318: "WhitePoint",
      319: "PrimaryChromaticities",
      321: "HalftoneHints",
      322: "TileWidth",
      323: "TileLength",
      324: "TileOffsets",
      325: "TileByteCounts",
      326: "BadFaxLines",
      327: "CleanFaxData",
      328: "ConsecutiveBadFaxLines",
      330: "SubIFDs",
      332: "InkSet",
      333: "InkNames",
      334: "NumberOfInks",
      336: "DotRange",
      337: "TargetPrinter",
      339: "SampleFormat",
      340: "SMinSampleValue",
      341: "SMaxSampleValue",
      342: "TransferRange",
      343: "ClipPath",
      344: "XClipPathUnits",
      345: "YClipPathUnits",
      346: "Indexed",
      347: "JPEGTables",
      351: "OPIProxy",
      400: "GlobalParametersIFD",
      401: "ProfileType",
      402: "FaxProfile",
      403: "CodingMethods",
      404: "VersionYear",
      405: "ModeNumber",
      433: "Decode",
      434: "DefaultImageColor",
      512: "JPEGProc",
      513: "JPEGInterchangeFormat",
      514: "JPEGInterchangeFormatLength",
      515: "JPEGRestartInterval",
      517: "JPEGLosslessPredictors",
      518: "JPEGPointTransforms",
      519: "JPEGQTables",
      520: "JPEGDCTables",
      521: "JPEGACTables",
      529: "YCbCrCoefficients",
      530: "YCbCrSubSampling",
      531: "YCbCrPositioning",
      532: "ReferenceBlackWhite",
      559: "StripRowCounts",
      700: "XMP",
      32781: "ImageID",
      34732: "ImageLayer",
      // Private tags
      32932: "WangAnnotatio",
      33445: "MDFileTag",
      33446: "MDScalePixel",
      33447: "MDColorTable",
      33448: "MDLabName",
      33449: "MDSampleInfo",
      33450: "MDPrepDate",
      33451: "MDPrepTime",
      33452: "MDFileUnits",
      33550: "ModelPixelScaleTag",
      33723: "IPTC",
      33918: "INGRPacketDataTag",
      33919: "INGRFlagRegisters",
      33920: "IrasBTransformationMatrix",
      33922: "ModelTiepointTag",
      34264: "ModelTransformationTag",
      34377: "Photoshop",
      34665: "ExifIFD",
      34675: "ICCProfile",
      34735: "GeoKeyDirectoryTag",
      34736: "GeoDoubleParamsTag",
      34737: "GeoAsciiParamsTag",
      34853: "GPSIFD",
      34908: "HylaFAXFaxRecvParams",
      34909: "HylaFAXFaxSubAddress",
      34910: "HylaFAXFaxRecvTime",
      37724: "ImageSourceData",
      40965: "InteroperabilityIFD",
      42112: "GDAL_METADATA",
      42113: "GDAL_NODATA",
      50215: "OceScanjobDescription",
      50216: "OceApplicationSelector",
      50217: "OceIdentificationNumber",
      50218: "OceImageLogicCharacteristics",
      50706: "DNGVersion",
      50707: "DNGBackwardVersion",
      50708: "UniqueCameraModel",
      50709: "LocalizedCameraModel",
      50710: "CFAPlaneColor",
      50711: "CFALayout",
      50712: "LinearizationTable",
      50713: "BlackLevelRepeatDim",
      50714: "BlackLevel",
      50715: "BlackLevelDeltaH",
      50716: "BlackLevelDeltaV",
      50717: "WhiteLevel",
      50718: "DefaultScale",
      50719: "DefaultCropOrigin",
      50720: "DefaultCropSize",
      50721: "ColorMatrix1",
      50722: "ColorMatrix2",
      50723: "CameraCalibration1",
      50724: "CameraCalibration2",
      50725: "ReductionMatrix1",
      50726: "ReductionMatrix2",
      50727: "AnalogBalance",
      50728: "AsShotNeutral",
      50729: "AsShotWhiteXY",
      50730: "BaselineExposure",
      50731: "BaselineNoise",
      50732: "BaselineSharpness",
      50733: "BayerGreenSplit",
      50734: "LinearResponseLimit",
      50735: "CameraSerialNumber",
      50736: "LensInfo",
      50737: "ChromaBlurRadius",
      50738: "AntiAliasStrength",
      50740: "DNGPrivateData",
      50741: "MakerNoteSafety",
      50778: "CalibrationIlluminant1",
      50779: "CalibrationIlluminant2",
      50780: "BestQualityScale",
      50784: "AliasLayerMetadata"
    };
    exports2.tagsById = tagsById;
    var tagsByName = {};
    exports2.tagsByName = tagsByName;
    for (let i in tagsById) {
      tagsByName[tagsById[i]] = Number(i);
    }
  }
});

// node_modules/tiff/lib/ifd.js
var require_ifd2 = __commonJS({
  "node_modules/tiff/lib/ifd.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var exif = __importStar2(require_exif2());
    var gps = __importStar2(require_gps2());
    var standard = __importStar2(require_standard2());
    var tags = {
      standard,
      exif,
      gps
    };
    var IFD = class {
      constructor(kind) {
        if (!kind) {
          throw new Error("missing kind");
        }
        this.data = new Uint8Array();
        this.fields = /* @__PURE__ */ new Map();
        this.kind = kind;
        this._hasMap = false;
        this._map = {};
      }
      get(tag) {
        if (typeof tag === "number") {
          return this.fields.get(tag);
        } else if (typeof tag === "string") {
          return this.fields.get(tags[this.kind].tagsByName[tag]);
        } else {
          throw new Error("expected a number or string");
        }
      }
      get map() {
        if (!this._hasMap) {
          const taglist = tags[this.kind].tagsById;
          for (let key of this.fields.keys()) {
            if (taglist[key]) {
              this._map[taglist[key]] = this.fields.get(key);
            }
          }
          this._hasMap = true;
        }
        return this._map;
      }
    };
    exports2.default = IFD;
  }
});

// node_modules/tiff/lib/ifdValue.js
var require_ifdValue2 = __commonJS({
  "node_modules/tiff/lib/ifdValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readData = exports2.getByteLength = void 0;
    var types = /* @__PURE__ */ new Map([
      [1, [1, readByte]],
      [2, [1, readASCII]],
      [3, [2, readShort]],
      [4, [4, readLong]],
      [5, [8, readRational]],
      [6, [1, readSByte]],
      [7, [1, readByte]],
      [8, [2, readSShort]],
      [9, [4, readSLong]],
      [10, [8, readSRational]],
      [11, [4, readFloat]],
      [12, [8, readDouble]]
      // DOUBLE
    ]);
    function getByteLength(type, count) {
      const val = types.get(type);
      if (!val)
        throw new Error(`type not found: ${type}`);
      return val[0] * count;
    }
    exports2.getByteLength = getByteLength;
    function readData(decoder, type, count) {
      const val = types.get(type);
      if (!val)
        throw new Error(`type not found: ${type}`);
      return val[1](decoder, count);
    }
    exports2.readData = readData;
    function readByte(decoder, count) {
      if (count === 1)
        return decoder.readUint8();
      let array = new Uint8Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readUint8();
      }
      return array;
    }
    function readASCII(decoder, count) {
      let strings = [];
      let currentString = "";
      for (let i = 0; i < count; i++) {
        let char = String.fromCharCode(decoder.readUint8());
        if (char === "\0") {
          strings.push(currentString);
          currentString = "";
        } else {
          currentString += char;
        }
      }
      if (strings.length === 1) {
        return strings[0];
      } else {
        return strings;
      }
    }
    function readShort(decoder, count) {
      if (count === 1)
        return decoder.readUint16();
      let array = new Uint16Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readUint16();
      }
      return array;
    }
    function readLong(decoder, count) {
      if (count === 1)
        return decoder.readUint32();
      let array = new Uint32Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readUint32();
      }
      return array;
    }
    function readRational(decoder, count) {
      if (count === 1) {
        return decoder.readUint32() / decoder.readUint32();
      }
      let rationals = new Array(count);
      for (let i = 0; i < count; i++) {
        rationals[i] = decoder.readUint32() / decoder.readUint32();
      }
      return rationals;
    }
    function readSByte(decoder, count) {
      if (count === 1)
        return decoder.readInt8();
      let array = new Int8Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readInt8();
      }
      return array;
    }
    function readSShort(decoder, count) {
      if (count === 1)
        return decoder.readInt16();
      let array = new Int16Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readInt16();
      }
      return array;
    }
    function readSLong(decoder, count) {
      if (count === 1)
        return decoder.readInt32();
      let array = new Int32Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readInt32();
      }
      return array;
    }
    function readSRational(decoder, count) {
      if (count === 1) {
        return decoder.readInt32() / decoder.readInt32();
      }
      let rationals = new Array(count);
      for (let i = 0; i < count; i++) {
        rationals[i] = decoder.readInt32() / decoder.readInt32();
      }
      return rationals;
    }
    function readFloat(decoder, count) {
      if (count === 1)
        return decoder.readFloat32();
      let array = new Float32Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readFloat32();
      }
      return array;
    }
    function readDouble(decoder, count) {
      if (count === 1)
        return decoder.readFloat64();
      let array = new Float64Array(count);
      for (let i = 0; i < count; i++) {
        array[i] = decoder.readFloat64();
      }
      return array;
    }
  }
});

// node_modules/tiff/lib/lzw.js
var require_lzw = __commonJS({
  "node_modules/tiff/lib/lzw.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decompressLzw = void 0;
    var iobuffer_1 = require_IOBuffer();
    var CLEAR_CODE = 256;
    var EOI_CODE = 257;
    var TABLE_START = 258;
    var MIN_BIT_LENGTH = 9;
    var stringTable = [];
    function initializeStringTable() {
      if (stringTable.length === 0) {
        for (let i = 0; i < 256; i++) {
          stringTable.push([i]);
        }
        const dummyString = [];
        for (let i = 256; i < 4096; i++) {
          stringTable.push(dummyString);
        }
      }
    }
    var andTable = [511, 1023, 2047, 4095];
    var bitJumps = [0, 0, 0, 0, 0, 0, 0, 0, 0, 511, 1023, 2047, 4095];
    var LzwDecoder = class {
      constructor(data) {
        this.nextData = 0;
        this.nextBits = 0;
        this.bytePointer = 0;
        this.tableLength = TABLE_START;
        this.currentBitLength = MIN_BIT_LENGTH;
        this.stripArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
        this.outData = new iobuffer_1.IOBuffer(data.byteLength);
        this.initializeTable();
      }
      decode() {
        let code = 0;
        let oldCode = 0;
        while ((code = this.getNextCode()) !== EOI_CODE) {
          if (code === CLEAR_CODE) {
            this.initializeTable();
            code = this.getNextCode();
            if (code === EOI_CODE) {
              break;
            }
            this.writeString(this.stringFromCode(code));
            oldCode = code;
          } else if (this.isInTable(code)) {
            this.writeString(this.stringFromCode(code));
            this.addStringToTable(this.stringFromCode(oldCode).concat(this.stringFromCode(code)[0]));
            oldCode = code;
          } else {
            const outString = this.stringFromCode(oldCode).concat(this.stringFromCode(oldCode)[0]);
            this.writeString(outString);
            this.addStringToTable(outString);
            oldCode = code;
          }
        }
        const outArray = this.outData.toArray();
        return new DataView(outArray.buffer, outArray.byteOffset, outArray.byteLength);
      }
      initializeTable() {
        initializeStringTable();
        this.tableLength = TABLE_START;
        this.currentBitLength = MIN_BIT_LENGTH;
      }
      writeString(string) {
        this.outData.writeBytes(string);
      }
      stringFromCode(code) {
        return stringTable[code];
      }
      isInTable(code) {
        return code < this.tableLength;
      }
      addStringToTable(string) {
        stringTable[this.tableLength++] = string;
        if (stringTable.length > 4096) {
          stringTable = [];
          throw new Error("LZW decoding error. Please open an issue at https://github.com/image-js/tiff/issues/new/choose (include a test image).");
        }
        if (this.tableLength === bitJumps[this.currentBitLength]) {
          this.currentBitLength++;
        }
      }
      getNextCode() {
        this.nextData = this.nextData << 8 | this.stripArray[this.bytePointer++] & 255;
        this.nextBits += 8;
        if (this.nextBits < this.currentBitLength) {
          this.nextData = this.nextData << 8 | this.stripArray[this.bytePointer++] & 255;
          this.nextBits += 8;
        }
        const code = this.nextData >> this.nextBits - this.currentBitLength & andTable[this.currentBitLength - 9];
        this.nextBits -= this.currentBitLength;
        if (this.bytePointer > this.stripArray.length) {
          return 257;
        }
        return code;
      }
    };
    function decompressLzw(stripData) {
      return new LzwDecoder(stripData).decode();
    }
    exports2.decompressLzw = decompressLzw;
  }
});

// node_modules/tiff/lib/tiffIfd.js
var require_tiffIfd2 = __commonJS({
  "node_modules/tiff/lib/tiffIfd.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ifd_1 = __importDefault2(require_ifd2());
    var dateTimeRegex = /^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;
    var TiffIfd = class extends ifd_1.default {
      constructor() {
        super("standard");
      }
      // Custom fields
      get size() {
        return this.width * this.height;
      }
      get width() {
        return this.imageWidth;
      }
      get height() {
        return this.imageLength;
      }
      get components() {
        return this.samplesPerPixel;
      }
      get date() {
        let date = /* @__PURE__ */ new Date();
        let result = dateTimeRegex.exec(this.dateTime);
        if (result === null) {
          throw new Error(`invalid dateTime: ${this.dateTime}`);
        }
        date.setFullYear(Number(result[1]), Number(result[2]) - 1, Number(result[3]));
        date.setHours(Number(result[4]), Number(result[5]), Number(result[6]));
        return date;
      }
      // IFD fields
      get newSubfileType() {
        return this.get("NewSubfileType");
      }
      get imageWidth() {
        return this.get("ImageWidth");
      }
      get imageLength() {
        return this.get("ImageLength");
      }
      get bitsPerSample() {
        const data = this.get("BitsPerSample");
        if (data && typeof data !== "number") {
          return data[0];
        }
        return data;
      }
      get alpha() {
        const extraSamples = this.extraSamples;
        if (!extraSamples)
          return false;
        return extraSamples[0] !== 0;
      }
      get associatedAlpha() {
        const extraSamples = this.extraSamples;
        if (!extraSamples)
          return false;
        return extraSamples[0] === 1;
      }
      get extraSamples() {
        return alwaysArray(this.get("ExtraSamples"));
      }
      get compression() {
        return this.get("Compression") || 1;
      }
      get type() {
        return this.get("PhotometricInterpretation");
      }
      get fillOrder() {
        return this.get("FillOrder") || 1;
      }
      get documentName() {
        return this.get("DocumentName");
      }
      get imageDescription() {
        return this.get("ImageDescription");
      }
      get stripOffsets() {
        return alwaysArray(this.get("StripOffsets"));
      }
      get orientation() {
        return this.get("Orientation");
      }
      get samplesPerPixel() {
        return this.get("SamplesPerPixel") || 1;
      }
      get rowsPerStrip() {
        return this.get("RowsPerStrip");
      }
      get stripByteCounts() {
        return alwaysArray(this.get("StripByteCounts"));
      }
      get minSampleValue() {
        return this.get("MinSampleValue") || 0;
      }
      get maxSampleValue() {
        return this.get("MaxSampleValue") || Math.pow(2, this.bitsPerSample) - 1;
      }
      get xResolution() {
        return this.get("XResolution");
      }
      get yResolution() {
        return this.get("YResolution");
      }
      get planarConfiguration() {
        return this.get("PlanarConfiguration") || 1;
      }
      get resolutionUnit() {
        return this.get("ResolutionUnit") || 2;
      }
      get dateTime() {
        return this.get("DateTime");
      }
      get predictor() {
        return this.get("Predictor") || 1;
      }
      get sampleFormat() {
        return this.get("SampleFormat") || 1;
      }
      get sMinSampleValue() {
        return this.get("SMinSampleValue") || this.minSampleValue;
      }
      get sMaxSampleValue() {
        return this.get("SMaxSampleValue") || this.maxSampleValue;
      }
      get palette() {
        const totalColors = 2 ** this.bitsPerSample;
        const colorMap = this.get("ColorMap");
        if (!colorMap)
          return void 0;
        if (colorMap.length !== 3 * totalColors) {
          throw new Error(`ColorMap size must be ${totalColors}`);
        }
        const palette = [];
        for (let i = 0; i < totalColors; i++) {
          palette.push([
            colorMap[i],
            colorMap[i + totalColors],
            colorMap[i + 2 * totalColors]
          ]);
        }
        return palette;
      }
    };
    exports2.default = TiffIfd;
    function alwaysArray(value) {
      if (typeof value === "number")
        return [value];
      return value;
    }
  }
});

// node_modules/tiff/lib/zlib.js
var require_zlib = __commonJS({
  "node_modules/tiff/lib/zlib.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decompressZlib = void 0;
    var pako_1 = require_pako();
    function decompressZlib(stripData) {
      const stripUint8 = new Uint8Array(stripData.buffer, stripData.byteOffset, stripData.byteLength);
      const inflated = (0, pako_1.inflate)(stripUint8);
      return new DataView(inflated.buffer, inflated.byteOffset, inflated.byteLength);
    }
    exports2.decompressZlib = decompressZlib;
  }
});

// node_modules/tiff/lib/tiffDecoder.js
var require_tiffDecoder2 = __commonJS({
  "node_modules/tiff/lib/tiffDecoder.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var iobuffer_1 = require_IOBuffer();
    var hacks_1 = require_hacks();
    var horizontalDifferencing_1 = require_horizontalDifferencing();
    var ifd_1 = __importDefault2(require_ifd2());
    var ifdValue_1 = require_ifdValue2();
    var lzw_1 = require_lzw();
    var tiffIfd_1 = __importDefault2(require_tiffIfd2());
    var zlib_1 = require_zlib();
    var defaultOptions = {
      ignoreImageData: false,
      onlyFirst: false
    };
    var TIFFDecoder = class extends iobuffer_1.IOBuffer {
      constructor(data) {
        super(data);
        this._nextIFD = 0;
      }
      get isMultiPage() {
        let c = 0;
        this.decodeHeader();
        while (this._nextIFD) {
          c++;
          this.decodeIFD({ ignoreImageData: true }, true);
          if (c === 2) {
            return true;
          }
        }
        if (c === 1) {
          return false;
        }
        throw unsupported("ifdCount", c);
      }
      get pageCount() {
        let c = 0;
        this.decodeHeader();
        while (this._nextIFD) {
          c++;
          this.decodeIFD({ ignoreImageData: true }, true);
        }
        if (c > 0) {
          return c;
        }
        throw unsupported("ifdCount", c);
      }
      decode(options = {}) {
        options = Object.assign({}, defaultOptions, options);
        const result = [];
        this.decodeHeader();
        while (this._nextIFD) {
          result.push(this.decodeIFD(options, true));
          if (options.onlyFirst) {
            return [result[0]];
          }
        }
        return result;
      }
      decodeHeader() {
        const value = this.readUint16();
        if (value === 18761) {
          this.setLittleEndian();
        } else if (value === 19789) {
          this.setBigEndian();
        } else {
          throw new Error(`invalid byte order: 0x${value.toString(16)}`);
        }
        if (this.readUint16() !== 42) {
          throw new Error("not a TIFF file");
        }
        this._nextIFD = this.readUint32();
      }
      decodeIFD(options, tiff) {
        this.seek(this._nextIFD);
        let ifd;
        if (tiff) {
          ifd = new tiffIfd_1.default();
        } else {
          if (!options.kind) {
            throw new Error(`kind is missing`);
          }
          ifd = new ifd_1.default(options.kind);
        }
        const numEntries = this.readUint16();
        for (let i = 0; i < numEntries; i++) {
          this.decodeIFDEntry(ifd);
        }
        if (!options.ignoreImageData) {
          if (!(ifd instanceof tiffIfd_1.default)) {
            throw new Error("must be a tiff ifd");
          }
          this.decodeImageData(ifd);
        }
        this._nextIFD = this.readUint32();
        return ifd;
      }
      decodeIFDEntry(ifd) {
        const offset = this.offset;
        const tag = this.readUint16();
        const type = this.readUint16();
        const numValues = this.readUint32();
        if (type < 1 || type > 12) {
          this.skip(4);
          return;
        }
        const valueByteLength = (0, ifdValue_1.getByteLength)(type, numValues);
        if (valueByteLength > 4) {
          this.seek(this.readUint32());
        }
        const value = (0, ifdValue_1.readData)(this, type, numValues);
        ifd.fields.set(tag, value);
        if (tag === 34665 || tag === 34853) {
          let currentOffset = this.offset;
          let kind = "exif";
          if (tag === 34665) {
            kind = "exif";
          } else if (tag === 34853) {
            kind = "gps";
          }
          this._nextIFD = value;
          ifd[kind] = this.decodeIFD({
            kind,
            ignoreImageData: true
          }, false);
          this.offset = currentOffset;
        }
        this.seek(offset);
        this.skip(12);
      }
      decodeImageData(ifd) {
        const orientation = ifd.orientation;
        if (orientation && orientation !== 1) {
          throw unsupported("orientation", orientation);
        }
        switch (ifd.type) {
          case 0:
          case 1:
          case 2:
          case 3:
            this.readStripData(ifd);
            break;
          default:
            throw unsupported("image type", ifd.type);
        }
        this.applyPredictor(ifd);
        this.convertAlpha(ifd);
        if (ifd.type === 0) {
          const bitDepth = ifd.bitsPerSample;
          const maxValue = Math.pow(2, bitDepth) - 1;
          for (let i = 0; i < ifd.data.length; i++) {
            ifd.data[i] = maxValue - ifd.data[i];
          }
        }
      }
      readStripData(ifd) {
        const width = ifd.width;
        const height = ifd.height;
        const bitDepth = ifd.bitsPerSample;
        const sampleFormat = ifd.sampleFormat;
        const size = width * height * ifd.samplesPerPixel;
        const data = getDataArray(size, bitDepth, sampleFormat);
        const rowsPerStrip = ifd.rowsPerStrip;
        const maxPixels = rowsPerStrip * width * ifd.samplesPerPixel;
        const stripOffsets = ifd.stripOffsets;
        const stripByteCounts = ifd.stripByteCounts || (0, hacks_1.guessStripByteCounts)(ifd);
        let remainingPixels = size;
        let pixel = 0;
        for (let i = 0; i < stripOffsets.length; i++) {
          let stripData = new DataView(this.buffer, this.byteOffset + stripOffsets[i], stripByteCounts[i]);
          let length = remainingPixels > maxPixels ? maxPixels : remainingPixels;
          remainingPixels -= length;
          let dataToFill = stripData;
          switch (ifd.compression) {
            case 1: {
              break;
            }
            case 5: {
              dataToFill = (0, lzw_1.decompressLzw)(stripData);
              break;
            }
            case 8: {
              dataToFill = (0, zlib_1.decompressZlib)(stripData);
              break;
            }
            case 2:
              throw unsupported("Compression", "CCITT Group 3");
            case 32773:
              throw unsupported("Compression", "PackBits");
            default:
              throw unsupported("Compression", ifd.compression);
          }
          pixel = this.fillUncompressed(bitDepth, sampleFormat, data, dataToFill, pixel, length);
        }
        ifd.data = data;
      }
      fillUncompressed(bitDepth, sampleFormat, data, stripData, pixel, length) {
        if (bitDepth === 8) {
          return fill8bit(data, stripData, pixel, length);
        } else if (bitDepth === 16) {
          return fill16bit(data, stripData, pixel, length, this.isLittleEndian());
        } else if (bitDepth === 32 && sampleFormat === 3) {
          return fillFloat32(data, stripData, pixel, length, this.isLittleEndian());
        } else {
          throw unsupported("bitDepth", bitDepth);
        }
      }
      applyPredictor(ifd) {
        const bitDepth = ifd.bitsPerSample;
        switch (ifd.predictor) {
          case 1: {
            break;
          }
          case 2: {
            if (bitDepth === 8) {
              (0, horizontalDifferencing_1.applyHorizontalDifferencing8Bit)(ifd.data, ifd.width, ifd.components);
            } else if (bitDepth === 16) {
              (0, horizontalDifferencing_1.applyHorizontalDifferencing16Bit)(ifd.data, ifd.width, ifd.components);
            } else {
              throw new Error(`Horizontal differencing is only supported for images with a bit depth of ${bitDepth}`);
            }
            break;
          }
          default:
            throw new Error(`invalid predictor: ${ifd.predictor}`);
        }
      }
      convertAlpha(ifd) {
        if (ifd.alpha && ifd.associatedAlpha) {
          const { data, components, maxSampleValue } = ifd;
          for (let i = 0; i < data.length; i += components) {
            const alphaValue = data[i + components - 1];
            for (let j = 0; j < components - 1; j++) {
              data[i + j] = Math.round(data[i + j] * maxSampleValue / alphaValue);
            }
          }
        }
      }
    };
    exports2.default = TIFFDecoder;
    function getDataArray(size, bitDepth, sampleFormat) {
      if (bitDepth === 8) {
        return new Uint8Array(size);
      } else if (bitDepth === 16) {
        return new Uint16Array(size);
      } else if (bitDepth === 32 && sampleFormat === 3) {
        return new Float32Array(size);
      } else {
        throw unsupported("bit depth / sample format", `${bitDepth} / ${sampleFormat}`);
      }
    }
    function fill8bit(dataTo, dataFrom, index, length) {
      for (let i = 0; i < length; i++) {
        dataTo[index++] = dataFrom.getUint8(i);
      }
      return index;
    }
    function fill16bit(dataTo, dataFrom, index, length, littleEndian) {
      for (let i = 0; i < length * 2; i += 2) {
        dataTo[index++] = dataFrom.getUint16(i, littleEndian);
      }
      return index;
    }
    function fillFloat32(dataTo, dataFrom, index, length, littleEndian) {
      for (let i = 0; i < length * 4; i += 4) {
        dataTo[index++] = dataFrom.getFloat32(i, littleEndian);
      }
      return index;
    }
    function unsupported(type, value) {
      return new Error(`Unsupported ${type}: ${value}`);
    }
  }
});

// node_modules/tiff/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/tiff/lib/index.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pageCount = exports2.isMultiPage = exports2.decode = void 0;
    var tiffDecoder_1 = __importDefault2(require_tiffDecoder2());
    function decodeTIFF(data, options) {
      const decoder = new tiffDecoder_1.default(data);
      return decoder.decode(options);
    }
    exports2.decode = decodeTIFF;
    function isMultiPage(data) {
      const decoder = new tiffDecoder_1.default(data);
      return decoder.isMultiPage;
    }
    exports2.isMultiPage = isMultiPage;
    function pageCount(data) {
      const decoder = new tiffDecoder_1.default(data);
      return decoder.pageCount;
    }
    exports2.pageCount = pageCount;
  }
});

// node_modules/image-js/lib/stack/transform/matchAndCrop.js
var require_matchAndCrop = __commonJS({
  "node_modules/image-js/lib/stack/transform/matchAndCrop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = matchAndCrop;
    var _Stack = _interopRequireDefault(require_Stack());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function matchAndCrop(options = {}) {
      let {
        algorithm = "matchToPrevious",
        ignoreBorder = [0, 0]
      } = options;
      this.checkProcessable("matchAndCrop", {
        bitDepth: [8, 16]
      });
      let matchToPrevious = algorithm === "matchToPrevious";
      let parent = this[0];
      let results = [];
      results[0] = {
        position: [0, 0],
        image: this[0]
      };
      let relativePosition = [0, 0];
      for (let i = 1; i < this.length; i++) {
        let position = parent.getBestMatch(this[i], {
          border: ignoreBorder
        });
        results[i] = {
          position: [position[0] + relativePosition[0], position[1] + relativePosition[1]],
          image: this[i]
        };
        if (matchToPrevious) {
          relativePosition[0] += position[0];
          relativePosition[1] += position[1];
          parent = this[i];
        }
      }
      let leftShift = 0;
      let rightShift = 0;
      let topShift = 0;
      let bottomShift = 0;
      for (let i = 0; i < results.length; i++) {
        let result = results[i];
        if (result.position[0] > leftShift) {
          leftShift = result.position[0];
        }
        if (result.position[0] < rightShift) {
          rightShift = result.position[0];
        }
        if (result.position[1] > topShift) {
          topShift = result.position[1];
        }
        if (result.position[1] < bottomShift) {
          bottomShift = result.position[1];
        }
      }
      rightShift = 0 - rightShift;
      bottomShift = 0 - bottomShift;
      for (let i = 0; i < results.length; i++) {
        let result = results[i];
        result.crop = result.image.crop({
          x: leftShift - result.position[0],
          y: topShift - result.position[1],
          width: parent.width - rightShift - leftShift,
          height: parent.height - bottomShift - topShift
        });
      }
      let newImages = [];
      for (let i = 0; i < results.length; i++) {
        newImages[i] = results[i].crop;
      }
      return new _Stack.default(newImages);
    }
  }
});

// node_modules/image-js/lib/stack/compute/min.js
var require_min = __commonJS({
  "node_modules/image-js/lib/stack/compute/min.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = min;
    function min() {
      this.checkProcessable("min", {
        bitDepth: [8, 16]
      });
      let min2 = this[0].min;
      for (let i = 1; i < this.length; i++) {
        for (let j = 0; j < min2.length; j++) {
          min2[j] = Math.min(min2[j], this[i].min[j]);
        }
      }
      return min2;
    }
  }
});

// node_modules/image-js/lib/stack/compute/max.js
var require_max = __commonJS({
  "node_modules/image-js/lib/stack/compute/max.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = max;
    function max() {
      this.checkProcessable("min", {
        bitDepth: [8, 16]
      });
      let max2 = this[0].max;
      for (let i = 1; i < this.length; i++) {
        for (let j = 0; j < max2.length; j++) {
          max2[j] = Math.max(max2[j], this[i].max[j]);
        }
      }
      return max2;
    }
  }
});

// node_modules/image-js/lib/util/histogram.js
var require_histogram = __commonJS({
  "node_modules/image-js/lib/util/histogram.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.mean = mean;
    exports2.median = median;
    function median(histogram) {
      let total = histogram.reduce((sum, x) => sum + x);
      if (total === 0) {
        throw new Error("unreachable");
      }
      let position = 0;
      let currentTotal = 0;
      let middle = total / 2;
      let previous;
      while (true) {
        if (histogram[position] > 0) {
          if (previous !== void 0) {
            return (previous + position) / 2;
          }
          currentTotal += histogram[position];
          if (currentTotal > middle) {
            return position;
          } else if (currentTotal === middle) {
            previous = position;
          }
        }
        position++;
      }
    }
    function mean(histogram) {
      let total = 0;
      let sum = 0;
      for (let i = 0; i < histogram.length; i++) {
        total += histogram[i];
        sum += histogram[i] * i;
      }
      if (total === 0) {
        return 0;
      }
      return sum / total;
    }
  }
});

// node_modules/image-js/lib/stack/compute/median.js
var require_median = __commonJS({
  "node_modules/image-js/lib/stack/compute/median.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = median;
    var _histogram = require_histogram();
    function median() {
      this.checkProcessable("median", {
        bitDepth: [8, 16]
      });
      let histograms = this.getHistograms({
        maxSlots: this[0].maxValue + 1
      });
      let result = new Array(histograms.length);
      for (let c = 0; c < histograms.length; c++) {
        let histogram = histograms[c];
        result[c] = (0, _histogram.median)(histogram);
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/stack/compute/histogram.js
var require_histogram2 = __commonJS({
  "node_modules/image-js/lib/stack/compute/histogram.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = histogram;
    function histogram(options) {
      this.checkProcessable("min", {
        bitDepth: [8, 16]
      });
      let histogram2 = this[0].getHistogram(options);
      for (let i = 1; i < this.length; i++) {
        let secondHistogram = this[i].getHistogram(options);
        for (let j = 0; j < histogram2.length; j++) {
          histogram2[j] += secondHistogram[j];
        }
      }
      return histogram2;
    }
  }
});

// node_modules/image-js/lib/stack/compute/histograms.js
var require_histograms = __commonJS({
  "node_modules/image-js/lib/stack/compute/histograms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = histograms;
    function histograms(options) {
      this.checkProcessable("min", {
        bitDepth: [8, 16]
      });
      let histograms2 = this[0].getHistograms(options);
      let histogramLength = histograms2[0].length;
      for (let i = 1; i < this.length; i++) {
        let secondHistograms = this[i].getHistograms(options);
        for (let c = 0; c < histograms2.length; c++) {
          for (let j = 0; j < histogramLength; j++) {
            histograms2[c][j] += secondHistograms[c][j];
          }
        }
      }
      return histograms2;
    }
  }
});

// node_modules/image-js/lib/stack/utility/averageImage.js
var require_averageImage = __commonJS({
  "node_modules/image-js/lib/stack/utility/averageImage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = averageImage;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function averageImage() {
      this.checkProcessable("averageImage", {
        bitDepth: [8, 16]
      });
      let data = new Uint32Array(this[0].data.length);
      for (let i = 0; i < this.length; i++) {
        let current = this[i];
        for (let j = 0; j < this[0].data.length; j++) {
          data[j] += current.data[j];
        }
      }
      let image = _Image.default.createFrom(this[0]);
      let newData = image.data;
      for (let i = 0; i < this[0].data.length; i++) {
        newData[i] = data[i] / this.length;
      }
      return image;
    }
  }
});

// node_modules/image-js/lib/stack/utility/maxImage.js
var require_maxImage = __commonJS({
  "node_modules/image-js/lib/stack/utility/maxImage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = maxImage;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function maxImage() {
      this.checkProcessable("max", {
        bitDepth: [8, 16]
      });
      let image = _Image.default.createFrom(this[0]);
      image.data.fill(0);
      for (const current of this) {
        for (let j = 0; j < image.data.length; j++) {
          image.data[j] = Math.max(current.data[j], image.data[j]);
        }
      }
      return image;
    }
  }
});

// node_modules/image-js/lib/stack/utility/minImage.js
var require_minImage = __commonJS({
  "node_modules/image-js/lib/stack/utility/minImage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minImage;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function minImage() {
      this.checkProcessable("max", {
        bitDepth: [8, 16]
      });
      let image = _Image.default.createFrom(this[0]);
      image.data.fill(image.maxValue);
      for (const current of this) {
        for (let j = 0; j < image.data.length; j++) {
          image.data[j] = Math.min(current.data[j], image.data[j]);
        }
      }
      return image;
    }
  }
});

// node_modules/image-js/lib/stack/extend.js
var require_extend2 = __commonJS({
  "node_modules/image-js/lib/stack/extend.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = extend;
    var _matchAndCrop = _interopRequireDefault(require_matchAndCrop());
    var _min = _interopRequireDefault(require_min());
    var _max = _interopRequireDefault(require_max());
    var _median = _interopRequireDefault(require_median());
    var _histogram = _interopRequireDefault(require_histogram2());
    var _histograms = _interopRequireDefault(require_histograms());
    var _averageImage = _interopRequireDefault(require_averageImage());
    var _maxImage = _interopRequireDefault(require_maxImage());
    var _minImage = _interopRequireDefault(require_minImage());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function extend(Stack) {
      Stack.extendMethod("matchAndCrop", _matchAndCrop.default);
      Stack.extendMethod("getMin", _min.default);
      Stack.extendMethod("getMax", _max.default);
      Stack.extendMethod("getMedian", _median.default);
      Stack.extendMethod("getHistogram", _histogram.default);
      Stack.extendMethod("getHistograms", _histograms.default);
      Stack.extendMethod("getAverage", _averageImage.default);
      Stack.extendMethod("getAverageImage", _averageImage.default);
      Stack.extendMethod("getMaxImage", _maxImage.default);
      Stack.extendMethod("getMinImage", _minImage.default);
    }
  }
});

// node_modules/image-js/lib/stack/Stack.js
var require_Stack = __commonJS({
  "node_modules/image-js/lib/stack/Stack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _hasOwn = _interopRequireDefault(require_has_own());
    var _Image = _interopRequireDefault(require_Image());
    var _extend = _interopRequireDefault(require_extend2());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var computedPropertyDescriptor = {
      configurable: true,
      enumerable: false,
      get: void 0
    };
    var Stack = class _Stack extends Array {
      constructor(images) {
        if (Array.isArray(images)) {
          super(images.length);
          for (let i = 0; i < images.length; i++) {
            this[i] = images[i];
          }
        } else if (typeof images === "number") {
          super(images);
        } else {
          super();
        }
        this.computed = null;
      }
      static load(urls) {
        return Promise.all(urls.map(_Image.default.load)).then((images) => new _Stack(images));
      }
      static extendMethod(name, method, options = {}) {
        let {
          inPlace = false,
          returnThis = true,
          partialArgs = []
        } = options;
        if (inPlace) {
          _Stack.prototype[name] = function(...args) {
            this.computed = null;
            let result = method.apply(this, [...partialArgs, ...args]);
            if (returnThis) {
              return this;
            }
            return result;
          };
        } else {
          _Stack.prototype[name] = function(...args) {
            return method.apply(this, [...partialArgs, ...args]);
          };
        }
        return _Stack;
      }
      static extendProperty(name, method, options = {}) {
        let {
          partialArgs = []
        } = options;
        computedPropertyDescriptor.get = function() {
          if (this.computed === null) {
            this.computed = {};
          } else if ((0, _hasOwn.default)(name, this.computed)) {
            return this.computed[name];
          }
          let result = method.apply(this, partialArgs);
          this.computed[name] = result;
          return result;
        };
        Object.defineProperty(_Stack.prototype, name, computedPropertyDescriptor);
        return _Stack;
      }
      /**
       * Check if a process can be applied on the stack
       * @param {string} processName
       * @param {object} [options]
       * @private
       */
      checkProcessable(processName, options = {}) {
        if (typeof processName !== "string") {
          throw new TypeError("checkProcessable requires as first parameter the processName (a string)");
        }
        if (this.size === 0) {
          throw new TypeError(`The process: ${processName} can not be applied on an empty stack`);
        }
        this[0].checkProcessable(processName, options);
        for (let i = 1; i < this.length; i++) {
          if ((options.sameSize === void 0 || options.sameSize) && this[0].width !== this[i].width) {
            throw new TypeError(`The process: ${processName} can not be applied if width is not identical in all images`);
          }
          if ((options.sameSize === void 0 || options.sameSize) && this[0].height !== this[i].height) {
            throw new TypeError(`The process: ${processName} can not be applied if height is not identical in all images`);
          }
          if ((options.sameAlpha === void 0 || options.sameAlpha) && this[0].alpha !== this[i].alpha) {
            throw new TypeError(`The process: ${processName} can not be applied if alpha is not identical in all images`);
          }
          if ((options.sameBitDepth === void 0 || options.sameBitDepth) && this[0].bitDepth !== this[i].bitDepth) {
            throw new TypeError(`The process: ${processName} can not be applied if bitDepth is not identical in all images`);
          }
          if ((options.sameColorModel === void 0 || options.sameColorModel) && this[0].colorModel !== this[i].colorModel) {
            throw new TypeError(`The process: ${processName} can not be applied if colorModel is not identical in all images`);
          }
          if ((options.sameNumberChannels === void 0 || options.sameNumberChannels) && this[0].channels !== this[i].channels) {
            throw new TypeError(`The process: ${processName} can not be applied if channels is not identical in all images`);
          }
        }
      }
    };
    exports2.default = Stack;
    if (!Array[Symbol.species]) {
      Stack.prototype.map = function(cb, thisArg) {
        if (typeof cb !== "function") {
          throw new TypeError(`${cb} is not a function`);
        }
        let newStack = new Stack(this.length);
        for (let i = 0; i < this.length; i++) {
          newStack[i] = cb.call(thisArg, this[i], i, this);
        }
        return newStack;
      };
    }
    (0, _extend.default)(Stack);
  }
});

// node_modules/image-js/lib/image/core/load.js
var require_load = __commonJS({
  "node_modules/image-js/lib/image/core/load.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = load;
    var _fastJpeg = require_src3();
    var _fastPng = require_lib3();
    var _imageType = _interopRequireDefault(require_image_type());
    var _jpegJs = require_jpeg_js();
    var _tiff = require_lib4();
    var _Stack = _interopRequireDefault(require_Stack());
    var _base = require_base642();
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    var _environment = require_environment();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isDataURL = /^data:[a-z]+\/(?:[a-z]+);base64,/;
    function load(image, options) {
      if (typeof image === "string") {
        return loadURL(image, options);
      } else if (image instanceof ArrayBuffer) {
        return Promise.resolve(loadBinary(new Uint8Array(image), void 0, options && options.ignorePalette));
      } else if (image.buffer) {
        return Promise.resolve(loadBinary(image, void 0, options && options.ignorePalette));
      } else {
        throw new Error('argument to "load" must be a string or buffer.');
      }
    }
    function loadBinary(image, base64Url, ignorePalette) {
      const type = (0, _imageType.default)(image);
      if (type) {
        switch (type.mime) {
          case "image/png":
            return loadPNG(image);
          case "image/jpeg":
            return loadJPEG(image);
          case "image/tiff":
            return loadTIFF(image, ignorePalette);
          default:
            return loadGeneric(getBase64(type.mime));
        }
      }
      return loadGeneric(getBase64("application/octet-stream"));
      function getBase64(type2) {
        if (base64Url) {
          return base64Url;
        } else {
          return (0, _base.toBase64URL)(image, type2);
        }
      }
    }
    function loadURL(url, options) {
      const dataURL = url.slice(0, 64).match(isDataURL);
      let binaryDataP;
      if (dataURL !== null) {
        binaryDataP = Promise.resolve((0, _base.decode)(url.slice(dataURL[0].length)));
      } else {
        binaryDataP = (0, _environment.fetchBinary)(url, options);
      }
      return binaryDataP.then((binaryData) => {
        const uint8 = new Uint8Array(binaryData);
        return loadBinary(uint8, dataURL ? url : void 0, options && options.ignorePalette);
      });
    }
    function loadPNG(data) {
      const png = (0, _fastPng.decode)(data);
      let channels = png.channels;
      let components;
      let alpha = 0;
      if (channels === 2 || channels === 4) {
        components = channels - 1;
        alpha = 1;
      } else {
        components = channels;
      }
      if (png.palette) {
        return loadPNGFromPalette(png);
      }
      return new _Image.default(png.width, png.height, png.data, {
        components,
        alpha,
        bitDepth: png.depth,
        meta: {
          text: png.text
        }
      });
    }
    function loadPNGFromPalette(png) {
      const pixels = png.width * png.height;
      const channels = png.palette[0].length;
      const data = new Uint8Array(pixels * channels);
      const pixelsPerByte = 8 / png.depth;
      const factor = png.depth < 8 ? pixelsPerByte : 1;
      const mask = parseInt("1".repeat(png.depth), 2);
      const hasAlpha = channels === 4;
      let dataIndex = 0;
      for (let i = 0; i < pixels; i++) {
        const index = Math.floor(i / factor);
        let value = png.data[index];
        if (png.depth < 8) {
          value = value >>> png.depth * (pixelsPerByte - 1 - i % pixelsPerByte) & mask;
        }
        const paletteValue = png.palette[value];
        data[dataIndex++] = paletteValue[0];
        data[dataIndex++] = paletteValue[1];
        data[dataIndex++] = paletteValue[2];
        if (hasAlpha) {
          data[dataIndex++] = paletteValue[3];
        }
      }
      return new _Image.default(png.width, png.height, data, {
        components: 3,
        alpha: hasAlpha,
        bitDepth: 8
      });
    }
    function loadJPEG(data) {
      const decodedExif = (0, _fastJpeg.decode)(data);
      let meta;
      if (decodedExif.exif) {
        meta = getMetadata(decodedExif.exif);
      }
      const jpeg = (0, _jpegJs.decode)(data, {
        useTArray: true,
        maxMemoryUsageInMB: 1024
      });
      let image = new _Image.default(jpeg.width, jpeg.height, jpeg.data, {
        meta
      });
      if (meta && meta.tiff.tags.Orientation) {
        const orientation = meta.tiff.tags.Orientation;
        if (orientation > 2) {
          image = image.rotate({
            3: 180,
            4: 180,
            5: 90,
            6: 90,
            7: 270,
            8: 270
          }[orientation]);
        }
        if ([2, 4, 5, 7].includes(orientation)) {
          image = image.flipX();
        }
      }
      return image;
    }
    function loadTIFF(data, ignorePalette) {
      let result = (0, _tiff.decode)(data);
      if (result.length === 1) {
        return getImageFromIFD(result[0], ignorePalette);
      } else {
        return new _Stack.default(result.map(function(image) {
          return getImageFromIFD(image, ignorePalette);
        }));
      }
    }
    function getMetadata(image) {
      const metadata = {
        tiff: {
          fields: image.fields,
          tags: image.map
        }
      };
      if (image.exif) {
        metadata.exif = image.exif;
      }
      if (image.gps) {
        metadata.gps = image.gps;
      }
      return metadata;
    }
    function getImageFromIFD(image, ignorePalette) {
      if (!ignorePalette && image.type === 3) {
        const data = new Uint16Array(3 * image.width * image.height);
        const palette = image.palette;
        let ptr = 0;
        for (let i = 0; i < image.data.length; i++) {
          const index = image.data[i];
          const color = palette[index];
          data[ptr++] = color[0];
          data[ptr++] = color[1];
          data[ptr++] = color[2];
        }
        return new _Image.default(image.width, image.height, data, {
          components: 3,
          alpha: image.alpha,
          colorModel: _model.RGB,
          bitDepth: 16,
          meta: getMetadata(image)
        });
      } else {
        return new _Image.default(image.width, image.height, image.data, {
          components: image.type === 2 ? 3 : 1,
          alpha: image.alpha,
          colorModel: image.type === 2 ? _model.RGB : _model.GREY,
          bitDepth: image.bitsPerSample.length ? image.bitsPerSample[0] : image.bitsPerSample,
          meta: getMetadata(image)
        });
      }
    }
    function loadGeneric(url, options) {
      options = options || {};
      return new Promise(function(resolve2, reject2) {
        let image = new _environment.DOMImage();
        image.onload = function() {
          let w = image.width;
          let h = image.height;
          let canvas = (0, _environment.createCanvas)(w, h);
          let ctx = canvas.getContext("2d");
          ctx.drawImage(image, 0, 0, w, h);
          let data = ctx.getImageData(0, 0, w, h).data;
          resolve2(new _Image.default(w, h, data, options));
        };
        image.onerror = function() {
          reject2(new Error(`Could not load ${url}`));
        };
        image.src = url;
      });
    }
  }
});

// node_modules/image-js/lib/image/core/valueMethods.js
var require_valueMethods = __commonJS({
  "node_modules/image-js/lib/image/core/valueMethods.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setValueMethods;
    var valueMethods = {
      /**
       * Get the value of specific pixel channel
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       * @param {number} channel
       * @return {number} - the value of this pixel channel
       */
      getValueXY(x, y, channel) {
        return this.data[(y * this.width + x) * this.channels + channel];
      },
      /**
       * Set the value of specific pixel channel
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       * @param {number} channel
       * @param {number} value - the new value of this pixel channel
       * @return {this}
       */
      setValueXY(x, y, channel, value) {
        this.data[(y * this.width + x) * this.channels + channel] = value;
        this.computed = null;
        return this;
      },
      /**
       * Get the value of specific pixel channel
       * @memberof Image
       * @instance
       * @param {number} index - 1D index of the pixel
       * @param {number} channel
       * @return {number} - the value of this pixel channel
       */
      getValue(index, channel) {
        return this.data[index * this.channels + channel];
      },
      /**
       * Set the value of specific pixel channel
       * @memberof Image
       * @instance
       * @param {number} index - 1D index of the pixel
       * @param {number} channel
       * @param {number} value - the new value of this pixel channel
       * @return {this}
       */
      setValue(index, channel, value) {
        this.data[index * this.channels + channel] = value;
        this.computed = null;
        return this;
      },
      /**
       * Get the value of an entire pixel
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       * @return {number[]} the value of this pixel
       */
      getPixelXY(x, y) {
        return this.getPixel(y * this.width + x);
      },
      /**
       * Set the value of an entire pixel
       * @memberof Image
       * @instance
       * @param {number} x - x coordinate (0 = left)
       * @param {number} y - y coordinate (0 = top)
       * @param {number[]} value - the new value of this pixel
       * @return {this}
       */
      setPixelXY(x, y, value) {
        return this.setPixel(y * this.width + x, value);
      },
      /**
       * Get the value of an entire pixel
       * @memberof Image
       * @instance
       * @param {number} index - 1D index of the pixel
       * @return {number[]} the value of this pixel
       */
      getPixel(index) {
        const value = new Array(this.channels);
        const target = index * this.channels;
        for (let i = 0; i < this.channels; i++) {
          value[i] = this.data[target + i];
        }
        return value;
      },
      /**
       * Set the value of an entire pixel
       * @memberof Image
       * @instance
       * @param {number} index - 1D index of the pixel
       * @param {number[]} value - the new value of this pixel
       * @return {this}
       */
      setPixel(index, value) {
        const target = index * this.channels;
        for (let i = 0; i < value.length; i++) {
          this.data[target + i] = value[i];
        }
        this.computed = null;
        return this;
      }
    };
    function setValueMethods(Image3) {
      for (const i in valueMethods) {
        Image3.prototype[i] = valueMethods[i];
      }
    }
  }
});

// node_modules/image-js/lib/image/internal/getImageParameters.js
var require_getImageParameters = __commonJS({
  "node_modules/image-js/lib/image/internal/getImageParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getImageParameters;
    function getImageParameters(image) {
      return {
        width: image.width,
        height: image.height,
        components: image.components,
        alpha: image.alpha,
        colorModel: image.colorModel,
        bitDepth: image.bitDepth
      };
    }
  }
});

// node_modules/image-js/lib/image/internal/getOutputImage.js
var require_getOutputImage = __commonJS({
  "node_modules/image-js/lib/image/internal/getOutputImage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getOutputImage = getOutputImage;
    exports2.getOutputImageOrInPlace = getOutputImageOrInPlace;
    var _Image = _interopRequireDefault(require_Image());
    var _getImageParameters = _interopRequireDefault(require_getImageParameters());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function getOutputImage(thisImage, options, newParameters, internalOptions = {}) {
      const {
        out
      } = options;
      if (out === void 0) {
        if (internalOptions.copy) {
          return thisImage.clone();
        } else {
          return _Image.default.createFrom(thisImage, newParameters);
        }
      } else {
        if (!_Image.default.isImage(out)) {
          throw new TypeError("out must be an Image object");
        }
        const requirements = Object.assign((0, _getImageParameters.default)(thisImage), newParameters);
        for (const property in requirements) {
          if (out[property] !== requirements[property]) {
            throw new RangeError(`cannot use out. Its ${property} must be "${requirements[property]}" (found "${out[property]}")`);
          }
        }
        return out;
      }
    }
    function getOutputImageOrInPlace(thisImage, options, internalOptions) {
      if (options.inPlace !== void 0 && typeof options.inPlace !== "boolean") {
        throw new TypeError("inPlace option must be a boolean");
      }
      if (options.inPlace) {
        if (options.out !== void 0) {
          throw new TypeError("out option must not be set if inPlace option is true");
        }
        return thisImage;
      }
      return getOutputImage(thisImage, options, null, internalOptions);
    }
  }
});

// node_modules/image-js/lib/image/filter/abs.js
var require_abs = __commonJS({
  "node_modules/image-js/lib/image/filter/abs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = abs;
    var _getOutputImage = require_getOutputImage();
    function abs(options = {}) {
      this.checkProcessable("abs", {
        bitDepth: [32]
      });
      const out = (0, _getOutputImage.getOutputImageOrInPlace)(this, options);
      absolute(this, out);
      return out;
    }
    function absolute(image, out) {
      for (let i = 0; i < image.data.length; i++) {
        out.data[i] = Math.abs(image.data[i]);
      }
    }
  }
});

// node_modules/image-js/lib/image/internal/copyAlphaChannel.js
var require_copyAlphaChannel = __commonJS({
  "node_modules/image-js/lib/image/internal/copyAlphaChannel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = copyAlphaChannel;
    function copyAlphaChannel(from, to) {
      if (from.alpha === 1 && to.alpha === 1) {
        for (let i = 0; i < from.size; i++) {
          to.data[i * to.channels + to.components] = from.data[i * from.channels + from.components];
        }
      }
    }
  }
});

// node_modules/image-js/lib/image/filter/invert.js
var require_invert = __commonJS({
  "node_modules/image-js/lib/image/filter/invert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = invert;
    var _copyAlphaChannel = _interopRequireDefault(require_copyAlphaChannel());
    var _getOutputImage = require_getOutputImage();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function invert(options = {}) {
      this.checkProcessable("invert", {
        bitDepth: [1, 8, 16]
      });
      const out = (0, _getOutputImage.getOutputImageOrInPlace)(this, options);
      if (this.bitDepth === 1) {
        invertBinary(this, out);
      } else {
        invertColor(this, out);
        if (this !== out) {
          (0, _copyAlphaChannel.default)(this, out);
        }
      }
      return out;
    }
    function invertBinary(image, out) {
      for (let i = 0; i < image.data.length; i++) {
        out.data[i] = ~image.data[i];
      }
    }
    function invertColor(image, out) {
      for (let pixel = 0; pixel < image.data.length; pixel += image.channels) {
        for (let c = 0; c < image.components; c++) {
          out.data[pixel + c] = image.maxValue - image.data[pixel + c];
        }
      }
    }
  }
});

// node_modules/image-js/lib/image/filter/flipX.js
var require_flipX = __commonJS({
  "node_modules/image-js/lib/image/filter/flipX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = flipX;
    function flipX() {
      this.checkProcessable("flipX", {
        bitDepth: [8, 16]
      });
      for (let i = 0; i < this.height; i++) {
        let offsetY = i * this.width * this.channels;
        for (let j = 0; j < Math.floor(this.width / 2); j++) {
          let posCurrent = j * this.channels + offsetY;
          let posOpposite = (this.width - j - 1) * this.channels + offsetY;
          for (let k = 0; k < this.channels; k++) {
            let tmp = this.data[posCurrent + k];
            this.data[posCurrent + k] = this.data[posOpposite + k];
            this.data[posOpposite + k] = tmp;
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/filter/flipY.js
var require_flipY = __commonJS({
  "node_modules/image-js/lib/image/filter/flipY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = flipY;
    function flipY() {
      this.checkProcessable("flipY", {
        bitDepth: [8, 16]
      });
      for (let i = 0; i < Math.floor(this.height / 2); i++) {
        for (let j = 0; j < this.width; j++) {
          let posCurrent = j * this.channels + i * this.width * this.channels;
          let posOpposite = j * this.channels + (this.height - 1 - i) * this.channels * this.width;
          for (let k = 0; k < this.channels; k++) {
            let tmp = this.data[posCurrent + k];
            this.data[posCurrent + k] = this.data[posOpposite + k];
            this.data[posOpposite + k] = tmp;
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/filter/blurFilter.js
var require_blurFilter = __commonJS({
  "node_modules/image-js/lib/image/filter/blurFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = blurFilter;
    function blurFilter(options = {}) {
      const {
        radius = 1
      } = options;
      if (radius < 1) {
        throw new Error("radius must be greater than 1");
      }
      const n = 2 * radius + 1;
      const kernel = new Array(n);
      for (let i = 0; i < n; i++) {
        kernel[i] = new Array(n);
        for (let j = 0; j < n; j++) {
          kernel[i][j] = 1 / (n * n);
        }
      }
      return this.convolution(kernel);
    }
  }
});

// node_modules/median-quickselect/lib/median-quickselect.min.js
var require_median_quickselect_min = __commonJS({
  "node_modules/median-quickselect/lib/median-quickselect.min.js"(exports2, module2) {
    (function() {
      function a(d) {
        for (var e = 0, f = d.length - 1, g = void 0, h = void 0, i = void 0, j = c(e, f); true; ) {
          if (f <= e)
            return d[j];
          if (f == e + 1)
            return d[e] > d[f] && b(d, e, f), d[j];
          for (g = c(e, f), d[g] > d[f] && b(d, g, f), d[e] > d[f] && b(d, e, f), d[g] > d[e] && b(d, g, e), b(d, g, e + 1), h = e + 1, i = f; true; ) {
            do
              h++;
            while (d[e] > d[h]);
            do
              i--;
            while (d[i] > d[e]);
            if (i < h)
              break;
            b(d, h, i);
          }
          b(d, e, i), i <= j && (e = h), i >= j && (f = i - 1);
        }
      }
      var b = function b2(d, e, f) {
        var _ref;
        return _ref = [d[f], d[e]], d[e] = _ref[0], d[f] = _ref[1], _ref;
      }, c = function c2(d, e) {
        return ~~((d + e) / 2);
      };
      "undefined" != typeof module2 && module2.exports ? module2.exports = a : window.median = a;
    })();
  }
});

// node_modules/image-js/lib/util/channel.js
var require_channel = __commonJS({
  "node_modules/image-js/lib/util/channel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.validateArrayOfChannels = validateArrayOfChannels;
    exports2.validateChannel = validateChannel;
    var Model = _interopRequireWildcard(require_model());
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    function validateArrayOfChannels(image, options = {}) {
      let {
        channels,
        allowAlpha,
        // are we allowing the selection of an alpha channel ?
        defaultAlpha
        // if no channels are selected should we take the alpha channel ?
      } = options;
      if (typeof allowAlpha !== "boolean") {
        allowAlpha = true;
      }
      if (typeof channels === "undefined") {
        return allChannels(image, defaultAlpha);
      } else {
        return validateChannels(image, channels, allowAlpha);
      }
    }
    function allChannels(image, defaultAlpha) {
      let length = defaultAlpha ? image.channels : image.components;
      let array = new Array(length);
      for (let i = 0; i < length; i++) {
        array[i] = i;
      }
      return array;
    }
    function validateChannels(image, channels, allowAlpha) {
      if (!Array.isArray(channels)) {
        channels = [channels];
      }
      for (let c = 0; c < channels.length; c++) {
        channels[c] = validateChannel(image, channels[c], allowAlpha);
      }
      return channels;
    }
    function validateChannel(image, channel, allowAlpha = true) {
      if (channel === void 0) {
        throw new RangeError(`validateChannel : the channel has to be >=0 and <${image.channels}`);
      }
      if (typeof channel === "string") {
        switch (image.colorModel) {
          case Model.GREY:
            break;
          case Model.RGB:
            if ("rgb".includes(channel)) {
              switch (channel) {
                case "r":
                  channel = 0;
                  break;
                case "g":
                  channel = 1;
                  break;
                case "b":
                  channel = 2;
                  break;
              }
            }
            break;
          case Model.HSL:
            if ("hsl".includes(channel)) {
              switch (channel) {
                case "h":
                  channel = 0;
                  break;
                case "s":
                  channel = 1;
                  break;
                case "l":
                  channel = 2;
                  break;
              }
            }
            break;
          case Model.HSV:
            if ("hsv".includes(channel)) {
              switch (channel) {
                case "h":
                  channel = 0;
                  break;
                case "s":
                  channel = 1;
                  break;
                case "v":
                  channel = 2;
                  break;
              }
            }
            break;
          case Model.CMYK:
            if ("cmyk".includes(channel)) {
              switch (channel) {
                case "c":
                  channel = 0;
                  break;
                case "m":
                  channel = 1;
                  break;
                case "y":
                  channel = 2;
                  break;
                case "k":
                  channel = 3;
                  break;
              }
            }
            break;
          default:
            throw new Error(`Unexpected color model: ${image.colorModel}`);
        }
        if (channel === "a") {
          if (!image.alpha) {
            throw new Error("validateChannel : the image does not contain alpha channel");
          }
          channel = image.components;
        }
        if (typeof channel === "string") {
          throw new Error(`validateChannel : undefined channel: ${channel}`);
        }
      }
      if (channel >= image.channels) {
        throw new RangeError(`validateChannel : the channel has to be >=0 and <${image.channels}`);
      }
      if (!allowAlpha && channel >= image.components) {
        throw new RangeError("validateChannel : alpha channel may not be selected");
      }
      return channel;
    }
  }
});

// node_modules/image-js/lib/image/filter/medianFilter.js
var require_medianFilter = __commonJS({
  "node_modules/image-js/lib/image/filter/medianFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = medianFilter;
    var _medianQuickselect = _interopRequireDefault(require_median_quickselect_min());
    var _channel = require_channel();
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function medianFilter(options = {}) {
      let {
        radius = 1,
        border = "copy",
        channels
      } = options;
      this.checkProcessable("medianFilter", {
        bitDepth: [8, 16]
      });
      if (radius < 1) {
        throw new Error("radius must be greater than 0");
      }
      channels = (0, _channel.validateArrayOfChannels)(this, channels, true);
      let kWidth = radius;
      let kHeight = radius;
      let newImage = _Image.default.createFrom(this);
      let size = (kWidth * 2 + 1) * (kHeight * 2 + 1);
      let kernel = new Array(size);
      for (let channel = 0; channel < channels.length; channel++) {
        let c = channels[channel];
        for (let y = kHeight; y < this.height - kHeight; y++) {
          for (let x = kWidth; x < this.width - kWidth; x++) {
            let n = 0;
            for (let j = -kHeight; j <= kHeight; j++) {
              for (let i = -kWidth; i <= kWidth; i++) {
                let index2 = ((y + j) * this.width + x + i) * this.channels + c;
                kernel[n++] = this.data[index2];
              }
            }
            let index = (y * this.width + x) * this.channels + c;
            newImage.data[index] = (0, _medianQuickselect.default)(kernel);
          }
        }
      }
      if (this.alpha && !channels.includes(this.channels)) {
        for (let i = this.components; i < this.data.length; i = i + this.channels) {
          newImage.data[i] = this.data[i];
        }
      }
      newImage.setBorder({
        size: [kWidth, kHeight],
        algorithm: border
      });
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/filter/gaussianFilter.js
var require_gaussianFilter = __commonJS({
  "node_modules/image-js/lib/image/filter/gaussianFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = gaussianFilter;
    function gaussianFilter(options = {}) {
      let {
        radius = 1,
        sigma,
        channels,
        border = "copy"
      } = options;
      this.checkProcessable("gaussian", {
        bitDepth: [8, 16]
      });
      const kernel = getKernel(radius, sigma);
      return this.convolution([kernel, kernel], {
        border,
        channels,
        algorithm: "separable"
      });
    }
    function getKernel(radius, sigma) {
      const n = radius * 2 + 1;
      const kernel = new Array(n);
      const sigmaX = sigma ? sigma : ((n - 1) * 0.5 - 1) * 0.3 + 0.8;
      const scale2X = -0.5 / (sigmaX * sigmaX);
      let sum = 0;
      for (let i = 0; i < n; i++) {
        const x = i - radius;
        const t = Math.exp(scale2X * x * x);
        kernel[i] = t;
        sum += t;
      }
      for (let i = 0; i < n; i++) {
        kernel[i] /= sum;
      }
      return kernel;
    }
  }
});

// node_modules/image-js/lib/util/kernels.js
var require_kernels = __commonJS({
  "node_modules/image-js/lib/util/kernels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.SOBEL_Y = exports2.SOBEL_X = exports2.SECOND_DERIVATIVE_INV = exports2.SECOND_DERIVATIVE = exports2.SCHARR_Y = exports2.SCHARR_X = exports2.DISCRETE_LAPLACE_8 = exports2.DISCRETE_LAPLACE_4 = void 0;
    var DISCRETE_LAPLACE_4 = exports2.DISCRETE_LAPLACE_4 = [[0, 1, 0], [1, -4, 1], [0, 1, 0]];
    var DISCRETE_LAPLACE_8 = exports2.DISCRETE_LAPLACE_8 = [[1, 1, 1], [1, -8, 1], [1, 1, 1]];
    var SOBEL_X = exports2.SOBEL_X = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]];
    var SOBEL_Y = exports2.SOBEL_Y = [[-1, -2, -1], [0, 0, 0], [1, 2, 1]];
    var SCHARR_X = exports2.SCHARR_X = [[3, 0, -3], [10, 0, -10], [3, 0, -3]];
    var SCHARR_Y = exports2.SCHARR_Y = [[3, 10, 3], [0, 0, 0], [-3, -10, -3]];
    var SECOND_DERIVATIVE = exports2.SECOND_DERIVATIVE = [[-1, -2, 0, 2, 1], [-2, -4, 0, 4, 2], [0, 0, 0, 0, 0], [1, 2, 0, -2, -1], [2, 4, 0, -4, -2]];
    var SECOND_DERIVATIVE_INV = exports2.SECOND_DERIVATIVE_INV = [[1, 2, 0, -2, -1], [2, 4, 0, -4, -2], [0, 0, 0, 0, 0], [-2, -4, 0, 4, 2], [-1, -2, 0, 2, 1]];
  }
});

// node_modules/ml-fft/src/fftlib.js
var require_fftlib = __commonJS({
  "node_modules/ml-fft/src/fftlib.js"(exports2) {
    var FFT = function() {
      var FFT2;
      if (typeof exports2 !== "undefined") {
        FFT2 = exports2;
      } else {
        FFT2 = {};
      }
      var version = {
        release: "0.3.0",
        date: "2013-03"
      };
      FFT2.toString = function() {
        return "version " + version.release + ", released " + version.date;
      };
      var _n = 0, _bitrev = null, _cstb = null;
      var core = {
        init: function(n) {
          if (n !== 0 && (n & n - 1) === 0) {
            _n = n;
            core._initArray();
            core._makeBitReversalTable();
            core._makeCosSinTable();
          } else {
            throw new Error("init: radix-2 required");
          }
        },
        // 1D-FFT
        fft1d: function(re, im) {
          core.fft(re, im, 1);
        },
        // 1D-IFFT
        ifft1d: function(re, im) {
          var n = 1 / _n;
          core.fft(re, im, -1);
          for (var i2 = 0; i2 < _n; i2++) {
            re[i2] *= n;
            im[i2] *= n;
          }
        },
        // 1D-IFFT
        bt1d: function(re, im) {
          core.fft(re, im, -1);
        },
        // 2D-FFT Not very useful if the number of rows have to be equal to cols
        fft2d: function(re, im) {
          var tre = [], tim = [], i2 = 0;
          for (var y = 0; y < _n; y++) {
            i2 = y * _n;
            for (var x1 = 0; x1 < _n; x1++) {
              tre[x1] = re[x1 + i2];
              tim[x1] = im[x1 + i2];
            }
            core.fft1d(tre, tim);
            for (var x2 = 0; x2 < _n; x2++) {
              re[x2 + i2] = tre[x2];
              im[x2 + i2] = tim[x2];
            }
          }
          for (var x = 0; x < _n; x++) {
            for (var y1 = 0; y1 < _n; y1++) {
              i2 = x + y1 * _n;
              tre[y1] = re[i2];
              tim[y1] = im[i2];
            }
            core.fft1d(tre, tim);
            for (var y2 = 0; y2 < _n; y2++) {
              i2 = x + y2 * _n;
              re[i2] = tre[y2];
              im[i2] = tim[y2];
            }
          }
        },
        // 2D-IFFT
        ifft2d: function(re, im) {
          var tre = [], tim = [], i2 = 0;
          for (var y = 0; y < _n; y++) {
            i2 = y * _n;
            for (var x1 = 0; x1 < _n; x1++) {
              tre[x1] = re[x1 + i2];
              tim[x1] = im[x1 + i2];
            }
            core.ifft1d(tre, tim);
            for (var x2 = 0; x2 < _n; x2++) {
              re[x2 + i2] = tre[x2];
              im[x2 + i2] = tim[x2];
            }
          }
          for (var x = 0; x < _n; x++) {
            for (var y1 = 0; y1 < _n; y1++) {
              i2 = x + y1 * _n;
              tre[y1] = re[i2];
              tim[y1] = im[i2];
            }
            core.ifft1d(tre, tim);
            for (var y2 = 0; y2 < _n; y2++) {
              i2 = x + y2 * _n;
              re[i2] = tre[y2];
              im[i2] = tim[y2];
            }
          }
        },
        // core operation of FFT
        fft: function(re, im, inv) {
          var d, h, ik, m, tmp, wr, wi, xr, xi, n4 = _n >> 2;
          for (var l = 0; l < _n; l++) {
            m = _bitrev[l];
            if (l < m) {
              tmp = re[l];
              re[l] = re[m];
              re[m] = tmp;
              tmp = im[l];
              im[l] = im[m];
              im[m] = tmp;
            }
          }
          for (var k = 1; k < _n; k <<= 1) {
            h = 0;
            d = _n / (k << 1);
            for (var j = 0; j < k; j++) {
              wr = _cstb[h + n4];
              wi = inv * _cstb[h];
              for (var i2 = j; i2 < _n; i2 += k << 1) {
                ik = i2 + k;
                xr = wr * re[ik] + wi * im[ik];
                xi = wr * im[ik] - wi * re[ik];
                re[ik] = re[i2] - xr;
                re[i2] += xr;
                im[ik] = im[i2] - xi;
                im[i2] += xi;
              }
              h += d;
            }
          }
        },
        // initialize the array (supports TypedArray)
        _initArray: function() {
          if (typeof Uint32Array !== "undefined") {
            _bitrev = new Uint32Array(_n);
          } else {
            _bitrev = [];
          }
          if (typeof Float64Array !== "undefined") {
            _cstb = new Float64Array(_n * 1.25);
          } else {
            _cstb = [];
          }
        },
        // zero padding
        _paddingZero: function() {
        },
        // makes bit reversal table
        _makeBitReversalTable: function() {
          var i2 = 0, j = 0, k = 0;
          _bitrev[0] = 0;
          while (++i2 < _n) {
            k = _n >> 1;
            while (k <= j) {
              j -= k;
              k >>= 1;
            }
            j += k;
            _bitrev[i2] = j;
          }
        },
        // makes trigonometiric function table
        _makeCosSinTable: function() {
          var n2 = _n >> 1, n4 = _n >> 2, n8 = _n >> 3, n2p4 = n2 + n4, t = Math.sin(Math.PI / _n), dc = 2 * t * t, ds = Math.sqrt(dc * (2 - dc)), c = _cstb[n4] = 1, s = _cstb[0] = 0;
          t = 2 * dc;
          for (var i2 = 1; i2 < n8; i2++) {
            c -= dc;
            dc += t * c;
            s += ds;
            ds -= t * s;
            _cstb[i2] = s;
            _cstb[n4 - i2] = c;
          }
          if (n8 !== 0) {
            _cstb[n8] = Math.sqrt(0.5);
          }
          for (var j = 0; j < n4; j++) {
            _cstb[n2 - j] = _cstb[j];
          }
          for (var k = 0; k < n2p4; k++) {
            _cstb[k + n2] = -_cstb[k];
          }
        }
      };
      var apis = ["init", "fft1d", "ifft1d", "fft2d", "ifft2d"];
      for (var i = 0; i < apis.length; i++) {
        FFT2[apis[i]] = core[apis[i]];
      }
      FFT2.bt = core.bt1d;
      FFT2.fft = core.fft1d;
      FFT2.ifft = core.ifft1d;
      return FFT2;
    }.call(exports2);
  }
});

// node_modules/ml-fft/src/FFTUtils.js
var require_FFTUtils = __commonJS({
  "node_modules/ml-fft/src/FFTUtils.js"(exports2, module2) {
    "use strict";
    var FFT = require_fftlib();
    var FFTUtils = {
      DEBUG: false,
      /**
       * Calculates the inverse of a 2D Fourier transform
       *
       * @param ft
       * @param ftRows
       * @param ftCols
       * @return
       */
      ifft2DArray: function(ft, ftRows, ftCols) {
        var tempTransform = new Array(ftRows * ftCols);
        var nRows = ftRows / 2;
        var nCols = (ftCols - 1) * 2;
        FFT.init(nRows);
        var tmpCols = { re: new Array(nRows), im: new Array(nRows) };
        for (var iCol = 0; iCol < ftCols; iCol++) {
          for (var iRow = nRows - 1; iRow >= 0; iRow--) {
            tmpCols.re[iRow] = ft[iRow * 2 * ftCols + iCol];
            tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];
          }
          FFT.bt(tmpCols.re, tmpCols.im);
          for (var iRow = nRows - 1; iRow >= 0; iRow--) {
            tempTransform[iRow * 2 * ftCols + iCol] = tmpCols.re[iRow];
            tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];
          }
        }
        var finalTransform = new Array(nRows * nCols);
        FFT.init(nCols);
        var tmpRows = { re: new Array(nCols), im: new Array(nCols) };
        var scale = nCols * nRows;
        for (var iRow = 0; iRow < ftRows; iRow += 2) {
          tmpRows.re[0] = tempTransform[iRow * ftCols];
          tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];
          for (var iCol = 1; iCol < ftCols; iCol++) {
            tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];
            tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];
            tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];
            tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];
          }
          FFT.bt(tmpRows.re, tmpRows.im);
          var indexB = iRow / 2 * nCols;
          for (var iCol = nCols - 1; iCol >= 0; iCol--) {
            finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;
          }
        }
        return finalTransform;
      },
      /**
       * Calculates the fourier transform of a matrix of size (nRows,nCols) It is
       * assumed that both nRows and nCols are a power of two
       *
       * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the
       * even rows contain the real part and the odd rows the imaginary part of the
       * transform
       * @param data
       * @param nRows
       * @param nCols
       * @return
       */
      fft2DArray: function(data, nRows, nCols, opt) {
        var options = Object.assign({}, { inplace: true });
        var ftCols = nCols / 2 + 1;
        var ftRows = nRows * 2;
        var tempTransform = new Array(ftRows * ftCols);
        FFT.init(nCols);
        var tmpRows = { re: new Array(nCols), im: new Array(nCols) };
        var row1 = { re: new Array(nCols), im: new Array(nCols) };
        var row2 = { re: new Array(nCols), im: new Array(nCols) };
        var index, iRow0, iRow1, iRow2, iRow3;
        for (var iRow = 0; iRow < nRows / 2; iRow++) {
          index = iRow * 2 * nCols;
          tmpRows.re = data.slice(index, index + nCols);
          index = (iRow * 2 + 1) * nCols;
          tmpRows.im = data.slice(index, index + nCols);
          FFT.fft1d(tmpRows.re, tmpRows.im);
          this.reconstructTwoRealFFT(tmpRows, row1, row2);
          iRow0 = iRow * 4 * ftCols;
          iRow1 = (iRow * 4 + 1) * ftCols;
          iRow2 = (iRow * 4 + 2) * ftCols;
          iRow3 = (iRow * 4 + 3) * ftCols;
          for (var k = ftCols - 1; k >= 0; k--) {
            tempTransform[iRow0 + k] = row1.re[k];
            tempTransform[iRow1 + k] = row1.im[k];
            tempTransform[iRow2 + k] = row2.re[k];
            tempTransform[iRow3 + k] = row2.im[k];
          }
        }
        row1 = null;
        row2 = null;
        var finalTransform = new Array(ftRows * ftCols);
        FFT.init(nRows);
        var tmpCols = { re: new Array(nRows), im: new Array(nRows) };
        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {
          for (var iRow = nRows - 1; iRow >= 0; iRow--) {
            tmpCols.re[iRow] = tempTransform[iRow * 2 * ftCols + iCol];
            tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];
            if (isNaN(tmpCols.re[iRow])) {
              tmpCols.re[iRow] = 0;
            }
            if (isNaN(tmpCols.im[iRow])) {
              tmpCols.im[iRow] = 0;
            }
          }
          FFT.fft1d(tmpCols.re, tmpCols.im);
          for (var iRow = nRows - 1; iRow >= 0; iRow--) {
            finalTransform[iRow * 2 * ftCols + iCol] = tmpCols.re[iRow];
            finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];
          }
        }
        return finalTransform;
      },
      /**
       *
       * @param fourierTransform
       * @param realTransform1
       * @param realTransform2
       *
       * Reconstructs the individual Fourier transforms of two simultaneously
       * transformed series. Based on the Symmetry relationships (the asterisk
       * denotes the complex conjugate)
       *
       * F_{N-n} = F_n^{*} for a purely real f transformed to F
       *
       * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G
       *
       */
      reconstructTwoRealFFT: function(fourierTransform, realTransform1, realTransform2) {
        var length = fourierTransform.re.length;
        realTransform1.re[0] = fourierTransform.re[0];
        realTransform1.im[0] = 0;
        realTransform2.re[0] = fourierTransform.im[0];
        realTransform2.im[0] = 0;
        var rm, rp, im, ip, j;
        for (var i = length / 2; i > 0; i--) {
          j = length - i;
          rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);
          rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);
          im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);
          ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);
          realTransform1.re[i] = rp;
          realTransform1.im[i] = im;
          realTransform1.re[j] = rp;
          realTransform1.im[j] = -im;
          realTransform2.re[i] = ip;
          realTransform2.im[i] = -rm;
          realTransform2.re[j] = ip;
          realTransform2.im[j] = rm;
        }
      },
      /**
       * In place version of convolute 2D
       *
       * @param ftSignal
       * @param ftFilter
       * @param ftRows
       * @param ftCols
       * @return
       */
      convolute2DI: function(ftSignal, ftFilter, ftRows, ftCols) {
        var re, im;
        for (var iRow = 0; iRow < ftRows / 2; iRow++) {
          for (var iCol = 0; iCol < ftCols; iCol++) {
            re = ftSignal[iRow * 2 * ftCols + iCol] * ftFilter[iRow * 2 * ftCols + iCol] - ftSignal[(iRow * 2 + 1) * ftCols + iCol] * ftFilter[(iRow * 2 + 1) * ftCols + iCol];
            im = ftSignal[iRow * 2 * ftCols + iCol] * ftFilter[(iRow * 2 + 1) * ftCols + iCol] + ftSignal[(iRow * 2 + 1) * ftCols + iCol] * ftFilter[iRow * 2 * ftCols + iCol];
            ftSignal[iRow * 2 * ftCols + iCol] = re;
            ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;
          }
        }
      },
      /**
       *
       * @param data
       * @param kernel
       * @param nRows
       * @param nCols
       * @returns {*}
       */
      convolute: function(data, kernel, nRows, nCols, opt) {
        var ftSpectrum = new Array(nCols * nRows);
        for (var i = 0; i < nRows * nCols; i++) {
          ftSpectrum[i] = data[i];
        }
        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);
        var dimR = kernel.length;
        var dimC = kernel[0].length;
        var ftFilterData = new Array(nCols * nRows);
        for (var i = 0; i < nCols * nRows; i++) {
          ftFilterData[i] = 0;
        }
        var iRow, iCol;
        var shiftR = Math.floor((dimR - 1) / 2);
        var shiftC = Math.floor((dimC - 1) / 2);
        for (var ir = 0; ir < dimR; ir++) {
          iRow = (ir - shiftR + nRows) % nRows;
          for (var ic = 0; ic < dimC; ic++) {
            iCol = (ic - shiftC + nCols) % nCols;
            ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];
          }
        }
        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);
        var ftRows = nRows * 2;
        var ftCols = nCols / 2 + 1;
        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);
        return this.ifft2DArray(ftSpectrum, ftRows, ftCols);
      },
      toRadix2: function(data, nRows, nCols) {
        var i, j, irow, icol;
        var cols = nCols, rows = nRows, prows = 0, pcols = 0;
        if (!(nCols !== 0 && (nCols & nCols - 1) === 0)) {
          cols = 0;
          while (nCols >> ++cols != 0)
            ;
          cols = 1 << cols;
          pcols = cols - nCols;
        }
        if (!(nRows !== 0 && (nRows & nRows - 1) === 0)) {
          rows = 0;
          while (nRows >> ++rows != 0)
            ;
          rows = 1 << rows;
          prows = (rows - nRows) * cols;
        }
        if (rows == nRows && cols == nCols)
          return { data, rows: nRows, cols: nCols };
        var output = new Array(rows * cols);
        var shiftR = Math.floor((rows - nRows) / 2) - nRows;
        var shiftC = Math.floor((cols - nCols) / 2) - nCols;
        for (i = 0; i < rows; i++) {
          irow = i * cols;
          icol = (i - shiftR) % nRows * nCols;
          for (j = 0; j < cols; j++) {
            output[irow + j] = data[icol + (j - shiftC) % nCols];
          }
        }
        return { data: output, rows, cols };
      },
      /**
       * Crop the given matrix to fit the corresponding number of rows and columns
       */
      crop: function(data, rows, cols, nRows, nCols, opt) {
        if (rows == nRows && cols == nCols)
          return data;
        var options = Object.assign({}, opt);
        var output = new Array(nCols * nRows);
        var shiftR = Math.floor((rows - nRows) / 2);
        var shiftC = Math.floor((cols - nCols) / 2);
        var destinyRow, sourceRow, i, j;
        for (i = 0; i < nRows; i++) {
          destinyRow = i * nCols;
          sourceRow = (i + shiftR) * cols;
          for (j = 0; j < nCols; j++) {
            output[destinyRow + j] = data[sourceRow + (j + shiftC)];
          }
        }
        return output;
      }
    };
    module2.exports = FFTUtils;
  }
});

// node_modules/ml-fft/src/index.js
var require_src4 = __commonJS({
  "node_modules/ml-fft/src/index.js"(exports2) {
    "use strict";
    exports2.FFTUtils = require_FFTUtils();
    exports2.FFT = require_fftlib();
  }
});

// node_modules/ml-matrix-convolution/src/index.js
var require_src5 = __commonJS({
  "node_modules/ml-matrix-convolution/src/index.js"(exports2, module2) {
    "use strict;";
    var FFTUtils = require_src4().FFTUtils;
    function convolutionFFT(input, kernel, opt) {
      var tmp = matrix2Array(input);
      var inputData = tmp.data;
      var options = Object.assign({ normalize: false, divisor: 1, rows: tmp.rows, cols: tmp.cols }, opt);
      var nRows, nCols;
      if (options.rows && options.cols) {
        nRows = options.rows;
        nCols = options.cols;
      } else {
        throw new Error("Invalid number of rows or columns " + nRows + " " + nCols);
      }
      var divisor = options.divisor;
      var i, j;
      var kHeight = kernel.length;
      var kWidth = kernel[0].length;
      if (options.normalize) {
        divisor = 0;
        for (i = 0; i < kHeight; i++)
          for (j = 0; j < kWidth; j++)
            divisor += kernel[i][j];
      }
      if (divisor === 0) {
        throw new RangeError("convolution: The divisor is equal to zero");
      }
      var radix2Sized = FFTUtils.toRadix2(inputData, nRows, nCols);
      var conv = FFTUtils.convolute(radix2Sized.data, kernel, radix2Sized.rows, radix2Sized.cols);
      conv = FFTUtils.crop(conv, radix2Sized.rows, radix2Sized.cols, nRows, nCols);
      if (divisor != 0 && divisor != 1) {
        for (i = 0; i < conv.length; i++) {
          conv[i] /= divisor;
        }
      }
      return conv;
    }
    function convolutionDirect(input, kernel, opt) {
      var tmp = matrix2Array(input);
      var inputData = tmp.data;
      var options = Object.assign({ normalize: false, divisor: 1, rows: tmp.rows, cols: tmp.cols }, opt);
      var nRows, nCols;
      if (options.rows && options.cols) {
        nRows = options.rows;
        nCols = options.cols;
      } else {
        throw new Error("Invalid number of rows or columns " + nRows + " " + nCols);
      }
      var divisor = options.divisor;
      var kHeight = kernel.length;
      var kWidth = kernel[0].length;
      var i, j, x, y, index, sum, kVal, row, col;
      if (options.normalize) {
        divisor = 0;
        for (i = 0; i < kHeight; i++)
          for (j = 0; j < kWidth; j++)
            divisor += kernel[i][j];
      }
      if (divisor === 0) {
        throw new RangeError("convolution: The divisor is equal to zero");
      }
      var output = new Array(nRows * nCols);
      var hHeight = Math.floor(kHeight / 2);
      var hWidth = Math.floor(kWidth / 2);
      for (y = 0; y < nRows; y++) {
        for (x = 0; x < nCols; x++) {
          sum = 0;
          for (j = 0; j < kHeight; j++) {
            for (i = 0; i < kWidth; i++) {
              kVal = kernel[kHeight - j - 1][kWidth - i - 1];
              row = (y + j - hHeight + nRows) % nRows;
              col = (x + i - hWidth + nCols) % nCols;
              index = row * nCols + col;
              sum += inputData[index] * kVal;
            }
          }
          index = y * nCols + x;
          output[index] = sum / divisor;
        }
      }
      return output;
    }
    function LoG(sigma, nPoints, options) {
      var factor = 1e3;
      if (options && options.factor) {
        factor = options.factor;
      }
      var kernel = new Array(nPoints);
      var i, j, tmp, y2, tmp2;
      factor *= -1;
      var center = (nPoints - 1) / 2;
      var sigma2 = 2 * sigma * sigma;
      for (i = 0; i < nPoints; i++) {
        kernel[i] = new Array(nPoints);
        y2 = (i - center) * (i - center);
        for (j = 0; j < nPoints; j++) {
          tmp = -((j - center) * (j - center) + y2) / sigma2;
          kernel[i][j] = Math.round(factor * (1 + tmp) * Math.exp(tmp));
        }
      }
      return kernel;
    }
    function matrix2Array(input) {
      var inputData = input;
      var nRows, nCols;
      if (typeof input[0] != "number") {
        nRows = input.length;
        nCols = input[0].length;
        inputData = new Array(nRows * nCols);
        for (var i = 0; i < nRows; i++) {
          for (var j = 0; j < nCols; j++) {
            inputData[i * nCols + j] = input[i][j];
          }
        }
      } else {
        var tmp = Math.sqrt(input.length);
        if (Number.isInteger(tmp)) {
          nRows = tmp;
          nCols = tmp;
        }
      }
      return { data: inputData, rows: nRows, cols: nCols };
    }
    module2.exports = {
      fft: convolutionFFT,
      direct: convolutionDirect,
      kernelFactory: { LoG },
      matrix2Array
    };
  }
});

// node_modules/is-finite/index.js
var require_is_finite = __commonJS({
  "node_modules/is-finite/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Number.isFinite || function(value) {
      return !(typeof value !== "number" || value !== value || value === Infinity || value === -Infinity);
    };
  }
});

// node_modules/is-integer/index.js
var require_is_integer = __commonJS({
  "node_modules/is-integer/index.js"(exports2, module2) {
    var isFinite2 = require_is_finite();
    module2.exports = Number.isInteger || function(val) {
      return typeof val === "number" && isFinite2(val) && Math.floor(val) === val;
    };
  }
});

// node_modules/image-js/lib/util/kernel.js
var require_kernel = __commonJS({
  "node_modules/image-js/lib/util/kernel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.validateKernel = validateKernel;
    var _isInteger = _interopRequireDefault(require_is_integer());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function validateKernel(kernel) {
      let kHeight, kWidth;
      if (Array.isArray(kernel)) {
        if (Array.isArray(kernel[0])) {
          if ((kernel.length & 1) === 0 || (kernel[0].length & 1) === 0) {
            throw new RangeError("validateKernel: Kernel rows and columns should be odd numbers");
          } else {
            kHeight = Math.floor(kernel.length / 2);
            kWidth = Math.floor(kernel[0].length / 2);
          }
        } else {
          let kernelWidth = Math.sqrt(kernel.length);
          if ((0, _isInteger.default)(kernelWidth)) {
            kWidth = kHeight = Math.floor(Math.sqrt(kernel.length) / 2);
          } else {
            throw new RangeError("validateKernel: Kernel array should be a square");
          }
          let newKernel = new Array(kernelWidth);
          for (let i = 0; i < kernelWidth; i++) {
            newKernel[i] = new Array(kernelWidth);
            for (let j = 0; j < kernelWidth; j++) {
              newKernel[i][j] = kernel[i * kernelWidth + j];
            }
          }
          kernel = newKernel;
        }
      } else {
        throw new Error(`validateKernel: Invalid Kernel: ${kernel}`);
      }
      return {
        kernel,
        kWidth,
        kHeight
      };
    }
  }
});

// node_modules/image-js/lib/image/internal/clamp.js
var require_clamp = __commonJS({
  "node_modules/image-js/lib/image/internal/clamp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.clamp = clamp;
    function clamp(value, image) {
      return Math.round(Math.min(Math.max(value, 0), image.maxValue));
    }
  }
});

// node_modules/fft.js/lib/fft.js
var require_fft = __commonJS({
  "node_modules/fft.js/lib/fft.js"(exports2, module2) {
    "use strict";
    function FFT(size) {
      this.size = size | 0;
      if (this.size <= 1 || (this.size & this.size - 1) !== 0)
        throw new Error("FFT size must be a power of two and bigger than 1");
      this._csize = size << 1;
      var table = new Array(this.size * 2);
      for (var i = 0; i < table.length; i += 2) {
        const angle = Math.PI * i / this.size;
        table[i] = Math.cos(angle);
        table[i + 1] = -Math.sin(angle);
      }
      this.table = table;
      var power = 0;
      for (var t = 1; this.size > t; t <<= 1)
        power++;
      this._width = power % 2 === 0 ? power - 1 : power;
      this._bitrev = new Array(1 << this._width);
      for (var j = 0; j < this._bitrev.length; j++) {
        this._bitrev[j] = 0;
        for (var shift = 0; shift < this._width; shift += 2) {
          var revShift = this._width - shift - 2;
          this._bitrev[j] |= (j >>> shift & 3) << revShift;
        }
      }
      this._out = null;
      this._data = null;
      this._inv = 0;
    }
    module2.exports = FFT;
    FFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {
      var res = storage || new Array(complex.length >>> 1);
      for (var i = 0; i < complex.length; i += 2)
        res[i >>> 1] = complex[i];
      return res;
    };
    FFT.prototype.createComplexArray = function createComplexArray() {
      const res = new Array(this._csize);
      for (var i = 0; i < res.length; i++)
        res[i] = 0;
      return res;
    };
    FFT.prototype.toComplexArray = function toComplexArray(input, storage) {
      var res = storage || this.createComplexArray();
      for (var i = 0; i < res.length; i += 2) {
        res[i] = input[i >>> 1];
        res[i + 1] = 0;
      }
      return res;
    };
    FFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {
      var size = this._csize;
      var half = size >>> 1;
      for (var i = 2; i < half; i += 2) {
        spectrum[size - i] = spectrum[i];
        spectrum[size - i + 1] = -spectrum[i + 1];
      }
    };
    FFT.prototype.transform = function transform(out, data) {
      if (out === data)
        throw new Error("Input and output buffers must be different");
      this._out = out;
      this._data = data;
      this._inv = 0;
      this._transform4();
      this._out = null;
      this._data = null;
    };
    FFT.prototype.realTransform = function realTransform(out, data) {
      if (out === data)
        throw new Error("Input and output buffers must be different");
      this._out = out;
      this._data = data;
      this._inv = 0;
      this._realTransform4();
      this._out = null;
      this._data = null;
    };
    FFT.prototype.inverseTransform = function inverseTransform(out, data) {
      if (out === data)
        throw new Error("Input and output buffers must be different");
      this._out = out;
      this._data = data;
      this._inv = 1;
      this._transform4();
      for (var i = 0; i < out.length; i++)
        out[i] /= this.size;
      this._out = null;
      this._data = null;
    };
    FFT.prototype._transform4 = function _transform4() {
      var out = this._out;
      var size = this._csize;
      var width = this._width;
      var step = 1 << width;
      var len = size / step << 1;
      var outOff;
      var t;
      var bitrev = this._bitrev;
      if (len === 4) {
        for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
          const off = bitrev[t];
          this._singleTransform2(outOff, off, step);
        }
      } else {
        for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
          const off = bitrev[t];
          this._singleTransform4(outOff, off, step);
        }
      }
      var inv = this._inv ? -1 : 1;
      var table = this.table;
      for (step >>= 2; step >= 2; step >>= 2) {
        len = size / step << 1;
        var quarterLen = len >>> 2;
        for (outOff = 0; outOff < size; outOff += len) {
          var limit = outOff + quarterLen;
          for (var i = outOff, k = 0; i < limit; i += 2, k += step) {
            const A = i;
            const B = A + quarterLen;
            const C = B + quarterLen;
            const D = C + quarterLen;
            const Ar = out[A];
            const Ai = out[A + 1];
            const Br = out[B];
            const Bi = out[B + 1];
            const Cr = out[C];
            const Ci = out[C + 1];
            const Dr = out[D];
            const Di = out[D + 1];
            const MAr = Ar;
            const MAi = Ai;
            const tableBr = table[k];
            const tableBi = inv * table[k + 1];
            const MBr = Br * tableBr - Bi * tableBi;
            const MBi = Br * tableBi + Bi * tableBr;
            const tableCr = table[2 * k];
            const tableCi = inv * table[2 * k + 1];
            const MCr = Cr * tableCr - Ci * tableCi;
            const MCi = Cr * tableCi + Ci * tableCr;
            const tableDr = table[3 * k];
            const tableDi = inv * table[3 * k + 1];
            const MDr = Dr * tableDr - Di * tableDi;
            const MDi = Dr * tableDi + Di * tableDr;
            const T0r = MAr + MCr;
            const T0i = MAi + MCi;
            const T1r = MAr - MCr;
            const T1i = MAi - MCi;
            const T2r = MBr + MDr;
            const T2i = MBi + MDi;
            const T3r = inv * (MBr - MDr);
            const T3i = inv * (MBi - MDi);
            const FAr = T0r + T2r;
            const FAi = T0i + T2i;
            const FCr = T0r - T2r;
            const FCi = T0i - T2i;
            const FBr = T1r + T3i;
            const FBi = T1i - T3r;
            const FDr = T1r - T3i;
            const FDi = T1i + T3r;
            out[A] = FAr;
            out[A + 1] = FAi;
            out[B] = FBr;
            out[B + 1] = FBi;
            out[C] = FCr;
            out[C + 1] = FCi;
            out[D] = FDr;
            out[D + 1] = FDi;
          }
        }
      }
    };
    FFT.prototype._singleTransform2 = function _singleTransform2(outOff, off, step) {
      const out = this._out;
      const data = this._data;
      const evenR = data[off];
      const evenI = data[off + 1];
      const oddR = data[off + step];
      const oddI = data[off + step + 1];
      const leftR = evenR + oddR;
      const leftI = evenI + oddI;
      const rightR = evenR - oddR;
      const rightI = evenI - oddI;
      out[outOff] = leftR;
      out[outOff + 1] = leftI;
      out[outOff + 2] = rightR;
      out[outOff + 3] = rightI;
    };
    FFT.prototype._singleTransform4 = function _singleTransform4(outOff, off, step) {
      const out = this._out;
      const data = this._data;
      const inv = this._inv ? -1 : 1;
      const step2 = step * 2;
      const step3 = step * 3;
      const Ar = data[off];
      const Ai = data[off + 1];
      const Br = data[off + step];
      const Bi = data[off + step + 1];
      const Cr = data[off + step2];
      const Ci = data[off + step2 + 1];
      const Dr = data[off + step3];
      const Di = data[off + step3 + 1];
      const T0r = Ar + Cr;
      const T0i = Ai + Ci;
      const T1r = Ar - Cr;
      const T1i = Ai - Ci;
      const T2r = Br + Dr;
      const T2i = Bi + Di;
      const T3r = inv * (Br - Dr);
      const T3i = inv * (Bi - Di);
      const FAr = T0r + T2r;
      const FAi = T0i + T2i;
      const FBr = T1r + T3i;
      const FBi = T1i - T3r;
      const FCr = T0r - T2r;
      const FCi = T0i - T2i;
      const FDr = T1r - T3i;
      const FDi = T1i + T3r;
      out[outOff] = FAr;
      out[outOff + 1] = FAi;
      out[outOff + 2] = FBr;
      out[outOff + 3] = FBi;
      out[outOff + 4] = FCr;
      out[outOff + 5] = FCi;
      out[outOff + 6] = FDr;
      out[outOff + 7] = FDi;
    };
    FFT.prototype._realTransform4 = function _realTransform4() {
      var out = this._out;
      var size = this._csize;
      var width = this._width;
      var step = 1 << width;
      var len = size / step << 1;
      var outOff;
      var t;
      var bitrev = this._bitrev;
      if (len === 4) {
        for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
          const off = bitrev[t];
          this._singleRealTransform2(outOff, off >>> 1, step >>> 1);
        }
      } else {
        for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
          const off = bitrev[t];
          this._singleRealTransform4(outOff, off >>> 1, step >>> 1);
        }
      }
      var inv = this._inv ? -1 : 1;
      var table = this.table;
      for (step >>= 2; step >= 2; step >>= 2) {
        len = size / step << 1;
        var halfLen = len >>> 1;
        var quarterLen = halfLen >>> 1;
        var hquarterLen = quarterLen >>> 1;
        for (outOff = 0; outOff < size; outOff += len) {
          for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {
            var A = outOff + i;
            var B = A + quarterLen;
            var C = B + quarterLen;
            var D = C + quarterLen;
            var Ar = out[A];
            var Ai = out[A + 1];
            var Br = out[B];
            var Bi = out[B + 1];
            var Cr = out[C];
            var Ci = out[C + 1];
            var Dr = out[D];
            var Di = out[D + 1];
            var MAr = Ar;
            var MAi = Ai;
            var tableBr = table[k];
            var tableBi = inv * table[k + 1];
            var MBr = Br * tableBr - Bi * tableBi;
            var MBi = Br * tableBi + Bi * tableBr;
            var tableCr = table[2 * k];
            var tableCi = inv * table[2 * k + 1];
            var MCr = Cr * tableCr - Ci * tableCi;
            var MCi = Cr * tableCi + Ci * tableCr;
            var tableDr = table[3 * k];
            var tableDi = inv * table[3 * k + 1];
            var MDr = Dr * tableDr - Di * tableDi;
            var MDi = Dr * tableDi + Di * tableDr;
            var T0r = MAr + MCr;
            var T0i = MAi + MCi;
            var T1r = MAr - MCr;
            var T1i = MAi - MCi;
            var T2r = MBr + MDr;
            var T2i = MBi + MDi;
            var T3r = inv * (MBr - MDr);
            var T3i = inv * (MBi - MDi);
            var FAr = T0r + T2r;
            var FAi = T0i + T2i;
            var FBr = T1r + T3i;
            var FBi = T1i - T3r;
            out[A] = FAr;
            out[A + 1] = FAi;
            out[B] = FBr;
            out[B + 1] = FBi;
            if (i === 0) {
              var FCr = T0r - T2r;
              var FCi = T0i - T2i;
              out[C] = FCr;
              out[C + 1] = FCi;
              continue;
            }
            if (i === hquarterLen)
              continue;
            var ST0r = T1r;
            var ST0i = -T1i;
            var ST1r = T0r;
            var ST1i = -T0i;
            var ST2r = -inv * T3i;
            var ST2i = -inv * T3r;
            var ST3r = -inv * T2i;
            var ST3i = -inv * T2r;
            var SFAr = ST0r + ST2r;
            var SFAi = ST0i + ST2i;
            var SFBr = ST1r + ST3i;
            var SFBi = ST1i - ST3r;
            var SA = outOff + quarterLen - i;
            var SB = outOff + halfLen - i;
            out[SA] = SFAr;
            out[SA + 1] = SFAi;
            out[SB] = SFBr;
            out[SB + 1] = SFBi;
          }
        }
      }
    };
    FFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff, off, step) {
      const out = this._out;
      const data = this._data;
      const evenR = data[off];
      const oddR = data[off + step];
      const leftR = evenR + oddR;
      const rightR = evenR - oddR;
      out[outOff] = leftR;
      out[outOff + 1] = 0;
      out[outOff + 2] = rightR;
      out[outOff + 3] = 0;
    };
    FFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff, off, step) {
      const out = this._out;
      const data = this._data;
      const inv = this._inv ? -1 : 1;
      const step2 = step * 2;
      const step3 = step * 3;
      const Ar = data[off];
      const Br = data[off + step];
      const Cr = data[off + step2];
      const Dr = data[off + step3];
      const T0r = Ar + Cr;
      const T1r = Ar - Cr;
      const T2r = Br + Dr;
      const T3r = inv * (Br - Dr);
      const FAr = T0r + T2r;
      const FBr = T1r;
      const FBi = -T3r;
      const FCr = T0r - T2r;
      const FDr = T1r;
      const FDi = T3r;
      out[outOff] = FAr;
      out[outOff + 1] = 0;
      out[outOff + 2] = FBr;
      out[outOff + 3] = FBi;
      out[outOff + 4] = FCr;
      out[outOff + 5] = 0;
      out[outOff + 6] = FDr;
      out[outOff + 7] = FDi;
    };
  }
});

// node_modules/next-power-of-two/index.js
var require_next_power_of_two = __commonJS({
  "node_modules/next-power-of-two/index.js"(exports2, module2) {
    module2.exports = nextPowerOfTwo;
    function nextPowerOfTwo(n) {
      if (n === 0)
        return 1;
      n--;
      n |= n >> 1;
      n |= n >> 2;
      n |= n >> 4;
      n |= n >> 8;
      n |= n >> 16;
      return n + 1;
    }
  }
});

// node_modules/ml-convolution/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/ml-convolution/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var FFT = _interopDefault(require_fft());
    var nextPOT = _interopDefault(require_next_power_of_two());
    function directConvolution(input, kernel, output) {
      if (output === void 0) {
        const length = input.length + kernel.length - 1;
        output = new Array(length);
      }
      fill(output);
      for (var i = 0; i < input.length; i++) {
        for (var j = 0; j < kernel.length; j++) {
          output[i + j] += input[i] * kernel[j];
        }
      }
      return output;
    }
    function fill(array) {
      for (var i = 0; i < array.length; i++) {
        array[i] = 0;
      }
    }
    function fftConvolution(input, kernel) {
      const resultLength = input.length + kernel.length - 1;
      const fftLength = nextPOT(resultLength);
      const fft = new FFT(fftLength);
      const { output: fftKernel, input: result } = createPaddedFFt(kernel, fft, fftLength);
      const { output: fftInput } = createPaddedFFt(input, fft, fftLength);
      const fftConv = fftInput;
      const conv = fftKernel;
      for (var i = 0; i < fftConv.length; i += 2) {
        const tmp = fftInput[i] * fftKernel[i] - fftInput[i + 1] * fftKernel[i + 1];
        fftConv[i + 1] = fftInput[i] * fftKernel[i + 1] + fftInput[i + 1] * fftKernel[i];
        fftConv[i] = tmp;
      }
      fft.inverseTransform(conv, fftConv);
      return fft.fromComplexArray(conv, result).slice(0, resultLength);
    }
    function createPaddedFFt(data, fft, length) {
      const input = new Array(length);
      var i = 0;
      for (; i < data.length; i++) {
        input[i] = data[i];
      }
      for (; i < length; i++) {
        input[i] = 0;
      }
      const fftInput = fft.toComplexArray(input);
      const output = fft.createComplexArray();
      fft.transform(output, fftInput);
      return {
        output,
        input,
        fftInput
      };
    }
    exports2.directConvolution = directConvolution;
    exports2.fftConvolution = fftConvolution;
  }
});

// node_modules/image-js/lib/image/operator/convolutionSeparable.js
var require_convolutionSeparable = __commonJS({
  "node_modules/image-js/lib/image/operator/convolutionSeparable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = convolutionSeparable;
    var _mlConvolution = require_lib5();
    function convolutionSeparable(data, separatedKernel, width, height) {
      const result = new Array(data.length);
      let tmp, conv, offset, kernel;
      kernel = separatedKernel[1];
      offset = (kernel.length - 1) / 2;
      conv = new Array(width + kernel.length - 1);
      tmp = new Array(width);
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          tmp[x] = data[y * width + x];
        }
        (0, _mlConvolution.directConvolution)(tmp, kernel, conv);
        for (let x = 0; x < width; x++) {
          result[y * width + x] = conv[offset + x];
        }
      }
      kernel = separatedKernel[0];
      offset = (kernel.length - 1) / 2;
      conv = new Array(height + kernel.length - 1);
      tmp = new Array(height);
      for (let x = 0; x < width; x++) {
        for (let y = 0; y < height; y++) {
          tmp[y] = result[y * width + x];
        }
        (0, _mlConvolution.directConvolution)(tmp, kernel, conv);
        for (let y = 0; y < height; y++) {
          result[y * width + x] = conv[offset + y];
        }
      }
      return result;
    }
  }
});

// node_modules/is-any-array/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/is-any-array/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAnyArray = void 0;
    var toString = Object.prototype.toString;
    function isAnyArray(value) {
      const tag = toString.call(value);
      return tag.endsWith("Array]") && !tag.includes("Big");
    }
    exports2.isAnyArray = isAnyArray;
  }
});

// node_modules/ml-array-max/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/ml-array-max/lib/index.js"(exports2, module2) {
    "use strict";
    var isAnyArray = require_lib6();
    function max(input, options = {}) {
      if (!isAnyArray.isAnyArray(input)) {
        throw new TypeError("input must be an array");
      }
      if (input.length === 0) {
        throw new TypeError("input must not be empty");
      }
      const { fromIndex = 0, toIndex = input.length } = options;
      if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {
        throw new Error("fromIndex must be a positive integer smaller than length");
      }
      if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {
        throw new Error(
          "toIndex must be an integer greater than fromIndex and at most equal to length"
        );
      }
      let maxValue = input[fromIndex];
      for (let i = fromIndex + 1; i < toIndex; i++) {
        if (input[i] > maxValue)
          maxValue = input[i];
      }
      return maxValue;
    }
    module2.exports = max;
  }
});

// node_modules/ml-array-min/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/ml-array-min/lib/index.js"(exports2, module2) {
    "use strict";
    var isAnyArray = require_lib6();
    function min(input, options = {}) {
      if (!isAnyArray.isAnyArray(input)) {
        throw new TypeError("input must be an array");
      }
      if (input.length === 0) {
        throw new TypeError("input must not be empty");
      }
      const { fromIndex = 0, toIndex = input.length } = options;
      if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {
        throw new Error("fromIndex must be a positive integer smaller than length");
      }
      if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {
        throw new Error(
          "toIndex must be an integer greater than fromIndex and at most equal to length"
        );
      }
      let minValue = input[fromIndex];
      for (let i = fromIndex + 1; i < toIndex; i++) {
        if (input[i] < minValue)
          minValue = input[i];
      }
      return minValue;
    }
    module2.exports = min;
  }
});

// node_modules/ml-array-rescale/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/ml-array-rescale/lib/index.js"(exports2, module2) {
    "use strict";
    var isAnyArray = require_lib6();
    var max = require_lib7();
    var min = require_lib8();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var max__default = /* @__PURE__ */ _interopDefaultLegacy(max);
    var min__default = /* @__PURE__ */ _interopDefaultLegacy(min);
    function rescale(input, options = {}) {
      if (!isAnyArray.isAnyArray(input)) {
        throw new TypeError("input must be an array");
      } else if (input.length === 0) {
        throw new TypeError("input must not be empty");
      }
      let output;
      if (options.output !== void 0) {
        if (!isAnyArray.isAnyArray(options.output)) {
          throw new TypeError("output option must be an array if specified");
        }
        output = options.output;
      } else {
        output = new Array(input.length);
      }
      const currentMin = min__default["default"](input);
      const currentMax = max__default["default"](input);
      if (currentMin === currentMax) {
        throw new RangeError(
          "minimum and maximum input values are equal. Cannot rescale a constant array"
        );
      }
      const {
        min: minValue = options.autoMinMax ? currentMin : 0,
        max: maxValue = options.autoMinMax ? currentMax : 1
      } = options;
      if (minValue >= maxValue) {
        throw new RangeError("min option must be smaller than max option");
      }
      const factor = (maxValue - minValue) / (currentMax - currentMin);
      for (let i = 0; i < input.length; i++) {
        output[i] = (input[i] - currentMin) * factor + minValue;
      }
      return output;
    }
    module2.exports = rescale;
  }
});

// node_modules/ml-matrix/matrix.js
var require_matrix = __commonJS({
  "node_modules/ml-matrix/matrix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var isAnyArray = require_lib6();
    var rescale = require_lib9();
    var indent = " ".repeat(2);
    var indentData = " ".repeat(4);
    function inspectMatrix() {
      return inspectMatrixWithOptions(this);
    }
    function inspectMatrixWithOptions(matrix, options = {}) {
      const {
        maxRows = 15,
        maxColumns = 10,
        maxNumSize = 8,
        padMinus = "auto"
      } = options;
      return `${matrix.constructor.name} {
${indent}[
${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}
${indent}]
${indent}rows: ${matrix.rows}
${indent}columns: ${matrix.columns}
}`;
    }
    function inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {
      const { rows, columns } = matrix;
      const maxI = Math.min(rows, maxRows);
      const maxJ = Math.min(columns, maxColumns);
      const result = [];
      if (padMinus === "auto") {
        padMinus = false;
        loop:
          for (let i = 0; i < maxI; i++) {
            for (let j = 0; j < maxJ; j++) {
              if (matrix.get(i, j) < 0) {
                padMinus = true;
                break loop;
              }
            }
          }
      }
      for (let i = 0; i < maxI; i++) {
        let line = [];
        for (let j = 0; j < maxJ; j++) {
          line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));
        }
        result.push(`${line.join(" ")}`);
      }
      if (maxJ !== columns) {
        result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;
      }
      if (maxI !== rows) {
        result.push(`... ${rows - maxRows} more rows`);
      }
      return result.join(`
${indentData}`);
    }
    function formatNumber(num, maxNumSize, padMinus) {
      return (num >= 0 && padMinus ? ` ${formatNumber2(num, maxNumSize - 1)}` : formatNumber2(num, maxNumSize)).padEnd(maxNumSize);
    }
    function formatNumber2(num, len) {
      let str = num.toString();
      if (str.length <= len)
        return str;
      let fix = num.toFixed(len);
      if (fix.length > len) {
        fix = num.toFixed(Math.max(0, len - (fix.length - len)));
      }
      if (fix.length <= len && !fix.startsWith("0.000") && !fix.startsWith("-0.000")) {
        return fix;
      }
      let exp = num.toExponential(len);
      if (exp.length > len) {
        exp = num.toExponential(Math.max(0, len - (exp.length - len)));
      }
      return exp.slice(0);
    }
    function installMathOperations(AbstractMatrix2, Matrix2) {
      AbstractMatrix2.prototype.add = function add(value) {
        if (typeof value === "number")
          return this.addS(value);
        return this.addM(value);
      };
      AbstractMatrix2.prototype.addS = function addS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) + value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.addM = function addM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) + matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.add = function add(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.add(value);
      };
      AbstractMatrix2.prototype.sub = function sub(value) {
        if (typeof value === "number")
          return this.subS(value);
        return this.subM(value);
      };
      AbstractMatrix2.prototype.subS = function subS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) - value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.subM = function subM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) - matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.sub = function sub(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.sub(value);
      };
      AbstractMatrix2.prototype.subtract = AbstractMatrix2.prototype.sub;
      AbstractMatrix2.prototype.subtractS = AbstractMatrix2.prototype.subS;
      AbstractMatrix2.prototype.subtractM = AbstractMatrix2.prototype.subM;
      AbstractMatrix2.subtract = AbstractMatrix2.sub;
      AbstractMatrix2.prototype.mul = function mul(value) {
        if (typeof value === "number")
          return this.mulS(value);
        return this.mulM(value);
      };
      AbstractMatrix2.prototype.mulS = function mulS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) * value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.mulM = function mulM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) * matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.mul = function mul(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.mul(value);
      };
      AbstractMatrix2.prototype.multiply = AbstractMatrix2.prototype.mul;
      AbstractMatrix2.prototype.multiplyS = AbstractMatrix2.prototype.mulS;
      AbstractMatrix2.prototype.multiplyM = AbstractMatrix2.prototype.mulM;
      AbstractMatrix2.multiply = AbstractMatrix2.mul;
      AbstractMatrix2.prototype.div = function div(value) {
        if (typeof value === "number")
          return this.divS(value);
        return this.divM(value);
      };
      AbstractMatrix2.prototype.divS = function divS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) / value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.divM = function divM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) / matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.div = function div(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.div(value);
      };
      AbstractMatrix2.prototype.divide = AbstractMatrix2.prototype.div;
      AbstractMatrix2.prototype.divideS = AbstractMatrix2.prototype.divS;
      AbstractMatrix2.prototype.divideM = AbstractMatrix2.prototype.divM;
      AbstractMatrix2.divide = AbstractMatrix2.div;
      AbstractMatrix2.prototype.mod = function mod(value) {
        if (typeof value === "number")
          return this.modS(value);
        return this.modM(value);
      };
      AbstractMatrix2.prototype.modS = function modS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) % value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.modM = function modM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) % matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.mod = function mod(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.mod(value);
      };
      AbstractMatrix2.prototype.modulus = AbstractMatrix2.prototype.mod;
      AbstractMatrix2.prototype.modulusS = AbstractMatrix2.prototype.modS;
      AbstractMatrix2.prototype.modulusM = AbstractMatrix2.prototype.modM;
      AbstractMatrix2.modulus = AbstractMatrix2.mod;
      AbstractMatrix2.prototype.and = function and(value) {
        if (typeof value === "number")
          return this.andS(value);
        return this.andM(value);
      };
      AbstractMatrix2.prototype.andS = function andS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) & value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.andM = function andM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) & matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.and = function and(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.and(value);
      };
      AbstractMatrix2.prototype.or = function or(value) {
        if (typeof value === "number")
          return this.orS(value);
        return this.orM(value);
      };
      AbstractMatrix2.prototype.orS = function orS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) | value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.orM = function orM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) | matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.or = function or(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.or(value);
      };
      AbstractMatrix2.prototype.xor = function xor(value) {
        if (typeof value === "number")
          return this.xorS(value);
        return this.xorM(value);
      };
      AbstractMatrix2.prototype.xorS = function xorS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) ^ value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.xorM = function xorM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) ^ matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.xor = function xor(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.xor(value);
      };
      AbstractMatrix2.prototype.leftShift = function leftShift(value) {
        if (typeof value === "number")
          return this.leftShiftS(value);
        return this.leftShiftM(value);
      };
      AbstractMatrix2.prototype.leftShiftS = function leftShiftS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) << value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.leftShiftM = function leftShiftM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) << matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.leftShift = function leftShift(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.leftShift(value);
      };
      AbstractMatrix2.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {
        if (typeof value === "number")
          return this.signPropagatingRightShiftS(value);
        return this.signPropagatingRightShiftM(value);
      };
      AbstractMatrix2.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) >> value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) >> matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.signPropagatingRightShift(value);
      };
      AbstractMatrix2.prototype.rightShift = function rightShift(value) {
        if (typeof value === "number")
          return this.rightShiftS(value);
        return this.rightShiftM(value);
      };
      AbstractMatrix2.prototype.rightShiftS = function rightShiftS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) >>> value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.rightShiftM = function rightShiftM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) >>> matrix.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.rightShift = function rightShift(matrix, value) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.rightShift(value);
      };
      AbstractMatrix2.prototype.zeroFillRightShift = AbstractMatrix2.prototype.rightShift;
      AbstractMatrix2.prototype.zeroFillRightShiftS = AbstractMatrix2.prototype.rightShiftS;
      AbstractMatrix2.prototype.zeroFillRightShiftM = AbstractMatrix2.prototype.rightShiftM;
      AbstractMatrix2.zeroFillRightShift = AbstractMatrix2.rightShift;
      AbstractMatrix2.prototype.not = function not() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, ~this.get(i, j));
          }
        }
        return this;
      };
      AbstractMatrix2.not = function not(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.not();
      };
      AbstractMatrix2.prototype.abs = function abs() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.abs(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.abs = function abs(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.abs();
      };
      AbstractMatrix2.prototype.acos = function acos() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.acos(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.acos = function acos(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.acos();
      };
      AbstractMatrix2.prototype.acosh = function acosh() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.acosh(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.acosh = function acosh(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.acosh();
      };
      AbstractMatrix2.prototype.asin = function asin() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.asin(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.asin = function asin(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.asin();
      };
      AbstractMatrix2.prototype.asinh = function asinh() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.asinh(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.asinh = function asinh(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.asinh();
      };
      AbstractMatrix2.prototype.atan = function atan() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.atan(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.atan = function atan(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.atan();
      };
      AbstractMatrix2.prototype.atanh = function atanh() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.atanh(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.atanh = function atanh(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.atanh();
      };
      AbstractMatrix2.prototype.cbrt = function cbrt() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.cbrt(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.cbrt = function cbrt(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.cbrt();
      };
      AbstractMatrix2.prototype.ceil = function ceil() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.ceil(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.ceil = function ceil(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.ceil();
      };
      AbstractMatrix2.prototype.clz32 = function clz32() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.clz32(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.clz32 = function clz32(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.clz32();
      };
      AbstractMatrix2.prototype.cos = function cos() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.cos(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.cos = function cos(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.cos();
      };
      AbstractMatrix2.prototype.cosh = function cosh() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.cosh(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.cosh = function cosh(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.cosh();
      };
      AbstractMatrix2.prototype.exp = function exp() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.exp(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.exp = function exp(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.exp();
      };
      AbstractMatrix2.prototype.expm1 = function expm1() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.expm1(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.expm1 = function expm1(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.expm1();
      };
      AbstractMatrix2.prototype.floor = function floor() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.floor(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.floor = function floor(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.floor();
      };
      AbstractMatrix2.prototype.fround = function fround() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.fround(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.fround = function fround(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.fround();
      };
      AbstractMatrix2.prototype.log = function log() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.log(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.log = function log(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.log();
      };
      AbstractMatrix2.prototype.log1p = function log1p() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.log1p(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.log1p = function log1p(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.log1p();
      };
      AbstractMatrix2.prototype.log10 = function log10() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.log10(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.log10 = function log10(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.log10();
      };
      AbstractMatrix2.prototype.log2 = function log2() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.log2(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.log2 = function log2(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.log2();
      };
      AbstractMatrix2.prototype.round = function round() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.round(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.round = function round(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.round();
      };
      AbstractMatrix2.prototype.sign = function sign() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.sign(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.sign = function sign(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.sign();
      };
      AbstractMatrix2.prototype.sin = function sin() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.sin(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.sin = function sin(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.sin();
      };
      AbstractMatrix2.prototype.sinh = function sinh() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.sinh(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.sinh = function sinh(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.sinh();
      };
      AbstractMatrix2.prototype.sqrt = function sqrt() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.sqrt(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.sqrt = function sqrt(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.sqrt();
      };
      AbstractMatrix2.prototype.tan = function tan() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.tan(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.tan = function tan(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.tan();
      };
      AbstractMatrix2.prototype.tanh = function tanh() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.tanh(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.tanh = function tanh(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.tanh();
      };
      AbstractMatrix2.prototype.trunc = function trunc() {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, Math.trunc(this.get(i, j)));
          }
        }
        return this;
      };
      AbstractMatrix2.trunc = function trunc(matrix) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.trunc();
      };
      AbstractMatrix2.pow = function pow(matrix, arg0) {
        const newMatrix = new Matrix2(matrix);
        return newMatrix.pow(arg0);
      };
      AbstractMatrix2.prototype.pow = function pow(value) {
        if (typeof value === "number")
          return this.powS(value);
        return this.powM(value);
      };
      AbstractMatrix2.prototype.powS = function powS(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) ** value);
          }
        }
        return this;
      };
      AbstractMatrix2.prototype.powM = function powM(matrix) {
        matrix = Matrix2.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
          throw new RangeError("Matrices dimensions must be equal");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) ** matrix.get(i, j));
          }
        }
        return this;
      };
    }
    function checkRowIndex(matrix, index, outer) {
      let max = outer ? matrix.rows : matrix.rows - 1;
      if (index < 0 || index > max) {
        throw new RangeError("Row index out of range");
      }
    }
    function checkColumnIndex(matrix, index, outer) {
      let max = outer ? matrix.columns : matrix.columns - 1;
      if (index < 0 || index > max) {
        throw new RangeError("Column index out of range");
      }
    }
    function checkRowVector(matrix, vector) {
      if (vector.to1DArray) {
        vector = vector.to1DArray();
      }
      if (vector.length !== matrix.columns) {
        throw new RangeError(
          "vector size must be the same as the number of columns"
        );
      }
      return vector;
    }
    function checkColumnVector(matrix, vector) {
      if (vector.to1DArray) {
        vector = vector.to1DArray();
      }
      if (vector.length !== matrix.rows) {
        throw new RangeError("vector size must be the same as the number of rows");
      }
      return vector;
    }
    function checkRowIndices(matrix, rowIndices) {
      if (!isAnyArray.isAnyArray(rowIndices)) {
        throw new TypeError("row indices must be an array");
      }
      for (let i = 0; i < rowIndices.length; i++) {
        if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {
          throw new RangeError("row indices are out of range");
        }
      }
    }
    function checkColumnIndices(matrix, columnIndices) {
      if (!isAnyArray.isAnyArray(columnIndices)) {
        throw new TypeError("column indices must be an array");
      }
      for (let i = 0; i < columnIndices.length; i++) {
        if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {
          throw new RangeError("column indices are out of range");
        }
      }
    }
    function checkRange(matrix, startRow, endRow, startColumn, endColumn) {
      if (arguments.length !== 5) {
        throw new RangeError("expected 4 arguments");
      }
      checkNumber("startRow", startRow);
      checkNumber("endRow", endRow);
      checkNumber("startColumn", startColumn);
      checkNumber("endColumn", endColumn);
      if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {
        throw new RangeError("Submatrix indices are out of range");
      }
    }
    function newArray(length, value = 0) {
      let array = [];
      for (let i = 0; i < length; i++) {
        array.push(value);
      }
      return array;
    }
    function checkNumber(name, value) {
      if (typeof value !== "number") {
        throw new TypeError(`${name} must be a number`);
      }
    }
    function checkNonEmpty(matrix) {
      if (matrix.isEmpty()) {
        throw new Error("Empty matrix has no elements to index");
      }
    }
    function sumByRow(matrix) {
      let sum = newArray(matrix.rows);
      for (let i = 0; i < matrix.rows; ++i) {
        for (let j = 0; j < matrix.columns; ++j) {
          sum[i] += matrix.get(i, j);
        }
      }
      return sum;
    }
    function sumByColumn(matrix) {
      let sum = newArray(matrix.columns);
      for (let i = 0; i < matrix.rows; ++i) {
        for (let j = 0; j < matrix.columns; ++j) {
          sum[j] += matrix.get(i, j);
        }
      }
      return sum;
    }
    function sumAll(matrix) {
      let v = 0;
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          v += matrix.get(i, j);
        }
      }
      return v;
    }
    function productByRow(matrix) {
      let sum = newArray(matrix.rows, 1);
      for (let i = 0; i < matrix.rows; ++i) {
        for (let j = 0; j < matrix.columns; ++j) {
          sum[i] *= matrix.get(i, j);
        }
      }
      return sum;
    }
    function productByColumn(matrix) {
      let sum = newArray(matrix.columns, 1);
      for (let i = 0; i < matrix.rows; ++i) {
        for (let j = 0; j < matrix.columns; ++j) {
          sum[j] *= matrix.get(i, j);
        }
      }
      return sum;
    }
    function productAll(matrix) {
      let v = 1;
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          v *= matrix.get(i, j);
        }
      }
      return v;
    }
    function varianceByRow(matrix, unbiased, mean) {
      const rows = matrix.rows;
      const cols = matrix.columns;
      const variance = [];
      for (let i = 0; i < rows; i++) {
        let sum1 = 0;
        let sum2 = 0;
        let x = 0;
        for (let j = 0; j < cols; j++) {
          x = matrix.get(i, j) - mean[i];
          sum1 += x;
          sum2 += x * x;
        }
        if (unbiased) {
          variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));
        } else {
          variance.push((sum2 - sum1 * sum1 / cols) / cols);
        }
      }
      return variance;
    }
    function varianceByColumn(matrix, unbiased, mean) {
      const rows = matrix.rows;
      const cols = matrix.columns;
      const variance = [];
      for (let j = 0; j < cols; j++) {
        let sum1 = 0;
        let sum2 = 0;
        let x = 0;
        for (let i = 0; i < rows; i++) {
          x = matrix.get(i, j) - mean[j];
          sum1 += x;
          sum2 += x * x;
        }
        if (unbiased) {
          variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));
        } else {
          variance.push((sum2 - sum1 * sum1 / rows) / rows);
        }
      }
      return variance;
    }
    function varianceAll(matrix, unbiased, mean) {
      const rows = matrix.rows;
      const cols = matrix.columns;
      const size = rows * cols;
      let sum1 = 0;
      let sum2 = 0;
      let x = 0;
      for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
          x = matrix.get(i, j) - mean;
          sum1 += x;
          sum2 += x * x;
        }
      }
      if (unbiased) {
        return (sum2 - sum1 * sum1 / size) / (size - 1);
      } else {
        return (sum2 - sum1 * sum1 / size) / size;
      }
    }
    function centerByRow(matrix, mean) {
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          matrix.set(i, j, matrix.get(i, j) - mean[i]);
        }
      }
    }
    function centerByColumn(matrix, mean) {
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          matrix.set(i, j, matrix.get(i, j) - mean[j]);
        }
      }
    }
    function centerAll(matrix, mean) {
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          matrix.set(i, j, matrix.get(i, j) - mean);
        }
      }
    }
    function getScaleByRow(matrix) {
      const scale = [];
      for (let i = 0; i < matrix.rows; i++) {
        let sum = 0;
        for (let j = 0; j < matrix.columns; j++) {
          sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);
        }
        scale.push(Math.sqrt(sum));
      }
      return scale;
    }
    function scaleByRow(matrix, scale) {
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          matrix.set(i, j, matrix.get(i, j) / scale[i]);
        }
      }
    }
    function getScaleByColumn(matrix) {
      const scale = [];
      for (let j = 0; j < matrix.columns; j++) {
        let sum = 0;
        for (let i = 0; i < matrix.rows; i++) {
          sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);
        }
        scale.push(Math.sqrt(sum));
      }
      return scale;
    }
    function scaleByColumn(matrix, scale) {
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          matrix.set(i, j, matrix.get(i, j) / scale[j]);
        }
      }
    }
    function getScaleAll(matrix) {
      const divider = matrix.size - 1;
      let sum = 0;
      for (let j = 0; j < matrix.columns; j++) {
        for (let i = 0; i < matrix.rows; i++) {
          sum += matrix.get(i, j) ** 2 / divider;
        }
      }
      return Math.sqrt(sum);
    }
    function scaleAll(matrix, scale) {
      for (let i = 0; i < matrix.rows; i++) {
        for (let j = 0; j < matrix.columns; j++) {
          matrix.set(i, j, matrix.get(i, j) / scale);
        }
      }
    }
    var AbstractMatrix = class _AbstractMatrix {
      static from1DArray(newRows, newColumns, newData) {
        let length = newRows * newColumns;
        if (length !== newData.length) {
          throw new RangeError("data length does not match given dimensions");
        }
        let newMatrix = new Matrix(newRows, newColumns);
        for (let row = 0; row < newRows; row++) {
          for (let column = 0; column < newColumns; column++) {
            newMatrix.set(row, column, newData[row * newColumns + column]);
          }
        }
        return newMatrix;
      }
      static rowVector(newData) {
        let vector = new Matrix(1, newData.length);
        for (let i = 0; i < newData.length; i++) {
          vector.set(0, i, newData[i]);
        }
        return vector;
      }
      static columnVector(newData) {
        let vector = new Matrix(newData.length, 1);
        for (let i = 0; i < newData.length; i++) {
          vector.set(i, 0, newData[i]);
        }
        return vector;
      }
      static zeros(rows, columns) {
        return new Matrix(rows, columns);
      }
      static ones(rows, columns) {
        return new Matrix(rows, columns).fill(1);
      }
      static rand(rows, columns, options = {}) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { random = Math.random } = options;
        let matrix = new Matrix(rows, columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            matrix.set(i, j, random());
          }
        }
        return matrix;
      }
      static randInt(rows, columns, options = {}) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { min = 0, max = 1e3, random = Math.random } = options;
        if (!Number.isInteger(min))
          throw new TypeError("min must be an integer");
        if (!Number.isInteger(max))
          throw new TypeError("max must be an integer");
        if (min >= max)
          throw new RangeError("min must be smaller than max");
        let interval = max - min;
        let matrix = new Matrix(rows, columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            let value = min + Math.round(random() * interval);
            matrix.set(i, j, value);
          }
        }
        return matrix;
      }
      static eye(rows, columns, value) {
        if (columns === void 0)
          columns = rows;
        if (value === void 0)
          value = 1;
        let min = Math.min(rows, columns);
        let matrix = this.zeros(rows, columns);
        for (let i = 0; i < min; i++) {
          matrix.set(i, i, value);
        }
        return matrix;
      }
      static diag(data, rows, columns) {
        let l = data.length;
        if (rows === void 0)
          rows = l;
        if (columns === void 0)
          columns = rows;
        let min = Math.min(l, rows, columns);
        let matrix = this.zeros(rows, columns);
        for (let i = 0; i < min; i++) {
          matrix.set(i, i, data[i]);
        }
        return matrix;
      }
      static min(matrix1, matrix2) {
        matrix1 = this.checkMatrix(matrix1);
        matrix2 = this.checkMatrix(matrix2);
        let rows = matrix1.rows;
        let columns = matrix1.columns;
        let result = new Matrix(rows, columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
          }
        }
        return result;
      }
      static max(matrix1, matrix2) {
        matrix1 = this.checkMatrix(matrix1);
        matrix2 = this.checkMatrix(matrix2);
        let rows = matrix1.rows;
        let columns = matrix1.columns;
        let result = new this(rows, columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
          }
        }
        return result;
      }
      static checkMatrix(value) {
        return _AbstractMatrix.isMatrix(value) ? value : new Matrix(value);
      }
      static isMatrix(value) {
        return value != null && value.klass === "Matrix";
      }
      get size() {
        return this.rows * this.columns;
      }
      apply(callback) {
        if (typeof callback !== "function") {
          throw new TypeError("callback must be a function");
        }
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            callback.call(this, i, j);
          }
        }
        return this;
      }
      to1DArray() {
        let array = [];
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            array.push(this.get(i, j));
          }
        }
        return array;
      }
      to2DArray() {
        let copy = [];
        for (let i = 0; i < this.rows; i++) {
          copy.push([]);
          for (let j = 0; j < this.columns; j++) {
            copy[i].push(this.get(i, j));
          }
        }
        return copy;
      }
      toJSON() {
        return this.to2DArray();
      }
      isRowVector() {
        return this.rows === 1;
      }
      isColumnVector() {
        return this.columns === 1;
      }
      isVector() {
        return this.rows === 1 || this.columns === 1;
      }
      isSquare() {
        return this.rows === this.columns;
      }
      isEmpty() {
        return this.rows === 0 || this.columns === 0;
      }
      isSymmetric() {
        if (this.isSquare()) {
          for (let i = 0; i < this.rows; i++) {
            for (let j = 0; j <= i; j++) {
              if (this.get(i, j) !== this.get(j, i)) {
                return false;
              }
            }
          }
          return true;
        }
        return false;
      }
      isDistance() {
        if (!this.isSymmetric())
          return false;
        for (let i = 0; i < this.rows; i++) {
          if (this.get(i, i) !== 0)
            return false;
        }
        return true;
      }
      isEchelonForm() {
        let i = 0;
        let j = 0;
        let previousColumn = -1;
        let isEchelonForm = true;
        let checked = false;
        while (i < this.rows && isEchelonForm) {
          j = 0;
          checked = false;
          while (j < this.columns && checked === false) {
            if (this.get(i, j) === 0) {
              j++;
            } else if (this.get(i, j) === 1 && j > previousColumn) {
              checked = true;
              previousColumn = j;
            } else {
              isEchelonForm = false;
              checked = true;
            }
          }
          i++;
        }
        return isEchelonForm;
      }
      isReducedEchelonForm() {
        let i = 0;
        let j = 0;
        let previousColumn = -1;
        let isReducedEchelonForm = true;
        let checked = false;
        while (i < this.rows && isReducedEchelonForm) {
          j = 0;
          checked = false;
          while (j < this.columns && checked === false) {
            if (this.get(i, j) === 0) {
              j++;
            } else if (this.get(i, j) === 1 && j > previousColumn) {
              checked = true;
              previousColumn = j;
            } else {
              isReducedEchelonForm = false;
              checked = true;
            }
          }
          for (let k = j + 1; k < this.rows; k++) {
            if (this.get(i, k) !== 0) {
              isReducedEchelonForm = false;
            }
          }
          i++;
        }
        return isReducedEchelonForm;
      }
      echelonForm() {
        let result = this.clone();
        let h = 0;
        let k = 0;
        while (h < result.rows && k < result.columns) {
          let iMax = h;
          for (let i = h; i < result.rows; i++) {
            if (result.get(i, k) > result.get(iMax, k)) {
              iMax = i;
            }
          }
          if (result.get(iMax, k) === 0) {
            k++;
          } else {
            result.swapRows(h, iMax);
            let tmp = result.get(h, k);
            for (let j = k; j < result.columns; j++) {
              result.set(h, j, result.get(h, j) / tmp);
            }
            for (let i = h + 1; i < result.rows; i++) {
              let factor = result.get(i, k) / result.get(h, k);
              result.set(i, k, 0);
              for (let j = k + 1; j < result.columns; j++) {
                result.set(i, j, result.get(i, j) - result.get(h, j) * factor);
              }
            }
            h++;
            k++;
          }
        }
        return result;
      }
      reducedEchelonForm() {
        let result = this.echelonForm();
        let m = result.columns;
        let n = result.rows;
        let h = n - 1;
        while (h >= 0) {
          if (result.maxRow(h) === 0) {
            h--;
          } else {
            let p = 0;
            let pivot = false;
            while (p < n && pivot === false) {
              if (result.get(h, p) === 1) {
                pivot = true;
              } else {
                p++;
              }
            }
            for (let i = 0; i < h; i++) {
              let factor = result.get(i, p);
              for (let j = p; j < m; j++) {
                let tmp = result.get(i, j) - factor * result.get(h, j);
                result.set(i, j, tmp);
              }
            }
            h--;
          }
        }
        return result;
      }
      set() {
        throw new Error("set method is unimplemented");
      }
      get() {
        throw new Error("get method is unimplemented");
      }
      repeat(options = {}) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { rows = 1, columns = 1 } = options;
        if (!Number.isInteger(rows) || rows <= 0) {
          throw new TypeError("rows must be a positive integer");
        }
        if (!Number.isInteger(columns) || columns <= 0) {
          throw new TypeError("columns must be a positive integer");
        }
        let matrix = new Matrix(this.rows * rows, this.columns * columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            matrix.setSubMatrix(this, this.rows * i, this.columns * j);
          }
        }
        return matrix;
      }
      fill(value) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, value);
          }
        }
        return this;
      }
      neg() {
        return this.mulS(-1);
      }
      getRow(index) {
        checkRowIndex(this, index);
        let row = [];
        for (let i = 0; i < this.columns; i++) {
          row.push(this.get(index, i));
        }
        return row;
      }
      getRowVector(index) {
        return Matrix.rowVector(this.getRow(index));
      }
      setRow(index, array) {
        checkRowIndex(this, index);
        array = checkRowVector(this, array);
        for (let i = 0; i < this.columns; i++) {
          this.set(index, i, array[i]);
        }
        return this;
      }
      swapRows(row1, row2) {
        checkRowIndex(this, row1);
        checkRowIndex(this, row2);
        for (let i = 0; i < this.columns; i++) {
          let temp = this.get(row1, i);
          this.set(row1, i, this.get(row2, i));
          this.set(row2, i, temp);
        }
        return this;
      }
      getColumn(index) {
        checkColumnIndex(this, index);
        let column = [];
        for (let i = 0; i < this.rows; i++) {
          column.push(this.get(i, index));
        }
        return column;
      }
      getColumnVector(index) {
        return Matrix.columnVector(this.getColumn(index));
      }
      setColumn(index, array) {
        checkColumnIndex(this, index);
        array = checkColumnVector(this, array);
        for (let i = 0; i < this.rows; i++) {
          this.set(i, index, array[i]);
        }
        return this;
      }
      swapColumns(column1, column2) {
        checkColumnIndex(this, column1);
        checkColumnIndex(this, column2);
        for (let i = 0; i < this.rows; i++) {
          let temp = this.get(i, column1);
          this.set(i, column1, this.get(i, column2));
          this.set(i, column2, temp);
        }
        return this;
      }
      addRowVector(vector) {
        vector = checkRowVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) + vector[j]);
          }
        }
        return this;
      }
      subRowVector(vector) {
        vector = checkRowVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) - vector[j]);
          }
        }
        return this;
      }
      mulRowVector(vector) {
        vector = checkRowVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) * vector[j]);
          }
        }
        return this;
      }
      divRowVector(vector) {
        vector = checkRowVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) / vector[j]);
          }
        }
        return this;
      }
      addColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) + vector[i]);
          }
        }
        return this;
      }
      subColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) - vector[i]);
          }
        }
        return this;
      }
      mulColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) * vector[i]);
          }
        }
        return this;
      }
      divColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) / vector[i]);
          }
        }
        return this;
      }
      mulRow(index, value) {
        checkRowIndex(this, index);
        for (let i = 0; i < this.columns; i++) {
          this.set(index, i, this.get(index, i) * value);
        }
        return this;
      }
      mulColumn(index, value) {
        checkColumnIndex(this, index);
        for (let i = 0; i < this.rows; i++) {
          this.set(i, index, this.get(i, index) * value);
        }
        return this;
      }
      max(by) {
        if (this.isEmpty()) {
          return NaN;
        }
        switch (by) {
          case "row": {
            const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);
            for (let row = 0; row < this.rows; row++) {
              for (let column = 0; column < this.columns; column++) {
                if (this.get(row, column) > max[row]) {
                  max[row] = this.get(row, column);
                }
              }
            }
            return max;
          }
          case "column": {
            const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);
            for (let row = 0; row < this.rows; row++) {
              for (let column = 0; column < this.columns; column++) {
                if (this.get(row, column) > max[column]) {
                  max[column] = this.get(row, column);
                }
              }
            }
            return max;
          }
          case void 0: {
            let max = this.get(0, 0);
            for (let row = 0; row < this.rows; row++) {
              for (let column = 0; column < this.columns; column++) {
                if (this.get(row, column) > max) {
                  max = this.get(row, column);
                }
              }
            }
            return max;
          }
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      maxIndex() {
        checkNonEmpty(this);
        let v = this.get(0, 0);
        let idx = [0, 0];
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            if (this.get(i, j) > v) {
              v = this.get(i, j);
              idx[0] = i;
              idx[1] = j;
            }
          }
        }
        return idx;
      }
      min(by) {
        if (this.isEmpty()) {
          return NaN;
        }
        switch (by) {
          case "row": {
            const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);
            for (let row = 0; row < this.rows; row++) {
              for (let column = 0; column < this.columns; column++) {
                if (this.get(row, column) < min[row]) {
                  min[row] = this.get(row, column);
                }
              }
            }
            return min;
          }
          case "column": {
            const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);
            for (let row = 0; row < this.rows; row++) {
              for (let column = 0; column < this.columns; column++) {
                if (this.get(row, column) < min[column]) {
                  min[column] = this.get(row, column);
                }
              }
            }
            return min;
          }
          case void 0: {
            let min = this.get(0, 0);
            for (let row = 0; row < this.rows; row++) {
              for (let column = 0; column < this.columns; column++) {
                if (this.get(row, column) < min) {
                  min = this.get(row, column);
                }
              }
            }
            return min;
          }
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      minIndex() {
        checkNonEmpty(this);
        let v = this.get(0, 0);
        let idx = [0, 0];
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            if (this.get(i, j) < v) {
              v = this.get(i, j);
              idx[0] = i;
              idx[1] = j;
            }
          }
        }
        return idx;
      }
      maxRow(row) {
        checkRowIndex(this, row);
        if (this.isEmpty()) {
          return NaN;
        }
        let v = this.get(row, 0);
        for (let i = 1; i < this.columns; i++) {
          if (this.get(row, i) > v) {
            v = this.get(row, i);
          }
        }
        return v;
      }
      maxRowIndex(row) {
        checkRowIndex(this, row);
        checkNonEmpty(this);
        let v = this.get(row, 0);
        let idx = [row, 0];
        for (let i = 1; i < this.columns; i++) {
          if (this.get(row, i) > v) {
            v = this.get(row, i);
            idx[1] = i;
          }
        }
        return idx;
      }
      minRow(row) {
        checkRowIndex(this, row);
        if (this.isEmpty()) {
          return NaN;
        }
        let v = this.get(row, 0);
        for (let i = 1; i < this.columns; i++) {
          if (this.get(row, i) < v) {
            v = this.get(row, i);
          }
        }
        return v;
      }
      minRowIndex(row) {
        checkRowIndex(this, row);
        checkNonEmpty(this);
        let v = this.get(row, 0);
        let idx = [row, 0];
        for (let i = 1; i < this.columns; i++) {
          if (this.get(row, i) < v) {
            v = this.get(row, i);
            idx[1] = i;
          }
        }
        return idx;
      }
      maxColumn(column) {
        checkColumnIndex(this, column);
        if (this.isEmpty()) {
          return NaN;
        }
        let v = this.get(0, column);
        for (let i = 1; i < this.rows; i++) {
          if (this.get(i, column) > v) {
            v = this.get(i, column);
          }
        }
        return v;
      }
      maxColumnIndex(column) {
        checkColumnIndex(this, column);
        checkNonEmpty(this);
        let v = this.get(0, column);
        let idx = [0, column];
        for (let i = 1; i < this.rows; i++) {
          if (this.get(i, column) > v) {
            v = this.get(i, column);
            idx[0] = i;
          }
        }
        return idx;
      }
      minColumn(column) {
        checkColumnIndex(this, column);
        if (this.isEmpty()) {
          return NaN;
        }
        let v = this.get(0, column);
        for (let i = 1; i < this.rows; i++) {
          if (this.get(i, column) < v) {
            v = this.get(i, column);
          }
        }
        return v;
      }
      minColumnIndex(column) {
        checkColumnIndex(this, column);
        checkNonEmpty(this);
        let v = this.get(0, column);
        let idx = [0, column];
        for (let i = 1; i < this.rows; i++) {
          if (this.get(i, column) < v) {
            v = this.get(i, column);
            idx[0] = i;
          }
        }
        return idx;
      }
      diag() {
        let min = Math.min(this.rows, this.columns);
        let diag = [];
        for (let i = 0; i < min; i++) {
          diag.push(this.get(i, i));
        }
        return diag;
      }
      norm(type = "frobenius") {
        switch (type) {
          case "max":
            return this.max();
          case "frobenius":
            return Math.sqrt(this.dot(this));
          default:
            throw new RangeError(`unknown norm type: ${type}`);
        }
      }
      cumulativeSum() {
        let sum = 0;
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            sum += this.get(i, j);
            this.set(i, j, sum);
          }
        }
        return this;
      }
      dot(vector2) {
        if (_AbstractMatrix.isMatrix(vector2))
          vector2 = vector2.to1DArray();
        let vector1 = this.to1DArray();
        if (vector1.length !== vector2.length) {
          throw new RangeError("vectors do not have the same size");
        }
        let dot = 0;
        for (let i = 0; i < vector1.length; i++) {
          dot += vector1[i] * vector2[i];
        }
        return dot;
      }
      mmul(other) {
        other = Matrix.checkMatrix(other);
        let m = this.rows;
        let n = this.columns;
        let p = other.columns;
        let result = new Matrix(m, p);
        let Bcolj = new Float64Array(n);
        for (let j = 0; j < p; j++) {
          for (let k = 0; k < n; k++) {
            Bcolj[k] = other.get(k, j);
          }
          for (let i = 0; i < m; i++) {
            let s = 0;
            for (let k = 0; k < n; k++) {
              s += this.get(i, k) * Bcolj[k];
            }
            result.set(i, j, s);
          }
        }
        return result;
      }
      mpow(scalar) {
        if (!this.isSquare()) {
          throw new RangeError("Matrix must be square");
        }
        if (!Number.isInteger(scalar) || scalar < 0) {
          throw new RangeError("Exponent must be a non-negative integer");
        }
        let result = Matrix.eye(this.rows);
        let bb = this;
        for (let e = scalar; e > 1; e /= 2) {
          if ((e & 1) !== 0) {
            result = result.mmul(bb);
          }
          bb = bb.mmul(bb);
        }
        return result;
      }
      strassen2x2(other) {
        other = Matrix.checkMatrix(other);
        let result = new Matrix(2, 2);
        const a11 = this.get(0, 0);
        const b11 = other.get(0, 0);
        const a12 = this.get(0, 1);
        const b12 = other.get(0, 1);
        const a21 = this.get(1, 0);
        const b21 = other.get(1, 0);
        const a22 = this.get(1, 1);
        const b22 = other.get(1, 1);
        const m1 = (a11 + a22) * (b11 + b22);
        const m2 = (a21 + a22) * b11;
        const m3 = a11 * (b12 - b22);
        const m4 = a22 * (b21 - b11);
        const m5 = (a11 + a12) * b22;
        const m6 = (a21 - a11) * (b11 + b12);
        const m7 = (a12 - a22) * (b21 + b22);
        const c00 = m1 + m4 - m5 + m7;
        const c01 = m3 + m5;
        const c10 = m2 + m4;
        const c11 = m1 - m2 + m3 + m6;
        result.set(0, 0, c00);
        result.set(0, 1, c01);
        result.set(1, 0, c10);
        result.set(1, 1, c11);
        return result;
      }
      strassen3x3(other) {
        other = Matrix.checkMatrix(other);
        let result = new Matrix(3, 3);
        const a00 = this.get(0, 0);
        const a01 = this.get(0, 1);
        const a02 = this.get(0, 2);
        const a10 = this.get(1, 0);
        const a11 = this.get(1, 1);
        const a12 = this.get(1, 2);
        const a20 = this.get(2, 0);
        const a21 = this.get(2, 1);
        const a22 = this.get(2, 2);
        const b00 = other.get(0, 0);
        const b01 = other.get(0, 1);
        const b02 = other.get(0, 2);
        const b10 = other.get(1, 0);
        const b11 = other.get(1, 1);
        const b12 = other.get(1, 2);
        const b20 = other.get(2, 0);
        const b21 = other.get(2, 1);
        const b22 = other.get(2, 2);
        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
        const m2 = (a00 - a10) * (-b01 + b11);
        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
        const m5 = (a10 + a11) * (-b00 + b01);
        const m6 = a00 * b00;
        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
        const m8 = (-a00 + a20) * (b02 - b12);
        const m9 = (a20 + a21) * (-b00 + b02);
        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
        const m13 = (a02 - a22) * (b11 - b21);
        const m14 = a02 * b20;
        const m15 = (a21 + a22) * (-b20 + b21);
        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
        const m17 = (a02 - a12) * (b12 - b22);
        const m18 = (a11 + a12) * (-b20 + b22);
        const m19 = a01 * b10;
        const m20 = a12 * b21;
        const m21 = a10 * b02;
        const m22 = a20 * b01;
        const m23 = a22 * b22;
        const c00 = m6 + m14 + m19;
        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
        const c11 = m2 + m4 + m5 + m6 + m20;
        const c12 = m14 + m16 + m17 + m18 + m21;
        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
        const c21 = m12 + m13 + m14 + m15 + m22;
        const c22 = m6 + m7 + m8 + m9 + m23;
        result.set(0, 0, c00);
        result.set(0, 1, c01);
        result.set(0, 2, c02);
        result.set(1, 0, c10);
        result.set(1, 1, c11);
        result.set(1, 2, c12);
        result.set(2, 0, c20);
        result.set(2, 1, c21);
        result.set(2, 2, c22);
        return result;
      }
      mmulStrassen(y) {
        y = Matrix.checkMatrix(y);
        let x = this.clone();
        let r1 = x.rows;
        let c1 = x.columns;
        let r2 = y.rows;
        let c2 = y.columns;
        if (c1 !== r2) {
          console.warn(
            `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`
          );
        }
        function embed(mat, rows, cols) {
          let r3 = mat.rows;
          let c3 = mat.columns;
          if (r3 === rows && c3 === cols) {
            return mat;
          } else {
            let resultat = _AbstractMatrix.zeros(rows, cols);
            resultat = resultat.setSubMatrix(mat, 0, 0);
            return resultat;
          }
        }
        let r = Math.max(r1, r2);
        let c = Math.max(c1, c2);
        x = embed(x, r, c);
        y = embed(y, r, c);
        function blockMult(a, b, rows, cols) {
          if (rows <= 512 || cols <= 512) {
            return a.mmul(b);
          }
          if (rows % 2 === 1 && cols % 2 === 1) {
            a = embed(a, rows + 1, cols + 1);
            b = embed(b, rows + 1, cols + 1);
          } else if (rows % 2 === 1) {
            a = embed(a, rows + 1, cols);
            b = embed(b, rows + 1, cols);
          } else if (cols % 2 === 1) {
            a = embed(a, rows, cols + 1);
            b = embed(b, rows, cols + 1);
          }
          let halfRows = parseInt(a.rows / 2, 10);
          let halfCols = parseInt(a.columns / 2, 10);
          let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
          let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);
          let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
          let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);
          let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
          let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);
          let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
          let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);
          let m1 = blockMult(
            _AbstractMatrix.add(a11, a22),
            _AbstractMatrix.add(b11, b22),
            halfRows,
            halfCols
          );
          let m2 = blockMult(_AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);
          let m3 = blockMult(a11, _AbstractMatrix.sub(b12, b22), halfRows, halfCols);
          let m4 = blockMult(a22, _AbstractMatrix.sub(b21, b11), halfRows, halfCols);
          let m5 = blockMult(_AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);
          let m6 = blockMult(
            _AbstractMatrix.sub(a21, a11),
            _AbstractMatrix.add(b11, b12),
            halfRows,
            halfCols
          );
          let m7 = blockMult(
            _AbstractMatrix.sub(a12, a22),
            _AbstractMatrix.add(b21, b22),
            halfRows,
            halfCols
          );
          let c11 = _AbstractMatrix.add(m1, m4);
          c11.sub(m5);
          c11.add(m7);
          let c12 = _AbstractMatrix.add(m3, m5);
          let c21 = _AbstractMatrix.add(m2, m4);
          let c22 = _AbstractMatrix.sub(m1, m2);
          c22.add(m3);
          c22.add(m6);
          let result = _AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);
          result = result.setSubMatrix(c11, 0, 0);
          result = result.setSubMatrix(c12, c11.rows, 0);
          result = result.setSubMatrix(c21, 0, c11.columns);
          result = result.setSubMatrix(c22, c11.rows, c11.columns);
          return result.subMatrix(0, rows - 1, 0, cols - 1);
        }
        return blockMult(x, y, r, c);
      }
      scaleRows(options = {}) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { min = 0, max = 1 } = options;
        if (!Number.isFinite(min))
          throw new TypeError("min must be a number");
        if (!Number.isFinite(max))
          throw new TypeError("max must be a number");
        if (min >= max)
          throw new RangeError("min must be smaller than max");
        let newMatrix = new Matrix(this.rows, this.columns);
        for (let i = 0; i < this.rows; i++) {
          const row = this.getRow(i);
          if (row.length > 0) {
            rescale(row, { min, max, output: row });
          }
          newMatrix.setRow(i, row);
        }
        return newMatrix;
      }
      scaleColumns(options = {}) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { min = 0, max = 1 } = options;
        if (!Number.isFinite(min))
          throw new TypeError("min must be a number");
        if (!Number.isFinite(max))
          throw new TypeError("max must be a number");
        if (min >= max)
          throw new RangeError("min must be smaller than max");
        let newMatrix = new Matrix(this.rows, this.columns);
        for (let i = 0; i < this.columns; i++) {
          const column = this.getColumn(i);
          if (column.length) {
            rescale(column, {
              min,
              max,
              output: column
            });
          }
          newMatrix.setColumn(i, column);
        }
        return newMatrix;
      }
      flipRows() {
        const middle = Math.ceil(this.columns / 2);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < middle; j++) {
            let first = this.get(i, j);
            let last = this.get(i, this.columns - 1 - j);
            this.set(i, j, last);
            this.set(i, this.columns - 1 - j, first);
          }
        }
        return this;
      }
      flipColumns() {
        const middle = Math.ceil(this.rows / 2);
        for (let j = 0; j < this.columns; j++) {
          for (let i = 0; i < middle; i++) {
            let first = this.get(i, j);
            let last = this.get(this.rows - 1 - i, j);
            this.set(i, j, last);
            this.set(this.rows - 1 - i, j, first);
          }
        }
        return this;
      }
      kroneckerProduct(other) {
        other = Matrix.checkMatrix(other);
        let m = this.rows;
        let n = this.columns;
        let p = other.rows;
        let q = other.columns;
        let result = new Matrix(m * p, n * q);
        for (let i = 0; i < m; i++) {
          for (let j = 0; j < n; j++) {
            for (let k = 0; k < p; k++) {
              for (let l = 0; l < q; l++) {
                result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));
              }
            }
          }
        }
        return result;
      }
      kroneckerSum(other) {
        other = Matrix.checkMatrix(other);
        if (!this.isSquare() || !other.isSquare()) {
          throw new Error("Kronecker Sum needs two Square Matrices");
        }
        let m = this.rows;
        let n = other.rows;
        let AxI = this.kroneckerProduct(Matrix.eye(n, n));
        let IxB = Matrix.eye(m, m).kroneckerProduct(other);
        return AxI.add(IxB);
      }
      transpose() {
        let result = new Matrix(this.columns, this.rows);
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            result.set(j, i, this.get(i, j));
          }
        }
        return result;
      }
      sortRows(compareFunction = compareNumbers) {
        for (let i = 0; i < this.rows; i++) {
          this.setRow(i, this.getRow(i).sort(compareFunction));
        }
        return this;
      }
      sortColumns(compareFunction = compareNumbers) {
        for (let i = 0; i < this.columns; i++) {
          this.setColumn(i, this.getColumn(i).sort(compareFunction));
        }
        return this;
      }
      subMatrix(startRow, endRow, startColumn, endColumn) {
        checkRange(this, startRow, endRow, startColumn, endColumn);
        let newMatrix = new Matrix(
          endRow - startRow + 1,
          endColumn - startColumn + 1
        );
        for (let i = startRow; i <= endRow; i++) {
          for (let j = startColumn; j <= endColumn; j++) {
            newMatrix.set(i - startRow, j - startColumn, this.get(i, j));
          }
        }
        return newMatrix;
      }
      subMatrixRow(indices, startColumn, endColumn) {
        if (startColumn === void 0)
          startColumn = 0;
        if (endColumn === void 0)
          endColumn = this.columns - 1;
        if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {
          throw new RangeError("Argument out of range");
        }
        let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);
        for (let i = 0; i < indices.length; i++) {
          for (let j = startColumn; j <= endColumn; j++) {
            if (indices[i] < 0 || indices[i] >= this.rows) {
              throw new RangeError(`Row index out of range: ${indices[i]}`);
            }
            newMatrix.set(i, j - startColumn, this.get(indices[i], j));
          }
        }
        return newMatrix;
      }
      subMatrixColumn(indices, startRow, endRow) {
        if (startRow === void 0)
          startRow = 0;
        if (endRow === void 0)
          endRow = this.rows - 1;
        if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {
          throw new RangeError("Argument out of range");
        }
        let newMatrix = new Matrix(endRow - startRow + 1, indices.length);
        for (let i = 0; i < indices.length; i++) {
          for (let j = startRow; j <= endRow; j++) {
            if (indices[i] < 0 || indices[i] >= this.columns) {
              throw new RangeError(`Column index out of range: ${indices[i]}`);
            }
            newMatrix.set(j - startRow, i, this.get(j, indices[i]));
          }
        }
        return newMatrix;
      }
      setSubMatrix(matrix, startRow, startColumn) {
        matrix = Matrix.checkMatrix(matrix);
        if (matrix.isEmpty()) {
          return this;
        }
        let endRow = startRow + matrix.rows - 1;
        let endColumn = startColumn + matrix.columns - 1;
        checkRange(this, startRow, endRow, startColumn, endColumn);
        for (let i = 0; i < matrix.rows; i++) {
          for (let j = 0; j < matrix.columns; j++) {
            this.set(startRow + i, startColumn + j, matrix.get(i, j));
          }
        }
        return this;
      }
      selection(rowIndices, columnIndices) {
        checkRowIndices(this, rowIndices);
        checkColumnIndices(this, columnIndices);
        let newMatrix = new Matrix(rowIndices.length, columnIndices.length);
        for (let i = 0; i < rowIndices.length; i++) {
          let rowIndex = rowIndices[i];
          for (let j = 0; j < columnIndices.length; j++) {
            let columnIndex = columnIndices[j];
            newMatrix.set(i, j, this.get(rowIndex, columnIndex));
          }
        }
        return newMatrix;
      }
      trace() {
        let min = Math.min(this.rows, this.columns);
        let trace = 0;
        for (let i = 0; i < min; i++) {
          trace += this.get(i, i);
        }
        return trace;
      }
      clone() {
        return this.constructor.copy(this, new Matrix(this.rows, this.columns));
      }
      /**
       * @template {AbstractMatrix} M
       * @param {AbstractMatrix} from
       * @param {M} to
       * @return {M}
       */
      static copy(from, to) {
        for (const [row, column, value] of from.entries()) {
          to.set(row, column, value);
        }
        return to;
      }
      sum(by) {
        switch (by) {
          case "row":
            return sumByRow(this);
          case "column":
            return sumByColumn(this);
          case void 0:
            return sumAll(this);
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      product(by) {
        switch (by) {
          case "row":
            return productByRow(this);
          case "column":
            return productByColumn(this);
          case void 0:
            return productAll(this);
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      mean(by) {
        const sum = this.sum(by);
        switch (by) {
          case "row": {
            for (let i = 0; i < this.rows; i++) {
              sum[i] /= this.columns;
            }
            return sum;
          }
          case "column": {
            for (let i = 0; i < this.columns; i++) {
              sum[i] /= this.rows;
            }
            return sum;
          }
          case void 0:
            return sum / this.size;
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      variance(by, options = {}) {
        if (typeof by === "object") {
          options = by;
          by = void 0;
        }
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { unbiased = true, mean = this.mean(by) } = options;
        if (typeof unbiased !== "boolean") {
          throw new TypeError("unbiased must be a boolean");
        }
        switch (by) {
          case "row": {
            if (!isAnyArray.isAnyArray(mean)) {
              throw new TypeError("mean must be an array");
            }
            return varianceByRow(this, unbiased, mean);
          }
          case "column": {
            if (!isAnyArray.isAnyArray(mean)) {
              throw new TypeError("mean must be an array");
            }
            return varianceByColumn(this, unbiased, mean);
          }
          case void 0: {
            if (typeof mean !== "number") {
              throw new TypeError("mean must be a number");
            }
            return varianceAll(this, unbiased, mean);
          }
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      standardDeviation(by, options) {
        if (typeof by === "object") {
          options = by;
          by = void 0;
        }
        const variance = this.variance(by, options);
        if (by === void 0) {
          return Math.sqrt(variance);
        } else {
          for (let i = 0; i < variance.length; i++) {
            variance[i] = Math.sqrt(variance[i]);
          }
          return variance;
        }
      }
      center(by, options = {}) {
        if (typeof by === "object") {
          options = by;
          by = void 0;
        }
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        const { center = this.mean(by) } = options;
        switch (by) {
          case "row": {
            if (!isAnyArray.isAnyArray(center)) {
              throw new TypeError("center must be an array");
            }
            centerByRow(this, center);
            return this;
          }
          case "column": {
            if (!isAnyArray.isAnyArray(center)) {
              throw new TypeError("center must be an array");
            }
            centerByColumn(this, center);
            return this;
          }
          case void 0: {
            if (typeof center !== "number") {
              throw new TypeError("center must be a number");
            }
            centerAll(this, center);
            return this;
          }
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      scale(by, options = {}) {
        if (typeof by === "object") {
          options = by;
          by = void 0;
        }
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        let scale = options.scale;
        switch (by) {
          case "row": {
            if (scale === void 0) {
              scale = getScaleByRow(this);
            } else if (!isAnyArray.isAnyArray(scale)) {
              throw new TypeError("scale must be an array");
            }
            scaleByRow(this, scale);
            return this;
          }
          case "column": {
            if (scale === void 0) {
              scale = getScaleByColumn(this);
            } else if (!isAnyArray.isAnyArray(scale)) {
              throw new TypeError("scale must be an array");
            }
            scaleByColumn(this, scale);
            return this;
          }
          case void 0: {
            if (scale === void 0) {
              scale = getScaleAll(this);
            } else if (typeof scale !== "number") {
              throw new TypeError("scale must be a number");
            }
            scaleAll(this, scale);
            return this;
          }
          default:
            throw new Error(`invalid option: ${by}`);
        }
      }
      toString(options) {
        return inspectMatrixWithOptions(this, options);
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * iterator from left to right, from top to bottom
       * yield [row, column, value]
       * @returns {Generator<[number, number, number], void, void>}
       */
      *entries() {
        for (let row = 0; row < this.rows; row++) {
          for (let col = 0; col < this.columns; col++) {
            yield [row, col, this.get(row, col)];
          }
        }
      }
      /**
       * iterator from left to right, from top to bottom
       * yield value
       * @returns {Generator<number, void, void>}
       */
      *values() {
        for (let row = 0; row < this.rows; row++) {
          for (let col = 0; col < this.columns; col++) {
            yield this.get(row, col);
          }
        }
      }
    };
    AbstractMatrix.prototype.klass = "Matrix";
    if (typeof Symbol !== "undefined") {
      AbstractMatrix.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspectMatrix;
    }
    function compareNumbers(a, b) {
      return a - b;
    }
    function isArrayOfNumbers(array) {
      return array.every((element) => {
        return typeof element === "number";
      });
    }
    AbstractMatrix.random = AbstractMatrix.rand;
    AbstractMatrix.randomInt = AbstractMatrix.randInt;
    AbstractMatrix.diagonal = AbstractMatrix.diag;
    AbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;
    AbstractMatrix.identity = AbstractMatrix.eye;
    AbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;
    AbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;
    var Matrix = class _Matrix extends AbstractMatrix {
      /**
       * @type {Float64Array[]}
       */
      data;
      /**
       * Init an empty matrix
       * @param {number} nRows
       * @param {number} nColumns
       */
      #initData(nRows, nColumns) {
        this.data = [];
        if (Number.isInteger(nColumns) && nColumns >= 0) {
          for (let i = 0; i < nRows; i++) {
            this.data.push(new Float64Array(nColumns));
          }
        } else {
          throw new TypeError("nColumns must be a positive integer");
        }
        this.rows = nRows;
        this.columns = nColumns;
      }
      constructor(nRows, nColumns) {
        super();
        if (_Matrix.isMatrix(nRows)) {
          this.#initData(nRows.rows, nRows.columns);
          _Matrix.copy(nRows, this);
        } else if (Number.isInteger(nRows) && nRows >= 0) {
          this.#initData(nRows, nColumns);
        } else if (isAnyArray.isAnyArray(nRows)) {
          const arrayData = nRows;
          nRows = arrayData.length;
          nColumns = nRows ? arrayData[0].length : 0;
          if (typeof nColumns !== "number") {
            throw new TypeError(
              "Data must be a 2D array with at least one element"
            );
          }
          this.data = [];
          for (let i = 0; i < nRows; i++) {
            if (arrayData[i].length !== nColumns) {
              throw new RangeError("Inconsistent array dimensions");
            }
            if (!isArrayOfNumbers(arrayData[i])) {
              throw new TypeError("Input data contains non-numeric values");
            }
            this.data.push(Float64Array.from(arrayData[i]));
          }
          this.rows = nRows;
          this.columns = nColumns;
        } else {
          throw new TypeError(
            "First argument must be a positive number or an array"
          );
        }
      }
      set(rowIndex, columnIndex, value) {
        this.data[rowIndex][columnIndex] = value;
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.data[rowIndex][columnIndex];
      }
      removeRow(index) {
        checkRowIndex(this, index);
        this.data.splice(index, 1);
        this.rows -= 1;
        return this;
      }
      addRow(index, array) {
        if (array === void 0) {
          array = index;
          index = this.rows;
        }
        checkRowIndex(this, index, true);
        array = Float64Array.from(checkRowVector(this, array));
        this.data.splice(index, 0, array);
        this.rows += 1;
        return this;
      }
      removeColumn(index) {
        checkColumnIndex(this, index);
        for (let i = 0; i < this.rows; i++) {
          const newRow = new Float64Array(this.columns - 1);
          for (let j = 0; j < index; j++) {
            newRow[j] = this.data[i][j];
          }
          for (let j = index + 1; j < this.columns; j++) {
            newRow[j - 1] = this.data[i][j];
          }
          this.data[i] = newRow;
        }
        this.columns -= 1;
        return this;
      }
      addColumn(index, array) {
        if (typeof array === "undefined") {
          array = index;
          index = this.columns;
        }
        checkColumnIndex(this, index, true);
        array = checkColumnVector(this, array);
        for (let i = 0; i < this.rows; i++) {
          const newRow = new Float64Array(this.columns + 1);
          let j = 0;
          for (; j < index; j++) {
            newRow[j] = this.data[i][j];
          }
          newRow[j++] = array[i];
          for (; j < this.columns + 1; j++) {
            newRow[j] = this.data[i][j - 1];
          }
          this.data[i] = newRow;
        }
        this.columns += 1;
        return this;
      }
    };
    installMathOperations(AbstractMatrix, Matrix);
    var SymmetricMatrix = class _SymmetricMatrix extends AbstractMatrix {
      /** @type {Matrix} */
      #matrix;
      get size() {
        return this.#matrix.size;
      }
      get rows() {
        return this.#matrix.rows;
      }
      get columns() {
        return this.#matrix.columns;
      }
      get diagonalSize() {
        return this.rows;
      }
      /**
       * not the same as matrix.isSymmetric()
       * Here is to check if it's instanceof SymmetricMatrix without bundling issues
       *
       * @param value
       * @returns {boolean}
       */
      static isSymmetricMatrix(value) {
        return Matrix.isMatrix(value) && value.klassType === "SymmetricMatrix";
      }
      /**
       * @param diagonalSize
       * @return {SymmetricMatrix}
       */
      static zeros(diagonalSize) {
        return new this(diagonalSize);
      }
      /**
       * @param diagonalSize
       * @return {SymmetricMatrix}
       */
      static ones(diagonalSize) {
        return new this(diagonalSize).fill(1);
      }
      /**
       * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize
       * @return {this}
       */
      constructor(diagonalSize) {
        super();
        if (Matrix.isMatrix(diagonalSize)) {
          if (!diagonalSize.isSymmetric()) {
            throw new TypeError("not symmetric data");
          }
          this.#matrix = Matrix.copy(
            diagonalSize,
            new Matrix(diagonalSize.rows, diagonalSize.rows)
          );
        } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {
          this.#matrix = new Matrix(diagonalSize, diagonalSize);
        } else {
          this.#matrix = new Matrix(diagonalSize);
          if (!this.isSymmetric()) {
            throw new TypeError("not symmetric data");
          }
        }
      }
      clone() {
        const matrix = new _SymmetricMatrix(this.diagonalSize);
        for (const [row, col, value] of this.upperRightEntries()) {
          matrix.set(row, col, value);
        }
        return matrix;
      }
      toMatrix() {
        return new Matrix(this);
      }
      get(rowIndex, columnIndex) {
        return this.#matrix.get(rowIndex, columnIndex);
      }
      set(rowIndex, columnIndex, value) {
        this.#matrix.set(rowIndex, columnIndex, value);
        this.#matrix.set(columnIndex, rowIndex, value);
        return this;
      }
      removeCross(index) {
        this.#matrix.removeRow(index);
        this.#matrix.removeColumn(index);
        return this;
      }
      addCross(index, array) {
        if (array === void 0) {
          array = index;
          index = this.diagonalSize;
        }
        const row = array.slice();
        row.splice(index, 1);
        this.#matrix.addRow(index, row);
        this.#matrix.addColumn(index, array);
        return this;
      }
      /**
       * @param {Mask[]} mask
       */
      applyMask(mask) {
        if (mask.length !== this.diagonalSize) {
          throw new RangeError("Mask size do not match with matrix size");
        }
        const sidesToRemove = [];
        for (const [index, passthroughs] of mask.entries()) {
          if (passthroughs)
            continue;
          sidesToRemove.push(index);
        }
        sidesToRemove.reverse();
        for (const sideIndex of sidesToRemove) {
          this.removeCross(sideIndex);
        }
        return this;
      }
      /**
       * Compact format upper-right corner of matrix
       * iterate from left to right, from top to bottom.
       *
       * ```
       *   A B C D
       * A 1 2 3 4
       * B 2 5 6 7
       * C 3 6 8 9
       * D 4 7 9 10
       * ```
       *
       * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`
       *
       * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix
       *
       * @returns {number[]}
       */
      toCompact() {
        const { diagonalSize } = this;
        const compact = new Array(diagonalSize * (diagonalSize + 1) / 2);
        for (let col = 0, row = 0, index = 0; index < compact.length; index++) {
          compact[index] = this.get(row, col);
          if (++col >= diagonalSize)
            col = ++row;
        }
        return compact;
      }
      /**
       * @param {number[]} compact
       * @return {SymmetricMatrix}
       */
      static fromCompact(compact) {
        const compactSize = compact.length;
        const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;
        if (!Number.isInteger(diagonalSize)) {
          throw new TypeError(
            `This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(
              compact
            )}`
          );
        }
        const matrix = new _SymmetricMatrix(diagonalSize);
        for (let col = 0, row = 0, index = 0; index < compactSize; index++) {
          matrix.set(col, row, compact[index]);
          if (++col >= diagonalSize)
            col = ++row;
        }
        return matrix;
      }
      /**
       * half iterator upper-right-corner from left to right, from top to bottom
       * yield [row, column, value]
       *
       * @returns {Generator<[number, number, number], void, void>}
       */
      *upperRightEntries() {
        for (let row = 0, col = 0; row < this.diagonalSize; void 0) {
          const value = this.get(row, col);
          yield [row, col, value];
          if (++col >= this.diagonalSize)
            col = ++row;
        }
      }
      /**
       * half iterator upper-right-corner from left to right, from top to bottom
       * yield value
       *
       * @returns {Generator<[number, number, number], void, void>}
       */
      *upperRightValues() {
        for (let row = 0, col = 0; row < this.diagonalSize; void 0) {
          const value = this.get(row, col);
          yield value;
          if (++col >= this.diagonalSize)
            col = ++row;
        }
      }
    };
    SymmetricMatrix.prototype.klassType = "SymmetricMatrix";
    var DistanceMatrix = class _DistanceMatrix extends SymmetricMatrix {
      /**
       * not the same as matrix.isSymmetric()
       * Here is to check if it's instanceof SymmetricMatrix without bundling issues
       *
       * @param value
       * @returns {boolean}
       */
      static isDistanceMatrix(value) {
        return SymmetricMatrix.isSymmetricMatrix(value) && value.klassSubType === "DistanceMatrix";
      }
      constructor(sideSize) {
        super(sideSize);
        if (!this.isDistance()) {
          throw new TypeError("Provided arguments do no produce a distance matrix");
        }
      }
      set(rowIndex, columnIndex, value) {
        if (rowIndex === columnIndex)
          value = 0;
        return super.set(rowIndex, columnIndex, value);
      }
      addCross(index, array) {
        if (array === void 0) {
          array = index;
          index = this.diagonalSize;
        }
        array = array.slice();
        array[index] = 0;
        return super.addCross(index, array);
      }
      toSymmetricMatrix() {
        return new SymmetricMatrix(this);
      }
      clone() {
        const matrix = new _DistanceMatrix(this.diagonalSize);
        for (const [row, col, value] of this.upperRightEntries()) {
          if (row === col)
            continue;
          matrix.set(row, col, value);
        }
        return matrix;
      }
      /**
       * Compact format upper-right corner of matrix
       * no diagonal (only zeros)
       * iterable from left to right, from top to bottom.
       *
       * ```
       *   A B C D
       * A 0 1 2 3
       * B 1 0 4 5
       * C 2 4 0 6
       * D 3 5 6 0
       * ```
       *
       * will return compact 1D array `[1, 2, 3, 4, 5, 6]`
       *
       * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix
       *
       * @returns {number[]}
       */
      toCompact() {
        const { diagonalSize } = this;
        const compactLength = (diagonalSize - 1) * diagonalSize / 2;
        const compact = new Array(compactLength);
        for (let col = 1, row = 0, index = 0; index < compact.length; index++) {
          compact[index] = this.get(row, col);
          if (++col >= diagonalSize)
            col = ++row + 1;
        }
        return compact;
      }
      /**
       * @param {number[]} compact
       */
      static fromCompact(compact) {
        const compactSize = compact.length;
        if (compactSize === 0) {
          return new this(0);
        }
        const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;
        if (!Number.isInteger(diagonalSize)) {
          throw new TypeError(
            `This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(
              compact
            )}`
          );
        }
        const matrix = new this(diagonalSize);
        for (let col = 1, row = 0, index = 0; index < compactSize; index++) {
          matrix.set(col, row, compact[index]);
          if (++col >= diagonalSize)
            col = ++row + 1;
        }
        return matrix;
      }
    };
    DistanceMatrix.prototype.klassSubType = "DistanceMatrix";
    var BaseView = class extends AbstractMatrix {
      constructor(matrix, rows, columns) {
        super();
        this.matrix = matrix;
        this.rows = rows;
        this.columns = columns;
      }
    };
    var MatrixColumnView = class extends BaseView {
      constructor(matrix, column) {
        checkColumnIndex(matrix, column);
        super(matrix, matrix.rows, 1);
        this.column = column;
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(rowIndex, this.column, value);
        return this;
      }
      get(rowIndex) {
        return this.matrix.get(rowIndex, this.column);
      }
    };
    var MatrixColumnSelectionView = class extends BaseView {
      constructor(matrix, columnIndices) {
        checkColumnIndices(matrix, columnIndices);
        super(matrix, matrix.rows, columnIndices.length);
        this.columnIndices = columnIndices;
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
      }
    };
    var MatrixFlipColumnView = class extends BaseView {
      constructor(matrix) {
        super(matrix, matrix.rows, matrix.columns);
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
      }
    };
    var MatrixFlipRowView = class extends BaseView {
      constructor(matrix) {
        super(matrix, matrix.rows, matrix.columns);
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
      }
    };
    var MatrixRowView = class extends BaseView {
      constructor(matrix, row) {
        checkRowIndex(matrix, row);
        super(matrix, 1, matrix.columns);
        this.row = row;
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(this.row, columnIndex, value);
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(this.row, columnIndex);
      }
    };
    var MatrixRowSelectionView = class extends BaseView {
      constructor(matrix, rowIndices) {
        checkRowIndices(matrix, rowIndices);
        super(matrix, rowIndices.length, matrix.columns);
        this.rowIndices = rowIndices;
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
      }
    };
    var MatrixSelectionView = class extends BaseView {
      constructor(matrix, rowIndices, columnIndices) {
        checkRowIndices(matrix, rowIndices);
        checkColumnIndices(matrix, columnIndices);
        super(matrix, rowIndices.length, columnIndices.length);
        this.rowIndices = rowIndices;
        this.columnIndices = columnIndices;
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(
          this.rowIndices[rowIndex],
          this.columnIndices[columnIndex],
          value
        );
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(
          this.rowIndices[rowIndex],
          this.columnIndices[columnIndex]
        );
      }
    };
    var MatrixSubView = class extends BaseView {
      constructor(matrix, startRow, endRow, startColumn, endColumn) {
        checkRange(matrix, startRow, endRow, startColumn, endColumn);
        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
        this.startRow = startRow;
        this.startColumn = startColumn;
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(
          this.startRow + rowIndex,
          this.startColumn + columnIndex,
          value
        );
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(
          this.startRow + rowIndex,
          this.startColumn + columnIndex
        );
      }
    };
    var MatrixTransposeView = class extends BaseView {
      constructor(matrix) {
        super(matrix, matrix.columns, matrix.rows);
      }
      set(rowIndex, columnIndex, value) {
        this.matrix.set(columnIndex, rowIndex, value);
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.matrix.get(columnIndex, rowIndex);
      }
    };
    var WrapperMatrix1D = class extends AbstractMatrix {
      constructor(data, options = {}) {
        const { rows = 1 } = options;
        if (data.length % rows !== 0) {
          throw new Error("the data length is not divisible by the number of rows");
        }
        super();
        this.rows = rows;
        this.columns = data.length / rows;
        this.data = data;
      }
      set(rowIndex, columnIndex, value) {
        let index = this._calculateIndex(rowIndex, columnIndex);
        this.data[index] = value;
        return this;
      }
      get(rowIndex, columnIndex) {
        let index = this._calculateIndex(rowIndex, columnIndex);
        return this.data[index];
      }
      _calculateIndex(row, column) {
        return row * this.columns + column;
      }
    };
    var WrapperMatrix2D = class extends AbstractMatrix {
      constructor(data) {
        super();
        this.data = data;
        this.rows = data.length;
        this.columns = data[0].length;
      }
      set(rowIndex, columnIndex, value) {
        this.data[rowIndex][columnIndex] = value;
        return this;
      }
      get(rowIndex, columnIndex) {
        return this.data[rowIndex][columnIndex];
      }
    };
    function wrap(array, options) {
      if (isAnyArray.isAnyArray(array)) {
        if (array[0] && isAnyArray.isAnyArray(array[0])) {
          return new WrapperMatrix2D(array);
        } else {
          return new WrapperMatrix1D(array, options);
        }
      } else {
        throw new Error("the argument is not an array");
      }
    }
    var LuDecomposition = class {
      constructor(matrix) {
        matrix = WrapperMatrix2D.checkMatrix(matrix);
        let lu = matrix.clone();
        let rows = lu.rows;
        let columns = lu.columns;
        let pivotVector = new Float64Array(rows);
        let pivotSign = 1;
        let i, j, k, p, s, t, v;
        let LUcolj, kmax;
        for (i = 0; i < rows; i++) {
          pivotVector[i] = i;
        }
        LUcolj = new Float64Array(rows);
        for (j = 0; j < columns; j++) {
          for (i = 0; i < rows; i++) {
            LUcolj[i] = lu.get(i, j);
          }
          for (i = 0; i < rows; i++) {
            kmax = Math.min(i, j);
            s = 0;
            for (k = 0; k < kmax; k++) {
              s += lu.get(i, k) * LUcolj[k];
            }
            LUcolj[i] -= s;
            lu.set(i, j, LUcolj[i]);
          }
          p = j;
          for (i = j + 1; i < rows; i++) {
            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
              p = i;
            }
          }
          if (p !== j) {
            for (k = 0; k < columns; k++) {
              t = lu.get(p, k);
              lu.set(p, k, lu.get(j, k));
              lu.set(j, k, t);
            }
            v = pivotVector[p];
            pivotVector[p] = pivotVector[j];
            pivotVector[j] = v;
            pivotSign = -pivotSign;
          }
          if (j < rows && lu.get(j, j) !== 0) {
            for (i = j + 1; i < rows; i++) {
              lu.set(i, j, lu.get(i, j) / lu.get(j, j));
            }
          }
        }
        this.LU = lu;
        this.pivotVector = pivotVector;
        this.pivotSign = pivotSign;
      }
      isSingular() {
        let data = this.LU;
        let col = data.columns;
        for (let j = 0; j < col; j++) {
          if (data.get(j, j) === 0) {
            return true;
          }
        }
        return false;
      }
      solve(value) {
        value = Matrix.checkMatrix(value);
        let lu = this.LU;
        let rows = lu.rows;
        if (rows !== value.rows) {
          throw new Error("Invalid matrix dimensions");
        }
        if (this.isSingular()) {
          throw new Error("LU matrix is singular");
        }
        let count = value.columns;
        let X = value.subMatrixRow(this.pivotVector, 0, count - 1);
        let columns = lu.columns;
        let i, j, k;
        for (k = 0; k < columns; k++) {
          for (i = k + 1; i < columns; i++) {
            for (j = 0; j < count; j++) {
              X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));
            }
          }
        }
        for (k = columns - 1; k >= 0; k--) {
          for (j = 0; j < count; j++) {
            X.set(k, j, X.get(k, j) / lu.get(k, k));
          }
          for (i = 0; i < k; i++) {
            for (j = 0; j < count; j++) {
              X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));
            }
          }
        }
        return X;
      }
      get determinant() {
        let data = this.LU;
        if (!data.isSquare()) {
          throw new Error("Matrix must be square");
        }
        let determinant2 = this.pivotSign;
        let col = data.columns;
        for (let j = 0; j < col; j++) {
          determinant2 *= data.get(j, j);
        }
        return determinant2;
      }
      get lowerTriangularMatrix() {
        let data = this.LU;
        let rows = data.rows;
        let columns = data.columns;
        let X = new Matrix(rows, columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            if (i > j) {
              X.set(i, j, data.get(i, j));
            } else if (i === j) {
              X.set(i, j, 1);
            } else {
              X.set(i, j, 0);
            }
          }
        }
        return X;
      }
      get upperTriangularMatrix() {
        let data = this.LU;
        let rows = data.rows;
        let columns = data.columns;
        let X = new Matrix(rows, columns);
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < columns; j++) {
            if (i <= j) {
              X.set(i, j, data.get(i, j));
            } else {
              X.set(i, j, 0);
            }
          }
        }
        return X;
      }
      get pivotPermutationVector() {
        return Array.from(this.pivotVector);
      }
    };
    function hypotenuse(a, b) {
      let r = 0;
      if (Math.abs(a) > Math.abs(b)) {
        r = b / a;
        return Math.abs(a) * Math.sqrt(1 + r * r);
      }
      if (b !== 0) {
        r = a / b;
        return Math.abs(b) * Math.sqrt(1 + r * r);
      }
      return 0;
    }
    var QrDecomposition = class {
      constructor(value) {
        value = WrapperMatrix2D.checkMatrix(value);
        let qr = value.clone();
        let m = value.rows;
        let n = value.columns;
        let rdiag = new Float64Array(n);
        let i, j, k, s;
        for (k = 0; k < n; k++) {
          let nrm = 0;
          for (i = k; i < m; i++) {
            nrm = hypotenuse(nrm, qr.get(i, k));
          }
          if (nrm !== 0) {
            if (qr.get(k, k) < 0) {
              nrm = -nrm;
            }
            for (i = k; i < m; i++) {
              qr.set(i, k, qr.get(i, k) / nrm);
            }
            qr.set(k, k, qr.get(k, k) + 1);
            for (j = k + 1; j < n; j++) {
              s = 0;
              for (i = k; i < m; i++) {
                s += qr.get(i, k) * qr.get(i, j);
              }
              s = -s / qr.get(k, k);
              for (i = k; i < m; i++) {
                qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));
              }
            }
          }
          rdiag[k] = -nrm;
        }
        this.QR = qr;
        this.Rdiag = rdiag;
      }
      solve(value) {
        value = Matrix.checkMatrix(value);
        let qr = this.QR;
        let m = qr.rows;
        if (value.rows !== m) {
          throw new Error("Matrix row dimensions must agree");
        }
        if (!this.isFullRank()) {
          throw new Error("Matrix is rank deficient");
        }
        let count = value.columns;
        let X = value.clone();
        let n = qr.columns;
        let i, j, k, s;
        for (k = 0; k < n; k++) {
          for (j = 0; j < count; j++) {
            s = 0;
            for (i = k; i < m; i++) {
              s += qr.get(i, k) * X.get(i, j);
            }
            s = -s / qr.get(k, k);
            for (i = k; i < m; i++) {
              X.set(i, j, X.get(i, j) + s * qr.get(i, k));
            }
          }
        }
        for (k = n - 1; k >= 0; k--) {
          for (j = 0; j < count; j++) {
            X.set(k, j, X.get(k, j) / this.Rdiag[k]);
          }
          for (i = 0; i < k; i++) {
            for (j = 0; j < count; j++) {
              X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));
            }
          }
        }
        return X.subMatrix(0, n - 1, 0, count - 1);
      }
      isFullRank() {
        let columns = this.QR.columns;
        for (let i = 0; i < columns; i++) {
          if (this.Rdiag[i] === 0) {
            return false;
          }
        }
        return true;
      }
      get upperTriangularMatrix() {
        let qr = this.QR;
        let n = qr.columns;
        let X = new Matrix(n, n);
        let i, j;
        for (i = 0; i < n; i++) {
          for (j = 0; j < n; j++) {
            if (i < j) {
              X.set(i, j, qr.get(i, j));
            } else if (i === j) {
              X.set(i, j, this.Rdiag[i]);
            } else {
              X.set(i, j, 0);
            }
          }
        }
        return X;
      }
      get orthogonalMatrix() {
        let qr = this.QR;
        let rows = qr.rows;
        let columns = qr.columns;
        let X = new Matrix(rows, columns);
        let i, j, k, s;
        for (k = columns - 1; k >= 0; k--) {
          for (i = 0; i < rows; i++) {
            X.set(i, k, 0);
          }
          X.set(k, k, 1);
          for (j = k; j < columns; j++) {
            if (qr.get(k, k) !== 0) {
              s = 0;
              for (i = k; i < rows; i++) {
                s += qr.get(i, k) * X.get(i, j);
              }
              s = -s / qr.get(k, k);
              for (i = k; i < rows; i++) {
                X.set(i, j, X.get(i, j) + s * qr.get(i, k));
              }
            }
          }
        }
        return X;
      }
    };
    var SingularValueDecomposition = class {
      constructor(value, options = {}) {
        value = WrapperMatrix2D.checkMatrix(value);
        if (value.isEmpty()) {
          throw new Error("Matrix must be non-empty");
        }
        let m = value.rows;
        let n = value.columns;
        const {
          computeLeftSingularVectors = true,
          computeRightSingularVectors = true,
          autoTranspose = false
        } = options;
        let wantu = Boolean(computeLeftSingularVectors);
        let wantv = Boolean(computeRightSingularVectors);
        let swapped = false;
        let a;
        if (m < n) {
          if (!autoTranspose) {
            a = value.clone();
            console.warn(
              "Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose"
            );
          } else {
            a = value.transpose();
            m = a.rows;
            n = a.columns;
            swapped = true;
            let aux = wantu;
            wantu = wantv;
            wantv = aux;
          }
        } else {
          a = value.clone();
        }
        let nu = Math.min(m, n);
        let ni = Math.min(m + 1, n);
        let s = new Float64Array(ni);
        let U = new Matrix(m, nu);
        let V = new Matrix(n, n);
        let e = new Float64Array(n);
        let work = new Float64Array(m);
        let si = new Float64Array(ni);
        for (let i = 0; i < ni; i++)
          si[i] = i;
        let nct = Math.min(m - 1, n);
        let nrt = Math.max(0, Math.min(n - 2, m));
        let mrc = Math.max(nct, nrt);
        for (let k = 0; k < mrc; k++) {
          if (k < nct) {
            s[k] = 0;
            for (let i = k; i < m; i++) {
              s[k] = hypotenuse(s[k], a.get(i, k));
            }
            if (s[k] !== 0) {
              if (a.get(k, k) < 0) {
                s[k] = -s[k];
              }
              for (let i = k; i < m; i++) {
                a.set(i, k, a.get(i, k) / s[k]);
              }
              a.set(k, k, a.get(k, k) + 1);
            }
            s[k] = -s[k];
          }
          for (let j = k + 1; j < n; j++) {
            if (k < nct && s[k] !== 0) {
              let t = 0;
              for (let i = k; i < m; i++) {
                t += a.get(i, k) * a.get(i, j);
              }
              t = -t / a.get(k, k);
              for (let i = k; i < m; i++) {
                a.set(i, j, a.get(i, j) + t * a.get(i, k));
              }
            }
            e[j] = a.get(k, j);
          }
          if (wantu && k < nct) {
            for (let i = k; i < m; i++) {
              U.set(i, k, a.get(i, k));
            }
          }
          if (k < nrt) {
            e[k] = 0;
            for (let i = k + 1; i < n; i++) {
              e[k] = hypotenuse(e[k], e[i]);
            }
            if (e[k] !== 0) {
              if (e[k + 1] < 0) {
                e[k] = 0 - e[k];
              }
              for (let i = k + 1; i < n; i++) {
                e[i] /= e[k];
              }
              e[k + 1] += 1;
            }
            e[k] = -e[k];
            if (k + 1 < m && e[k] !== 0) {
              for (let i = k + 1; i < m; i++) {
                work[i] = 0;
              }
              for (let i = k + 1; i < m; i++) {
                for (let j = k + 1; j < n; j++) {
                  work[i] += e[j] * a.get(i, j);
                }
              }
              for (let j = k + 1; j < n; j++) {
                let t = -e[j] / e[k + 1];
                for (let i = k + 1; i < m; i++) {
                  a.set(i, j, a.get(i, j) + t * work[i]);
                }
              }
            }
            if (wantv) {
              for (let i = k + 1; i < n; i++) {
                V.set(i, k, e[i]);
              }
            }
          }
        }
        let p = Math.min(n, m + 1);
        if (nct < n) {
          s[nct] = a.get(nct, nct);
        }
        if (m < p) {
          s[p - 1] = 0;
        }
        if (nrt + 1 < p) {
          e[nrt] = a.get(nrt, p - 1);
        }
        e[p - 1] = 0;
        if (wantu) {
          for (let j = nct; j < nu; j++) {
            for (let i = 0; i < m; i++) {
              U.set(i, j, 0);
            }
            U.set(j, j, 1);
          }
          for (let k = nct - 1; k >= 0; k--) {
            if (s[k] !== 0) {
              for (let j = k + 1; j < nu; j++) {
                let t = 0;
                for (let i = k; i < m; i++) {
                  t += U.get(i, k) * U.get(i, j);
                }
                t = -t / U.get(k, k);
                for (let i = k; i < m; i++) {
                  U.set(i, j, U.get(i, j) + t * U.get(i, k));
                }
              }
              for (let i = k; i < m; i++) {
                U.set(i, k, -U.get(i, k));
              }
              U.set(k, k, 1 + U.get(k, k));
              for (let i = 0; i < k - 1; i++) {
                U.set(i, k, 0);
              }
            } else {
              for (let i = 0; i < m; i++) {
                U.set(i, k, 0);
              }
              U.set(k, k, 1);
            }
          }
        }
        if (wantv) {
          for (let k = n - 1; k >= 0; k--) {
            if (k < nrt && e[k] !== 0) {
              for (let j = k + 1; j < n; j++) {
                let t = 0;
                for (let i = k + 1; i < n; i++) {
                  t += V.get(i, k) * V.get(i, j);
                }
                t = -t / V.get(k + 1, k);
                for (let i = k + 1; i < n; i++) {
                  V.set(i, j, V.get(i, j) + t * V.get(i, k));
                }
              }
            }
            for (let i = 0; i < n; i++) {
              V.set(i, k, 0);
            }
            V.set(k, k, 1);
          }
        }
        let pp = p - 1;
        let eps = Number.EPSILON;
        while (p > 0) {
          let k, kase;
          for (k = p - 2; k >= -1; k--) {
            if (k === -1) {
              break;
            }
            const alpha = Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));
            if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {
              e[k] = 0;
              break;
            }
          }
          if (k === p - 2) {
            kase = 4;
          } else {
            let ks;
            for (ks = p - 1; ks >= k; ks--) {
              if (ks === k) {
                break;
              }
              let t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
              if (Math.abs(s[ks]) <= eps * t) {
                s[ks] = 0;
                break;
              }
            }
            if (ks === k) {
              kase = 3;
            } else if (ks === p - 1) {
              kase = 1;
            } else {
              kase = 2;
              k = ks;
            }
          }
          k++;
          switch (kase) {
            case 1: {
              let f = e[p - 2];
              e[p - 2] = 0;
              for (let j = p - 2; j >= k; j--) {
                let t = hypotenuse(s[j], f);
                let cs = s[j] / t;
                let sn = f / t;
                s[j] = t;
                if (j !== k) {
                  f = -sn * e[j - 1];
                  e[j - 1] = cs * e[j - 1];
                }
                if (wantv) {
                  for (let i = 0; i < n; i++) {
                    t = cs * V.get(i, j) + sn * V.get(i, p - 1);
                    V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));
                    V.set(i, j, t);
                  }
                }
              }
              break;
            }
            case 2: {
              let f = e[k - 1];
              e[k - 1] = 0;
              for (let j = k; j < p; j++) {
                let t = hypotenuse(s[j], f);
                let cs = s[j] / t;
                let sn = f / t;
                s[j] = t;
                f = -sn * e[j];
                e[j] = cs * e[j];
                if (wantu) {
                  for (let i = 0; i < m; i++) {
                    t = cs * U.get(i, j) + sn * U.get(i, k - 1);
                    U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));
                    U.set(i, j, t);
                  }
                }
              }
              break;
            }
            case 3: {
              const scale = Math.max(
                Math.abs(s[p - 1]),
                Math.abs(s[p - 2]),
                Math.abs(e[p - 2]),
                Math.abs(s[k]),
                Math.abs(e[k])
              );
              const sp = s[p - 1] / scale;
              const spm1 = s[p - 2] / scale;
              const epm1 = e[p - 2] / scale;
              const sk = s[k] / scale;
              const ek = e[k] / scale;
              const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
              const c = sp * epm1 * (sp * epm1);
              let shift = 0;
              if (b !== 0 || c !== 0) {
                if (b < 0) {
                  shift = 0 - Math.sqrt(b * b + c);
                } else {
                  shift = Math.sqrt(b * b + c);
                }
                shift = c / (b + shift);
              }
              let f = (sk + sp) * (sk - sp) + shift;
              let g = sk * ek;
              for (let j = k; j < p - 1; j++) {
                let t = hypotenuse(f, g);
                if (t === 0)
                  t = Number.MIN_VALUE;
                let cs = f / t;
                let sn = g / t;
                if (j !== k) {
                  e[j - 1] = t;
                }
                f = cs * s[j] + sn * e[j];
                e[j] = cs * e[j] - sn * s[j];
                g = sn * s[j + 1];
                s[j + 1] = cs * s[j + 1];
                if (wantv) {
                  for (let i = 0; i < n; i++) {
                    t = cs * V.get(i, j) + sn * V.get(i, j + 1);
                    V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));
                    V.set(i, j, t);
                  }
                }
                t = hypotenuse(f, g);
                if (t === 0)
                  t = Number.MIN_VALUE;
                cs = f / t;
                sn = g / t;
                s[j] = t;
                f = cs * e[j] + sn * s[j + 1];
                s[j + 1] = -sn * e[j] + cs * s[j + 1];
                g = sn * e[j + 1];
                e[j + 1] = cs * e[j + 1];
                if (wantu && j < m - 1) {
                  for (let i = 0; i < m; i++) {
                    t = cs * U.get(i, j) + sn * U.get(i, j + 1);
                    U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));
                    U.set(i, j, t);
                  }
                }
              }
              e[p - 2] = f;
              break;
            }
            case 4: {
              if (s[k] <= 0) {
                s[k] = s[k] < 0 ? -s[k] : 0;
                if (wantv) {
                  for (let i = 0; i <= pp; i++) {
                    V.set(i, k, -V.get(i, k));
                  }
                }
              }
              while (k < pp) {
                if (s[k] >= s[k + 1]) {
                  break;
                }
                let t = s[k];
                s[k] = s[k + 1];
                s[k + 1] = t;
                if (wantv && k < n - 1) {
                  for (let i = 0; i < n; i++) {
                    t = V.get(i, k + 1);
                    V.set(i, k + 1, V.get(i, k));
                    V.set(i, k, t);
                  }
                }
                if (wantu && k < m - 1) {
                  for (let i = 0; i < m; i++) {
                    t = U.get(i, k + 1);
                    U.set(i, k + 1, U.get(i, k));
                    U.set(i, k, t);
                  }
                }
                k++;
              }
              p--;
              break;
            }
          }
        }
        if (swapped) {
          let tmp = V;
          V = U;
          U = tmp;
        }
        this.m = m;
        this.n = n;
        this.s = s;
        this.U = U;
        this.V = V;
      }
      solve(value) {
        let Y = value;
        let e = this.threshold;
        let scols = this.s.length;
        let Ls = Matrix.zeros(scols, scols);
        for (let i = 0; i < scols; i++) {
          if (Math.abs(this.s[i]) <= e) {
            Ls.set(i, i, 0);
          } else {
            Ls.set(i, i, 1 / this.s[i]);
          }
        }
        let U = this.U;
        let V = this.rightSingularVectors;
        let VL = V.mmul(Ls);
        let vrows = V.rows;
        let urows = U.rows;
        let VLU = Matrix.zeros(vrows, urows);
        for (let i = 0; i < vrows; i++) {
          for (let j = 0; j < urows; j++) {
            let sum = 0;
            for (let k = 0; k < scols; k++) {
              sum += VL.get(i, k) * U.get(j, k);
            }
            VLU.set(i, j, sum);
          }
        }
        return VLU.mmul(Y);
      }
      solveForDiagonal(value) {
        return this.solve(Matrix.diag(value));
      }
      inverse() {
        let V = this.V;
        let e = this.threshold;
        let vrows = V.rows;
        let vcols = V.columns;
        let X = new Matrix(vrows, this.s.length);
        for (let i = 0; i < vrows; i++) {
          for (let j = 0; j < vcols; j++) {
            if (Math.abs(this.s[j]) > e) {
              X.set(i, j, V.get(i, j) / this.s[j]);
            }
          }
        }
        let U = this.U;
        let urows = U.rows;
        let ucols = U.columns;
        let Y = new Matrix(vrows, urows);
        for (let i = 0; i < vrows; i++) {
          for (let j = 0; j < urows; j++) {
            let sum = 0;
            for (let k = 0; k < ucols; k++) {
              sum += X.get(i, k) * U.get(j, k);
            }
            Y.set(i, j, sum);
          }
        }
        return Y;
      }
      get condition() {
        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
      }
      get norm2() {
        return this.s[0];
      }
      get rank() {
        let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
        let r = 0;
        let s = this.s;
        for (let i = 0, ii = s.length; i < ii; i++) {
          if (s[i] > tol) {
            r++;
          }
        }
        return r;
      }
      get diagonal() {
        return Array.from(this.s);
      }
      get threshold() {
        return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];
      }
      get leftSingularVectors() {
        return this.U;
      }
      get rightSingularVectors() {
        return this.V;
      }
      get diagonalMatrix() {
        return Matrix.diag(this.s);
      }
    };
    function inverse(matrix, useSVD = false) {
      matrix = WrapperMatrix2D.checkMatrix(matrix);
      if (useSVD) {
        return new SingularValueDecomposition(matrix).inverse();
      } else {
        return solve(matrix, Matrix.eye(matrix.rows));
      }
    }
    function solve(leftHandSide, rightHandSide, useSVD = false) {
      leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);
      rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);
      if (useSVD) {
        return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);
      } else {
        return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);
      }
    }
    function determinant(matrix) {
      matrix = Matrix.checkMatrix(matrix);
      if (matrix.isSquare()) {
        if (matrix.columns === 0) {
          return 1;
        }
        let a, b, c, d;
        if (matrix.columns === 2) {
          a = matrix.get(0, 0);
          b = matrix.get(0, 1);
          c = matrix.get(1, 0);
          d = matrix.get(1, 1);
          return a * d - b * c;
        } else if (matrix.columns === 3) {
          let subMatrix0, subMatrix1, subMatrix2;
          subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);
          subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);
          subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);
          a = matrix.get(0, 0);
          b = matrix.get(0, 1);
          c = matrix.get(0, 2);
          return a * determinant(subMatrix0) - b * determinant(subMatrix1) + c * determinant(subMatrix2);
        } else {
          return new LuDecomposition(matrix).determinant;
        }
      } else {
        throw Error("determinant can only be calculated for a square matrix");
      }
    }
    function xrange(n, exception) {
      let range = [];
      for (let i = 0; i < n; i++) {
        if (i !== exception) {
          range.push(i);
        }
      }
      return range;
    }
    function dependenciesOneRow(error, matrix, index, thresholdValue = 1e-9, thresholdError = 1e-9) {
      if (error > thresholdError) {
        return new Array(matrix.rows + 1).fill(0);
      } else {
        let returnArray = matrix.addRow(index, [0]);
        for (let i = 0; i < returnArray.rows; i++) {
          if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {
            returnArray.set(i, 0, 0);
          }
        }
        return returnArray.to1DArray();
      }
    }
    function linearDependencies(matrix, options = {}) {
      const { thresholdValue = 1e-9, thresholdError = 1e-9 } = options;
      matrix = Matrix.checkMatrix(matrix);
      let n = matrix.rows;
      let results = new Matrix(n, n);
      for (let i = 0; i < n; i++) {
        let b = Matrix.columnVector(matrix.getRow(i));
        let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();
        let svd = new SingularValueDecomposition(Abis);
        let x = svd.solve(b);
        let error = Matrix.sub(b, Abis.mmul(x)).abs().max();
        results.setRow(
          i,
          dependenciesOneRow(error, x, i, thresholdValue, thresholdError)
        );
      }
      return results;
    }
    function pseudoInverse(matrix, threshold = Number.EPSILON) {
      matrix = Matrix.checkMatrix(matrix);
      if (matrix.isEmpty()) {
        return matrix.transpose();
      }
      let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });
      let U = svdSolution.leftSingularVectors;
      let V = svdSolution.rightSingularVectors;
      let s = svdSolution.diagonal;
      for (let i = 0; i < s.length; i++) {
        if (Math.abs(s[i]) > threshold) {
          s[i] = 1 / s[i];
        } else {
          s[i] = 0;
        }
      }
      return V.mmul(Matrix.diag(s).mmul(U.transpose()));
    }
    function covariance(xMatrix, yMatrix = xMatrix, options = {}) {
      xMatrix = new Matrix(xMatrix);
      let yIsSame = false;
      if (typeof yMatrix === "object" && !Matrix.isMatrix(yMatrix) && !isAnyArray.isAnyArray(yMatrix)) {
        options = yMatrix;
        yMatrix = xMatrix;
        yIsSame = true;
      } else {
        yMatrix = new Matrix(yMatrix);
      }
      if (xMatrix.rows !== yMatrix.rows) {
        throw new TypeError("Both matrices must have the same number of rows");
      }
      const { center = true } = options;
      if (center) {
        xMatrix = xMatrix.center("column");
        if (!yIsSame) {
          yMatrix = yMatrix.center("column");
        }
      }
      const cov = xMatrix.transpose().mmul(yMatrix);
      for (let i = 0; i < cov.rows; i++) {
        for (let j = 0; j < cov.columns; j++) {
          cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));
        }
      }
      return cov;
    }
    function correlation(xMatrix, yMatrix = xMatrix, options = {}) {
      xMatrix = new Matrix(xMatrix);
      let yIsSame = false;
      if (typeof yMatrix === "object" && !Matrix.isMatrix(yMatrix) && !isAnyArray.isAnyArray(yMatrix)) {
        options = yMatrix;
        yMatrix = xMatrix;
        yIsSame = true;
      } else {
        yMatrix = new Matrix(yMatrix);
      }
      if (xMatrix.rows !== yMatrix.rows) {
        throw new TypeError("Both matrices must have the same number of rows");
      }
      const { center = true, scale = true } = options;
      if (center) {
        xMatrix.center("column");
        if (!yIsSame) {
          yMatrix.center("column");
        }
      }
      if (scale) {
        xMatrix.scale("column");
        if (!yIsSame) {
          yMatrix.scale("column");
        }
      }
      const sdx = xMatrix.standardDeviation("column", { unbiased: true });
      const sdy = yIsSame ? sdx : yMatrix.standardDeviation("column", { unbiased: true });
      const corr = xMatrix.transpose().mmul(yMatrix);
      for (let i = 0; i < corr.rows; i++) {
        for (let j = 0; j < corr.columns; j++) {
          corr.set(
            i,
            j,
            corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1))
          );
        }
      }
      return corr;
    }
    var EigenvalueDecomposition = class {
      constructor(matrix, options = {}) {
        const { assumeSymmetric = false } = options;
        matrix = WrapperMatrix2D.checkMatrix(matrix);
        if (!matrix.isSquare()) {
          throw new Error("Matrix is not a square matrix");
        }
        if (matrix.isEmpty()) {
          throw new Error("Matrix must be non-empty");
        }
        let n = matrix.columns;
        let V = new Matrix(n, n);
        let d = new Float64Array(n);
        let e = new Float64Array(n);
        let value = matrix;
        let i, j;
        let isSymmetric = false;
        if (assumeSymmetric) {
          isSymmetric = true;
        } else {
          isSymmetric = matrix.isSymmetric();
        }
        if (isSymmetric) {
          for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
              V.set(i, j, value.get(i, j));
            }
          }
          tred2(n, e, d, V);
          tql2(n, e, d, V);
        } else {
          let H = new Matrix(n, n);
          let ort = new Float64Array(n);
          for (j = 0; j < n; j++) {
            for (i = 0; i < n; i++) {
              H.set(i, j, value.get(i, j));
            }
          }
          orthes(n, H, ort, V);
          hqr2(n, e, d, V, H);
        }
        this.n = n;
        this.e = e;
        this.d = d;
        this.V = V;
      }
      get realEigenvalues() {
        return Array.from(this.d);
      }
      get imaginaryEigenvalues() {
        return Array.from(this.e);
      }
      get eigenvectorMatrix() {
        return this.V;
      }
      get diagonalMatrix() {
        let n = this.n;
        let e = this.e;
        let d = this.d;
        let X = new Matrix(n, n);
        let i, j;
        for (i = 0; i < n; i++) {
          for (j = 0; j < n; j++) {
            X.set(i, j, 0);
          }
          X.set(i, i, d[i]);
          if (e[i] > 0) {
            X.set(i, i + 1, e[i]);
          } else if (e[i] < 0) {
            X.set(i, i - 1, e[i]);
          }
        }
        return X;
      }
    };
    function tred2(n, e, d, V) {
      let f, g, h, i, j, k, hh, scale;
      for (j = 0; j < n; j++) {
        d[j] = V.get(n - 1, j);
      }
      for (i = n - 1; i > 0; i--) {
        scale = 0;
        h = 0;
        for (k = 0; k < i; k++) {
          scale = scale + Math.abs(d[k]);
        }
        if (scale === 0) {
          e[i] = d[i - 1];
          for (j = 0; j < i; j++) {
            d[j] = V.get(i - 1, j);
            V.set(i, j, 0);
            V.set(j, i, 0);
          }
        } else {
          for (k = 0; k < i; k++) {
            d[k] /= scale;
            h += d[k] * d[k];
          }
          f = d[i - 1];
          g = Math.sqrt(h);
          if (f > 0) {
            g = -g;
          }
          e[i] = scale * g;
          h = h - f * g;
          d[i - 1] = f - g;
          for (j = 0; j < i; j++) {
            e[j] = 0;
          }
          for (j = 0; j < i; j++) {
            f = d[j];
            V.set(j, i, f);
            g = e[j] + V.get(j, j) * f;
            for (k = j + 1; k <= i - 1; k++) {
              g += V.get(k, j) * d[k];
              e[k] += V.get(k, j) * f;
            }
            e[j] = g;
          }
          f = 0;
          for (j = 0; j < i; j++) {
            e[j] /= h;
            f += e[j] * d[j];
          }
          hh = f / (h + h);
          for (j = 0; j < i; j++) {
            e[j] -= hh * d[j];
          }
          for (j = 0; j < i; j++) {
            f = d[j];
            g = e[j];
            for (k = j; k <= i - 1; k++) {
              V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));
            }
            d[j] = V.get(i - 1, j);
            V.set(i, j, 0);
          }
        }
        d[i] = h;
      }
      for (i = 0; i < n - 1; i++) {
        V.set(n - 1, i, V.get(i, i));
        V.set(i, i, 1);
        h = d[i + 1];
        if (h !== 0) {
          for (k = 0; k <= i; k++) {
            d[k] = V.get(k, i + 1) / h;
          }
          for (j = 0; j <= i; j++) {
            g = 0;
            for (k = 0; k <= i; k++) {
              g += V.get(k, i + 1) * V.get(k, j);
            }
            for (k = 0; k <= i; k++) {
              V.set(k, j, V.get(k, j) - g * d[k]);
            }
          }
        }
        for (k = 0; k <= i; k++) {
          V.set(k, i + 1, 0);
        }
      }
      for (j = 0; j < n; j++) {
        d[j] = V.get(n - 1, j);
        V.set(n - 1, j, 0);
      }
      V.set(n - 1, n - 1, 1);
      e[0] = 0;
    }
    function tql2(n, e, d, V) {
      let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;
      for (i = 1; i < n; i++) {
        e[i - 1] = e[i];
      }
      e[n - 1] = 0;
      let f = 0;
      let tst1 = 0;
      let eps = Number.EPSILON;
      for (l = 0; l < n; l++) {
        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
        m = l;
        while (m < n) {
          if (Math.abs(e[m]) <= eps * tst1) {
            break;
          }
          m++;
        }
        if (m > l) {
          do {
            g = d[l];
            p = (d[l + 1] - g) / (2 * e[l]);
            r = hypotenuse(p, 1);
            if (p < 0) {
              r = -r;
            }
            d[l] = e[l] / (p + r);
            d[l + 1] = e[l] * (p + r);
            dl1 = d[l + 1];
            h = g - d[l];
            for (i = l + 2; i < n; i++) {
              d[i] -= h;
            }
            f = f + h;
            p = d[m];
            c = 1;
            c2 = c;
            c3 = c;
            el1 = e[l + 1];
            s = 0;
            s2 = 0;
            for (i = m - 1; i >= l; i--) {
              c3 = c2;
              c2 = c;
              s2 = s;
              g = c * e[i];
              h = c * p;
              r = hypotenuse(p, e[i]);
              e[i + 1] = s * r;
              s = e[i] / r;
              c = p / r;
              p = c * d[i] - s * g;
              d[i + 1] = h + s * (c * g + s * d[i]);
              for (k = 0; k < n; k++) {
                h = V.get(k, i + 1);
                V.set(k, i + 1, s * V.get(k, i) + c * h);
                V.set(k, i, c * V.get(k, i) - s * h);
              }
            }
            p = -s * s2 * c3 * el1 * e[l] / dl1;
            e[l] = s * p;
            d[l] = c * p;
          } while (Math.abs(e[l]) > eps * tst1);
        }
        d[l] = d[l] + f;
        e[l] = 0;
      }
      for (i = 0; i < n - 1; i++) {
        k = i;
        p = d[i];
        for (j = i + 1; j < n; j++) {
          if (d[j] < p) {
            k = j;
            p = d[j];
          }
        }
        if (k !== i) {
          d[k] = d[i];
          d[i] = p;
          for (j = 0; j < n; j++) {
            p = V.get(j, i);
            V.set(j, i, V.get(j, k));
            V.set(j, k, p);
          }
        }
      }
    }
    function orthes(n, H, ort, V) {
      let low = 0;
      let high = n - 1;
      let f, g, h, i, j, m;
      let scale;
      for (m = low + 1; m <= high - 1; m++) {
        scale = 0;
        for (i = m; i <= high; i++) {
          scale = scale + Math.abs(H.get(i, m - 1));
        }
        if (scale !== 0) {
          h = 0;
          for (i = high; i >= m; i--) {
            ort[i] = H.get(i, m - 1) / scale;
            h += ort[i] * ort[i];
          }
          g = Math.sqrt(h);
          if (ort[m] > 0) {
            g = -g;
          }
          h = h - ort[m] * g;
          ort[m] = ort[m] - g;
          for (j = m; j < n; j++) {
            f = 0;
            for (i = high; i >= m; i--) {
              f += ort[i] * H.get(i, j);
            }
            f = f / h;
            for (i = m; i <= high; i++) {
              H.set(i, j, H.get(i, j) - f * ort[i]);
            }
          }
          for (i = 0; i <= high; i++) {
            f = 0;
            for (j = high; j >= m; j--) {
              f += ort[j] * H.get(i, j);
            }
            f = f / h;
            for (j = m; j <= high; j++) {
              H.set(i, j, H.get(i, j) - f * ort[j]);
            }
          }
          ort[m] = scale * ort[m];
          H.set(m, m - 1, scale * g);
        }
      }
      for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
          V.set(i, j, i === j ? 1 : 0);
        }
      }
      for (m = high - 1; m >= low + 1; m--) {
        if (H.get(m, m - 1) !== 0) {
          for (i = m + 1; i <= high; i++) {
            ort[i] = H.get(i, m - 1);
          }
          for (j = m; j <= high; j++) {
            g = 0;
            for (i = m; i <= high; i++) {
              g += ort[i] * V.get(i, j);
            }
            g = g / ort[m] / H.get(m, m - 1);
            for (i = m; i <= high; i++) {
              V.set(i, j, V.get(i, j) + g * ort[i]);
            }
          }
        }
      }
    }
    function hqr2(nn, e, d, V, H) {
      let n = nn - 1;
      let low = 0;
      let high = nn - 1;
      let eps = Number.EPSILON;
      let exshift = 0;
      let norm = 0;
      let p = 0;
      let q = 0;
      let r = 0;
      let s = 0;
      let z = 0;
      let iter = 0;
      let i, j, k, l, m, t, w, x, y;
      let ra, sa, vr, vi;
      let notlast, cdivres;
      for (i = 0; i < nn; i++) {
        if (i < low || i > high) {
          d[i] = H.get(i, i);
          e[i] = 0;
        }
        for (j = Math.max(i - 1, 0); j < nn; j++) {
          norm = norm + Math.abs(H.get(i, j));
        }
      }
      while (n >= low) {
        l = n;
        while (l > low) {
          s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));
          if (s === 0) {
            s = norm;
          }
          if (Math.abs(H.get(l, l - 1)) < eps * s) {
            break;
          }
          l--;
        }
        if (l === n) {
          H.set(n, n, H.get(n, n) + exshift);
          d[n] = H.get(n, n);
          e[n] = 0;
          n--;
          iter = 0;
        } else if (l === n - 1) {
          w = H.get(n, n - 1) * H.get(n - 1, n);
          p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;
          q = p * p + w;
          z = Math.sqrt(Math.abs(q));
          H.set(n, n, H.get(n, n) + exshift);
          H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);
          x = H.get(n, n);
          if (q >= 0) {
            z = p >= 0 ? p + z : p - z;
            d[n - 1] = x + z;
            d[n] = d[n - 1];
            if (z !== 0) {
              d[n] = x - w / z;
            }
            e[n - 1] = 0;
            e[n] = 0;
            x = H.get(n, n - 1);
            s = Math.abs(x) + Math.abs(z);
            p = x / s;
            q = z / s;
            r = Math.sqrt(p * p + q * q);
            p = p / r;
            q = q / r;
            for (j = n - 1; j < nn; j++) {
              z = H.get(n - 1, j);
              H.set(n - 1, j, q * z + p * H.get(n, j));
              H.set(n, j, q * H.get(n, j) - p * z);
            }
            for (i = 0; i <= n; i++) {
              z = H.get(i, n - 1);
              H.set(i, n - 1, q * z + p * H.get(i, n));
              H.set(i, n, q * H.get(i, n) - p * z);
            }
            for (i = low; i <= high; i++) {
              z = V.get(i, n - 1);
              V.set(i, n - 1, q * z + p * V.get(i, n));
              V.set(i, n, q * V.get(i, n) - p * z);
            }
          } else {
            d[n - 1] = x + p;
            d[n] = x + p;
            e[n - 1] = z;
            e[n] = -z;
          }
          n = n - 2;
          iter = 0;
        } else {
          x = H.get(n, n);
          y = 0;
          w = 0;
          if (l < n) {
            y = H.get(n - 1, n - 1);
            w = H.get(n, n - 1) * H.get(n - 1, n);
          }
          if (iter === 10) {
            exshift += x;
            for (i = low; i <= n; i++) {
              H.set(i, i, H.get(i, i) - x);
            }
            s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));
            x = y = 0.75 * s;
            w = -0.4375 * s * s;
          }
          if (iter === 30) {
            s = (y - x) / 2;
            s = s * s + w;
            if (s > 0) {
              s = Math.sqrt(s);
              if (y < x) {
                s = -s;
              }
              s = x - w / ((y - x) / 2 + s);
              for (i = low; i <= n; i++) {
                H.set(i, i, H.get(i, i) - s);
              }
              exshift += s;
              x = y = w = 0.964;
            }
          }
          iter = iter + 1;
          m = n - 2;
          while (m >= l) {
            z = H.get(m, m);
            r = x - z;
            s = y - z;
            p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);
            q = H.get(m + 1, m + 1) - z - r - s;
            r = H.get(m + 2, m + 1);
            s = Math.abs(p) + Math.abs(q) + Math.abs(r);
            p = p / s;
            q = q / s;
            r = r / s;
            if (m === l) {
              break;
            }
            if (Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H.get(m - 1, m - 1)) + Math.abs(z) + Math.abs(H.get(m + 1, m + 1))))) {
              break;
            }
            m--;
          }
          for (i = m + 2; i <= n; i++) {
            H.set(i, i - 2, 0);
            if (i > m + 2) {
              H.set(i, i - 3, 0);
            }
          }
          for (k = m; k <= n - 1; k++) {
            notlast = k !== n - 1;
            if (k !== m) {
              p = H.get(k, k - 1);
              q = H.get(k + 1, k - 1);
              r = notlast ? H.get(k + 2, k - 1) : 0;
              x = Math.abs(p) + Math.abs(q) + Math.abs(r);
              if (x !== 0) {
                p = p / x;
                q = q / x;
                r = r / x;
              }
            }
            if (x === 0) {
              break;
            }
            s = Math.sqrt(p * p + q * q + r * r);
            if (p < 0) {
              s = -s;
            }
            if (s !== 0) {
              if (k !== m) {
                H.set(k, k - 1, -s * x);
              } else if (l !== m) {
                H.set(k, k - 1, -H.get(k, k - 1));
              }
              p = p + s;
              x = p / s;
              y = q / s;
              z = r / s;
              q = q / p;
              r = r / p;
              for (j = k; j < nn; j++) {
                p = H.get(k, j) + q * H.get(k + 1, j);
                if (notlast) {
                  p = p + r * H.get(k + 2, j);
                  H.set(k + 2, j, H.get(k + 2, j) - p * z);
                }
                H.set(k, j, H.get(k, j) - p * x);
                H.set(k + 1, j, H.get(k + 1, j) - p * y);
              }
              for (i = 0; i <= Math.min(n, k + 3); i++) {
                p = x * H.get(i, k) + y * H.get(i, k + 1);
                if (notlast) {
                  p = p + z * H.get(i, k + 2);
                  H.set(i, k + 2, H.get(i, k + 2) - p * r);
                }
                H.set(i, k, H.get(i, k) - p);
                H.set(i, k + 1, H.get(i, k + 1) - p * q);
              }
              for (i = low; i <= high; i++) {
                p = x * V.get(i, k) + y * V.get(i, k + 1);
                if (notlast) {
                  p = p + z * V.get(i, k + 2);
                  V.set(i, k + 2, V.get(i, k + 2) - p * r);
                }
                V.set(i, k, V.get(i, k) - p);
                V.set(i, k + 1, V.get(i, k + 1) - p * q);
              }
            }
          }
        }
      }
      if (norm === 0) {
        return;
      }
      for (n = nn - 1; n >= 0; n--) {
        p = d[n];
        q = e[n];
        if (q === 0) {
          l = n;
          H.set(n, n, 1);
          for (i = n - 1; i >= 0; i--) {
            w = H.get(i, i) - p;
            r = 0;
            for (j = l; j <= n; j++) {
              r = r + H.get(i, j) * H.get(j, n);
            }
            if (e[i] < 0) {
              z = w;
              s = r;
            } else {
              l = i;
              if (e[i] === 0) {
                H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));
              } else {
                x = H.get(i, i + 1);
                y = H.get(i + 1, i);
                q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
                t = (x * s - z * r) / q;
                H.set(i, n, t);
                H.set(
                  i + 1,
                  n,
                  Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z
                );
              }
              t = Math.abs(H.get(i, n));
              if (eps * t * t > 1) {
                for (j = i; j <= n; j++) {
                  H.set(j, n, H.get(j, n) / t);
                }
              }
            }
          }
        } else if (q < 0) {
          l = n - 1;
          if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {
            H.set(n - 1, n - 1, q / H.get(n, n - 1));
            H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));
          } else {
            cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);
            H.set(n - 1, n - 1, cdivres[0]);
            H.set(n - 1, n, cdivres[1]);
          }
          H.set(n, n - 1, 0);
          H.set(n, n, 1);
          for (i = n - 2; i >= 0; i--) {
            ra = 0;
            sa = 0;
            for (j = l; j <= n; j++) {
              ra = ra + H.get(i, j) * H.get(j, n - 1);
              sa = sa + H.get(i, j) * H.get(j, n);
            }
            w = H.get(i, i) - p;
            if (e[i] < 0) {
              z = w;
              r = ra;
              s = sa;
            } else {
              l = i;
              if (e[i] === 0) {
                cdivres = cdiv(-ra, -sa, w, q);
                H.set(i, n - 1, cdivres[0]);
                H.set(i, n, cdivres[1]);
              } else {
                x = H.get(i, i + 1);
                y = H.get(i + 1, i);
                vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
                vi = (d[i] - p) * 2 * q;
                if (vr === 0 && vi === 0) {
                  vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
                }
                cdivres = cdiv(
                  x * r - z * ra + q * sa,
                  x * s - z * sa - q * ra,
                  vr,
                  vi
                );
                H.set(i, n - 1, cdivres[0]);
                H.set(i, n, cdivres[1]);
                if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {
                  H.set(
                    i + 1,
                    n - 1,
                    (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x
                  );
                  H.set(
                    i + 1,
                    n,
                    (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x
                  );
                } else {
                  cdivres = cdiv(
                    -r - y * H.get(i, n - 1),
                    -s - y * H.get(i, n),
                    z,
                    q
                  );
                  H.set(i + 1, n - 1, cdivres[0]);
                  H.set(i + 1, n, cdivres[1]);
                }
              }
              t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));
              if (eps * t * t > 1) {
                for (j = i; j <= n; j++) {
                  H.set(j, n - 1, H.get(j, n - 1) / t);
                  H.set(j, n, H.get(j, n) / t);
                }
              }
            }
          }
        }
      }
      for (i = 0; i < nn; i++) {
        if (i < low || i > high) {
          for (j = i; j < nn; j++) {
            V.set(i, j, H.get(i, j));
          }
        }
      }
      for (j = nn - 1; j >= low; j--) {
        for (i = low; i <= high; i++) {
          z = 0;
          for (k = low; k <= Math.min(j, high); k++) {
            z = z + V.get(i, k) * H.get(k, j);
          }
          V.set(i, j, z);
        }
      }
    }
    function cdiv(xr, xi, yr, yi) {
      let r, d;
      if (Math.abs(yr) > Math.abs(yi)) {
        r = yi / yr;
        d = yr + r * yi;
        return [(xr + r * xi) / d, (xi - r * xr) / d];
      } else {
        r = yr / yi;
        d = yi + r * yr;
        return [(r * xr + xi) / d, (r * xi - xr) / d];
      }
    }
    var CholeskyDecomposition = class {
      constructor(value) {
        value = WrapperMatrix2D.checkMatrix(value);
        if (!value.isSymmetric()) {
          throw new Error("Matrix is not symmetric");
        }
        let a = value;
        let dimension = a.rows;
        let l = new Matrix(dimension, dimension);
        let positiveDefinite = true;
        let i, j, k;
        for (j = 0; j < dimension; j++) {
          let d = 0;
          for (k = 0; k < j; k++) {
            let s = 0;
            for (i = 0; i < k; i++) {
              s += l.get(k, i) * l.get(j, i);
            }
            s = (a.get(j, k) - s) / l.get(k, k);
            l.set(j, k, s);
            d = d + s * s;
          }
          d = a.get(j, j) - d;
          positiveDefinite &&= d > 0;
          l.set(j, j, Math.sqrt(Math.max(d, 0)));
          for (k = j + 1; k < dimension; k++) {
            l.set(j, k, 0);
          }
        }
        this.L = l;
        this.positiveDefinite = positiveDefinite;
      }
      isPositiveDefinite() {
        return this.positiveDefinite;
      }
      solve(value) {
        value = WrapperMatrix2D.checkMatrix(value);
        let l = this.L;
        let dimension = l.rows;
        if (value.rows !== dimension) {
          throw new Error("Matrix dimensions do not match");
        }
        if (this.isPositiveDefinite() === false) {
          throw new Error("Matrix is not positive definite");
        }
        let count = value.columns;
        let B = value.clone();
        let i, j, k;
        for (k = 0; k < dimension; k++) {
          for (j = 0; j < count; j++) {
            for (i = 0; i < k; i++) {
              B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));
            }
            B.set(k, j, B.get(k, j) / l.get(k, k));
          }
        }
        for (k = dimension - 1; k >= 0; k--) {
          for (j = 0; j < count; j++) {
            for (i = k + 1; i < dimension; i++) {
              B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));
            }
            B.set(k, j, B.get(k, j) / l.get(k, k));
          }
        }
        return B;
      }
      get lowerTriangularMatrix() {
        return this.L;
      }
    };
    var nipals = class {
      constructor(X, options = {}) {
        X = WrapperMatrix2D.checkMatrix(X);
        let { Y } = options;
        const {
          scaleScores = false,
          maxIterations = 1e3,
          terminationCriteria = 1e-10
        } = options;
        let u;
        if (Y) {
          if (isAnyArray.isAnyArray(Y) && typeof Y[0] === "number") {
            Y = Matrix.columnVector(Y);
          } else {
            Y = WrapperMatrix2D.checkMatrix(Y);
          }
          if (Y.rows !== X.rows) {
            throw new Error("Y should have the same number of rows as X");
          }
          u = Y.getColumnVector(0);
        } else {
          u = X.getColumnVector(0);
        }
        let diff = 1;
        let t, q, w, tOld;
        for (let counter = 0; counter < maxIterations && diff > terminationCriteria; counter++) {
          w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));
          w = w.div(w.norm());
          t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));
          if (counter > 0) {
            diff = t.clone().sub(tOld).pow(2).sum();
          }
          tOld = t.clone();
          if (Y) {
            q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));
            q = q.div(q.norm());
            u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));
          } else {
            u = t;
          }
        }
        if (Y) {
          let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));
          p = p.div(p.norm());
          let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));
          let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));
          let yResidual = Y.clone().sub(
            t.clone().mulS(residual.get(0, 0)).mmul(q.transpose())
          );
          this.t = t;
          this.p = p.transpose();
          this.w = w.transpose();
          this.q = q;
          this.u = u;
          this.s = t.transpose().mmul(t);
          this.xResidual = xResidual;
          this.yResidual = yResidual;
          this.betas = residual;
        } else {
          this.w = w.transpose();
          this.s = t.transpose().mmul(t).sqrt();
          if (scaleScores) {
            this.t = t.clone().div(this.s.get(0, 0));
          } else {
            this.t = t;
          }
          this.xResidual = X.sub(t.mmul(w.transpose()));
        }
      }
    };
    exports2.AbstractMatrix = AbstractMatrix;
    exports2.CHO = CholeskyDecomposition;
    exports2.CholeskyDecomposition = CholeskyDecomposition;
    exports2.DistanceMatrix = DistanceMatrix;
    exports2.EVD = EigenvalueDecomposition;
    exports2.EigenvalueDecomposition = EigenvalueDecomposition;
    exports2.LU = LuDecomposition;
    exports2.LuDecomposition = LuDecomposition;
    exports2.Matrix = Matrix;
    exports2.MatrixColumnSelectionView = MatrixColumnSelectionView;
    exports2.MatrixColumnView = MatrixColumnView;
    exports2.MatrixFlipColumnView = MatrixFlipColumnView;
    exports2.MatrixFlipRowView = MatrixFlipRowView;
    exports2.MatrixRowSelectionView = MatrixRowSelectionView;
    exports2.MatrixRowView = MatrixRowView;
    exports2.MatrixSelectionView = MatrixSelectionView;
    exports2.MatrixSubView = MatrixSubView;
    exports2.MatrixTransposeView = MatrixTransposeView;
    exports2.NIPALS = nipals;
    exports2.Nipals = nipals;
    exports2.QR = QrDecomposition;
    exports2.QrDecomposition = QrDecomposition;
    exports2.SVD = SingularValueDecomposition;
    exports2.SingularValueDecomposition = SingularValueDecomposition;
    exports2.SymmetricMatrix = SymmetricMatrix;
    exports2.WrapperMatrix1D = WrapperMatrix1D;
    exports2.WrapperMatrix2D = WrapperMatrix2D;
    exports2.correlation = correlation;
    exports2.covariance = covariance;
    exports2.default = Matrix;
    exports2.determinant = determinant;
    exports2.inverse = inverse;
    exports2.linearDependencies = linearDependencies;
    exports2.pseudoInverse = pseudoInverse;
    exports2.solve = solve;
    exports2.wrap = wrap;
  }
});

// node_modules/image-js/lib/image/operator/getSeparatedKernel.js
var require_getSeparatedKernel = __commonJS({
  "node_modules/image-js/lib/image/operator/getSeparatedKernel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getSeparatedKernel;
    var _mlMatrix = require_matrix();
    function getSeparatedKernel(kernel) {
      const svd = new _mlMatrix.SVD(kernel, {
        autoTranspose: true
      });
      if (svd.rank !== 1)
        return null;
      const s = Math.sqrt(svd.s[0]);
      const v = svd.U.to2DArray().map((v2) => v2[0] * s);
      const h = svd.V.to2DArray().map((h2) => h2[0] * s);
      return [v, h];
    }
  }
});

// node_modules/image-js/lib/image/operator/convolution.js
var require_convolution = __commonJS({
  "node_modules/image-js/lib/image/operator/convolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = convolution;
    var _mlMatrixConvolution = require_src5();
    var _channel = require_channel();
    var _kernel = require_kernel();
    var _Image = _interopRequireDefault(require_Image());
    var _clamp = require_clamp();
    var _convolutionSeparable = _interopRequireDefault(require_convolutionSeparable());
    var _getSeparatedKernel = _interopRequireDefault(require_getSeparatedKernel());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function convolution(kernel, options = {}) {
      let {
        channels,
        bitDepth,
        normalize = false,
        divisor = 1,
        border = "copy",
        algorithm = "auto"
      } = options;
      let createOptions = {};
      if (bitDepth)
        createOptions.bitDepth = bitDepth;
      let newImage = _Image.default.createFrom(this, createOptions);
      channels = (0, _channel.validateArrayOfChannels)(this, channels, true);
      if (algorithm !== "separable") {
        ({
          kernel
        } = (0, _kernel.validateKernel)(kernel));
      } else if (!Array.isArray(kernel) || kernel.length !== 2) {
        throw new RangeError("separable convolution requires two arrays of numbers to represent the kernel");
      }
      if (algorithm === "auto") {
        let separatedKernel = (0, _getSeparatedKernel.default)(kernel);
        if (separatedKernel !== null) {
          algorithm = "separable";
          kernel = separatedKernel;
        } else if ((kernel.length > 9 || kernel[0].length > 9) && this.width <= 4096 && this.height <= 4096) {
          algorithm = "fft";
        } else {
          algorithm = "direct";
        }
      }
      let halfHeight, halfWidth;
      if (algorithm === "separable") {
        halfHeight = Math.floor(kernel[0].length / 2);
        halfWidth = Math.floor(kernel[1].length / 2);
      } else {
        halfHeight = Math.floor(kernel.length / 2);
        halfWidth = Math.floor(kernel[0].length / 2);
      }
      let clamped = newImage.isClamped;
      let tmpData = new Array(this.height * this.width);
      let index, x, y, channel, c, tmpResult;
      for (channel = 0; channel < channels.length; channel++) {
        c = channels[channel];
        for (y = 0; y < this.height; y++) {
          for (x = 0; x < this.width; x++) {
            index = y * this.width + x;
            tmpData[index] = this.data[index * this.channels + c];
          }
        }
        if (algorithm === "direct") {
          tmpResult = (0, _mlMatrixConvolution.direct)(tmpData, kernel, {
            rows: this.height,
            cols: this.width,
            normalize,
            divisor
          });
        } else if (algorithm === "separable") {
          tmpResult = (0, _convolutionSeparable.default)(tmpData, kernel, this.width, this.height);
          if (normalize) {
            divisor = 0;
            for (let i = 0; i < kernel[0].length; i++) {
              for (let j = 0; j < kernel[1].length; j++) {
                divisor += kernel[0][i] * kernel[1][j];
              }
            }
          }
          if (divisor !== 1) {
            for (let i = 0; i < tmpResult.length; i++) {
              tmpResult[i] /= divisor;
            }
          }
        } else {
          tmpResult = (0, _mlMatrixConvolution.fft)(tmpData, kernel, {
            rows: this.height,
            cols: this.width,
            normalize,
            divisor
          });
        }
        for (y = 0; y < this.height; y++) {
          for (x = 0; x < this.width; x++) {
            index = y * this.width + x;
            if (clamped) {
              newImage.data[index * this.channels + c] = (0, _clamp.clamp)(tmpResult[index], newImage);
            } else {
              newImage.data[index * this.channels + c] = tmpResult[index];
            }
          }
        }
      }
      if (this.alpha && !channels.includes(this.channels)) {
        for (x = this.components; x < this.data.length; x = x + this.channels) {
          newImage.data[x] = this.data[x];
        }
      }
      if (border !== "periodic") {
        newImage.setBorder({
          size: [halfWidth, halfHeight],
          algorithm: border
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/filter/gradientFilter.js
var require_gradientFilter = __commonJS({
  "node_modules/image-js/lib/image/filter/gradientFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = gradientFilter;
    var _convolution = _interopRequireDefault(require_convolution());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function gradientFilter(options = {}) {
      let {
        direction = "xy",
        border = "copy",
        kernelX,
        kernelY,
        channels,
        bitDepth = this.bitDepth
      } = options;
      this.checkProcessable("gradientFilter", {
        bitDepth: [8, 16]
      });
      switch (direction) {
        case "x":
          if (!kernelX)
            throw new Error("kernelX option is missing");
          return _convolution.default.call(this, kernelX, {
            channels,
            border,
            bitDepth
          });
        case "y":
          if (!kernelY)
            throw new Error("kernelY option is missing");
          return _convolution.default.call(this, kernelY, {
            channels,
            border,
            bitDepth
          });
        case "xy": {
          if (!kernelX)
            throw new Error("kernelX option is missing");
          if (!kernelY)
            throw new Error("kernelY option is missing");
          const gX = _convolution.default.call(this, kernelX, {
            channels,
            border,
            bitDepth: 32
          });
          const gY = _convolution.default.call(this, kernelY, {
            channels,
            border,
            bitDepth: 32
          });
          return gX.hypotenuse(gY, {
            bitDepth,
            channels
          });
        }
        default:
          throw new Error(`Unknown parameter direction: ${direction}`);
      }
    }
  }
});

// node_modules/image-js/lib/image/filter/sobelFilter.js
var require_sobelFilter = __commonJS({
  "node_modules/image-js/lib/image/filter/sobelFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = sobelFilter;
    var _kernels = require_kernels();
    var _gradientFilter = _interopRequireDefault(require_gradientFilter());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function sobelFilter(options) {
      return _gradientFilter.default.call(this, Object.assign({}, options, {
        kernelX: _kernels.SOBEL_X,
        kernelY: _kernels.SOBEL_Y
      }));
    }
  }
});

// node_modules/image-js/lib/image/filter/scharrFilter.js
var require_scharrFilter = __commonJS({
  "node_modules/image-js/lib/image/filter/scharrFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = scharrFilter;
    var _kernels = require_kernels();
    var _gradientFilter = _interopRequireDefault(require_gradientFilter());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function scharrFilter(options) {
      return _gradientFilter.default.call(this, Object.assign({}, options, {
        kernelX: _kernels.SCHARR_X,
        kernelY: _kernels.SCHARR_Y
      }));
    }
  }
});

// node_modules/new-array/index.js
var require_new_array = __commonJS({
  "node_modules/new-array/index.js"(exports2, module2) {
    module2.exports = newArray;
    function newArray(n, value) {
      n = n || 0;
      var array = new Array(n);
      for (var i = 0; i < n; i++) {
        array[i] = value;
      }
      return array;
    }
  }
});

// node_modules/image-js/lib/image/filter/level.js
var require_level = __commonJS({
  "node_modules/image-js/lib/image/filter/level.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = level;
    var _newArray = _interopRequireDefault(require_new_array());
    var _channel = require_channel();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function level(options = {}) {
      let {
        algorithm = "range",
        channels,
        min = this.min,
        max = this.max
      } = options;
      this.checkProcessable("level", {
        bitDepth: [8, 16, 32]
      });
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      if (channels.length !== this.channel) {
        if (Array.isArray(min) && min.length === this.channels) {
          min = min.filter((a, index) => channels.includes(index));
        }
        if (Array.isArray(max) && max.length === this.channels) {
          max = max.filter((a, index) => channels.includes(index));
        }
      }
      switch (algorithm) {
        case "range":
          if (min < 0) {
            min = 0;
          }
          if (max > this.maxValue) {
            max = this.maxValue;
          }
          if (!Array.isArray(min)) {
            min = (0, _newArray.default)(channels.length, min);
          }
          if (!Array.isArray(max)) {
            max = (0, _newArray.default)(channels.length, max);
          }
          processImage(this, min, max, channels);
          break;
        default:
          throw new Error(`level: algorithm not implement: ${algorithm}`);
      }
      return this;
    }
    function processImage(image, min, max, channels) {
      let delta = 1e-5;
      let factor = new Array(channels.length);
      for (let i = 0; i < channels.length; i++) {
        if (min[i] === 0 && max[i] === image.maxValue) {
          factor[i] = 0;
        } else if (max[i] === min[i]) {
          factor[i] = 0;
        } else {
          factor[i] = (image.maxValue + 1 - delta) / (max[i] - min[i]);
        }
        min[i] += (0.5 - delta / 2) / factor[i];
      }
      for (let j = 0; j < channels.length; j++) {
        let c = channels[j];
        if (factor[j] !== 0) {
          for (let i = 0; i < image.data.length; i += image.channels) {
            image.data[i + c] = Math.min(Math.max(0, (image.data[i + c] - min[j]) * factor[j] + 0.5 | 0), image.maxValue);
          }
        }
      }
    }
  }
});

// node_modules/is-array-type/is-array-type.js
var require_is_array_type = __commonJS({
  "node_modules/is-array-type/is-array-type.js"(exports2, module2) {
    "use strict";
    var toString = Object.prototype.toString;
    module2.exports = function isArrayType(value) {
      return toString.call(value).substr(-6, 5) === "Array";
    };
  }
});

// node_modules/image-js/lib/util/value.js
var require_value = __commonJS({
  "node_modules/image-js/lib/util/value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.checkNumberArray = checkNumberArray;
    var _isArrayType = _interopRequireDefault(require_is_array_type());
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function checkNumberArray(value) {
      if (!isNaN(value)) {
        if (value <= 0) {
          throw new Error("checkNumberArray: the value must be greater than 0");
        }
        return value;
      } else {
        if (value instanceof _Image.default) {
          return value.data;
        }
        if (!(0, _isArrayType.default)(value)) {
          throw new Error("checkNumberArray: the value should be either a number, array or Image");
        }
        return value;
      }
    }
  }
});

// node_modules/image-js/lib/image/filter/add.js
var require_add = __commonJS({
  "node_modules/image-js/lib/image/filter/add.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = add;
    var _channel = require_channel();
    var _value = require_value();
    function add(value, options = {}) {
      let {
        channels
      } = options;
      this.checkProcessable("add", {
        bitDepth: [8, 16]
      });
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      value = (0, _value.checkNumberArray)(value);
      if (!isNaN(value)) {
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.min(this.maxValue, this.data[i + c] + value >> 0);
          }
        }
      } else {
        if (this.data.length !== value.length) {
          throw new Error("add: the data size is different");
        }
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.max(0, Math.min(this.maxValue, this.data[i + c] + value[i + c] >> 0));
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/filter/subtract.js
var require_subtract = __commonJS({
  "node_modules/image-js/lib/image/filter/subtract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subtract;
    var _channel = require_channel();
    var _value = require_value();
    function subtract(value, options = {}) {
      let {
        channels
      } = options;
      this.checkProcessable("subtract", {
        bitDepth: [8, 16]
      });
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      value = (0, _value.checkNumberArray)(value);
      if (!isNaN(value)) {
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.max(0, this.data[i + c] - value >> 0);
          }
        }
      } else {
        if (this.data.length !== value.length) {
          throw new Error("subtract: the data size is different");
        }
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.max(0, Math.min(this.maxValue, this.data[i + c] - value[i + c] >> 0));
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/filter/subtractImage.js
var require_subtractImage = __commonJS({
  "node_modules/image-js/lib/image/filter/subtractImage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subtractImage;
    var _channel = require_channel();
    function subtractImage(otherImage, options = {}) {
      let {
        channels,
        absolute = false
      } = options;
      this.checkProcessable("subtractImage", {
        bitDepth: [8, 16]
      });
      if (this.width !== otherImage.width || this.height !== otherImage.height) {
        throw new Error("subtractImage: both images must have the same size");
      }
      if (this.alpha !== otherImage.alpha || this.bitDepth !== otherImage.bitDepth) {
        throw new Error("subtractImage: both images must have the same alpha and bitDepth");
      }
      if (this.channels !== otherImage.channels) {
        throw new Error("subtractImage: both images must have the same number of channels");
      }
      let newImage = this.clone();
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      for (let j = 0; j < channels.length; j++) {
        let c = channels[j];
        for (let i = c; i < this.data.length; i += this.channels) {
          let value = this.data[i] - otherImage.data[i];
          if (absolute) {
            newImage.data[i] = Math.abs(value);
          } else {
            newImage.data[i] = Math.max(value, 0);
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/filter/hypotenuse.js
var require_hypotenuse = __commonJS({
  "node_modules/image-js/lib/image/filter/hypotenuse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = hypotenuse;
    var _channel = require_channel();
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function hypotenuse(otherImage, options = {}) {
      let {
        bitDepth = this.bitDepth,
        channels
      } = options;
      this.checkProcessable("hypotenuse", {
        bitDepth: [8, 16, 32]
      });
      if (this.width !== otherImage.width || this.height !== otherImage.height) {
        throw new Error("hypotenuse: both images must have the same size");
      }
      if (this.alpha !== otherImage.alpha || this.bitDepth !== otherImage.bitDepth) {
        throw new Error("hypotenuse: both images must have the same alpha and bitDepth");
      }
      if (this.channels !== otherImage.channels) {
        throw new Error("hypotenuse: both images must have the same number of channels");
      }
      let newImage = _Image.default.createFrom(this, {
        bitDepth
      });
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      let clamped = newImage.isClamped;
      for (let j = 0; j < channels.length; j++) {
        let c = channels[j];
        for (let i = c; i < this.data.length; i += this.channels) {
          let value = Math.hypot(this.data[i], otherImage.data[i]);
          if (clamped) {
            newImage.data[i] = Math.min(Math.max(Math.round(value), 0), newImage.maxValue);
          } else {
            newImage.data[i] = value;
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/filter/multiply.js
var require_multiply = __commonJS({
  "node_modules/image-js/lib/image/filter/multiply.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = multiply;
    var _channel = require_channel();
    var _value = require_value();
    function multiply(value, options = {}) {
      let {
        channels
      } = options;
      this.checkProcessable("multiply", {
        bitDepth: [8, 16]
      });
      if (value <= 0) {
        throw new Error("multiply: the value must be greater than 0");
      }
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      value = (0, _value.checkNumberArray)(value);
      if (!isNaN(value)) {
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.min(this.maxValue, this.data[i + c] * value >> 0);
          }
        }
      } else {
        if (this.data.length !== value.length) {
          throw new Error("multiply: the data size is different");
        }
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.max(0, Math.min(this.maxValue, this.data[i + c] * value[i + c] >> 0));
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/filter/divide.js
var require_divide = __commonJS({
  "node_modules/image-js/lib/image/filter/divide.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = divide;
    var _channel = require_channel();
    var _value = require_value();
    function divide(value, options = {}) {
      let {
        channels
      } = options;
      this.checkProcessable("divide", {
        bitDepth: [8, 16]
      });
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels
      });
      value = (0, _value.checkNumberArray)(value);
      if (!isNaN(value)) {
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.min(this.maxValue, this.data[i + c] / value >> 0);
          }
        }
      } else {
        if (this.data.length !== value.length) {
          throw new Error("divide: the: the data size is different");
        }
        for (let j = 0; j < channels.length; j++) {
          let c = channels[j];
          for (let i = 0; i < this.data.length; i += this.channels) {
            this.data[i + c] = Math.max(0, Math.min(this.maxValue, this.data[i + c] / value[i + c] >> 0));
          }
        }
      }
      return this;
    }
  }
});

// node_modules/ml-regression-base/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/ml-regression-base/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var isAnyArray = require_lib6();
    function maybeToPrecision(value, digits) {
      if (value < 0) {
        value = 0 - value;
        if (typeof digits === "number") {
          return `- ${value.toPrecision(digits)}`;
        } else {
          return `- ${value.toString()}`;
        }
      } else {
        if (typeof digits === "number") {
          return value.toPrecision(digits);
        } else {
          return value.toString();
        }
      }
    }
    function checkArraySize(x, y) {
      if (!isAnyArray.isAnyArray(x) || !isAnyArray.isAnyArray(y)) {
        throw new TypeError("x and y must be arrays");
      }
      if (x.length !== y.length) {
        throw new RangeError("x and y arrays must have the same length");
      }
    }
    var BaseRegression = class _BaseRegression {
      constructor() {
        if (new.target === _BaseRegression) {
          throw new Error("BaseRegression must be subclassed");
        }
      }
      predict(x) {
        if (typeof x === "number") {
          return this._predict(x);
        } else if (isAnyArray.isAnyArray(x)) {
          const y = [];
          for (let i = 0; i < x.length; i++) {
            y.push(this._predict(x[i]));
          }
          return y;
        } else {
          throw new TypeError("x must be a number or array");
        }
      }
      _predict() {
        throw new Error("_predict must be implemented");
      }
      train() {
      }
      toString() {
        return "";
      }
      toLaTeX() {
        return "";
      }
      /**
       * Return the correlation coefficient of determination (r) and chi-square.
       * @param {Array<number>} x
       * @param {Array<number>} y
       * @return {object}
       */
      score(x, y) {
        if (!isAnyArray.isAnyArray(x) || !isAnyArray.isAnyArray(y) || x.length !== y.length) {
          throw new Error("x and y must be arrays of the same length");
        }
        const n = x.length;
        const y2 = new Array(n);
        for (let i = 0; i < n; i++) {
          y2[i] = this._predict(x[i]);
        }
        let xSum = 0;
        let ySum = 0;
        let chi2 = 0;
        let rmsd = 0;
        let xSquared = 0;
        let ySquared = 0;
        let xY = 0;
        for (let i = 0; i < n; i++) {
          xSum += y2[i];
          ySum += y[i];
          xSquared += y2[i] * y2[i];
          ySquared += y[i] * y[i];
          xY += y2[i] * y[i];
          if (y[i] !== 0) {
            chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];
          }
          rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);
        }
        const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));
        return {
          r,
          r2: r * r,
          chi2,
          rmsd: Math.sqrt(rmsd / n)
        };
      }
    };
    exports2.checkArrayLength = checkArraySize;
    exports2["default"] = BaseRegression;
    exports2.maybeToPrecision = maybeToPrecision;
  }
});

// node_modules/ml-regression-polynomial/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/ml-regression-polynomial/lib/index.js"(exports2, module2) {
    "use strict";
    var mlMatrix = require_matrix();
    var BaseRegression = require_lib10();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var BaseRegression__default = /* @__PURE__ */ _interopDefaultLegacy(BaseRegression);
    var PolynomialRegression = class _PolynomialRegression extends BaseRegression__default["default"] {
      constructor(x, y, degree) {
        super();
        if (x === true) {
          this.degree = y.degree;
          this.powers = y.powers;
          this.coefficients = y.coefficients;
        } else {
          BaseRegression.checkArrayLength(x, y);
          regress(this, x, y, degree);
        }
      }
      _predict(x) {
        let y = 0;
        for (let k = 0; k < this.powers.length; k++) {
          y += this.coefficients[k] * Math.pow(x, this.powers[k]);
        }
        return y;
      }
      toJSON() {
        return {
          name: "polynomialRegression",
          degree: this.degree,
          powers: this.powers,
          coefficients: this.coefficients
        };
      }
      toString(precision) {
        return this._toFormula(precision, false);
      }
      toLaTeX(precision) {
        return this._toFormula(precision, true);
      }
      _toFormula(precision, isLaTeX) {
        let sup = "^";
        let closeSup = "";
        let times = " * ";
        if (isLaTeX) {
          sup = "^{";
          closeSup = "}";
          times = "";
        }
        let fn = "";
        let str = "";
        for (let k = 0; k < this.coefficients.length; k++) {
          str = "";
          if (this.coefficients[k] !== 0) {
            if (this.powers[k] === 0) {
              str = BaseRegression.maybeToPrecision(this.coefficients[k], precision);
            } else {
              if (this.powers[k] === 1) {
                str = `${BaseRegression.maybeToPrecision(this.coefficients[k], precision) + times}x`;
              } else {
                str = `${BaseRegression.maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;
              }
            }
            if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {
              str = ` + ${str}`;
            } else if (k !== this.coefficients.length - 1) {
              str = ` ${str}`;
            }
          }
          fn = str + fn;
        }
        if (fn.charAt(0) === "+") {
          fn = fn.slice(1);
        }
        return `f(x) = ${fn}`;
      }
      static load(json) {
        if (json.name !== "polynomialRegression") {
          throw new TypeError("not a polynomial regression model");
        }
        return new _PolynomialRegression(true, json);
      }
    };
    function regress(pr, x, y, degree) {
      const n = x.length;
      let powers;
      if (Array.isArray(degree)) {
        powers = degree;
        degree = powers.length;
      } else {
        degree++;
        powers = new Array(degree);
        for (let k = 0; k < degree; k++) {
          powers[k] = k;
        }
      }
      const F = new mlMatrix.Matrix(n, degree);
      const Y = new mlMatrix.Matrix([y]);
      for (let k = 0; k < degree; k++) {
        for (let i = 0; i < n; i++) {
          if (powers[k] === 0) {
            F.set(i, k, 1);
          } else {
            F.set(i, k, Math.pow(x[i], powers[k]));
          }
        }
      }
      const FT = new mlMatrix.MatrixTransposeView(F);
      const A = FT.mmul(F);
      const B = FT.mmul(new mlMatrix.MatrixTransposeView(Y));
      pr.degree = degree - 1;
      pr.powers = powers;
      pr.coefficients = mlMatrix.solve(A, B).to1DArray();
    }
    module2.exports = PolynomialRegression;
  }
});

// node_modules/ml-regression-simple-linear/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/ml-regression-simple-linear/lib/index.js"(exports2, module2) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var BaseRegression = require_lib10();
    var BaseRegression__default = _interopDefault(BaseRegression);
    var SimpleLinearRegression = class _SimpleLinearRegression extends BaseRegression__default {
      constructor(x, y) {
        super();
        if (x === true) {
          this.slope = y.slope;
          this.intercept = y.intercept;
          this.coefficients = [y.intercept, y.slope];
        } else {
          BaseRegression.checkArrayLength(x, y);
          regress(this, x, y);
        }
      }
      toJSON() {
        return {
          name: "simpleLinearRegression",
          slope: this.slope,
          intercept: this.intercept
        };
      }
      _predict(x) {
        return this.slope * x + this.intercept;
      }
      computeX(y) {
        return (y - this.intercept) / this.slope;
      }
      toString(precision) {
        let result = "f(x) = ";
        if (this.slope !== 0) {
          const xFactor = BaseRegression.maybeToPrecision(this.slope, precision);
          result += `${xFactor === "1" ? "" : `${xFactor} * `}x`;
          if (this.intercept !== 0) {
            const absIntercept = Math.abs(this.intercept);
            const operator = absIntercept === this.intercept ? "+" : "-";
            result += ` ${operator} ${BaseRegression.maybeToPrecision(absIntercept, precision)}`;
          }
        } else {
          result += BaseRegression.maybeToPrecision(this.intercept, precision);
        }
        return result;
      }
      toLaTeX(precision) {
        return this.toString(precision);
      }
      static load(json) {
        if (json.name !== "simpleLinearRegression") {
          throw new TypeError("not a SLR model");
        }
        return new _SimpleLinearRegression(true, json);
      }
    };
    function regress(slr, x, y) {
      const n = x.length;
      let xSum = 0;
      let ySum = 0;
      let xSquared = 0;
      let xY = 0;
      for (let i = 0; i < n; i++) {
        xSum += x[i];
        ySum += y[i];
        xSquared += x[i] * x[i];
        xY += x[i] * y[i];
      }
      const numerator = n * xY - xSum * ySum;
      slr.slope = numerator / (n * xSquared - xSum * xSum);
      slr.intercept = 1 / n * ySum - slr.slope * (1 / n) * xSum;
      slr.coefficients = [slr.intercept, slr.slope];
    }
    module2.exports = SimpleLinearRegression;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-base/lib/checkArrayLength.js
var require_checkArrayLength = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-base/lib/checkArrayLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var is_any_array_1 = require_lib6();
    function checkArrayLength(x, y) {
      if (!(0, is_any_array_1.isAnyArray)(x) || !(0, is_any_array_1.isAnyArray)(y)) {
        throw new TypeError("x and y must be arrays");
      }
      if (x.length !== y.length) {
        throw new RangeError("x and y arrays must have the same length");
      }
    }
    exports2.default = checkArrayLength;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-base/lib/maybeToPrecision.js
var require_maybeToPrecision = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-base/lib/maybeToPrecision.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function maybeToPrecision(number, figures) {
      if (number < 0) {
        number = 0 - number;
        if (typeof figures === "number") {
          return `- ${number.toPrecision(figures)}`;
        } else {
          return `- ${number.toString()}`;
        }
      } else if (typeof figures === "number") {
        return number.toPrecision(figures);
      } else {
        return number.toString();
      }
    }
    exports2.default = maybeToPrecision;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-base/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-base/lib/index.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkArrayLength = exports2.maybeToPrecision = void 0;
    var is_any_array_1 = require_lib6();
    var checkArrayLength_1 = __importDefault2(require_checkArrayLength());
    exports2.checkArrayLength = checkArrayLength_1.default;
    var maybeToPrecision_1 = require_maybeToPrecision();
    Object.defineProperty(exports2, "maybeToPrecision", { enumerable: true, get: function() {
      return __importDefault2(maybeToPrecision_1).default;
    } });
    var BaseRegression = class _BaseRegression {
      constructor() {
        if (new.target === _BaseRegression) {
          throw new Error("BaseRegression must be subclassed");
        }
      }
      predict(x) {
        if (typeof x === "number") {
          return this._predict(x);
        } else if ((0, is_any_array_1.isAnyArray)(x)) {
          const y = [];
          for (const xVal of x) {
            y.push(this._predict(xVal));
          }
          return y;
        } else {
          throw new TypeError("x must be a number or array");
        }
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _predict(x) {
        throw new Error("_predict must be implemented");
      }
      train() {
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      toString(precision) {
        return "";
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      toLaTeX(precision) {
        return "";
      }
      /**
       * Return the correlation coefficient of determination (r) and chi-square.
       * @param x - explanatory variable
       * @param y - response variable
       * @return - Object with further statistics.
       */
      score(x, y) {
        (0, checkArrayLength_1.default)(x, y);
        const n = x.length;
        const y2 = new Array(n);
        for (let i = 0; i < n; i++) {
          y2[i] = this._predict(x[i]);
        }
        let xSum = 0;
        let ySum = 0;
        let chi2 = 0;
        let rmsd = 0;
        let xSquared = 0;
        let ySquared = 0;
        let xY = 0;
        for (let i = 0; i < n; i++) {
          xSum += y2[i];
          ySum += y[i];
          xSquared += y2[i] * y2[i];
          ySquared += y[i] * y[i];
          xY += y2[i] * y[i];
          if (y[i] !== 0) {
            chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];
          }
          rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);
        }
        const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));
        return {
          r,
          r2: r * r,
          chi2,
          rmsd: Math.sqrt(rmsd / n)
        };
      }
    };
    exports2.default = BaseRegression;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/checkArrayLength.js
var require_checkArrayLength2 = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/checkArrayLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkArrayLength = void 0;
    var is_any_array_1 = require_lib6();
    function checkArrayLength(x, y) {
      if (!(0, is_any_array_1.isAnyArray)(x) || !(0, is_any_array_1.isAnyArray)(y)) {
        throw new TypeError("x and y must be arrays");
      }
      if (x.length !== y.length) {
        throw new RangeError("x and y arrays must have the same length");
      }
    }
    exports2.checkArrayLength = checkArrayLength;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/BaseRegression.js
var require_BaseRegression = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/BaseRegression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseRegression = void 0;
    var is_any_array_1 = require_lib6();
    var checkArrayLength_1 = require_checkArrayLength2();
    var BaseRegression = class _BaseRegression {
      constructor() {
        if (new.target === _BaseRegression) {
          throw new Error("BaseRegression must be subclassed");
        }
      }
      predict(x) {
        if (typeof x === "number") {
          return this._predict(x);
        } else if ((0, is_any_array_1.isAnyArray)(x)) {
          const y = [];
          for (const xVal of x) {
            y.push(this._predict(xVal));
          }
          return y;
        } else {
          throw new TypeError("x must be a number or array");
        }
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _predict(x) {
        throw new Error("_predict must be implemented");
      }
      train() {
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      toString(precision) {
        return "";
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      toLaTeX(precision) {
        return "";
      }
      /**
       * Return the correlation coefficient of determination (r) and chi-square.
       * @param x - explanatory variable
       * @param y - response variable
       * @return - Object with further statistics.
       */
      score(x, y) {
        (0, checkArrayLength_1.checkArrayLength)(x, y);
        const n = x.length;
        const y2 = new Array(n);
        for (let i = 0; i < n; i++) {
          y2[i] = this._predict(x[i]);
        }
        let xSum = 0;
        let ySum = 0;
        let chi2 = 0;
        let rmsd = 0;
        let xSquared = 0;
        let ySquared = 0;
        let xY = 0;
        for (let i = 0; i < n; i++) {
          xSum += y2[i];
          ySum += y[i];
          xSquared += y2[i] * y2[i];
          ySquared += y[i] * y[i];
          xY += y2[i] * y[i];
          if (y[i] !== 0) {
            chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];
          }
          rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);
        }
        const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));
        return {
          r,
          r2: r * r,
          chi2,
          rmsd: Math.sqrt(rmsd / n)
        };
      }
    };
    exports2.BaseRegression = BaseRegression;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/maybeToPrecision.js
var require_maybeToPrecision2 = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/maybeToPrecision.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maybeToPrecision = void 0;
    function maybeToPrecision(number, figures) {
      if (number < 0) {
        number = 0 - number;
        if (typeof figures === "number") {
          return `- ${number.toPrecision(figures)}`;
        } else {
          return `- ${number.toString()}`;
        }
      } else if (typeof figures === "number") {
        return number.toPrecision(figures);
      } else {
        return number.toString();
      }
    }
    exports2.maybeToPrecision = maybeToPrecision;
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/node_modules/ml-regression-base/lib/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_BaseRegression(), exports2);
    __exportStar2(require_checkArrayLength2(), exports2);
    __exportStar2(require_maybeToPrecision2(), exports2);
  }
});

// node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/ml-regression-exponential/node_modules/ml-regression-simple-linear/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SimpleLinearRegression = void 0;
    var ml_regression_base_1 = require_lib14();
    var SimpleLinearRegression = class _SimpleLinearRegression extends ml_regression_base_1.BaseRegression {
      /**
       * @param x - explanatory variable
       * @param y - response variable
       */
      constructor(x, y) {
        super();
        if (x === true) {
          const yObj = y;
          this.slope = yObj.slope;
          this.intercept = yObj.intercept;
          this.coefficients = [yObj.intercept, yObj.slope];
        } else {
          (0, ml_regression_base_1.checkArrayLength)(x, y);
          const result = regress(x, y);
          this.slope = result.slope;
          this.intercept = result.intercept;
          this.coefficients = [result.intercept, result.slope];
        }
      }
      /**
       * Get the parameters and model name in JSON format
       * @returns
       */
      toJSON() {
        return {
          name: "simpleLinearRegression",
          slope: this.slope,
          intercept: this.intercept
        };
      }
      _predict(x) {
        return this.slope * x + this.intercept;
      }
      /**
       * Finds x for the given y value.
       * @param y - response variable value
       * @returns - x value
       */
      computeX(y) {
        return (y - this.intercept) / this.slope;
      }
      /**
       * Strings the linear function in the form 'f(x) = ax + b'
       * @param precision - number of significant figures.
       * @returns
       */
      toString(precision) {
        let result = "f(x) = ";
        if (this.slope !== 0) {
          const xFactor = (0, ml_regression_base_1.maybeToPrecision)(this.slope, precision);
          result += `${xFactor === "1" ? "" : `${xFactor} * `}x`;
          if (this.intercept !== 0) {
            const absIntercept = Math.abs(this.intercept);
            const operator = absIntercept === this.intercept ? "+" : "-";
            result += ` ${operator} ${(0, ml_regression_base_1.maybeToPrecision)(absIntercept, precision)}`;
          }
        } else {
          result += (0, ml_regression_base_1.maybeToPrecision)(this.intercept, precision);
        }
        return result;
      }
      /**
       * Strings the linear function in the form 'f(x) = ax + b'
       * @param precision - number of significant figures.
       * @returns
       */
      toLaTeX(precision) {
        return this.toString(precision);
      }
      /**
       * Class instance from a JSON Object.
       * @param json
       * @returns
       */
      static load(json) {
        if (json.name !== "simpleLinearRegression") {
          throw new TypeError("not a SLR model");
        }
        return new _SimpleLinearRegression(true, json);
      }
    };
    exports2.SimpleLinearRegression = SimpleLinearRegression;
    function regress(x, y) {
      const n = x.length;
      let xSum = 0;
      let ySum = 0;
      let xSquared = 0;
      let xY = 0;
      for (let i = 0; i < n; i++) {
        xSum += x[i];
        ySum += y[i];
        xSquared += x[i] * x[i];
        xY += x[i] * y[i];
      }
      const numerator = n * xY - xSum * ySum;
      const slope = numerator / (n * xSquared - xSum * xSum);
      return {
        slope,
        intercept: 1 / n * ySum - slope * (1 / n) * xSum
      };
    }
  }
});

// node_modules/ml-regression-exponential/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/ml-regression-exponential/lib/index.js"(exports2, module2) {
    "use strict";
    var BaseRegression = require_lib13();
    var mlRegressionSimpleLinear = require_lib15();
    function _interopDefaultCompat(e) {
      return e && typeof e === "object" && "default" in e ? e : { default: e };
    }
    var BaseRegression__default = /* @__PURE__ */ _interopDefaultCompat(BaseRegression);
    var ExponentialRegression = class _ExponentialRegression extends BaseRegression__default.default {
      constructor(x, y) {
        super();
        if (x === true) {
          this.A = y.A;
          this.B = y.B;
        } else {
          BaseRegression.checkArrayLength(x, y);
          regress(this, x, y);
        }
      }
      _predict(input) {
        return this.B * Math.exp(input * this.A);
      }
      toJSON() {
        return {
          name: "exponentialRegression",
          A: this.A,
          B: this.B
        };
      }
      toString(precision) {
        return `f(x) = ${BaseRegression.maybeToPrecision(
          this.B,
          precision
        )} * e^(${BaseRegression.maybeToPrecision(this.A, precision)} * x)`;
      }
      toLaTeX(precision) {
        if (this.A >= 0) {
          return `f(x) = ${BaseRegression.maybeToPrecision(
            this.B,
            precision
          )}e^{${BaseRegression.maybeToPrecision(this.A, precision)}x}`;
        } else {
          return `f(x) = \\frac{${BaseRegression.maybeToPrecision(
            this.B,
            precision
          )}}{e^{${BaseRegression.maybeToPrecision(-this.A, precision)}x}}`;
        }
      }
      static load(json) {
        if (json.name !== "exponentialRegression") {
          throw new TypeError("not a exponential regression model");
        }
        return new _ExponentialRegression(true, json);
      }
    };
    function regress(er, x, y) {
      const n = x.length;
      const yl = new Array(n);
      for (let i = 0; i < n; i++) {
        yl[i] = Math.log(y[i]);
      }
      const linear = new mlRegressionSimpleLinear.SimpleLinearRegression(x, yl);
      er.A = linear.slope;
      er.B = Math.exp(linear.intercept);
    }
    module2.exports = ExponentialRegression;
  }
});

// node_modules/ml-regression-power/lib/index.js
var require_lib17 = __commonJS({
  "node_modules/ml-regression-power/lib/index.js"(exports2, module2) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var BaseRegression = require_lib10();
    var BaseRegression__default = _interopDefault(BaseRegression);
    var SimpleLinearRegression = _interopDefault(require_lib12());
    var PowerRegression = class _PowerRegression extends BaseRegression__default {
      constructor(x, y) {
        super();
        if (x === true) {
          this.A = y.A;
          this.B = y.B;
        } else {
          BaseRegression.checkArrayLength(x, y);
          regress(this, x, y);
        }
      }
      _predict(newInputs) {
        return this.A * Math.pow(newInputs, this.B);
      }
      toJSON() {
        return {
          name: "powerRegression",
          A: this.A,
          B: this.B
        };
      }
      toString(precision) {
        return `f(x) = ${BaseRegression.maybeToPrecision(
          this.A,
          precision
        )} * x^${BaseRegression.maybeToPrecision(this.B, precision)}`;
      }
      toLaTeX(precision) {
        let latex = "";
        if (this.B >= 0) {
          latex = `f(x) = ${BaseRegression.maybeToPrecision(
            this.A,
            precision
          )}x^{${BaseRegression.maybeToPrecision(this.B, precision)}}`;
        } else {
          latex = `f(x) = \\frac{${BaseRegression.maybeToPrecision(
            this.A,
            precision
          )}}{x^{${BaseRegression.maybeToPrecision(-this.B, precision)}}}`;
        }
        latex = latex.replace(/e([+-]?[0-9]+)/g, "e^{$1}");
        return latex;
      }
      static load(json) {
        if (json.name !== "powerRegression") {
          throw new TypeError("not a power regression model");
        }
        return new _PowerRegression(true, json);
      }
    };
    function regress(pr, x, y) {
      const n = x.length;
      const xl = new Array(n);
      const yl = new Array(n);
      for (let i = 0; i < n; i++) {
        xl[i] = Math.log(x[i]);
        yl[i] = Math.log(y[i]);
      }
      const linear = new SimpleLinearRegression(xl, yl);
      pr.A = Math.exp(linear.intercept);
      pr.B = linear.slope;
    }
    module2.exports = PowerRegression;
  }
});

// node_modules/ml-regression-multivariate-linear/lib/index.js
var require_lib18 = __commonJS({
  "node_modules/ml-regression-multivariate-linear/lib/index.js"(exports2, module2) {
    "use strict";
    var mlMatrix = require_matrix();
    var MultivariateLinearRegression = class _MultivariateLinearRegression {
      constructor(x, y, options = {}) {
        const { intercept = true, statistics = true } = options;
        this.statistics = statistics;
        if (x === true) {
          this.weights = y.weights;
          this.inputs = y.inputs;
          this.outputs = y.outputs;
          this.intercept = y.intercept;
        } else {
          x = new mlMatrix.Matrix(x);
          y = new mlMatrix.Matrix(y);
          if (intercept) {
            x.addColumn(new Array(x.rows).fill(1));
          }
          let xt = x.transpose();
          const xx = xt.mmul(x);
          const xy = xt.mmul(y);
          const invxx = new mlMatrix.SVD(xx).inverse();
          const beta = xy.transpose().mmul(invxx).transpose();
          this.weights = beta.to2DArray();
          this.inputs = x.columns;
          this.outputs = y.columns;
          if (intercept)
            this.inputs--;
          this.intercept = intercept;
          if (statistics) {
            const fittedValues = x.mmul(beta);
            const residuals = y.clone().addM(fittedValues.neg());
            const variance = residuals.to2DArray().map((ri) => Math.pow(ri[0], 2)).reduce((a, b) => a + b) / (y.rows - x.columns);
            this.stdError = Math.sqrt(variance);
            this.stdErrorMatrix = mlMatrix.pseudoInverse(xx).mul(variance);
            this.stdErrors = this.stdErrorMatrix.diagonal().map((d) => Math.sqrt(d));
            this.tStats = this.weights.map(
              (d, i) => this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i]
            );
          }
        }
      }
      predict(x) {
        if (Array.isArray(x)) {
          if (typeof x[0] === "number") {
            return this._predict(x);
          } else if (Array.isArray(x[0])) {
            const y = new Array(x.length);
            for (let i = 0; i < x.length; i++) {
              y[i] = this._predict(x[i]);
            }
            return y;
          }
        } else if (mlMatrix.Matrix.isMatrix(x)) {
          const y = new mlMatrix.Matrix(x.rows, this.outputs);
          for (let i = 0; i < x.rows; i++) {
            y.setRow(i, this._predict(x.getRow(i)));
          }
          return y;
        }
        throw new TypeError("x must be a matrix or array of numbers");
      }
      _predict(x) {
        const result = new Array(this.outputs);
        if (this.intercept) {
          for (let i = 0; i < this.outputs; i++) {
            result[i] = this.weights[this.inputs][i];
          }
        } else {
          result.fill(0);
        }
        for (let i = 0; i < this.inputs; i++) {
          for (let j = 0; j < this.outputs; j++) {
            result[j] += this.weights[i][j] * x[i];
          }
        }
        return result;
      }
      score() {
        throw new Error("score method is not implemented yet");
      }
      toJSON() {
        return {
          name: "multivariateLinearRegression",
          weights: this.weights,
          inputs: this.inputs,
          outputs: this.outputs,
          intercept: this.intercept,
          summary: this.statistics ? {
            regressionStatistics: {
              standardError: this.stdError,
              observations: this.outputs
            },
            variables: this.weights.map((d, i) => {
              return {
                label: i === this.weights.length - 1 ? "Intercept" : `X Variable ${i + 1}`,
                coefficients: d,
                standardError: this.stdErrors[i],
                tStat: this.tStats[i]
              };
            })
          } : void 0
        };
      }
      static load(model) {
        if (model.name !== "multivariateLinearRegression") {
          throw new Error("not a MLR model");
        }
        return new _MultivariateLinearRegression(true, model);
      }
    };
    module2.exports = MultivariateLinearRegression;
  }
});

// node_modules/ml-distance-euclidean/lib/euclidean.js
var require_euclidean = __commonJS({
  "node_modules/ml-distance-euclidean/lib/euclidean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function squaredEuclidean(p, q) {
      let d = 0;
      for (let i = 0; i < p.length; i++) {
        d += (p[i] - q[i]) * (p[i] - q[i]);
      }
      return d;
    }
    exports2.squaredEuclidean = squaredEuclidean;
    function euclidean(p, q) {
      return Math.sqrt(squaredEuclidean(p, q));
    }
    exports2.euclidean = euclidean;
  }
});

// node_modules/ml-kernel-gaussian/gaussian-kernel.js
var require_gaussian_kernel = __commonJS({
  "node_modules/ml-kernel-gaussian/gaussian-kernel.js"(exports2, module2) {
    "use strict";
    var { squaredEuclidean } = require_euclidean();
    var defaultOptions = {
      sigma: 1
    };
    var GaussianKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.sigma = options.sigma;
        this.divisor = 2 * options.sigma * options.sigma;
      }
      compute(x, y) {
        const distance = squaredEuclidean(x, y);
        return Math.exp(-distance / this.divisor);
      }
    };
    module2.exports = GaussianKernel;
  }
});

// node_modules/ml-kernel-polynomial/polynomial-kernel.js
var require_polynomial_kernel = __commonJS({
  "node_modules/ml-kernel-polynomial/polynomial-kernel.js"(exports2, module2) {
    "use strict";
    var defaultOptions = {
      degree: 1,
      constant: 1,
      scale: 1
    };
    var PolynomialKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.degree = options.degree;
        this.constant = options.constant;
        this.scale = options.scale;
      }
      compute(x, y) {
        var sum = 0;
        for (var i = 0; i < x.length; i++) {
          sum += x[i] * y[i];
        }
        return Math.pow(this.scale * sum + this.constant, this.degree);
      }
    };
    module2.exports = PolynomialKernel;
  }
});

// node_modules/ml-kernel-sigmoid/sigmoid-kernel.js
var require_sigmoid_kernel = __commonJS({
  "node_modules/ml-kernel-sigmoid/sigmoid-kernel.js"(exports2, module2) {
    "use strict";
    var defaultOptions = {
      alpha: 0.01,
      constant: -Math.E
    };
    var SigmoidKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.alpha = options.alpha;
        this.constant = options.constant;
      }
      compute(x, y) {
        var sum = 0;
        for (var i = 0; i < x.length; i++) {
          sum += x[i] * y[i];
        }
        return Math.tanh(this.alpha * sum + this.constant);
      }
    };
    module2.exports = SigmoidKernel;
  }
});

// node_modules/ml-kernel/src/kernels/anova-kernel.js
var require_anova_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/anova-kernel.js"(exports2, module2) {
    "use strict";
    var defaultOptions = {
      sigma: 1,
      degree: 1
    };
    var ANOVAKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.sigma = options.sigma;
        this.degree = options.degree;
      }
      compute(x, y) {
        var sum = 0;
        var len = Math.min(x.length, y.length);
        for (var i = 1; i <= len; ++i) {
          sum += Math.pow(
            Math.exp(
              -this.sigma * Math.pow(Math.pow(x[i - 1], i) - Math.pow(y[i - 1], i), 2)
            ),
            this.degree
          );
        }
        return sum;
      }
    };
    module2.exports = ANOVAKernel;
  }
});

// node_modules/ml-kernel/src/kernels/cauchy-kernel.js
var require_cauchy_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/cauchy-kernel.js"(exports2, module2) {
    "use strict";
    var { squaredEuclidean } = require_euclidean();
    var defaultOptions = {
      sigma: 1
    };
    var CauchyKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.sigma = options.sigma;
      }
      compute(x, y) {
        return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));
      }
    };
    module2.exports = CauchyKernel;
  }
});

// node_modules/ml-kernel/src/kernels/exponential-kernel.js
var require_exponential_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/exponential-kernel.js"(exports2, module2) {
    "use strict";
    var { euclidean } = require_euclidean();
    var defaultOptions = {
      sigma: 1
    };
    var ExponentialKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.sigma = options.sigma;
        this.divisor = 2 * options.sigma * options.sigma;
      }
      compute(x, y) {
        const distance = euclidean(x, y);
        return Math.exp(-distance / this.divisor);
      }
    };
    module2.exports = ExponentialKernel;
  }
});

// node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js
var require_histogram_intersection_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js"(exports2, module2) {
    "use strict";
    var HistogramIntersectionKernel = class {
      compute(x, y) {
        var min = Math.min(x.length, y.length);
        var sum = 0;
        for (var i = 0; i < min; ++i) {
          sum += Math.min(x[i], y[i]);
        }
        return sum;
      }
    };
    module2.exports = HistogramIntersectionKernel;
  }
});

// node_modules/ml-kernel/src/kernels/laplacian-kernel.js
var require_laplacian_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/laplacian-kernel.js"(exports2, module2) {
    "use strict";
    var { euclidean } = require_euclidean();
    var defaultOptions = {
      sigma: 1
    };
    var LaplacianKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.sigma = options.sigma;
      }
      compute(x, y) {
        const distance = euclidean(x, y);
        return Math.exp(-distance / this.sigma);
      }
    };
    module2.exports = LaplacianKernel;
  }
});

// node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js
var require_multiquadratic_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js"(exports2, module2) {
    "use strict";
    var { squaredEuclidean } = require_euclidean();
    var defaultOptions = {
      constant: 1
    };
    var MultiquadraticKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.constant = options.constant;
      }
      compute(x, y) {
        return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);
      }
    };
    module2.exports = MultiquadraticKernel;
  }
});

// node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js
var require_rational_quadratic_kernel = __commonJS({
  "node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js"(exports2, module2) {
    "use strict";
    var { squaredEuclidean } = require_euclidean();
    var defaultOptions = {
      constant: 1
    };
    var RationalQuadraticKernel = class {
      constructor(options) {
        options = Object.assign({}, defaultOptions, options);
        this.constant = options.constant;
      }
      compute(x, y) {
        const distance = squaredEuclidean(x, y);
        return 1 - distance / (distance + this.constant);
      }
    };
    module2.exports = RationalQuadraticKernel;
  }
});

// node_modules/ml-kernel/src/kernel.js
var require_kernel2 = __commonJS({
  "node_modules/ml-kernel/src/kernel.js"(exports2, module2) {
    "use strict";
    var { Matrix, MatrixTransposeView } = require_matrix();
    var GaussianKernel = require_gaussian_kernel();
    var PolynomialKernel = require_polynomial_kernel();
    var SigmoidKernel = require_sigmoid_kernel();
    var ANOVAKernel = require_anova_kernel();
    var CauchyKernel = require_cauchy_kernel();
    var ExponentialKernel = require_exponential_kernel();
    var HistogramKernel = require_histogram_intersection_kernel();
    var LaplacianKernel = require_laplacian_kernel();
    var MultiquadraticKernel = require_multiquadratic_kernel();
    var RationalKernel = require_rational_quadratic_kernel();
    var kernelType = {
      gaussian: GaussianKernel,
      rbf: GaussianKernel,
      polynomial: PolynomialKernel,
      poly: PolynomialKernel,
      anova: ANOVAKernel,
      cauchy: CauchyKernel,
      exponential: ExponentialKernel,
      histogram: HistogramKernel,
      min: HistogramKernel,
      laplacian: LaplacianKernel,
      multiquadratic: MultiquadraticKernel,
      rational: RationalKernel,
      sigmoid: SigmoidKernel,
      mlp: SigmoidKernel
    };
    var Kernel = class {
      constructor(type, options) {
        this.kernelType = type;
        if (type === "linear")
          return;
        if (typeof type === "string") {
          type = type.toLowerCase();
          var KernelConstructor = kernelType[type];
          if (KernelConstructor) {
            this.kernelFunction = new KernelConstructor(options);
          } else {
            throw new Error(`unsupported kernel type: ${type}`);
          }
        } else if (typeof type === "object" && typeof type.compute === "function") {
          this.kernelFunction = type;
        } else {
          throw new TypeError(
            "first argument must be a valid kernel type or instance"
          );
        }
      }
      compute(inputs, landmarks) {
        inputs = Matrix.checkMatrix(inputs);
        if (landmarks === void 0) {
          landmarks = inputs;
        } else {
          landmarks = Matrix.checkMatrix(landmarks);
        }
        if (this.kernelType === "linear") {
          return inputs.mmul(new MatrixTransposeView(landmarks));
        }
        const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);
        if (inputs === landmarks) {
          for (let i = 0; i < inputs.rows; i++) {
            for (let j = i; j < inputs.rows; j++) {
              const value = this.kernelFunction.compute(
                inputs.getRow(i),
                inputs.getRow(j)
              );
              kernelMatrix.set(i, j, value);
              kernelMatrix.set(j, i, value);
            }
          }
        } else {
          for (let i = 0; i < inputs.rows; i++) {
            for (let j = 0; j < landmarks.rows; j++) {
              kernelMatrix.set(
                i,
                j,
                this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))
              );
            }
          }
        }
        return kernelMatrix;
      }
    };
    module2.exports = Kernel;
  }
});

// node_modules/ml-array-median/lib/index.js
var require_lib19 = __commonJS({
  "node_modules/ml-array-median/lib/index.js"(exports2, module2) {
    "use strict";
    var isAnyArray = require_lib6();
    var quickSelectMedian = require_median_quickselect_min();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var quickSelectMedian__default = /* @__PURE__ */ _interopDefaultLegacy(quickSelectMedian);
    function median(input) {
      if (!isAnyArray.isAnyArray(input)) {
        throw new TypeError("input must be an array");
      }
      if (input.length === 0) {
        throw new TypeError("input must not be empty");
      }
      return quickSelectMedian__default["default"](input.slice());
    }
    module2.exports = median;
  }
});

// node_modules/ml-regression-theil-sen/lib/index.js
var require_lib20 = __commonJS({
  "node_modules/ml-regression-theil-sen/lib/index.js"(exports2, module2) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var BaseRegression = require_lib10();
    var BaseRegression__default = _interopDefault(BaseRegression);
    var median = _interopDefault(require_lib19());
    var TheilSenRegression = class _TheilSenRegression extends BaseRegression__default {
      /**
       * Theil–Sen estimator
       * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator
       * @param {Array<number>|boolean} x
       * @param {Array<number>|object} y
       * @constructor
       */
      constructor(x, y) {
        super();
        if (x === true) {
          this.slope = y.slope;
          this.intercept = y.intercept;
          this.coefficients = y.coefficients;
        } else {
          BaseRegression.checkArrayLength(x, y);
          theilSen(this, x, y);
        }
      }
      toJSON() {
        return {
          name: "TheilSenRegression",
          slope: this.slope,
          intercept: this.intercept
        };
      }
      _predict(input) {
        return this.slope * input + this.intercept;
      }
      computeX(input) {
        return (input - this.intercept) / this.slope;
      }
      toString(precision) {
        var result = "f(x) = ";
        if (this.slope) {
          var xFactor = BaseRegression.maybeToPrecision(this.slope, precision);
          result += `${Math.abs(xFactor - 1) < 1e-5 ? "" : `${xFactor} * `}x`;
          if (this.intercept) {
            var absIntercept = Math.abs(this.intercept);
            var operator = absIntercept === this.intercept ? "+" : "-";
            result += ` ${operator} ${BaseRegression.maybeToPrecision(absIntercept, precision)}`;
          }
        } else {
          result += BaseRegression.maybeToPrecision(this.intercept, precision);
        }
        return result;
      }
      toLaTeX(precision) {
        return this.toString(precision);
      }
      static load(json) {
        if (json.name !== "TheilSenRegression") {
          throw new TypeError("not a Theil-Sen model");
        }
        return new _TheilSenRegression(true, json);
      }
    };
    function theilSen(regression, x, y) {
      let len = x.length;
      let slopes = new Array(len * len);
      let count = 0;
      for (let i = 0; i < len; ++i) {
        for (let j = i + 1; j < len; ++j) {
          if (x[i] !== x[j]) {
            slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);
          }
        }
      }
      slopes.length = count;
      let medianSlope = median(slopes);
      let cuts = new Array(len);
      for (let i = 0; i < len; ++i) {
        cuts[i] = y[i] - medianSlope * x[i];
      }
      regression.slope = medianSlope;
      regression.intercept = median(cuts);
      regression.coefficients = [regression.intercept, regression.slope];
    }
    module2.exports = TheilSenRegression;
  }
});

// node_modules/ml-regression-robust-polynomial/lib/index.js
var require_lib21 = __commonJS({
  "node_modules/ml-regression-robust-polynomial/lib/index.js"(exports2, module2) {
    "use strict";
    var mlMatrix = require_matrix();
    var BaseRegression = require_lib10();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var BaseRegression__default = /* @__PURE__ */ _interopDefaultLegacy(BaseRegression);
    var RobustPolynomialRegression = class _RobustPolynomialRegression extends BaseRegression__default["default"] {
      constructor(x, y, degree) {
        super();
        if (x === true) {
          this.degree = y.degree;
          this.powers = y.powers;
          this.coefficients = y.coefficients;
        } else {
          BaseRegression.checkArrayLength(x, y);
          robustPolynomial(this, x, y, degree);
        }
      }
      toJSON() {
        return {
          name: "robustPolynomialRegression",
          degree: this.degree,
          powers: this.powers,
          coefficients: this.coefficients
        };
      }
      _predict(x) {
        return predict(x, this.powers, this.coefficients);
      }
      /**
       * Display the formula
       * @param {number} precision - precision for the numbers
       * @return {string}
       */
      toString(precision) {
        return this._toFormula(precision, false);
      }
      /**
       * Display the formula in LaTeX format
       * @param {number} precision - precision for the numbers
       * @return {string}
       */
      toLaTeX(precision) {
        return this._toFormula(precision, true);
      }
      _toFormula(precision, isLaTeX) {
        let sup = "^";
        let closeSup = "";
        let times = " * ";
        if (isLaTeX) {
          sup = "^{";
          closeSup = "}";
          times = "";
        }
        let fn = "";
        let str = "";
        for (let k = 0; k < this.coefficients.length; k++) {
          str = "";
          if (this.coefficients[k] !== 0) {
            if (this.powers[k] === 0) {
              str = BaseRegression.maybeToPrecision(this.coefficients[k], precision);
            } else {
              if (this.powers[k] === 1) {
                str = `${BaseRegression.maybeToPrecision(this.coefficients[k], precision) + times}x`;
              } else {
                str = `${BaseRegression.maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;
              }
            }
            if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {
              str = ` + ${str}`;
            } else if (k !== this.coefficients.length - 1) {
              str = ` ${str}`;
            }
          }
          fn = str + fn;
        }
        if (fn.charAt(0) === "+") {
          fn = fn.slice(1);
        }
        return `f(x) = ${fn}`;
      }
      static load(json) {
        if (json.name !== "robustPolynomialRegression") {
          throw new TypeError("not a RobustPolynomialRegression model");
        }
        return new _RobustPolynomialRegression(true, json);
      }
    };
    function robustPolynomial(regression, x, y, degree) {
      let powers = Array(degree).fill(0).map((_, index) => index);
      const tuples = getRandomTuples(x, y, degree);
      let min;
      for (let i = 0; i < tuples.length; i++) {
        let tuple = tuples[i];
        let coefficients = calcCoefficients(tuple, powers);
        let residuals = x.slice();
        for (let j = 0; j < x.length; j++) {
          residuals[j] = y[j] - predict(x[j], powers, coefficients);
          residuals[j] = {
            residual: residuals[j] * residuals[j],
            coefficients
          };
        }
        let median = residualsMedian(residuals);
        if (!min || median.residual < min.residual) {
          min = median;
        }
      }
      regression.degree = degree;
      regression.powers = powers;
      regression.coefficients = min.coefficients;
    }
    function getRandomTuples(x, y, degree) {
      let len = Math.floor(x.length / degree);
      let tuples = new Array(len);
      for (let i = 0; i < x.length; i++) {
        let pos = Math.floor(Math.random() * len);
        let counter = 0;
        while (counter < x.length) {
          if (!tuples[pos]) {
            tuples[pos] = [
              {
                x: x[i],
                y: y[i]
              }
            ];
            break;
          } else if (tuples[pos].length < degree) {
            tuples[pos].push({
              x: x[i],
              y: y[i]
            });
            break;
          } else {
            counter++;
            pos = (pos + 1) % len;
          }
        }
        if (counter === x.length) {
          return tuples;
        }
      }
      return tuples;
    }
    function calcCoefficients(tuple, powers) {
      let X = tuple.slice();
      let Y = tuple.slice();
      for (let i = 0; i < X.length; i++) {
        Y[i] = [tuple[i].y];
        X[i] = new Array(powers.length);
        for (let j = 0; j < powers.length; j++) {
          X[i][j] = Math.pow(tuple[i].x, powers[j]);
        }
      }
      return mlMatrix.solve(X, Y).to1DArray();
    }
    function predict(x, powers, coefficients) {
      let y = 0;
      for (let k = 0; k < powers.length; k++) {
        y += coefficients[k] * Math.pow(x, powers[k]);
      }
      return y;
    }
    function residualsMedian(residuals) {
      residuals.sort((a, b) => a.residual - b.residual);
      let l = residuals.length;
      let half = Math.floor(l / 2);
      return l % 2 === 0 ? residuals[half - 1] : residuals[half];
    }
    module2.exports = RobustPolynomialRegression;
  }
});

// node_modules/ml-regression/lib/index.js
var require_lib22 = __commonJS({
  "node_modules/ml-regression/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var BaseRegression = require_lib10();
    var BaseRegression__default = _interopDefault(BaseRegression);
    var PolynomialRegression = _interopDefault(require_lib11());
    var mlRegressionSimpleLinear = _interopDefault(require_lib12());
    var mlRegressionExponential = _interopDefault(require_lib16());
    var mlRegressionPower = _interopDefault(require_lib17());
    var mlRegressionMultivariateLinear = _interopDefault(require_lib18());
    var mlMatrix = require_matrix();
    var Kernel = _interopDefault(require_kernel2());
    var mlRegressionTheilSen = _interopDefault(require_lib20());
    var mlRegressionRobustPolynomial = _interopDefault(require_lib21());
    var PotentialRegression = class _PotentialRegression extends BaseRegression__default {
      /**
       * @constructor
       * @param x: Independent variable
       * @param y: Dependent variable
       * @param M
       */
      constructor(x, y, M) {
        super();
        if (x === true) {
          this.A = y.A;
          this.M = y.M;
        } else {
          var n = x.length;
          if (n !== y.length) {
            throw new RangeError("input and output array have a different length");
          }
          var linear = new PolynomialRegression(x, y, [M]);
          this.A = linear.coefficients[0];
          this.M = M;
        }
      }
      _predict(x) {
        return this.A * Math.pow(x, this.M);
      }
      toJSON() {
        return {
          name: "potentialRegression",
          A: this.A,
          M: this.M
        };
      }
      toString(precision) {
        return `f(x) = ${BaseRegression.maybeToPrecision(this.A, precision)} * x^${this.M}`;
      }
      toLaTeX(precision) {
        if (this.M >= 0) {
          return `f(x) = ${BaseRegression.maybeToPrecision(this.A, precision)}x^{${this.M}}`;
        } else {
          return `f(x) = \\frac{${BaseRegression.maybeToPrecision(this.A, precision)}}{x^{${-this.M}}}`;
        }
      }
      static load(json) {
        if (json.name !== "potentialRegression") {
          throw new TypeError("not a potential regression model");
        }
        return new _PotentialRegression(true, json);
      }
    };
    var defaultOptions = {
      lambda: 0.1,
      kernelType: "gaussian",
      kernelOptions: {},
      computeCoefficient: false
    };
    var KernelRidgeRegression = class _KernelRidgeRegression extends BaseRegression__default {
      constructor(inputs, outputs, options) {
        super();
        if (inputs === true) {
          this.alpha = outputs.alpha;
          this.inputs = outputs.inputs;
          this.kernelType = outputs.kernelType;
          this.kernelOptions = outputs.kernelOptions;
          this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);
        } else {
          inputs = mlMatrix.Matrix.checkMatrix(inputs);
          options = Object.assign({}, defaultOptions, options);
          const kernelFunction = new Kernel(
            options.kernelType,
            options.kernelOptions
          );
          const K = kernelFunction.compute(inputs);
          const n = inputs.rows;
          K.add(mlMatrix.Matrix.eye(n, n).mul(options.lambda));
          this.alpha = mlMatrix.solve(K, outputs);
          this.inputs = inputs;
          this.kernelType = options.kernelType;
          this.kernelOptions = options.kernelOptions;
          this.kernel = kernelFunction;
        }
      }
      _predict(newInputs) {
        return this.kernel.compute([newInputs], this.inputs).mmul(this.alpha).getRow(0);
      }
      toJSON() {
        return {
          name: "kernelRidgeRegression",
          alpha: this.alpha,
          inputs: this.inputs,
          kernelType: this.kernelType,
          kernelOptions: this.kernelOptions
        };
      }
      static load(json) {
        if (json.name !== "kernelRidgeRegression") {
          throw new TypeError("not a KRR model");
        }
        return new _KernelRidgeRegression(true, json);
      }
    };
    var defaultOptions$1 = {
      order: 2
    };
    var PolynomialFitRegression2D = class _PolynomialFitRegression2D extends BaseRegression__default {
      /**
       * Constructor for the 2D polynomial fitting
       *
       * @param inputs
       * @param outputs
       * @param options
       * @constructor
       */
      constructor(inputs, outputs, options) {
        super();
        if (inputs === true) {
          this.coefficients = mlMatrix.Matrix.columnVector(outputs.coefficients);
          this.order = outputs.order;
          if (outputs.r) {
            this.r = outputs.r;
            this.r2 = outputs.r2;
          }
          if (outputs.chi2) {
            this.chi2 = outputs.chi2;
          }
        } else {
          options = Object.assign({}, defaultOptions$1, options);
          this.order = options.order;
          this.coefficients = [];
          this.X = inputs;
          this.y = outputs;
          this.train(this.X, this.y, options);
        }
      }
      /**
       * Function that fits the model given the data(X) and predictions(y).
       * The third argument is an object with the following options:
       * * order: order of the polynomial to fit.
       *
       * @param {Matrix} X - A matrix with n rows and 2 columns.
       * @param {Matrix} y - A vector of the prediction values.
       */
      train(X, y) {
        if (!mlMatrix.Matrix.isMatrix(X))
          X = new mlMatrix.Matrix(X);
        if (!mlMatrix.Matrix.isMatrix(y))
          y = mlMatrix.Matrix.columnVector(y);
        if (y.rows !== X.rows) {
          y = y.transpose();
        }
        if (X.columns !== 2) {
          throw new RangeError(
            `You give X with ${X.columns} columns and it must be 2`
          );
        }
        if (X.rows !== y.rows) {
          throw new RangeError("X and y must have the same rows");
        }
        var examples = X.rows;
        var coefficients = (this.order + 2) * (this.order + 1) / 2;
        this.coefficients = new Array(coefficients);
        var x1 = X.getColumnVector(0);
        var x2 = X.getColumnVector(1);
        var scaleX1 = 1 / x1.clone().abs().max();
        var scaleX2 = 1 / x2.clone().abs().max();
        var scaleY = 1 / y.clone().abs().max();
        x1.mulColumn(0, scaleX1);
        x2.mulColumn(0, scaleX2);
        y.mulColumn(0, scaleY);
        var A = new mlMatrix.Matrix(examples, coefficients);
        var col = 0;
        for (var i = 0; i <= this.order; ++i) {
          var limit = this.order - i;
          for (var j = 0; j <= limit; ++j) {
            var result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));
            A.setColumn(col, result);
            col++;
          }
        }
        var svd = new mlMatrix.SVD(A.transpose(), {
          computeLeftSingularVectors: true,
          computeRightSingularVectors: true,
          autoTranspose: false
        });
        var qqs = mlMatrix.Matrix.rowVector(svd.diagonal);
        qqs = qqs.apply(function(i2, j2) {
          if (this.get(i2, j2) >= 1e-15)
            this.set(i2, j2, 1 / this.get(i2, j2));
          else
            this.set(i2, j2, 0);
        });
        var qqs1 = mlMatrix.Matrix.zeros(examples, coefficients);
        for (i = 0; i < coefficients; ++i) {
          qqs1.set(i, i, qqs.get(0, i));
        }
        qqs = qqs1;
        var U = svd.rightSingularVectors;
        var V = svd.leftSingularVectors;
        this.coefficients = V.mmul(qqs.transpose()).mmul(U.transpose()).mmul(y);
        col = 0;
        for (i = 0; i <= coefficients; ++i) {
          limit = this.order - i;
          for (j = 0; j <= limit; ++j) {
            this.coefficients.set(
              col,
              0,
              this.coefficients.get(col, 0) * Math.pow(scaleX1, i) * Math.pow(scaleX2, j) / scaleY
            );
            col++;
          }
        }
      }
      _predict(newInputs) {
        var x1 = newInputs[0];
        var x2 = newInputs[1];
        var y = 0;
        var column = 0;
        for (var i = 0; i <= this.order; i++) {
          for (var j = 0; j <= this.order - i; j++) {
            y += Math.pow(x1, i) * Math.pow(x2, j) * this.coefficients.get(column, 0);
            column++;
          }
        }
        return y;
      }
      toJSON() {
        return {
          name: "polyfit2D",
          order: this.order,
          coefficients: this.coefficients
        };
      }
      static load(json) {
        if (json.name !== "polyfit2D") {
          throw new TypeError("not a polyfit2D model");
        }
        return new _PolynomialFitRegression2D(true, json);
      }
    };
    function powColVector(x, power) {
      var result = x.clone();
      for (var i = 0; i < x.rows; ++i) {
        result.set(i, 0, Math.pow(result.get(i, 0), power));
      }
      return result;
    }
    var NLR = {
      PotentialRegression
    };
    exports2.PolynomialRegression = PolynomialRegression;
    exports2.SLR = mlRegressionSimpleLinear;
    exports2.SimpleLinearRegression = mlRegressionSimpleLinear;
    exports2.ExponentialRegression = mlRegressionExponential;
    exports2.PowerRegression = mlRegressionPower;
    exports2.MultivariateLinearRegression = mlRegressionMultivariateLinear;
    exports2.TheilSenRegression = mlRegressionTheilSen;
    exports2.RobustPolynomialRegression = mlRegressionRobustPolynomial;
    exports2.KRR = KernelRidgeRegression;
    exports2.KernelRidgeRegression = KernelRidgeRegression;
    exports2.NLR = NLR;
    exports2.NonLinearRegression = NLR;
    exports2.PolinomialFitting2D = PolynomialFitRegression2D;
  }
});

// node_modules/image-js/lib/image/filter/background.js
var require_background = __commonJS({
  "node_modules/image-js/lib/image/filter/background.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = background;
    var _mlRegression = require_lib22();
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function background(coordinates, values, options) {
      const model = new _mlRegression.KernelRidgeRegression(coordinates, values, options);
      const allCoordinates = new Array(this.size);
      for (let i = 0; i < this.width; i++) {
        for (let j = 0; j < this.height; j++) {
          allCoordinates[j * this.width + i] = [i, j];
        }
      }
      const result = model.predict(allCoordinates);
      const background2 = _Image.default.createFrom(this);
      for (let i = 0; i < this.size; i++) {
        background2.data[i] = Math.min(this.maxValue, Math.max(0, result[i][0]));
      }
      return background2;
    }
  }
});

// node_modules/image-js/lib/image/morphology/dilate.js
var require_dilate = __commonJS({
  "node_modules/image-js/lib/image/morphology/dilate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = dilate;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function dilate(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("dilate", {
        bitDepth: [1, 8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {
        throw new TypeError("dilate: The number of rows and columns of the kernel must be odd");
      }
      let onlyOnes = true;
      outer:
        for (const row of kernel) {
          for (const value of row) {
            if (value !== 1) {
              onlyOnes = false;
              break outer;
            }
          }
        }
      let result = this;
      for (let i = 0; i < iterations; i++) {
        if (this.bitDepth === 1) {
          if (onlyOnes) {
            const newImage = result.clone();
            result = dilateOnceBinaryOnlyOnes(result, newImage, kernel.length, kernel[0].length);
          } else {
            const newImage = _Image.default.createFrom(result);
            result = dilateOnceBinary(result, newImage, kernel);
          }
        } else if (onlyOnes) {
          const newImage = _Image.default.createFrom(result);
          result = dilateOnceGreyOnlyOnes(result, newImage, kernel.length, kernel[0].length);
        } else {
          const newImage = _Image.default.createFrom(result);
          result = dilateOnceGrey(result, newImage, kernel);
        }
      }
      return result;
    }
    function dilateOnceGrey(img, newImage, kernel) {
      const kernelWidth = kernel.length;
      const kernelHeight = kernel[0].length;
      let radiusX = (kernelWidth - 1) / 2;
      let radiusY = (kernelHeight - 1) / 2;
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          let max = 0;
          for (let jj = 0; jj < kernelHeight; jj++) {
            for (let ii = 0; ii < kernelWidth; ii++) {
              if (kernel[ii][jj] !== 1)
                continue;
              let i = ii - radiusX + x;
              let j = jj - radiusY + y;
              if (i < 0 || j < 0 || i >= img.width || j >= img.height)
                continue;
              const value = img.getValueXY(i, j, 0);
              if (value > max)
                max = value;
            }
          }
          newImage.setValueXY(x, y, 0, max);
        }
      }
      return newImage;
    }
    function dilateOnceGreyOnlyOnes(img, newImage, kernelWidth, kernelHeight) {
      const radiusX = (kernelWidth - 1) / 2;
      const radiusY = (kernelHeight - 1) / 2;
      const maxList = [];
      for (let x = 0; x < img.width; x++) {
        maxList.push(0);
      }
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          let max = 0;
          for (let h = Math.max(0, y - radiusY); h < Math.min(img.height, y + radiusY + 1); h++) {
            const value = img.getValueXY(x, h, 0);
            if (value > max) {
              max = value;
            }
          }
          maxList[x] = max;
        }
        for (let x = 0; x < img.width; x++) {
          let max = 0;
          for (let i = Math.max(0, x - radiusX); i < Math.min(img.width, x + radiusX + 1); i++) {
            if (maxList[i] > max) {
              max = maxList[i];
            }
          }
          newImage.setValueXY(x, y, 0, max);
        }
      }
      return newImage;
    }
    function dilateOnceBinary(img, newImage, kernel) {
      const kernelWidth = kernel.length;
      const kernelHeight = kernel[0].length;
      let radiusX = (kernelWidth - 1) / 2;
      let radiusY = (kernelHeight - 1) / 2;
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          let max = 0;
          intLoop:
            for (let jj = 0; jj < kernelHeight; jj++) {
              for (let ii = 0; ii < kernelWidth; ii++) {
                if (kernel[ii][jj] !== 1)
                  continue;
                let i = ii - radiusX + x;
                let j = jj - radiusY + y;
                if (j < 0 || i < 0 || i >= img.width || j >= img.height)
                  continue;
                const value = img.getBitXY(i, j);
                if (value === 1) {
                  max = 1;
                  break intLoop;
                }
              }
            }
          if (max === 1) {
            newImage.setBitXY(x, y);
          }
        }
      }
      return newImage;
    }
    function dilateOnceBinaryOnlyOnes(img, newImage, kernelWidth, kernelHeight) {
      const radiusX = (kernelWidth - 1) / 2;
      const radiusY = (kernelHeight - 1) / 2;
      const maxList = [];
      for (let x = 0; x < img.width; x++) {
        maxList.push(1);
      }
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          maxList[x] = 0;
          for (let h = Math.max(0, y - radiusY); h < Math.min(img.height, y + radiusY + 1); h++) {
            if (img.getBitXY(x, h) === 1) {
              maxList[x] = 1;
              break;
            }
          }
        }
        for (let x = 0; x < img.width; x++) {
          if (newImage.getBitXY(x, y) === 1)
            continue;
          for (let i = Math.max(0, x - radiusX); i < Math.min(img.width, x + radiusX + 1); i++) {
            if (maxList[i] === 1) {
              newImage.setBitXY(x, y);
              break;
            }
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/morphology/erode.js
var require_erode = __commonJS({
  "node_modules/image-js/lib/image/morphology/erode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = erode;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function erode(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("erode", {
        bitDepth: [1, 8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {
        throw new TypeError("erode: The number of rows and columns of the kernel must be odd");
      }
      let onlyOnes = true;
      outer:
        for (const row of kernel) {
          for (const value of row) {
            if (value !== 1) {
              onlyOnes = false;
              break outer;
            }
          }
        }
      let result = this;
      for (let i = 0; i < iterations; i++) {
        if (this.bitDepth === 1) {
          if (onlyOnes) {
            const newImage = result.clone();
            result = erodeOnceBinaryOnlyOnes(result, newImage, kernel.length, kernel[0].length);
          } else {
            const newImage = _Image.default.createFrom(result);
            result = erodeOnceBinary(result, newImage, kernel);
          }
        } else if (onlyOnes) {
          const newImage = _Image.default.createFrom(result);
          result = erodeOnceGreyOnlyOnes(result, newImage, kernel.length, kernel[0].length);
        } else {
          const newImage = _Image.default.createFrom(result);
          result = erodeOnceGrey(result, newImage, kernel);
        }
      }
      return result;
    }
    function erodeOnceGrey(img, newImage, kernel) {
      const kernelWidth = kernel.length;
      const kernelHeight = kernel[0].length;
      let radiusX = (kernelWidth - 1) / 2;
      let radiusY = (kernelHeight - 1) / 2;
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          let min = img.maxValue;
          for (let jj = 0; jj < kernelHeight; jj++) {
            for (let ii = 0; ii < kernelWidth; ii++) {
              if (kernel[ii][jj] !== 1)
                continue;
              let i = ii - radiusX + x;
              let j = jj - radiusY + y;
              if (i < 0 || j < 0 || i >= img.width || j >= img.height)
                continue;
              const value = img.getValueXY(i, j, 0);
              if (value < min)
                min = value;
            }
          }
          newImage.setValueXY(x, y, 0, min);
        }
      }
      return newImage;
    }
    function erodeOnceGreyOnlyOnes(img, newImage, kernelWidth, kernelHeight) {
      const radiusX = (kernelWidth - 1) / 2;
      const radiusY = (kernelHeight - 1) / 2;
      const minList = [];
      for (let x = 0; x < img.width; x++) {
        minList.push(0);
      }
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          let min = img.maxValue;
          for (let h = Math.max(0, y - radiusY); h < Math.min(img.height, y + radiusY + 1); h++) {
            const value = img.getValueXY(x, h, 0);
            if (value < min) {
              min = value;
            }
          }
          minList[x] = min;
        }
        for (let x = 0; x < img.width; x++) {
          let min = img.maxValue;
          for (let i = Math.max(0, x - radiusX); i < Math.min(img.width, x + radiusX + 1); i++) {
            if (minList[i] < min) {
              min = minList[i];
            }
          }
          newImage.setValueXY(x, y, 0, min);
        }
      }
      return newImage;
    }
    function erodeOnceBinary(img, newImage, kernel) {
      const kernelWidth = kernel.length;
      const kernelHeight = kernel[0].length;
      let radiusX = (kernelWidth - 1) / 2;
      let radiusY = (kernelHeight - 1) / 2;
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          let min = 1;
          intLoop:
            for (let jj = 0; jj < kernelHeight; jj++) {
              for (let ii = 0; ii < kernelWidth; ii++) {
                if (kernel[ii][jj] !== 1)
                  continue;
                let i = ii - radiusX + x;
                let j = jj - radiusY + y;
                if (j < 0 || i < 0 || i >= img.width || j >= img.height)
                  continue;
                const value = img.getBitXY(i, j);
                if (value === 0) {
                  min = 0;
                  break intLoop;
                }
              }
            }
          if (min === 1) {
            newImage.setBitXY(x, y);
          }
        }
      }
      return newImage;
    }
    function erodeOnceBinaryOnlyOnes(img, newImage, kernelWidth, kernelHeight) {
      const radiusX = (kernelWidth - 1) / 2;
      const radiusY = (kernelHeight - 1) / 2;
      const minList = [];
      for (let x = 0; x < img.width; x++) {
        minList.push(0);
      }
      for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
          minList[x] = 1;
          for (let h = Math.max(0, y - radiusY); h < Math.min(img.height, y + radiusY + 1); h++) {
            if (img.getBitXY(x, h) === 0) {
              minList[x] = 0;
              break;
            }
          }
        }
        for (let x = 0; x < img.width; x++) {
          if (newImage.getBitXY(x, y) === 0)
            continue;
          for (let i = Math.max(0, x - radiusX); i < Math.min(img.width, x + radiusX + 1); i++) {
            if (minList[i] === 0) {
              newImage.clearBitXY(x, y);
              break;
            }
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/morphology/open.js
var require_open = __commonJS({
  "node_modules/image-js/lib/image/morphology/open.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = open;
    function open(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("open", {
        bitDepth: [8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {
        throw new TypeError("open: The number of rows and columns of the kernel must be odd");
      }
      let newImage = this;
      for (let i = 0; i < iterations; i++) {
        newImage = newImage.erode({
          kernel
        });
        newImage = newImage.dilate({
          kernel
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/morphology/close.js
var require_close = __commonJS({
  "node_modules/image-js/lib/image/morphology/close.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = close;
    function close(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("close", {
        bitDepth: [1, 8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {
        throw new TypeError("close: The number of rows and columns of the kernel must be odd");
      }
      let newImage = this;
      for (let i = 0; i < iterations; i++) {
        newImage = newImage.dilate({
          kernel
        }).erode({
          kernel
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/morphology/topHat.js
var require_topHat = __commonJS({
  "node_modules/image-js/lib/image/morphology/topHat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = topHat;
    function topHat(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("topHat", {
        bitDepth: [8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.length % 2 === 0 || kernel[0].length % 2 === 0) {
        throw new TypeError("topHat: The number of rows and columns of the kernel must be odd");
      }
      let newImage = this;
      for (let i = 0; i < iterations; i++) {
        let openImage = newImage.open({
          kernel
        });
        newImage = openImage.subtractImage(newImage, {
          absolute: true
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/morphology/blackHat.js
var require_blackHat = __commonJS({
  "node_modules/image-js/lib/image/morphology/blackHat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = blackHat;
    function blackHat(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("blackHat", {
        bitDepth: [8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {
        throw new TypeError("blackHat: The number of rows and columns of the kernel must be odd");
      }
      let newImage = this;
      for (let i = 0; i < iterations; i++) {
        const closeImage = newImage.close({
          kernel
        });
        newImage = closeImage.subtractImage(newImage, {
          absolute: true
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/morphology/morphologicalGradient.js
var require_morphologicalGradient = __commonJS({
  "node_modules/image-js/lib/image/morphology/morphologicalGradient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = morphologicalGradient;
    function morphologicalGradient(options = {}) {
      let {
        kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
        iterations = 1
      } = options;
      this.checkProcessable("morphologicalGradient", {
        bitDepth: [8, 16],
        components: 1,
        alpha: 0
      });
      if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {
        throw new TypeError("morphologicalGradient: The number of rows and columns of the kernel must be odd");
      }
      let newImage = this;
      for (let i = 0; i < iterations; i++) {
        let dilatedImage = newImage.dilate({
          kernel
        });
        let erodedImage = newImage.erode({
          kernel
        });
        newImage = dilatedImage.subtractImage(erodedImage, {
          absolute: true
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/warping.js
var require_warping = __commonJS({
  "node_modules/image-js/lib/image/transform/warping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = warpingFourPoints;
    var _mlMatrix = require_matrix();
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function order4Points(pts) {
      let tl = 0;
      let tr = 0;
      let br = 0;
      let bl = 0;
      let minX = pts[0][0];
      let indexMinX = 0;
      for (let i = 1; i < pts.length; i++) {
        if (pts[i][0] < minX) {
          minX = pts[i][0];
          indexMinX = i;
        }
      }
      let minX2 = pts[(indexMinX + 1) % pts.length][0];
      let indexMinX2 = (indexMinX + 1) % pts.length;
      for (let i = 1; i < pts.length; i++) {
        if (pts[i][0] < minX2 && i !== indexMinX) {
          minX2 = pts[i][0];
          indexMinX2 = i;
        }
      }
      if (pts[indexMinX2][1] < pts[indexMinX][1]) {
        tl = pts[indexMinX2];
        bl = pts[indexMinX];
        if (indexMinX !== (indexMinX2 + 1) % 4) {
          tr = pts[(indexMinX2 + 1) % 4];
          br = pts[(indexMinX2 + 2) % 4];
        } else {
          tr = pts[(indexMinX2 + 2) % 4];
          br = pts[(indexMinX2 + 3) % 4];
        }
      } else {
        bl = pts[indexMinX2];
        tl = pts[indexMinX];
        if (indexMinX2 !== (indexMinX + 1) % 4) {
          tr = pts[(indexMinX + 1) % 4];
          br = pts[(indexMinX + 2) % 4];
        } else {
          tr = pts[(indexMinX + 2) % 4];
          br = pts[(indexMinX + 3) % 4];
        }
      }
      return [tl, tr, br, bl];
    }
    function distance2Points(p1, p2) {
      return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
    }
    function crossVect(u, v) {
      let result = [u[1] * v[2] - u[2] * v[1], u[2] * v[0] - u[0] * v[2], u[0] * v[1] - u[1] * v[0]];
      return result;
    }
    function dotVect(u, v) {
      let result = u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
      return result;
    }
    function computeWidthAndHeigth(tl, tr, br, bl, widthImage, heightImage) {
      let w = Math.max(distance2Points(tl, tr), distance2Points(bl, br));
      let h = Math.max(distance2Points(tl, bl), distance2Points(tr, br));
      let finalW = 0;
      let finalH = 0;
      let u0 = Math.ceil(widthImage / 2);
      let v0 = Math.ceil(heightImage / 2);
      let arVis = w / h;
      let m1 = [tl[0], tl[1], 1];
      let m2 = [tr[0], tr[1], 1];
      let m3 = [bl[0], bl[1], 1];
      let m4 = [br[0], br[1], 1];
      let k2 = dotVect(crossVect(m1, m4), m3) / dotVect(crossVect(m2, m4), m3);
      let k3 = dotVect(crossVect(m1, m4), m2) / dotVect(crossVect(m3, m4), m2);
      let n2 = [k2 * m2[0] - m1[0], k2 * m2[1] - m1[1], k2 * m2[2] - m1[2]];
      let n3 = [k3 * m3[0] - m1[0], k3 * m3[1] - m1[1], k3 * m3[2] - m1[2]];
      let n21 = n2[0];
      let n22 = n2[1];
      let n23 = n2[2];
      let n31 = n3[0];
      let n32 = n3[1];
      let n33 = n3[2];
      let f = 1 / (n23 * n33) * (n21 * n31 - (n21 * n33 + n23 * n31) * u0 + n23 * n33 * u0 * u0 + (n22 * n32 - (n22 * n33 + n23 * n32) * v0 + n23 * n33 * v0 * v0));
      if (f >= 0) {
        f = Math.sqrt(f);
      } else {
        f = Math.sqrt(-f);
      }
      let A = new _mlMatrix.Matrix([[f, 0, u0], [0, f, v0], [0, 0, 1]]);
      let At = A.transpose();
      let Ati = (0, _mlMatrix.inverse)(At);
      let Ai = (0, _mlMatrix.inverse)(A);
      let n2R = _mlMatrix.Matrix.rowVector(n2);
      let n3R = _mlMatrix.Matrix.rowVector(n3);
      let arReal = Math.sqrt(dotVect(n2R.mmul(Ati).mmul(Ai).to1DArray(), n2) / dotVect(n3R.mmul(Ati).mmul(Ai).to1DArray(), n3));
      if (arReal === 0 || arVis === 0) {
        finalW = Math.ceil(w);
        finalH = Math.ceil(h);
      } else if (arReal < arVis) {
        finalW = Math.ceil(w);
        finalH = Math.ceil(finalW / arReal);
      } else {
        finalH = Math.ceil(h);
        finalW = Math.ceil(arReal * finalH);
      }
      return [finalW, finalH];
    }
    function projectionPoint(x, y, a, b, c, d, e, f, g, h, image, channel) {
      let [newX, newY] = [(a * x + b * y + c) / (g * x + h * y + 1), (d * x + e * y + f) / (g * x + h * y + 1)];
      return image.getValueXY(Math.floor(newX), Math.floor(newY), channel);
    }
    function warpingFourPoints(pts, options = {}) {
      let {
        calculateRatio = true
      } = options;
      if (pts.length !== 4) {
        throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${pts.length} elements`);
      }
      let [pt1, pt2, pt3, pt4] = pts;
      let quadrilaterial = [pt1, pt2, pt3, pt4];
      let [tl, tr, br, bl] = order4Points(quadrilaterial);
      let widthRect;
      let heightRect;
      if (calculateRatio) {
        [widthRect, heightRect] = computeWidthAndHeigth(tl, tr, br, bl, this.width, this.height);
      } else {
        widthRect = Math.ceil(Math.max(distance2Points(tl, tr), distance2Points(bl, br)));
        heightRect = Math.ceil(Math.max(distance2Points(tl, bl), distance2Points(tr, br)));
      }
      let newImage = _Image.default.createFrom(this, {
        width: widthRect,
        height: heightRect
      });
      let [X1, Y1] = tl;
      let [X2, Y2] = tr;
      let [X3, Y3] = br;
      let [X4, Y4] = bl;
      let [x1, y1] = [0, 0];
      let [x2, y2] = [0, widthRect - 1];
      let [x3, y3] = [heightRect - 1, widthRect - 1];
      let [x4, y4] = [heightRect - 1, 0];
      let S = new _mlMatrix.Matrix([[x1, y1, 1, 0, 0, 0, -x1 * X1, -y1 * X1], [x2, y2, 1, 0, 0, 0, -x2 * X2, -y2 * X2], [x3, y3, 1, 0, 0, 0, -x3 * X3, -y1 * X3], [x4, y4, 1, 0, 0, 0, -x4 * X4, -y4 * X4], [0, 0, 0, x1, y1, 1, -x1 * Y1, -y1 * Y1], [0, 0, 0, x2, y2, 1, -x2 * Y2, -y2 * Y2], [0, 0, 0, x3, y3, 1, -x3 * Y3, -y3 * Y3], [0, 0, 0, x4, y4, 1, -x4 * Y4, -y4 * Y4]]);
      let D = _mlMatrix.Matrix.columnVector([X1, X2, X3, X4, Y1, Y2, Y3, Y4]);
      let svd = new _mlMatrix.SingularValueDecomposition(S);
      let T = svd.solve(D);
      let [a, b, c, d, e, f, g, h] = T.to1DArray();
      let Xt = new _mlMatrix.Matrix(heightRect, widthRect);
      for (let channel = 0; channel < this.channels; channel++) {
        for (let i = 0; i < heightRect; i++) {
          for (let j = 0; j < widthRect; j++) {
            Xt.set(i, j, projectionPoint(i, j, a, b, c, d, e, f, g, h, this, channel));
          }
        }
        newImage.setMatrix(Xt, {
          channel
        });
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/crop.js
var require_crop = __commonJS({
  "node_modules/image-js/lib/image/transform/crop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = crop;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function crop(options = {}) {
      let {
        x = 0,
        y = 0,
        width = this.width - x,
        height = this.height - y
      } = options;
      this.checkProcessable("crop", {
        bitDepth: [1, 8, 16]
      });
      x = Math.round(x);
      y = Math.round(y);
      width = Math.round(width);
      height = Math.round(height);
      if (x > this.width - 1 || y > this.height - 1) {
        throw new RangeError(`crop: origin (x:${x}, y:${y}) out of range (${this.width - 1}; ${this.height - 1})`);
      }
      if (width <= 0 || height <= 0) {
        throw new RangeError(`crop: width and height (width:${width}; height:${height}) must be positive numbers`);
      }
      if (x < 0 || y < 0) {
        throw new RangeError(`crop: x and y (x:${x}, y:${y}) must be positive numbers`);
      }
      if (width > this.width - x || height > this.height - y) {
        throw new RangeError(`crop: (x: ${x}, y:${y}, width:${width}, height:${height}) size is out of range`);
      }
      let result = this;
      if (this.bitDepth === 1) {
        const newImage = new _Image.default(width, height, {
          kind: "BINARY",
          parent: this
        });
        result = cropBinary(this, newImage, x, y, width, height);
      } else {
        const newImage = _Image.default.createFrom(this, {
          width,
          height,
          position: [x, y]
        });
        result = cropDefault(this, newImage, x, y, width, height);
      }
      return result;
    }
    function cropDefault(img, newImage, x, y, width, height) {
      let xWidth = width * img.channels;
      let y1 = y + height;
      let ptr = 0;
      let jLeft = x * img.channels;
      for (let i = y; i < y1; i++) {
        let j = i * img.width * img.channels + jLeft;
        let jL = j + xWidth;
        for (; j < jL; j++) {
          newImage.data[ptr++] = img.data[j];
        }
      }
      return newImage;
    }
    function cropBinary(img, newImage, x, y, width, height) {
      let xWidth = width * img.channels;
      let y1 = y + height;
      let ptr = 0;
      let jLeft = x * img.channels;
      for (let i = y; i < y1; i++) {
        let j = i * img.width * img.channels + jLeft;
        let jL = j + xWidth;
        for (; j < jL; j++) {
          if (img.getBit(j)) {
            newImage.setBit(ptr);
          }
          ++ptr;
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/cropAlpha.js
var require_cropAlpha = __commonJS({
  "node_modules/image-js/lib/image/transform/cropAlpha.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cropAlpha;
    function cropAlpha(options = {}) {
      this.checkProcessable("cropAlpha", {
        alpha: 1
      });
      const {
        threshold = this.maxValue
      } = options;
      let left = findLeft(this, threshold, this.components);
      if (left === -1) {
        throw new Error("Could not find new dimensions. Threshold may be too high.");
      }
      let top = findTop(this, threshold, this.components, left);
      let bottom = findBottom(this, threshold, this.components, left);
      let right = findRight(this, threshold, this.components, left, top, bottom);
      return this.crop({
        x: left,
        y: top,
        width: right - left + 1,
        height: bottom - top + 1
      });
    }
    function findLeft(image, threshold, channel) {
      for (let x = 0; x < image.width; x++) {
        for (let y = 0; y < image.height; y++) {
          if (image.getValueXY(x, y, channel) >= threshold) {
            return x;
          }
        }
      }
      return -1;
    }
    function findTop(image, threshold, channel, left) {
      for (let y = 0; y < image.height; y++) {
        for (let x = left; x < image.width; x++) {
          if (image.getValueXY(x, y, channel) >= threshold) {
            return y;
          }
        }
      }
      return -1;
    }
    function findBottom(image, threshold, channel, left) {
      for (let y = image.height - 1; y >= 0; y--) {
        for (let x = left; x < image.width; x++) {
          if (image.getValueXY(x, y, channel) >= threshold) {
            return y;
          }
        }
      }
      return -1;
    }
    function findRight(image, threshold, channel, left, top, bottom) {
      for (let x = image.width - 1; x >= left; x--) {
        for (let y = top; y <= bottom; y++) {
          if (image.getValueXY(x, y, channel) >= threshold) {
            return x;
          }
        }
      }
      return -1;
    }
  }
});

// node_modules/image-js/lib/util/converter.js
var require_converter = __commonJS({
  "node_modules/image-js/lib/util/converter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.factorDimensions = factorDimensions;
    exports2.getFactor = getFactor;
    exports2.getThreshold = getThreshold;
    function getFactor(value) {
      if (typeof value === "string") {
        const last = value[value.length - 1];
        value = parseFloat(value);
        if (last === "%") {
          value /= 100;
        }
      }
      return value;
    }
    function getThreshold(value, maxValue) {
      if (!maxValue) {
        throw Error("getThreshold : the maxValue should be specified");
      }
      if (typeof value === "string") {
        let last = value[value.length - 1];
        if (last !== "%") {
          throw Error("getThreshold : if the value is a string it must finish by %");
        }
        return parseFloat(value) / 100 * maxValue;
      } else if (typeof value === "number") {
        if (value < 1) {
          return value * maxValue;
        }
        return value;
      } else {
        throw Error("getThreshold : the value is not valid");
      }
    }
    function factorDimensions(factor, width, height) {
      factor = getFactor(factor);
      let newWidth = Math.round(factor * width);
      let newHeight = Math.round(factor * height);
      if (newWidth <= 0) {
        newWidth = 1;
      }
      if (newHeight <= 0) {
        newHeight = 1;
      }
      return {
        width: newWidth,
        height: newHeight
      };
    }
  }
});

// node_modules/image-js/lib/image/internal/checks.js
var require_checks2 = __commonJS({
  "node_modules/image-js/lib/image/internal/checks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.checkChannel = checkChannel;
    exports2.checkColumn = checkColumn;
    exports2.checkInterpolation = checkInterpolation;
    exports2.checkRow = checkRow;
    exports2.validInterpolations = void 0;
    function checkRow(image, row) {
      if (row < 0 || row >= image.height) {
        throw new RangeError(`row must be included between 0 and ${image.height - 1}. Current value: ${row}`);
      }
    }
    function checkColumn(image, column) {
      if (column < 0 || column >= image.width) {
        throw new RangeError(`column must be included between 0 and ${image.width - 1}. Current value: ${column}`);
      }
    }
    function checkChannel(image, channel) {
      if (channel < 0 || channel >= image.channels) {
        throw new RangeError(`channel must be included between 0 and ${image.channels - 1}. Current value: ${channel}`);
      }
    }
    var validInterpolations = exports2.validInterpolations = {
      nearestneighbor: "nearestNeighbor",
      nearestneighbour: "nearestNeighbor",
      bilinear: "bilinear"
    };
    function checkInterpolation(interpolation) {
      if (typeof interpolation !== "string") {
        throw new TypeError("interpolation must be a string");
      }
      interpolation = interpolation.toLowerCase();
      if (!validInterpolations[interpolation]) {
        throw new RangeError(`invalid interpolation algorithm: ${interpolation}`);
      }
      return validInterpolations[interpolation];
    }
  }
});

// node_modules/image-js/lib/image/transform/resize/nearestNeighbor.js
var require_nearestNeighbor = __commonJS({
  "node_modules/image-js/lib/image/transform/resize/nearestNeighbor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nearestNeighbor;
    function nearestNeighbor(newImage, newWidth, newHeight) {
      const wRatio = this.width / newWidth;
      const hRatio = this.height / newHeight;
      if (this.bitDepth > 1) {
        for (let i = 0; i < newWidth; i++) {
          const w = Math.floor((i + 0.5) * wRatio);
          for (let j = 0; j < newHeight; j++) {
            const h = Math.floor((j + 0.5) * hRatio);
            for (let c = 0; c < this.channels; c++) {
              newImage.setValueXY(i, j, c, this.getValueXY(w, h, c));
            }
          }
        }
      } else {
        for (let i = 0; i < newWidth; i++) {
          const w = Math.floor((i + 0.5) * wRatio);
          for (let j = 0; j < newHeight; j++) {
            const h = Math.floor((j + 0.5) * hRatio);
            if (this.getBitXY(w, h)) {
              newImage.setBitXY(i, j);
            }
          }
        }
      }
    }
  }
});

// node_modules/image-js/lib/image/transform/resize/resize.js
var require_resize = __commonJS({
  "node_modules/image-js/lib/image/transform/resize/resize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = resize;
    var _converter = require_converter();
    var _Image = _interopRequireDefault(require_Image());
    var _checks = require_checks2();
    var _nearestNeighbor = _interopRequireDefault(require_nearestNeighbor());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function resize(options = {}) {
      const {
        factor = 1,
        interpolation = _checks.validInterpolations.nearestneighbor,
        preserveAspectRatio = true
      } = options;
      const interpolationToUse = (0, _checks.checkInterpolation)(interpolation);
      let width = options.width;
      let height = options.height;
      if (!width) {
        if (height && preserveAspectRatio) {
          width = Math.round(height * (this.width / this.height));
        } else {
          width = this.width;
        }
      }
      if (!height) {
        if (preserveAspectRatio) {
          height = Math.round(width * (this.height / this.width));
        } else {
          height = this.height;
        }
      }
      ({
        width,
        height
      } = (0, _converter.factorDimensions)(factor, width, height));
      if (width === this.width && height === this.height) {
        const newImage2 = this.clone();
        newImage2.position = [0, 0];
        return newImage2;
      }
      let shiftX = Math.round((this.width - width) / 2);
      let shiftY = Math.round((this.height - height) / 2);
      const newImage = _Image.default.createFrom(this, {
        width,
        height,
        position: [shiftX, shiftY]
      });
      switch (interpolationToUse) {
        case _checks.validInterpolations.nearestneighbor:
          _nearestNeighbor.default.call(this, newImage, width, height);
          break;
        default:
          throw new Error(`unsupported resize interpolation: ${interpolationToUse}`);
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/hsv.js
var require_hsv = __commonJS({
  "node_modules/image-js/lib/image/transform/hsv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = hsv;
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function hsv() {
      this.checkProcessable("hsv", {
        bitDepth: [8, 16],
        alpha: [0, 1],
        colorModel: [_model.RGB]
      });
      let newImage = _Image.default.createFrom(this, {
        colorModel: _model.HSV
      });
      let ptr = 0;
      let data = this.data;
      for (let i = 0; i < data.length; i += this.channels) {
        let red = data[i];
        let green = data[i + 1];
        let blue = data[i + 2];
        let min = Math.min(red, green, blue);
        let max = Math.max(red, green, blue);
        let delta = max - min;
        let hue = 0;
        let saturation = max === 0 ? 0 : delta / max;
        let value = max;
        if (max !== min) {
          switch (max) {
            case red:
              hue = (green - blue) / delta + (green < blue ? 6 : 0);
              break;
            case green:
              hue = (blue - red) / delta + 2;
              break;
            case blue:
              hue = (red - green) / delta + 4;
              break;
            default:
              throw new Error("unreachable");
          }
          hue /= 6;
        }
        newImage.data[ptr++] = hue * this.maxValue;
        newImage.data[ptr++] = saturation * this.maxValue;
        newImage.data[ptr++] = value;
        if (this.alpha) {
          newImage.data[ptr++] = data[i + 3];
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/hsl.js
var require_hsl = __commonJS({
  "node_modules/image-js/lib/image/transform/hsl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = hsl;
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function hsl() {
      this.checkProcessable("hsl", {
        bitDepth: [8, 16],
        alpha: [0, 1],
        colorModel: [_model.RGB]
      });
      let newImage = _Image.default.createFrom(this, {
        colorModel: _model.HSL
      });
      let threshold = Math.floor(this.maxValue / 2);
      let ptr = 0;
      let data = this.data;
      for (let i = 0; i < data.length; i += this.channels) {
        let red = data[i];
        let green = data[i + 1];
        let blue = data[i + 2];
        let max = Math.max(red, green, blue);
        let min = Math.min(red, green, blue);
        let hue = 0;
        let saturation = 0;
        let luminance = (max + min) / 2;
        if (max !== min) {
          let delta = max - min;
          saturation = luminance > threshold ? delta / (2 - max - min) : delta / (max + min);
          switch (max) {
            case red:
              hue = (green - blue) / delta + (green < blue ? 6 : 0);
              break;
            case green:
              hue = (blue - red) / delta + 2;
              break;
            case blue:
              hue = (red - green) / delta + 4;
              break;
            default:
              throw new Error("unreachable");
          }
          hue /= 6;
        }
        newImage.data[ptr++] = hue * this.maxValue;
        newImage.data[ptr++] = saturation * this.maxValue;
        newImage.data[ptr++] = luminance;
        if (this.alpha) {
          newImage.data[ptr++] = data[i + 3];
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/cmyk.js
var require_cmyk = __commonJS({
  "node_modules/image-js/lib/image/transform/cmyk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cmyk;
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function cmyk() {
      this.checkProcessable("cmyk", {
        bitDepth: [8, 16],
        alpha: [0, 1],
        colorModel: [_model.RGB]
      });
      let newImage = _Image.default.createFrom(this, {
        components: 4,
        colorModel: _model.CMYK
      });
      let ptr = 0;
      let data = this.data;
      for (let i = 0; i < data.length; i += this.channels) {
        let red = data[i];
        let green = data[i + 1];
        let blue = data[i + 2];
        let black = Math.min(this.maxValue - red, this.maxValue - green, this.maxValue - blue);
        let cyan = (this.maxValue - red - black) / (1 - black / this.maxValue);
        let magenta = (this.maxValue - green - black) / (1 - black / this.maxValue);
        let yellow = (this.maxValue - blue - black) / (1 - black / this.maxValue);
        newImage.data[ptr++] = Math.round(cyan);
        newImage.data[ptr++] = Math.round(magenta);
        newImage.data[ptr++] = Math.round(yellow);
        newImage.data[ptr++] = Math.round(black);
        if (this.alpha) {
          newImage.data[ptr++] = data[i + 3];
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/rgba8.js
var require_rgba8 = __commonJS({
  "node_modules/image-js/lib/image/transform/rgba8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = rgba8;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function rgba8() {
      return new _Image.default(this.width, this.height, this.getRGBAData(), {
        kind: "RGBA",
        parent: this
      });
    }
  }
});

// node_modules/image-js/lib/image/transform/greyAlgorithms.js
var require_greyAlgorithms = __commonJS({
  "node_modules/image-js/lib/image/transform/greyAlgorithms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.names = exports2.methods = void 0;
    var methods = exports2.methods = {
      luma709(red, green, blue) {
        return red * 6966 + green * 23436 + blue * 2366 >> 15;
      },
      luma601(red, green, blue) {
        return red * 9798 + green * 19235 + blue * 3735 >> 15;
      },
      maximum(red, green, blue) {
        return Math.max(red, green, blue);
      },
      minimum(red, green, blue) {
        return Math.min(red, green, blue);
      },
      average(red, green, blue) {
        return (red + green + blue) / 3 >> 0;
      },
      minmax(red, green, blue) {
        return (Math.max(red, green, blue) + Math.min(red, green, blue)) / 2;
      },
      red(red) {
        return red;
      },
      green(red, green) {
        return green;
      },
      blue(red, green, blue) {
        return blue;
      },
      cyan(red, green, blue, image) {
        let black = methods.black(red, green, blue, image);
        return (image.maxValue - red - black) / (1 - black / image.maxValue) >> 0;
      },
      magenta(red, green, blue, image) {
        let black = methods.black(red, green, blue, image);
        return (image.maxValue - green - black) / (1 - black / image.maxValue) >> 0;
      },
      yellow(red, green, blue, image) {
        let black = methods.black(red, green, blue, image);
        return (image.maxValue - blue - black) / (1 - black / image.maxValue) >> 0;
      },
      black(red, green, blue, image) {
        return Math.min(image.maxValue - red, image.maxValue - green, image.maxValue - blue);
      },
      hue(red, green, blue, image) {
        let min = methods.min(red, green, blue);
        let max = methods.max(red, green, blue);
        if (max === min) {
          return 0;
        }
        let hue = 0;
        let delta = max - min;
        switch (max) {
          case red:
            hue = (green - blue) / delta + (green < blue ? 6 : 0);
            break;
          case green:
            hue = (blue - red) / delta + 2;
            break;
          case blue:
            hue = (red - green) / delta + 4;
            break;
          default:
            throw new Error("unreachable");
        }
        return hue / 6 * image.maxValue >> 0;
      },
      saturation(red, green, blue, image) {
        let min = methods.min(red, green, blue);
        let max = methods.max(red, green, blue);
        let delta = max - min;
        return max === 0 ? 0 : delta / max * image.maxValue;
      },
      lightness(red, green, blue) {
        let min = methods.min(red, green, blue);
        let max = methods.max(red, green, blue);
        return (max + min) / 2;
      }
    };
    Object.defineProperty(methods, "luminosity", {
      enumerable: false,
      value: methods.lightness
    });
    Object.defineProperty(methods, "luminance", {
      enumerable: false,
      value: methods.lightness
    });
    Object.defineProperty(methods, "min", {
      enumerable: false,
      value: methods.minimum
    });
    Object.defineProperty(methods, "max", {
      enumerable: false,
      value: methods.maximum
    });
    Object.defineProperty(methods, "brightness", {
      enumerable: false,
      value: methods.maximum
    });
    var names = exports2.names = {};
    Object.keys(methods).forEach((name) => {
      names[name] = name;
    });
  }
});

// node_modules/image-js/lib/image/transform/grey.js
var require_grey = __commonJS({
  "node_modules/image-js/lib/image/transform/grey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = grey;
    var _clamp = require_clamp();
    var _getOutputImage = require_getOutputImage();
    var _model = require_model();
    var _greyAlgorithms = require_greyAlgorithms();
    function grey(options = {}) {
      let {
        algorithm = "luma709",
        keepAlpha = false,
        mergeAlpha = true
      } = options;
      if (typeof algorithm !== "string" && typeof algorithm !== "function") {
        throw new TypeError("algorithm must be a string or a function");
      }
      this.checkProcessable("grey", {
        bitDepth: [8, 16],
        alpha: [0, 1]
      });
      if (this.components === 1) {
        algorithm = "red";
      }
      keepAlpha &= this.alpha;
      mergeAlpha &= this.alpha;
      if (keepAlpha) {
        mergeAlpha = false;
      }
      let newImage = (0, _getOutputImage.getOutputImage)(this, options, {
        components: 1,
        alpha: keepAlpha,
        colorModel: _model.GREY
      });
      let method;
      if (typeof algorithm === "function") {
        method = algorithm;
      } else {
        method = _greyAlgorithms.methods[algorithm.toLowerCase()];
        if (!method) {
          throw new Error(`unsupported grey algorithm: ${algorithm}`);
        }
      }
      let ptr = 0;
      for (let i = 0; i < this.data.length; i += this.channels) {
        if (mergeAlpha) {
          newImage.data[ptr++] = (0, _clamp.clamp)(method(this.data[i], this.data[i + 1], this.data[i + 2], this) * this.data[i + this.components] / this.maxValue, this);
        } else {
          newImage.data[ptr++] = (0, _clamp.clamp)(method(this.data[i], this.data[i + 1], this.data[i + 2], this), this);
          if (newImage.alpha) {
            newImage.data[ptr++] = this.data[i + this.components];
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/huang.js
var require_huang = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/huang.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = huang;
    function huang(histogram) {
      let firstBin = 0;
      for (let ih = 0; ih < histogram.length; ih++) {
        if (histogram[ih] !== 0) {
          firstBin = ih;
          break;
        }
      }
      let lastBin = histogram.length - 1;
      for (let ih = histogram.length - 1; ih >= firstBin; ih--) {
        if (histogram[ih] !== 0) {
          lastBin = ih;
          break;
        }
      }
      let term = 1 / (lastBin - firstBin);
      let mu0 = new Array(histogram.length);
      let sumPix = 0;
      let numPix = 0;
      for (let ih = firstBin; ih < histogram.length; ih++) {
        sumPix += ih * histogram[ih];
        numPix += histogram[ih];
        mu0[ih] = sumPix / numPix;
      }
      let mu1 = new Array(histogram.length);
      sumPix = numPix = 0;
      for (let ih = lastBin; ih > 0; ih--) {
        sumPix += ih * histogram[ih];
        numPix += histogram[ih];
        mu1[ih - 1] = sumPix / numPix;
      }
      let threshold = -1;
      let minEnt = Number.MAX_VALUE;
      for (let it = 0; it < histogram.length; it++) {
        let ent = 0;
        let muX;
        for (let ih = 0; ih <= it; ih++) {
          muX = 1 / (1 + term * Math.abs(ih - mu0[it]));
          if (!(muX < 1e-6 || muX > 0.999999)) {
            ent += histogram[ih] * (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));
          }
        }
        for (let ih = it + 1; ih < histogram.length; ih++) {
          muX = 1 / (1 + term * Math.abs(ih - mu1[it]));
          if (!(muX < 1e-6 || muX > 0.999999)) {
            ent += histogram[ih] * (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));
          }
        }
        if (ent < minEnt) {
          minEnt = ent;
          threshold = it;
        }
      }
      return threshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/intermodes.js
var require_intermodes = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/intermodes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = intermodes;
    function intermodes(histogram) {
      let iHisto = histogram.slice();
      let iter = 0;
      while (!bimodalTest(iHisto)) {
        let previous = 0;
        let current = 0;
        let next = iHisto[0];
        for (let i = 0; i < histogram.length - 1; i++) {
          previous = current;
          current = next;
          next = iHisto[i + 1];
          iHisto[i] = (previous + current + next) / 3;
        }
        iHisto[histogram.length - 1] = (current + next) / 3;
        iter++;
        if (iter > 1e4) {
          throw new Error("Intermodes Threshold not found after 10000 iterations");
        }
      }
      let tt = 0;
      for (let i = 1; i < histogram.length - 1; i++) {
        if (iHisto[i - 1] < iHisto[i] && iHisto[i + 1] < iHisto[i]) {
          tt += i;
        }
      }
      return Math.floor(tt / 2);
    }
    function bimodalTest(iHisto) {
      let b = false;
      let modes = 0;
      for (let k = 1; k < iHisto.length - 1; k++) {
        if (iHisto[k - 1] < iHisto[k] && iHisto[k + 1] < iHisto[k]) {
          modes++;
          if (modes > 2) {
            return false;
          }
        }
      }
      if (modes === 2) {
        b = true;
      }
      return b;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/isodata.js
var require_isodata = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/isodata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isodata;
    function isodata(histogram) {
      let l;
      let toth;
      let totl;
      let h;
      let g = 0;
      for (let i = 1; i < histogram.length; i++) {
        if (histogram[i] > 0) {
          g = i + 1;
          break;
        }
      }
      while (true) {
        l = 0;
        totl = 0;
        for (let i = 0; i < g; i++) {
          totl = totl + histogram[i];
          l = l + histogram[i] * i;
        }
        h = 0;
        toth = 0;
        for (let i = g + 1; i < histogram.length; i++) {
          toth += histogram[i];
          h += histogram[i] * i;
        }
        if (totl > 0 && toth > 0) {
          l /= totl;
          h /= toth;
          if (g === Math.round((l + h) / 2)) {
            break;
          }
        }
        g++;
        if (g > histogram.length - 2) {
          throw new Error("Threshold not found");
        }
      }
      return g;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/li.js
var require_li = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/li.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = li;
    function li(histogram, total) {
      let threshold;
      let sumBack;
      let sumObj;
      let numBack;
      let numObj;
      let oldThresh;
      let newThresh;
      let meanBack;
      let meanObj;
      let mean;
      let tolerance;
      let temp;
      tolerance = 0.5;
      mean = 0;
      for (let ih = 0; ih < histogram.length; ih++) {
        mean += ih * histogram[ih];
      }
      mean /= total;
      newThresh = mean;
      do {
        oldThresh = newThresh;
        threshold = oldThresh + 0.5 | 0;
        sumBack = 0;
        numBack = 0;
        for (let ih = 0; ih <= threshold; ih++) {
          sumBack += ih * histogram[ih];
          numBack += histogram[ih];
        }
        meanBack = numBack === 0 ? 0 : sumBack / numBack;
        sumObj = 0;
        numObj = 0;
        for (let ih = threshold + 1; ih < histogram.length; ih++) {
          sumObj += ih * histogram[ih];
          numObj += histogram[ih];
        }
        meanObj = numObj === 0 ? 0 : sumObj / numObj;
        temp = (meanBack - meanObj) / (Math.log(meanBack) - Math.log(meanObj));
        if (temp < -Number.EPSILON) {
          newThresh = temp - 0.5 | 0;
        } else {
          newThresh = temp + 0.5 | 0;
        }
      } while (Math.abs(newThresh - oldThresh) > tolerance);
      return threshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/maxEntropy.js
var require_maxEntropy = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/maxEntropy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = maxEntropy;
    function maxEntropy(histogram, total) {
      let normHisto = new Array(histogram.length);
      for (let ih = 0; ih < histogram.length; ih++) {
        normHisto[ih] = histogram[ih] / total;
      }
      let P1 = new Array(histogram.length);
      let P2 = new Array(histogram.length);
      P1[0] = normHisto[0];
      P2[0] = 1 - P1[0];
      for (let ih = 1; ih < histogram.length; ih++) {
        P1[ih] = P1[ih - 1] + normHisto[ih];
        P2[ih] = 1 - P1[ih];
      }
      let firstBin = 0;
      for (let ih = 0; ih < histogram.length; ih++) {
        if (Math.abs(P1[ih]) >= Number.EPSILON) {
          firstBin = ih;
          break;
        }
      }
      let lastBin = histogram.length - 1;
      for (let ih = histogram.length - 1; ih >= firstBin; ih--) {
        if (Math.abs(P2[ih]) >= Number.EPSILON) {
          lastBin = ih;
          break;
        }
      }
      let threshold = -1;
      let totEnt;
      let maxEnt = Number.MIN_VALUE;
      let entBack;
      let entObj;
      for (let it = firstBin; it <= lastBin; it++) {
        entBack = 0;
        for (let ih = 0; ih <= it; ih++) {
          if (histogram[ih] !== 0) {
            entBack -= normHisto[ih] / P1[it] * Math.log(normHisto[ih] / P1[it]);
          }
        }
        entObj = 0;
        for (let ih = it + 1; ih < histogram.length; ih++) {
          if (histogram[ih] !== 0) {
            entObj -= normHisto[ih] / P2[it] * Math.log(normHisto[ih] / P2[it]);
          }
        }
        totEnt = entBack + entObj;
        if (maxEnt < totEnt) {
          maxEnt = totEnt;
          threshold = it;
        }
      }
      return threshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/mean.js
var require_mean = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/mean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = mean;
    function mean(histogram, total) {
      let sum = 0;
      for (let i = 0; i < histogram.length; i++) {
        sum += i * histogram[i];
      }
      return Math.floor(sum / total);
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/minError.js
var require_minError = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/minError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minError;
    function minError(histogram, total) {
      let threshold;
      let Tprev = -2;
      let mu, nu, p, q, sigma2, tau2, w0, w1, w2, sqterm, temp;
      let mean = 0;
      for (let ih = 0; ih < histogram.length; ih++) {
        mean += ih * histogram[ih];
      }
      mean /= total;
      threshold = mean;
      while (threshold !== Tprev) {
        let sumA1 = sumA(histogram, threshold);
        let sumA2 = sumA(histogram, histogram.length - 1);
        let sumB1 = sumB(histogram, threshold);
        let sumB2 = sumB(histogram, histogram.length - 1);
        let sumC1 = sumC(histogram, threshold);
        let sumC2 = sumC(histogram, histogram.length - 1);
        mu = sumB1 / sumA1;
        nu = (sumB2 - sumB1) / (sumA2 - sumA1);
        p = sumA1 / sumA2;
        q = (sumA2 - sumA1) / sumA2;
        sigma2 = sumC1 / sumA1 - mu * mu;
        tau2 = (sumC2 - sumC1) / (sumA2 - sumA1) - nu * nu;
        w0 = 1 / sigma2 - 1 / tau2;
        w1 = mu / sigma2 - nu / tau2;
        w2 = mu * mu / sigma2 - nu * nu / tau2 + Math.log10(sigma2 * (q * q) / (tau2 * (p * p)));
        sqterm = w1 * w1 - w0 * w2;
        if (sqterm < 0) {
          return threshold;
        }
        Tprev = threshold;
        temp = (w1 + Math.sqrt(sqterm)) / w0;
        if (isNaN(temp)) {
          threshold = Tprev;
        } else {
          threshold = Math.floor(temp);
        }
      }
      return threshold;
    }
    function sumA(y, j) {
      let x = 0;
      for (let i = 0; i <= j; i++) {
        x += y[i];
      }
      return x;
    }
    function sumB(y, j) {
      let x = 0;
      for (let i = 0; i <= j; i++) {
        x += i * y[i];
      }
      return x;
    }
    function sumC(y, j) {
      let x = 0;
      for (let i = 0; i <= j; i++) {
        x += i * i * y[i];
      }
      return x;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/minimum.js
var require_minimum = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/minimum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minimum;
    function minimum(histogram) {
      if (histogram.length < 2) {
        return 0;
      }
      let iterations = 0;
      let threshold = -1;
      let max = -1;
      let histogramCopy = new Array(histogram.length);
      for (let i = 0; i < histogram.length; i++) {
        histogramCopy[i] = histogram[i];
        if (histogram[i] > 0) {
          max = i;
        }
      }
      while (!bimodalTest(histogramCopy)) {
        histogramCopy = smoothed(histogramCopy);
        iterations++;
        if (iterations > 1e4) {
          return threshold;
        }
      }
      threshold = minimumBetweenPeeks(histogramCopy, max);
      return threshold;
    }
    function smoothed(histogram) {
      let auHistogram = new Array(histogram.length);
      for (let i = 1; i < histogram.length - 1; i++) {
        auHistogram[i] = (histogram[i - 1] + histogram[i] + histogram[i + 1]) / 3;
      }
      auHistogram[0] = (histogram[0] + histogram[1]) / 3;
      auHistogram[histogram.length - 1] = (histogram[histogram.length - 2] + histogram[histogram.length - 1]) / 3;
      return auHistogram;
    }
    function minimumBetweenPeeks(histogramBimodal, max) {
      let threshold;
      for (let i = 1; i < max; i++) {
        if (histogramBimodal[i - 1] > histogramBimodal[i] && histogramBimodal[i + 1] >= histogramBimodal[i]) {
          threshold = i;
          break;
        }
      }
      return threshold;
    }
    function bimodalTest(histogram) {
      let len = histogram.length;
      let isBimodal = false;
      let peaks = 0;
      for (let k = 1; k < len - 1; k++) {
        if (histogram[k - 1] < histogram[k] && histogram[k + 1] < histogram[k]) {
          peaks++;
          if (peaks > 2) {
            return false;
          }
        }
      }
      if (peaks === 2) {
        isBimodal = true;
      }
      return isBimodal;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/moments.js
var require_moments = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/moments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = moments;
    function moments(histogram, total) {
      let m0 = 1;
      let m1 = 0;
      let m2 = 0;
      let m3 = 0;
      let sum = 0;
      let p0;
      let cd, c0, c1, z0, z1;
      let threshold = -1;
      let histogramLength = histogram.length;
      let normalizedHistogram = new Array(histogramLength);
      for (let i = 0; i < histogramLength; i++) {
        normalizedHistogram[i] = histogram[i] / total;
      }
      for (let i = 0; i < histogramLength; i++) {
        m1 += i * normalizedHistogram[i];
        m2 += i * i * normalizedHistogram[i];
        m3 += i * i * i * normalizedHistogram[i];
      }
      cd = m0 * m2 - m1 * m1;
      c0 = (-m2 * m2 + m1 * m3) / cd;
      c1 = (m0 * -m3 + m2 * m1) / cd;
      z0 = 0.5 * (-c1 - Math.sqrt(c1 * c1 - 4 * c0));
      z1 = 0.5 * (-c1 + Math.sqrt(c1 * c1 - 4 * c0));
      p0 = (z1 - m1) / (z1 - z0);
      for (let i = 0; i < histogramLength; i++) {
        sum += normalizedHistogram[i];
        if (sum > p0) {
          threshold = i;
          break;
        }
      }
      return threshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/otsu.js
var require_otsu = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/otsu.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = otsu;
    function otsu(histogramCounts, total) {
      let sumB = 0;
      let wB = 0;
      let maximum = 0;
      let level = 0;
      let sum1 = 0;
      for (let i = 0; i < histogramCounts.length; i++) {
        sum1 += i * histogramCounts[i];
      }
      for (let ii = 0; ii < histogramCounts.length; ii++) {
        wB = wB + histogramCounts[ii];
        const wF = total - wB;
        if (wB === 0 || wF === 0) {
          continue;
        }
        sumB = sumB + ii * histogramCounts[ii];
        const mF = (sum1 - sumB) / wF;
        const between = wB * wF * (sumB / wB - mF) * (sumB / wB - mF);
        if (between >= maximum) {
          level = ii;
          maximum = between;
        }
      }
      return level;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/percentile.js
var require_percentile = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/percentile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = percentile;
    function percentile(histogram) {
      let threshold = -1;
      let percentile2 = 0.5;
      let avec = new Array(histogram.length);
      let total = partialSum(histogram, histogram.length - 1);
      let temp = 1;
      for (let i = 0; i < histogram.length; i++) {
        avec[i] = Math.abs(partialSum(histogram, i) / total - percentile2);
        if (avec[i] < temp) {
          temp = avec[i];
          threshold = i;
        }
      }
      return threshold;
    }
    function partialSum(histogram, endIndex) {
      let x = 0;
      for (let i = 0; i <= endIndex; i++) {
        x += histogram[i];
      }
      return x;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/renyiEntropy.js
var require_renyiEntropy = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/renyiEntropy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = renyiEntropy;
    function renyiEntropy(histogram, total) {
      let optThreshold;
      let firstBin;
      let lastBin;
      let normHisto = new Array(histogram.length);
      let P1 = new Array(histogram.length);
      let P2 = new Array(histogram.length);
      let threshold1 = 0;
      let threshold2 = 0;
      let threshold3 = 0;
      let maxEnt1 = 0;
      let maxEnt2 = 0;
      let maxEnt3 = 0;
      let alpha2 = 0.5;
      let term2 = 1 / (1 - alpha2);
      let alpha3 = 2;
      let term3 = 1 / (1 - alpha3);
      for (let ih = 0; ih < histogram.length; ih++) {
        normHisto[ih] = histogram[ih] / total;
      }
      P1[0] = normHisto[0];
      P2[0] = 1 - P1[0];
      for (let ih = 1; ih < histogram.length; ih++) {
        P1[ih] = P1[ih - 1] + normHisto[ih];
        P2[ih] = 1 - P1[ih];
      }
      firstBin = 0;
      for (let ih = 0; ih < histogram.length; ih++) {
        if (Math.abs(P1[ih]) >= Number.EPSILON) {
          firstBin = ih;
          break;
        }
      }
      lastBin = histogram.length - 1;
      for (let ih = histogram.length - 1; ih >= firstBin; ih--) {
        if (Math.abs(P2[ih]) >= Number.EPSILON) {
          lastBin = ih;
          break;
        }
      }
      for (let it = firstBin; it <= lastBin; it++) {
        let entBack1 = 0;
        let entBack2 = 0;
        let entBack3 = 0;
        for (let ih = 0; ih <= it; ih++) {
          if (histogram[ih] !== 0) {
            entBack1 -= normHisto[ih] / P1[it] * Math.log(normHisto[ih] / P1[it]);
          }
          entBack2 += Math.sqrt(normHisto[ih] / P1[it]);
          entBack3 += normHisto[ih] * normHisto[ih] / (P1[it] * P1[it]);
        }
        let entObj1 = 0;
        let entObj2 = 0;
        let entObj3 = 0;
        for (let ih = it + 1; ih < histogram.length; ih++) {
          if (histogram[ih] !== 0) {
            entObj1 -= normHisto[ih] / P2[it] * Math.log(normHisto[ih] / P2[it]);
          }
          entObj2 += Math.sqrt(normHisto[ih] / P2[it]);
          entObj3 += normHisto[ih] * normHisto[ih] / (P2[it] * P2[it]);
        }
        let totEnt1 = entBack1 + entObj1;
        let totEnt2 = term2 * (entBack2 * entObj2 > 0 ? Math.log(entBack2 * entObj2) : 0);
        let totEnt3 = term3 * (entBack3 * entObj3 > 0 ? Math.log(entBack3 * entObj3) : 0);
        if (totEnt1 > maxEnt1) {
          maxEnt1 = totEnt1;
          threshold1 = it;
        }
        if (totEnt2 > maxEnt2) {
          maxEnt2 = totEnt2;
          threshold2 = it;
        }
        if (totEnt3 > maxEnt3) {
          maxEnt3 = totEnt3;
          threshold3 = it;
        }
      }
      let tStars = [threshold1, threshold2, threshold3];
      tStars.sort((a, b) => a - b);
      let betas;
      if (Math.abs(tStars[0] - tStars[1]) <= 5) {
        if (Math.abs(tStars[1] - tStars[2]) <= 5) {
          betas = [1, 2, 1];
        } else {
          betas = [0, 1, 3];
        }
      } else {
        if (Math.abs(tStars[1] - tStars[2]) <= 5) {
          betas = [3, 1, 0];
        } else {
          betas = [1, 2, 1];
        }
      }
      let omega = P1[tStars[2]] - P1[tStars[0]];
      optThreshold = Math.round(tStars[0] * (P1[tStars[0]] + 0.25 * omega * betas[0]) + 0.25 * tStars[1] * omega * betas[1] + tStars[2] * (P2[tStars[2]] + 0.25 * omega * betas[2]));
      return optThreshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/shanbhag.js
var require_shanbhag = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/shanbhag.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = shanbhag;
    function shanbhag(histogram, total) {
      let normHisto = new Array(histogram.length);
      for (let ih = 0; ih < histogram.length; ih++) {
        normHisto[ih] = histogram[ih] / total;
      }
      let P1 = new Array(histogram.length);
      let P2 = new Array(histogram.length);
      P1[0] = normHisto[0];
      P2[0] = 1 - P1[0];
      for (let ih = 1; ih < histogram.length; ih++) {
        P1[ih] = P1[ih - 1] + normHisto[ih];
        P2[ih] = 1 - P1[ih];
      }
      let firstBin = 0;
      for (let ih = 0; ih < histogram.length; ih++) {
        if (Math.abs(P1[ih]) >= Number.EPSILON) {
          firstBin = ih;
          break;
        }
      }
      let lastBin = histogram.length - 1;
      for (let ih = histogram.length - 1; ih >= firstBin; ih--) {
        if (Math.abs(P2[ih]) >= Number.EPSILON) {
          lastBin = ih;
          break;
        }
      }
      let threshold = -1;
      let minEnt = Number.MAX_VALUE;
      let term;
      let totEnt;
      let entBack;
      let entObj;
      for (let it = firstBin; it <= lastBin; it++) {
        entBack = 0;
        term = 0.5 / P1[it];
        for (let ih = 1; ih <= it; ih++) {
          entBack -= normHisto[ih] * Math.log(1 - term * P1[ih - 1]);
        }
        entBack *= term;
        entObj = 0;
        term = 0.5 / P2[it];
        for (let ih = it + 1; ih < histogram.length; ih++) {
          entObj -= normHisto[ih] * Math.log(1 - term * P2[ih]);
        }
        entObj *= term;
        totEnt = Math.abs(entBack - entObj);
        if (totEnt < minEnt) {
          minEnt = totEnt;
          threshold = it;
        }
      }
      return threshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/triangle.js
var require_triangle = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/triangle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = triangle;
    function triangle(histogram) {
      let min = 0;
      let dmax = 0;
      let max = 0;
      let min2 = 0;
      for (let i = 0; i < histogram.length; i++) {
        if (histogram[i] > 0) {
          min = i;
          break;
        }
      }
      if (min > 0) {
        min--;
      }
      for (let i = histogram.length - 1; i > 0; i--) {
        if (histogram[i] > 0) {
          min2 = i;
          break;
        }
      }
      if (min2 < histogram.length - 1) {
        min2++;
      }
      for (let i = 0; i < histogram.length; i++) {
        if (histogram[i] > dmax) {
          max = i;
          dmax = histogram[i];
        }
      }
      let inverted = false;
      if (max - min < min2 - max) {
        inverted = true;
        let left = 0;
        let right = histogram.length - 1;
        while (left < right) {
          let temp = histogram[left];
          histogram[left] = histogram[right];
          histogram[right] = temp;
          left++;
          right--;
        }
        min = histogram.length - 1 - min2;
        max = histogram.length - 1 - max;
      }
      if (min === max) {
        return min;
      }
      let nx, ny, d;
      nx = histogram[max];
      ny = min - max;
      d = Math.sqrt(nx * nx + ny * ny);
      nx /= d;
      ny /= d;
      d = nx * min + ny * histogram[min];
      let split = min;
      let splitDistance = 0;
      for (let i = min + 1; i <= max; i++) {
        let newDistance = nx * i + ny * histogram[i] - d;
        if (newDistance > splitDistance) {
          split = i;
          splitDistance = newDistance;
        }
      }
      split--;
      if (inverted) {
        let left = 0;
        let right = histogram.length - 1;
        while (left < right) {
          let temp = histogram[left];
          histogram[left] = histogram[right];
          histogram[right] = temp;
          left++;
          right--;
        }
        return histogram.length - 1 - split;
      } else {
        return split;
      }
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/yen.js
var require_yen = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/yen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = yen;
    function yen(histogram, total) {
      let normHisto = new Array(histogram.length);
      for (let ih = 0; ih < histogram.length; ih++) {
        normHisto[ih] = histogram[ih] / total;
      }
      let P1 = new Array(histogram.length);
      P1[0] = normHisto[0];
      for (let ih = 1; ih < histogram.length; ih++) {
        P1[ih] = P1[ih - 1] + normHisto[ih];
      }
      let P1Sq = new Array(histogram.length);
      P1Sq[0] = normHisto[0] * normHisto[0];
      for (let ih = 1; ih < histogram.length; ih++) {
        P1Sq[ih] = P1Sq[ih - 1] + normHisto[ih] * normHisto[ih];
      }
      let P2Sq = new Array(histogram.length);
      P2Sq[histogram.length - 1] = 0;
      for (let ih = histogram.length - 2; ih >= 0; ih--) {
        P2Sq[ih] = P2Sq[ih + 1] + normHisto[ih + 1] * normHisto[ih + 1];
      }
      let threshold = -1;
      let maxCrit = Number.MIN_VALUE;
      let crit;
      for (let it = 0; it < histogram.length; it++) {
        crit = -1 * (P1Sq[it] * P2Sq[it] > 0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0) + 2 * (P1[it] * (1 - P1[it]) > 0 ? Math.log(P1[it] * (1 - P1[it])) : 0);
        if (crit > maxCrit) {
          maxCrit = crit;
          threshold = it;
        }
      }
      return threshold;
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/thresholdAlgorithms.js
var require_thresholdAlgorithms = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/thresholdAlgorithms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.names = exports2.methods = void 0;
    var _huang = _interopRequireDefault(require_huang());
    var _intermodes = _interopRequireDefault(require_intermodes());
    var _isodata = _interopRequireDefault(require_isodata());
    var _li = _interopRequireDefault(require_li());
    var _maxEntropy = _interopRequireDefault(require_maxEntropy());
    var _mean = _interopRequireDefault(require_mean());
    var _minError = _interopRequireDefault(require_minError());
    var _minimum = _interopRequireDefault(require_minimum());
    var _moments = _interopRequireDefault(require_moments());
    var _otsu = _interopRequireDefault(require_otsu());
    var _percentile = _interopRequireDefault(require_percentile());
    var _renyiEntropy = _interopRequireDefault(require_renyiEntropy());
    var _shanbhag = _interopRequireDefault(require_shanbhag());
    var _triangle = _interopRequireDefault(require_triangle());
    var _yen = _interopRequireDefault(require_yen());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var methods = exports2.methods = {
      huang: _huang.default,
      intermodes: _intermodes.default,
      isodata: _isodata.default,
      li: _li.default,
      maxentropy: _maxEntropy.default,
      mean: _mean.default,
      minerror: _minError.default,
      minimum: _minimum.default,
      moments: _moments.default,
      otsu: _otsu.default,
      percentile: _percentile.default,
      renyientropy: _renyiEntropy.default,
      shanbhag: _shanbhag.default,
      triangle: _triangle.default,
      yen: _yen.default
    };
    var names = exports2.names = {};
    Object.keys(methods).forEach((name) => {
      names[name] = name;
    });
  }
});

// node_modules/image-js/lib/image/utility/getThreshold.js
var require_getThreshold = __commonJS({
  "node_modules/image-js/lib/image/utility/getThreshold.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getThreshold;
    var _thresholdAlgorithms = require_thresholdAlgorithms();
    function getThreshold(options = {}) {
      let {
        algorithm = _thresholdAlgorithms.names.otsu
      } = options;
      this.checkProcessable("getThreshold", {
        components: 1,
        bitDepth: [8, 16]
      });
      let method = _thresholdAlgorithms.methods[algorithm.toLowerCase()];
      if (method) {
        let histogram = this.getHistogram();
        return method(histogram, this.size);
      } else {
        throw new Error(`unknown thresholding algorithm: ${algorithm}`);
      }
    }
  }
});

// node_modules/image-js/lib/image/transform/mask/mask.js
var require_mask = __commonJS({
  "node_modules/image-js/lib/image/transform/mask/mask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = mask;
    var _converter = require_converter();
    var _Image = _interopRequireDefault(require_Image());
    var _getThreshold = _interopRequireDefault(require_getThreshold());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var THRESHOLD = "threshold";
    function mask(options = {}) {
      let {
        algorithm = THRESHOLD,
        threshold = 0.5,
        useAlpha = true,
        invert = false
      } = options;
      this.checkProcessable("mask", {
        components: 1,
        bitDepth: [8, 16]
      });
      if (algorithm === THRESHOLD) {
        threshold = (0, _converter.getThreshold)(threshold, this.maxValue);
      } else {
        threshold = _getThreshold.default.call(this, options);
      }
      let newImage = new _Image.default(this.width, this.height, {
        kind: "BINARY",
        parent: this
      });
      let ptr = 0;
      if (this.alpha && useAlpha) {
        for (let i = 0; i < this.data.length; i += this.channels) {
          let value = this.data[i] + (this.maxValue - this.data[i]) * (this.maxValue - this.data[i + 1]) / this.maxValue;
          if (invert && value <= threshold || !invert && value >= threshold) {
            newImage.setBit(ptr);
          }
          ptr++;
        }
      } else {
        for (let i = 0; i < this.data.length; i += this.channels) {
          if (invert && this.data[i] <= threshold || !invert && this.data[i] >= threshold) {
            newImage.setBit(ptr);
          }
          ptr++;
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/internal/copy.js
var require_copy = __commonJS({
  "node_modules/image-js/lib/image/internal/copy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = copyImage;
    function copyImage(fromImage, toImage, x, y) {
      let fromWidth = fromImage.width;
      let fromHeight = fromImage.height;
      let toWidth = toImage.width;
      let channels = fromImage.channels;
      for (let i = 0; i < fromWidth; i++) {
        for (let j = 0; j < fromHeight; j++) {
          for (let k = 0; k < channels; k++) {
            let source = (j * fromWidth + i) * channels + k;
            let target = ((y + j) * toWidth + x + i) * channels + k;
            toImage.data[target] = fromImage.data[source];
          }
        }
      }
    }
  }
});

// node_modules/image-js/lib/image/transform/pad.js
var require_pad = __commonJS({
  "node_modules/image-js/lib/image/transform/pad.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = pad;
    var _newArray = _interopRequireDefault(require_new_array());
    var _Image = _interopRequireDefault(require_Image());
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function pad(options = {}) {
      let {
        size = 0,
        algorithm = "copy",
        color
      } = options;
      this.checkProcessable("pad", {
        bitDepth: [8, 16]
      });
      if (algorithm === "set") {
        if (color.length !== this.channels) {
          throw new Error(`pad: the color array must have the same length as the number of channels. Here: ${this.channels}`);
        }
        for (let i = 0; i < color.length; i++) {
          if (color[i] === 0) {
            color[i] = 1e-3;
          }
        }
      } else {
        color = (0, _newArray.default)(this.channels, null);
      }
      if (!Array.isArray(size)) {
        size = [size, size];
      }
      let newWidth = this.width + size[0] * 2;
      let newHeight = this.height + size[1] * 2;
      let channels = this.channels;
      let newImage = _Image.default.createFrom(this, {
        width: newWidth,
        height: newHeight
      });
      (0, _copy.default)(this, newImage, size[0], size[1]);
      for (let i = size[0]; i < newWidth - size[0]; i++) {
        for (let k = 0; k < channels; k++) {
          let value = color[k] || newImage.data[(size[1] * newWidth + i) * channels + k];
          for (let j = 0; j < size[1]; j++) {
            newImage.data[(j * newWidth + i) * channels + k] = value;
          }
          value = color[k] || newImage.data[((newHeight - size[1] - 1) * newWidth + i) * channels + k];
          for (let j = newHeight - size[1]; j < newHeight; j++) {
            newImage.data[(j * newWidth + i) * channels + k] = value;
          }
        }
      }
      for (let j = 0; j < newHeight; j++) {
        for (let k = 0; k < channels; k++) {
          let value = color[k] || newImage.data[(j * newWidth + size[0]) * channels + k];
          for (let i = 0; i < size[0]; i++) {
            newImage.data[(j * newWidth + i) * channels + k] = value;
          }
          value = color[k] || newImage.data[(j * newWidth + newWidth - size[0] - 1) * channels + k];
          for (let i = newWidth - size[0]; i < newWidth; i++) {
            newImage.data[(j * newWidth + i) * channels + k] = value;
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/colorDepth.js
var require_colorDepth = __commonJS({
  "node_modules/image-js/lib/image/transform/colorDepth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = colorDepth;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function colorDepth(newColorDepth = 8) {
      this.checkProcessable("colorDepth", {
        bitDepth: [1, 8, 16]
      });
      if (![8, 16].includes(newColorDepth)) {
        throw Error("You need to specify the new colorDepth as 8 or 16");
      }
      if (this.bitDepth === newColorDepth) {
        return this.clone();
      }
      let newImage = _Image.default.createFrom(this, {
        bitDepth: newColorDepth
      });
      switch (newColorDepth) {
        case 8:
          if (this.bitDepth === 1) {
            for (let i = 0; i < this.size; i++) {
              if (this.getBit(i)) {
                newImage.data[i] = 255;
              }
            }
          } else {
            for (let i = 0; i < this.data.length; i++) {
              newImage.data[i] = this.data[i] >> 8;
            }
          }
          break;
        case 16:
          if (this.bitDepth === 1) {
            for (let i = 0; i < this.size; i++) {
              if (this.getBit(i)) {
                newImage.data[i] = 65535;
              }
            }
          } else {
            for (let i = 0; i < this.data.length; i++) {
              newImage.data[i] = this.data[i] << 8 | this.data[i];
            }
          }
          break;
        default:
          throw new Error("colorDepth conversion unexpected case");
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/rotateFree.js
var require_rotateFree = __commonJS({
  "node_modules/image-js/lib/image/transform/rotateFree.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = rotateFree;
    var _Image = _interopRequireDefault(require_Image());
    var _checks = require_checks2();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function rotateFree(degrees, options = {}) {
      const {
        interpolation = _checks.validInterpolations.nearestneighbor,
        width = this.width,
        height = this.height
      } = options;
      if (typeof degrees !== "number") {
        throw new TypeError("degrees must be a number");
      }
      const interpolationToUse = (0, _checks.checkInterpolation)(interpolation);
      const radians = degrees * Math.PI / 180;
      const newWidth = Math.floor(Math.abs(width * Math.cos(radians)) + Math.abs(height * Math.sin(radians)));
      const newHeight = Math.floor(Math.abs(height * Math.cos(radians)) + Math.abs(width * Math.sin(radians)));
      const cos = Math.cos(-radians);
      const sin = Math.sin(-radians);
      let x0 = newWidth / 2;
      let y0 = newHeight / 2;
      if (newWidth % 2 === 0) {
        x0 = x0 - 0.5;
        if (newHeight % 2 === 0) {
          y0 = y0 - 0.5;
        } else {
          y0 = Math.floor(y0);
        }
      } else {
        x0 = Math.floor(x0);
        if (newHeight % 2 === 0) {
          y0 = y0 - 0.5;
        } else {
          y0 = Math.floor(y0);
        }
      }
      const incrementX = Math.floor(width / 2 - x0);
      const incrementY = Math.floor(height / 2 - y0);
      if (this.bitDepth === 1) {
        const newImage = new _Image.default(newWidth, newHeight, {
          kind: "BINARY",
          parent: this
        });
        switch (interpolationToUse) {
          case _checks.validInterpolations.nearestneighbor:
            return rotateBinaryNearestNeighbor(this, newImage, incrementX, incrementY, x0, y0, cos, sin);
          case _checks.validInterpolations.bilinear:
            return rotateBinaryBilinear(this, newImage, incrementX, incrementY, x0, y0, cos, sin);
          default:
            throw new Error(`unsupported rotate interpolation: ${interpolationToUse}`);
        }
      } else {
        const newImage = _Image.default.createFrom(this, {
          width: newWidth,
          height: newHeight
        });
        switch (interpolationToUse) {
          case _checks.validInterpolations.nearestneighbor:
            return rotateNearestNeighbor(this, newImage, incrementX, incrementY, x0, y0, cos, sin);
          case _checks.validInterpolations.bilinear:
            return rotateBilinear(this, newImage, incrementX, incrementY, x0, y0, cos, sin);
          default:
            throw new Error(`unsupported rotate interpolation: ${interpolationToUse}`);
        }
      }
    }
    function rotateNearestNeighbor(thisImage, newImage, incrementX, incrementY, x0, y0, cos, sin) {
      for (let i = 0; i < newImage.width; i += 1) {
        for (let j = 0; j < newImage.height; j += 1) {
          for (let c = 0; c < thisImage.channels; c++) {
            let x = Math.round((i - x0) * cos - (j - y0) * sin + x0) + incrementX;
            let y = Math.round((j - y0) * cos + (i - x0) * sin + y0) + incrementY;
            if (x < 0 || x >= thisImage.width || y < 0 || y >= thisImage.height) {
              if (thisImage.alpha === 1 && c === thisImage.channels - 1) {
                newImage.setValueXY(i, j, c, 0);
              } else {
                newImage.setValueXY(i, j, c, thisImage.maxValue);
              }
            } else {
              newImage.setValueXY(i, j, c, thisImage.getValueXY(x, y, c));
            }
          }
        }
      }
      return newImage;
    }
    function rotateBinaryNearestNeighbor(thisImage, newImage, incrementX, incrementY, x0, y0, cos, sin) {
      for (let i = 0; i < newImage.width; i += 1) {
        for (let j = 0; j < newImage.height; j += 1) {
          let x = Math.round((i - x0) * cos - (j - y0) * sin + x0) + incrementX;
          let y = Math.round((j - y0) * cos + (i - x0) * sin + y0) + incrementY;
          if (x < 0 || x >= thisImage.width || y < 0 || y >= thisImage.height || thisImage.getBitXY(x, y)) {
            newImage.setBitXY(i, j);
          }
        }
      }
      return newImage;
    }
    function rotateBilinear(thisImage, newImage, incrementX, incrementY, x0, y0, cos, sin) {
      let stride = thisImage.width * thisImage.channels;
      for (let j = 0; j < newImage.height; j++) {
        for (let i = 0; i < newImage.width; i++) {
          let x = (i - x0) * cos - (j - y0) * sin + x0 + incrementX;
          let y = (j - y0) * cos + (i - x0) * sin + y0 + incrementY;
          let x1 = x | 0;
          let y1 = y | 0;
          let xDiff = x - x1;
          let yDiff = y - y1;
          for (let c = 0; c < thisImage.channels; c++) {
            if (x < 0 || x >= thisImage.width || y < 0 || y >= thisImage.height) {
              if (thisImage.alpha === 1 && c === thisImage.channels - 1) {
                newImage.setValueXY(i, j, c, 0);
              } else {
                newImage.setValueXY(i, j, c, thisImage.maxValue);
              }
            } else {
              let index = (y1 * thisImage.width + x1) * thisImage.channels + c;
              let A = thisImage.data[index];
              let B = thisImage.data[index + thisImage.channels];
              let C = thisImage.data[index + stride];
              let D = thisImage.data[index + stride + thisImage.channels];
              let result = A + xDiff * (B - A) + yDiff * (C - A) + xDiff * yDiff * (A - B - C + D) | 0;
              newImage.setValueXY(i, j, c, result);
            }
          }
        }
      }
      return newImage;
    }
    function rotateBinaryBilinear(thisImage, newImage, incrementX, incrementY, x0, y0, cos, sin) {
      let stride = thisImage.width;
      for (let j = 0; j < newImage.height; j++) {
        for (let i = 0; i < newImage.width; i++) {
          let x = (i - x0) * cos - (j - y0) * sin + x0 + incrementX;
          let y = (j - y0) * cos + (i - x0) * sin + y0 + incrementY;
          let x1 = x | 0;
          let y1 = y | 0;
          let xDiff = x - x1;
          let yDiff = y - y1;
          if (x < 0 || x >= thisImage.width || y < 0 || y >= thisImage.height) {
            newImage.setBitXY(i, j);
          } else {
            let index = y1 * thisImage.width + x1;
            let A = thisImage.getBit(index);
            let B = thisImage.getBit(index + 1);
            let C = thisImage.getBit(index + stride);
            let D = thisImage.getBit(index + 1 + stride);
            let result = A | xDiff & B - A | yDiff & C - A | xDiff & yDiff & A - B - C + D;
            if (result > 0)
              newImage.setBitXY(i, j);
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/transform/rotate.js
var require_rotate = __commonJS({
  "node_modules/image-js/lib/image/transform/rotate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.rotate = rotate;
    exports2.rotateLeft = rotateLeft;
    exports2.rotateRight = rotateRight;
    var _Image = _interopRequireDefault(require_Image());
    var _rotateFree = _interopRequireDefault(require_rotateFree());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function rotate(angle, options) {
      this.checkProcessable("rotate", {
        bitDepth: [1, 8, 16]
      });
      if (typeof angle !== "number") {
        throw new TypeError("angle must be a number");
      }
      if (angle < 0) {
        angle = Math.ceil(-angle / 360) * 360 + angle;
      }
      switch (angle % 360) {
        case 0:
          return this.clone();
        case 90:
          return rotateRight.call(this);
        case 180:
          return rotate180.call(this);
        case 270:
          return rotateLeft.call(this);
        default:
          return _rotateFree.default.call(this, angle, options);
      }
    }
    function rotateLeft() {
      if (this.bitDepth === 1) {
        const newImage = new _Image.default(this.height, this.width, {
          kind: "BINARY",
          parent: this
        });
        const newMaxHeight = newImage.height - 1;
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            if (this.getBitXY(j, i)) {
              newImage.setBitXY(i, newMaxHeight - j);
            }
          }
        }
        return newImage;
      } else {
        const newImage = _Image.default.createFrom(this, {
          width: this.height,
          height: this.width
        });
        const newMaxHeight = newImage.height - 1;
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            for (let k = 0; k < this.channels; k++) {
              newImage.setValueXY(i, newMaxHeight - j, k, this.getValueXY(j, i, k));
            }
          }
        }
        return newImage;
      }
    }
    function rotateRight() {
      if (this.bitDepth === 1) {
        const newImage = new _Image.default(this.height, this.width, {
          kind: "BINARY",
          parent: this
        });
        const newMaxWidth = newImage.width - 1;
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            if (this.getBitXY(j, i)) {
              newImage.setBitXY(newMaxWidth - i, j);
            }
          }
        }
        return newImage;
      } else {
        const newImage = _Image.default.createFrom(this, {
          width: this.height,
          height: this.width
        });
        const newMaxWidth = newImage.width - 1;
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            for (let k = 0; k < this.channels; k++) {
              newImage.setValueXY(newMaxWidth - i, j, k, this.getValueXY(j, i, k));
            }
          }
        }
        return newImage;
      }
    }
    function rotate180() {
      if (this.bitDepth === 1) {
        const newImage = new _Image.default(this.width, this.height, {
          kind: "BINARY",
          parent: this
        });
        const newMaxWidth = newImage.width - 1;
        const newMaxHeight = newImage.height - 1;
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            if (this.getBitXY(j, i)) {
              newImage.setBitXY(newMaxWidth - j, newMaxHeight - i);
            }
          }
        }
        return newImage;
      } else {
        const newImage = _Image.default.createFrom(this);
        const newMaxWidth = newImage.width - 1;
        const newMaxHeight = newImage.height - 1;
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            for (let k = 0; k < this.channels; k++) {
              newImage.setValueXY(newMaxWidth - j, newMaxHeight - i, k, this.getValueXY(j, i, k));
            }
          }
        }
        return newImage;
      }
    }
  }
});

// node_modules/image-js/lib/image/transform/insert.js
var require_insert = __commonJS({
  "node_modules/image-js/lib/image/transform/insert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = insert;
    var _getImageParameters = _interopRequireDefault(require_getImageParameters());
    var _getOutputImage = require_getOutputImage();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function insert(toInsert, options = {}) {
      const parameters = (0, _getImageParameters.default)(toInsert);
      this.checkProcessable("insert", parameters);
      let {
        x = 0,
        y = 0
      } = options;
      const out = (0, _getOutputImage.getOutputImageOrInPlace)(this, options, {
        copy: true
      });
      const maxY = Math.min(out.height, y + toInsert.height);
      const maxX = Math.min(out.width, x + toInsert.width);
      if (out.bitDepth === 1) {
        for (let j = y; j < maxY; j++) {
          for (let i = x; i < maxX; i++) {
            const val = toInsert.getBitXY(i - x, j - y);
            if (val)
              out.setBitXY(i, j);
            else
              out.clearBitXY(i, j);
          }
        }
      } else {
        for (let j = y; j < maxY; j++) {
          for (let i = x; i < maxX; i++) {
            out.setPixelXY(i, j, toInsert.getPixelXY(i - x, j - y));
          }
        }
      }
      return out;
    }
  }
});

// node_modules/image-js/lib/image/utility/setBorder.js
var require_setBorder = __commonJS({
  "node_modules/image-js/lib/image/utility/setBorder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setBorder;
    var _newArray = _interopRequireDefault(require_new_array());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function setBorder(options = {}) {
      let {
        size = 0,
        algorithm = "copy",
        color
      } = options;
      this.checkProcessable("setBorder", {
        bitDepth: [8, 16, 32, 64]
      });
      if (algorithm === "set") {
        if (color.length !== this.channels) {
          throw new Error(`setBorder: the color array must have the same length as the number of channels. Here: ${this.channels}`);
        }
        for (let i = 0; i < color.length; i++) {
          if (color[i] === 0) {
            color[i] = 1e-3;
          }
        }
      } else {
        color = (0, _newArray.default)(this.channels, null);
      }
      if (!Array.isArray(size)) {
        size = [size, size];
      }
      let leftRightSize = size[0];
      let topBottomSize = size[1];
      let channels = this.channels;
      for (let i = leftRightSize; i < this.width - leftRightSize; i++) {
        for (let k = 0; k < channels; k++) {
          let value = color[k] || this.data[(i + this.width * topBottomSize) * channels + k];
          for (let j = 0; j < topBottomSize; j++) {
            this.data[(j * this.width + i) * channels + k] = value;
          }
          value = color[k] || this.data[(i + this.width * (this.height - topBottomSize - 1)) * channels + k];
          for (let j = this.height - topBottomSize; j < this.height; j++) {
            this.data[(j * this.width + i) * channels + k] = value;
          }
        }
      }
      for (let j = 0; j < this.height; j++) {
        for (let k = 0; k < channels; k++) {
          let value = color[k] || this.data[(j * this.width + leftRightSize) * channels + k];
          for (let i = 0; i < leftRightSize; i++) {
            this.data[(j * this.width + i) * channels + k] = value;
          }
          value = color[k] || this.data[(j * this.width + this.width - leftRightSize - 1) * channels + k];
          for (let i = this.width - leftRightSize; i < this.width; i++) {
            this.data[(j * this.width + i) * channels + k] = value;
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/utility/split.js
var require_split = __commonJS({
  "node_modules/image-js/lib/image/utility/split.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = split;
    var _Stack = _interopRequireDefault(require_Stack());
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function split(options = {}) {
      let {
        preserveAlpha = true
      } = options;
      this.checkProcessable("split", {
        bitDepth: [8, 16]
      });
      if (this.components === 1) {
        return new _Stack.default([this.clone()]);
      }
      let images = new _Stack.default();
      let data = this.data;
      if (this.alpha && preserveAlpha) {
        for (let i = 0; i < this.components; i++) {
          let newImage = _Image.default.createFrom(this, {
            components: 1,
            alpha: true,
            colorModel: _model.GREY
          });
          let ptr = 0;
          for (let j = 0; j < data.length; j += this.channels) {
            newImage.data[ptr++] = data[j + i];
            newImage.data[ptr++] = data[j + this.components];
          }
          images.push(newImage);
        }
      } else {
        for (let i = 0; i < this.channels; i++) {
          let newImage = _Image.default.createFrom(this, {
            components: 1,
            alpha: false,
            colorModel: _model.GREY
          });
          let ptr = 0;
          for (let j = 0; j < data.length; j += this.channels) {
            newImage.data[ptr++] = data[j + i];
          }
          images.push(newImage);
        }
      }
      return images;
    }
  }
});

// node_modules/image-js/lib/image/utility/getChannel.js
var require_getChannel = __commonJS({
  "node_modules/image-js/lib/image/utility/getChannel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getChannel;
    var _channel = require_channel();
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function getChannel(channel, options = {}) {
      let {
        keepAlpha = false,
        mergeAlpha = false
      } = options;
      keepAlpha &= this.alpha;
      mergeAlpha &= this.alpha;
      this.checkProcessable("getChannel", {
        bitDepth: [8, 16]
      });
      channel = (0, _channel.validateChannel)(this, channel);
      let newImage = _Image.default.createFrom(this, {
        components: 1,
        alpha: keepAlpha,
        colorModel: _model.GREY
      });
      let ptr = 0;
      for (let j = 0; j < this.data.length; j += this.channels) {
        if (mergeAlpha) {
          newImage.data[ptr++] = this.data[j + channel] * this.data[j + this.components] / this.maxValue;
        } else {
          newImage.data[ptr++] = this.data[j + channel];
          if (keepAlpha) {
            newImage.data[ptr++] = this.data[j + this.components];
          }
        }
      }
      return newImage;
    }
  }
});

// node_modules/image-js/lib/image/utility/combineChannels.js
var require_combineChannels = __commonJS({
  "node_modules/image-js/lib/image/utility/combineChannels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = combineChannels;
    var _Image = _interopRequireDefault(require_Image());
    var _model = require_model();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function combineChannels(method = defaultCombineMethod, options = {}) {
      let {
        mergeAlpha = false,
        keepAlpha = false
      } = options;
      mergeAlpha &= this.alpha;
      keepAlpha &= this.alpha;
      this.checkProcessable("combineChannels", {
        bitDepth: [8, 16]
      });
      let newImage = _Image.default.createFrom(this, {
        components: 1,
        alpha: keepAlpha,
        colorModel: _model.GREY
      });
      let ptr = 0;
      for (let i = 0; i < this.size; i++) {
        let value = method(this.getPixel(i));
        if (mergeAlpha) {
          newImage.data[ptr++] = value * this.data[i * this.channels + this.components] / this.maxValue;
        } else {
          newImage.data[ptr++] = value;
          if (keepAlpha) {
            newImage.data[ptr++] = this.data[i * this.channels + this.components];
          }
        }
      }
      return newImage;
    }
    function defaultCombineMethod(pixel) {
      return (pixel[0] + pixel[1] + pixel[2]) / 3;
    }
  }
});

// node_modules/image-js/lib/image/utility/setChannel.js
var require_setChannel = __commonJS({
  "node_modules/image-js/lib/image/utility/setChannel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setChannel;
    var _channel = require_channel();
    function setChannel(channel, image) {
      this.checkProcessable("setChannel", {
        bitDepth: [8, 16]
      });
      image.checkProcessable("setChannel (image parameter check)", {
        bitDepth: [this.bitDepth],
        alpha: [0],
        components: [1]
      });
      if (image.width !== this.width || image.height !== this.height) {
        throw new Error("Images must have exactly the same width and height");
      }
      channel = (0, _channel.validateChannel)(this, channel);
      let ptr = channel;
      for (let i = 0; i < image.data.length; i++) {
        this.data[ptr] = image.data[i];
        ptr += this.channels;
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/utility/getSimilarity.js
var require_getSimilarity = __commonJS({
  "node_modules/image-js/lib/image/utility/getSimilarity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getSimilarity;
    var _newArray = _interopRequireDefault(require_new_array());
    var _channel = require_channel();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function getSimilarity(image, options = {}) {
      let {
        shift = [0, 0],
        average,
        channels,
        defaultAlpha,
        normalize,
        border = [0, 0]
      } = options;
      this.checkProcessable("getSimilarity", {
        bitDepth: [8, 16]
      });
      if (!Array.isArray(border)) {
        border = [border, border];
      }
      channels = (0, _channel.validateArrayOfChannels)(this, {
        channels,
        defaultAlpha
      });
      if (this.bitDepth !== image.bitDepth) {
        throw new Error("Both images must have the same bitDepth");
      }
      if (this.channels !== image.channels) {
        throw new Error("Both images must have the same number of channels");
      }
      if (this.colorModel !== image.colorModel) {
        throw new Error("Both images must have the same colorModel");
      }
      if (typeof average === "undefined") {
        average = true;
      }
      let minX = Math.max(border[0], -shift[0]);
      let maxX = Math.min(this.width - border[0], this.width - shift[0]);
      let minY = Math.max(border[1], -shift[1]);
      let maxY = Math.min(this.height - border[1], this.height - shift[1]);
      let results = (0, _newArray.default)(channels.length, 0);
      for (let i = 0; i < channels.length; i++) {
        let c = channels[i];
        let sumThis = normalize ? this.sum[c] : Math.max(this.sum[c], image.sum[c]);
        let sumImage = normalize ? image.sum[c] : Math.max(this.sum[c], image.sum[c]);
        if (sumThis !== 0 && sumImage !== 0) {
          for (let x = minX; x < maxX; x++) {
            for (let y = minY; y < maxY; y++) {
              let indexThis = x * this.multiplierX + y * this.multiplierY + c;
              let indexImage = indexThis + shift[0] * this.multiplierX + shift[1] * this.multiplierY;
              results[i] += Math.min(this.data[indexThis] / sumThis, image.data[indexImage] / sumImage);
            }
          }
        }
      }
      if (average) {
        return results.reduce((sum, x) => sum + x) / results.length;
      }
      return results;
    }
  }
});

// node_modules/image-js/lib/image/utility/getPixelsGrid.js
var require_getPixelsGrid = __commonJS({
  "node_modules/image-js/lib/image/utility/getPixelsGrid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getPixelsGrid;
    function getPixelsGrid(options = {}) {
      let {
        sampling = [10, 10],
        painted = false,
        mask
      } = options;
      this.checkProcessable("getPixelsGrid", {
        bitDepth: [8, 16],
        channels: 1
      });
      if (!Array.isArray(sampling)) {
        sampling = [sampling, sampling];
      }
      const xSampling = sampling[0];
      const ySampling = sampling[1];
      const xyS = [];
      const zS = [];
      const xStep = this.width / xSampling;
      const yStep = this.height / ySampling;
      let currentX = Math.floor(xStep / 2);
      for (let i = 0; i < xSampling; i++) {
        let currentY = Math.floor(yStep / 2);
        for (let j = 0; j < ySampling; j++) {
          let x = Math.round(currentX);
          let y = Math.round(currentY);
          if (!mask || mask.getBitXY(x, y)) {
            xyS.push([x, y]);
            zS.push(this.getPixelXY(x, y));
          }
          currentY += yStep;
        }
        currentX += xStep;
      }
      const toReturn = {
        xyS,
        zS
      };
      if (painted) {
        toReturn.painted = this.rgba8().paintPoints(xyS);
      }
      return toReturn;
    }
  }
});

// node_modules/image-js/lib/util/matrix.js
var require_matrix2 = __commonJS({
  "node_modules/image-js/lib/util/matrix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = Matrix;
    function Matrix(width, height, defaultValue) {
      const matrix = new Array(width);
      for (let x = 0; x < width; x++) {
        matrix[x] = new Array(height);
      }
      if (defaultValue) {
        for (let x = 0; x < width; x++) {
          for (let y = 0; y < height; y++) {
            matrix[x][y] = defaultValue;
          }
        }
      }
      matrix.width = width;
      matrix.height = height;
      Object.setPrototypeOf(matrix, Matrix.prototype);
      return matrix;
    }
    Matrix.prototype.localMin = function(x, y) {
      let min = this[x][y];
      let position = [x, y];
      for (let i = Math.max(0, x - 1); i < Math.min(this.length, x + 2); i++) {
        for (let j = Math.max(0, y - 1); j < Math.min(this[0].length, y + 2); j++) {
          if (this[i][j] < min) {
            min = this[i][j];
            position = [i, j];
          }
        }
      }
      return {
        position,
        value: min
      };
    };
    Matrix.prototype.localMax = function(x, y) {
      let max = this[x][y];
      let position = [x, y];
      for (let i = Math.max(0, x - 1); i < Math.min(this.length, x + 2); i++) {
        for (let j = Math.max(0, y - 1); j < Math.min(this[0].length, y + 2); j++) {
          if (this[i][j] > max) {
            max = this[i][j];
            position = [i, j];
          }
        }
      }
      return {
        position,
        value: max
      };
    };
    Matrix.prototype.localSearch = function(x, y, value) {
      let results = [];
      for (let i = Math.max(0, x - 1); i < Math.min(this.length, x + 2); i++) {
        for (let j = Math.max(0, y - 1); j < Math.min(this[0].length, y + 2); j++) {
          if (this[i][j] === value) {
            results.push([i, j]);
          }
        }
      }
      return results;
    };
  }
});

// node_modules/image-js/lib/image/utility/getBestMatch.js
var require_getBestMatch = __commonJS({
  "node_modules/image-js/lib/image/utility/getBestMatch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getBestMatch;
    var _matrix = _interopRequireDefault(require_matrix2());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function getBestMatch(image, options = {}) {
      let {
        border
      } = options;
      this.checkProcessable("getChannel", {
        bitDepth: [8, 16]
      });
      if (this.bitDepth !== image.bitDepth) {
        throw new Error("Both images must have the same bitDepth");
      }
      if (this.channels !== image.channels) {
        throw new Error("Both images must have the same number of channels");
      }
      if (this.colorModel !== image.colorModel) {
        throw new Error("Both images must have the same colorModel");
      }
      let similarityMatrix = new _matrix.default(image.width, image.height, -Infinity);
      let currentX = Math.floor(image.width / 2);
      let currentY = Math.floor(image.height / 2);
      let middleX = currentX;
      let middleY = currentY;
      let theEnd = false;
      while (!theEnd) {
        let toCalculatePositions = similarityMatrix.localSearch(currentX, currentY, -Infinity);
        for (let i = 0; i < toCalculatePositions.length; i++) {
          let position = toCalculatePositions[i];
          let similarity = this.getSimilarity(image, {
            border,
            shift: [middleX - position[0], middleY - position[1]]
          });
          similarityMatrix[position[0]][position[1]] = similarity;
        }
        let max = similarityMatrix.localMax(currentX, currentY);
        if (max.position[0] !== currentX || max.position[1] !== currentY) {
          currentX = max.position[0];
          currentY = max.position[1];
        } else {
          theEnd = true;
        }
      }
      return [currentX - middleX, currentY - middleY];
    }
  }
});

// node_modules/image-js/lib/image/utility/getRow.js
var require_getRow = __commonJS({
  "node_modules/image-js/lib/image/utility/getRow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getRow;
    var _checks = require_checks2();
    function getRow(row, channel = 0) {
      this.checkProcessable("getRow", {
        bitDepth: [8, 16]
      });
      (0, _checks.checkRow)(this, row);
      (0, _checks.checkChannel)(this, channel);
      let array = new Array(this.width);
      let ptr = 0;
      let begin = row * this.width * this.channels + channel;
      let end = begin + this.width * this.channels;
      for (let j = begin; j < end; j += this.channels) {
        array[ptr++] = this.data[j];
      }
      return array;
    }
  }
});

// node_modules/image-js/lib/image/utility/getColumn.js
var require_getColumn = __commonJS({
  "node_modules/image-js/lib/image/utility/getColumn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getColumn;
    var _checks = require_checks2();
    function getColumn(column, channel = 0) {
      this.checkProcessable("getColumn", {
        bitDepth: [8, 16]
      });
      (0, _checks.checkColumn)(this, column);
      (0, _checks.checkChannel)(this, channel);
      let array = new Array(this.height);
      let ptr = 0;
      let step = this.width * this.channels;
      for (let j = channel + column * this.channels; j < this.data.length; j += step) {
        array[ptr++] = this.data[j];
      }
      return array;
    }
  }
});

// node_modules/image-js/lib/image/utility/getMatrix.js
var require_getMatrix = __commonJS({
  "node_modules/image-js/lib/image/utility/getMatrix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMatrix;
    var _mlMatrix = require_matrix();
    function getMatrix(options = {}) {
      let {
        channel
      } = options;
      this.checkProcessable("getMatrix", {
        bitDepth: [8, 16]
      });
      if (channel === void 0) {
        if (this.components > 1) {
          throw new RangeError("You need to define the channel for an image that contains more than one channel");
        }
        channel = 0;
      }
      let matrix = new _mlMatrix.Matrix(this.height, this.width);
      for (let x = 0; x < this.height; x++) {
        for (let y = 0; y < this.width; y++) {
          matrix.set(x, y, this.getValueXY(y, x, channel));
        }
      }
      return matrix;
    }
  }
});

// node_modules/image-js/lib/image/utility/setMatrix.js
var require_setMatrix = __commonJS({
  "node_modules/image-js/lib/image/utility/setMatrix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMatrix;
    var _mlMatrix = require_matrix();
    function setMatrix(matrix, options = {}) {
      matrix = new _mlMatrix.Matrix(matrix);
      let {
        channel
      } = options;
      this.checkProcessable("getMatrix", {
        bitDepth: [8, 16]
      });
      if (channel === void 0) {
        if (this.components > 1) {
          throw new RangeError("You need to define the channel for an image that contains more than one channel");
        }
        channel = 0;
      }
      if (this.width !== matrix.columns || this.height !== matrix.rows) {
        throw new RangeError("The size of the matrix must be equal to the size of the image");
      }
      for (let x = 0; x < this.height; x++) {
        for (let y = 0; y < this.width; y++) {
          this.setValueXY(y, x, channel, matrix.get(x, y));
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/utility/getPixelsArray.js
var require_getPixelsArray = __commonJS({
  "node_modules/image-js/lib/image/utility/getPixelsArray.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getPixelsArray;
    function getPixelsArray() {
      this.checkProcessable("getPixelsArray", {
        bitDepth: [8, 16, 32]
      });
      let array = new Array(this.size);
      let ptr = 0;
      for (let i = 0; i < this.data.length; i += this.channels) {
        let pixel = new Array(this.components);
        for (let j = 0; j < this.components; j++) {
          pixel[j] = this.data[i + j];
        }
        array[ptr++] = pixel;
      }
      return array;
    }
  }
});

// node_modules/image-js/lib/image/utility/getIntersection.js
var require_getIntersection = __commonJS({
  "node_modules/image-js/lib/image/utility/getIntersection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getIntersection;
    function getIntersection(mask2) {
      let mask1 = this;
      let closestParent = mask1.getClosestCommonParent(mask2);
      let startPos1 = mask1.getRelativePosition(closestParent, {
        defaultFurther: true
      });
      let allRelPos1 = getRelativePositionForAllPixels(mask1, startPos1);
      let startPos2 = mask2.getRelativePosition(closestParent, {
        defaultFurther: true
      });
      let allRelPos2 = getRelativePositionForAllPixels(mask2, startPos2);
      let commonSurface = getCommonSurface(allRelPos1, allRelPos2);
      let intersection = {
        whitePixelsMask1: [],
        whitePixelsMask2: [],
        commonWhitePixels: []
      };
      for (let i = 0; i < commonSurface.length; i++) {
        let currentRelativePos = commonSurface[i];
        let realPos1 = [currentRelativePos[0] - startPos1[0], currentRelativePos[1] - startPos1[1]];
        let realPos2 = [currentRelativePos[0] - startPos2[0], currentRelativePos[1] - startPos2[1]];
        let valueBitMask1 = mask1.getBitXY(realPos1[0], realPos1[1]);
        let valueBitMask2 = mask2.getBitXY(realPos2[0], realPos2[1]);
        if (valueBitMask1 === 1 && valueBitMask2 === 1) {
          intersection.commonWhitePixels.push(currentRelativePos);
        }
      }
      for (let i = 0; i < allRelPos1.length; i++) {
        let posX;
        let posY;
        if (i !== 0) {
          posX = Math.floor(i / mask1.width);
          posY = i % mask1.width;
        }
        if (mask1.getBitXY(posX, posY) === 1) {
          intersection.whitePixelsMask1.push(allRelPos1[i]);
        }
      }
      for (let i = 0; i < allRelPos2.length; i++) {
        let posX = 0;
        let posY = 0;
        if (i !== 0) {
          posX = Math.floor(i / mask2.width);
          posY = i % mask2.width;
        }
        if (mask2.getBitXY(posX, posY) === 1) {
          intersection.whitePixelsMask2.push(allRelPos2[i]);
        }
      }
      return intersection;
    }
    function getRelativePositionForAllPixels(mask, startPosition) {
      let relativePositions = [];
      for (let i = 0; i < mask.height; i++) {
        for (let j = 0; j < mask.width; j++) {
          let originalPos = [i, j];
          relativePositions.push([originalPos[0] + startPosition[0], originalPos[1] + startPosition[1]]);
        }
      }
      return relativePositions;
    }
    function getCommonSurface(positionArray1, positionArray2) {
      let i = 0;
      let j = 0;
      let commonSurface = [];
      while (i < positionArray1.length && j < positionArray2.length) {
        if (positionArray1[i][0] === positionArray2[j][0] && positionArray1[i][1] === positionArray2[j][1]) {
          commonSurface.push(positionArray1[i]);
          i++;
          j++;
        } else if (positionArray1[i][0] < positionArray2[j][0] || positionArray1[i][0] === positionArray2[j][0] && positionArray1[i][1] < positionArray2[j][1]) {
          i++;
        } else {
          j++;
        }
      }
      return commonSurface;
    }
  }
});

// node_modules/image-js/lib/image/utility/getClosestCommonParent.js
var require_getClosestCommonParent = __commonJS({
  "node_modules/image-js/lib/image/utility/getClosestCommonParent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getClosestCommonParent;
    function getClosestCommonParent(mask) {
      let depthMask1 = getDepth(this);
      let depthMask2 = getDepth(mask);
      let furthestParent;
      if (depthMask1 >= depthMask2) {
        furthestParent = getFurthestParent(this, depthMask1);
      } else {
        furthestParent = getFurthestParent(mask, depthMask2);
      }
      if (depthMask1 === 0 || depthMask2 === 0) {
        return furthestParent;
      }
      let m1 = this;
      let m2 = mask;
      while (depthMask1 !== depthMask2) {
        if (depthMask1 > depthMask2) {
          m1 = m1.parent;
          if (m1 === null) {
            return furthestParent;
          }
          depthMask1 = depthMask1 - 1;
        } else {
          m2 = m2.parent;
          if (m2 === null) {
            return furthestParent;
          }
          depthMask2 = depthMask2 - 1;
        }
      }
      while (m1 !== m2 && m1 !== null && m2 !== null) {
        m1 = m1.parent;
        m2 = m2.parent;
        if (m1 === null || m2 === null) {
          return furthestParent;
        }
      }
      if (m1 !== m2) {
        return furthestParent;
      }
      return m1;
    }
    function getDepth(mask) {
      let d = 0;
      let m = mask;
      while (m.parent != null) {
        m = m.parent;
        d++;
      }
      return d;
    }
    function getFurthestParent(mask, depth) {
      let m = mask;
      while (depth > 0) {
        m = m.parent;
        depth = depth - 1;
      }
      return m;
    }
  }
});

// node_modules/canny-edge-detector/lib/index.js
var require_lib23 = __commonJS({
  "node_modules/canny-edge-detector/lib/index.js"(exports2, module2) {
    "use strict";
    var defaultOptions = {
      lowThreshold: 10,
      highThreshold: 30,
      gaussianBlur: 1.1
    };
    var Gx = [
      [-1, 0, 1],
      [-2, 0, 2],
      [-1, 0, 1]
    ];
    var Gy = [
      [-1, -2, -1],
      [0, 0, 0],
      [1, 2, 1]
    ];
    var convOptions = {
      bitDepth: 32,
      mode: "periodic"
    };
    function cannyEdgeDetector(image, options) {
      image.checkProcessable("Canny edge detector", {
        bitDepth: 8,
        channels: 1,
        components: 1
      });
      options = Object.assign({}, defaultOptions, options);
      const width = image.width;
      const height = image.height;
      const brightness = image.maxValue;
      const gfOptions = {
        sigma: options.gaussianBlur,
        radius: 3
      };
      const gf = image.gaussianFilter(gfOptions);
      const gradientX = gf.convolution(Gy, convOptions);
      const gradientY = gf.convolution(Gx, convOptions);
      const G = gradientY.hypotenuse(gradientX);
      const Image3 = image.constructor;
      const nms = new Image3(width, height, {
        kind: "GREY",
        bitDepth: 32
      });
      const edges = new Image3(width, height, {
        kind: "GREY",
        bitDepth: 32
      });
      const finalImage = new Image3(width, height, {
        kind: "GREY"
      });
      for (var i = 1; i < width - 1; i++) {
        for (var j = 1; j < height - 1; j++) {
          var dir = (Math.round(Math.atan2(gradientY.getValueXY(i, j, 0), gradientX.getValueXY(i, j, 0)) * (5 / Math.PI)) + 5) % 5;
          if (!(dir === 0 && (G.getValueXY(i, j, 0) <= G.getValueXY(i, j - 1, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i, j + 1, 0)) || dir === 1 && (G.getValueXY(i, j, 0) <= G.getValueXY(i - 1, j + 1, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i + 1, j - 1, 0)) || dir === 2 && (G.getValueXY(i, j, 0) <= G.getValueXY(i - 1, j, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i + 1, j, 0)) || dir === 3 && (G.getValueXY(i, j, 0) <= G.getValueXY(i - 1, j - 1, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i + 1, j + 1, 0)))) {
            nms.setValueXY(i, j, 0, G.getValueXY(i, j, 0));
          }
        }
      }
      for (i = 0; i < width * height; ++i) {
        var currentNms = nms.data[i];
        var currentEdge = 0;
        if (currentNms > options.highThreshold) {
          currentEdge++;
          finalImage.data[i] = brightness;
        }
        if (currentNms > options.lowThreshold) {
          currentEdge++;
        }
        edges.data[i] = currentEdge;
      }
      var currentPixels = [];
      for (i = 1; i < width - 1; ++i) {
        for (j = 1; j < height - 1; ++j) {
          if (edges.getValueXY(i, j, 0) !== 1) {
            continue;
          }
          outer:
            for (var k = i - 1; k < i + 2; ++k) {
              for (var l = j - 1; l < j + 2; ++l) {
                if (edges.getValueXY(k, l, 0) === 2) {
                  currentPixels.push([i, j]);
                  finalImage.setValueXY(i, j, 0, brightness);
                  break outer;
                }
              }
            }
        }
      }
      while (currentPixels.length > 0) {
        var newPixels = [];
        for (i = 0; i < currentPixels.length; ++i) {
          for (j = -1; j < 2; ++j) {
            for (k = -1; k < 2; ++k) {
              if (j === 0 && k === 0) {
                continue;
              }
              var row = currentPixels[i][0] + j;
              var col = currentPixels[i][1] + k;
              if (edges.getValueXY(row, col, 0) === 1 && finalImage.getValueXY(row, col, 0) === 0) {
                newPixels.push([row, col]);
                finalImage.setValueXY(row, col, 0, brightness);
              }
            }
          }
        }
        currentPixels = newPixels;
      }
      return finalImage;
    }
    module2.exports = cannyEdgeDetector;
  }
});

// node_modules/image-js/lib/image/operator/cannyEdge.js
var require_cannyEdge = __commonJS({
  "node_modules/image-js/lib/image/operator/cannyEdge.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cannyEdge;
    var _cannyEdgeDetector = _interopRequireDefault(require_lib23());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function cannyEdge(options) {
      return (0, _cannyEdgeDetector.default)(this, options);
    }
  }
});

// node_modules/image-js/lib/image/operator/extract.js
var require_extract = __commonJS({
  "node_modules/image-js/lib/image/operator/extract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = extract;
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function extract(mask, options = {}) {
      let {
        position
      } = options;
      this.checkProcessable("extract", {
        bitDepth: [1, 8, 16]
      });
      if (!position) {
        position = mask.getRelativePosition(this);
        if (!position) {
          throw new Error("extract : can not extract an image because the relative position can not be determined, try to specify manually the position as an array of 2 elements [x,y].");
        }
      }
      if (this.bitDepth > 1) {
        let extract2 = _Image.default.createFrom(this, {
          width: mask.width,
          height: mask.height,
          alpha: 1,
          // we force the alpha, otherwise difficult to extract a mask ...
          position,
          parent: this
        });
        for (let x = 0; x < mask.width; x++) {
          for (let y = 0; y < mask.height; y++) {
            for (let channel = 0; channel < this.channels; channel++) {
              let value = this.getValueXY(x + position[0], y + position[1], channel);
              extract2.setValueXY(x, y, channel, value);
            }
            if (!mask.getBitXY(x, y)) {
              extract2.setValueXY(x, y, this.components, 0);
            }
          }
        }
        return extract2;
      } else {
        let extract2 = _Image.default.createFrom(this, {
          width: mask.width,
          height: mask.height,
          position,
          parent: this
        });
        for (let y = 0; y < mask.height; y++) {
          for (let x = 0; x < mask.width; x++) {
            if (mask.getBitXY(x, y)) {
              if (this.getBitXY(x + position[0], y + position[1])) {
                extract2.setBitXY(x, y);
              }
            }
          }
        }
        return extract2;
      }
    }
  }
});

// node_modules/fast-list/fast-list.js
var require_fast_list = __commonJS({
  "node_modules/fast-list/fast-list.js"(exports2, module2) {
    (function() {
      function Item(data, prev, next) {
        this.next = next;
        if (next)
          next.prev = this;
        this.prev = prev;
        if (prev)
          prev.next = this;
        this.data = data;
      }
      function FastList() {
        if (!(this instanceof FastList))
          return new FastList();
        this._head = null;
        this._tail = null;
        this.length = 0;
      }
      FastList.prototype = {
        push: function(data) {
          this._tail = new Item(data, this._tail, null);
          if (!this._head)
            this._head = this._tail;
          this.length++;
        },
        pop: function() {
          if (this.length === 0)
            return void 0;
          var t = this._tail;
          this._tail = t.prev;
          if (t.prev) {
            t.prev = this._tail.next = null;
          }
          this.length--;
          if (this.length === 1)
            this._head = this._tail;
          else if (this.length === 0)
            this._head = this._tail = null;
          return t.data;
        },
        unshift: function(data) {
          this._head = new Item(data, null, this._head);
          if (!this._tail)
            this._tail = this._head;
          this.length++;
        },
        shift: function() {
          if (this.length === 0)
            return void 0;
          var h = this._head;
          this._head = h.next;
          if (h.next) {
            h.next = this._head.prev = null;
          }
          this.length--;
          if (this.length === 1)
            this._tail = this._head;
          else if (this.length === 0)
            this._head = this._tail = null;
          return h.data;
        },
        item: function(n) {
          if (n < 0)
            n = this.length + n;
          var h = this._head;
          while (n-- > 0 && h)
            h = h.next;
          return h ? h.data : void 0;
        },
        slice: function(n, m) {
          if (!n)
            n = 0;
          if (!m)
            m = this.length;
          if (m < 0)
            m = this.length + m;
          if (n < 0)
            n = this.length + n;
          if (m === n) {
            return [];
          }
          if (m < n) {
            throw new Error("invalid offset: " + n + "," + m + " (length=" + this.length + ")");
          }
          var len = m - n, ret = new Array(len), i = 0, h = this._head;
          while (n-- > 0 && h)
            h = h.next;
          while (i < len && h) {
            ret[i++] = h.data;
            h = h.next;
          }
          return ret;
        },
        drop: function() {
          FastList.call(this);
        },
        forEach: function(fn, thisp) {
          var p = this._head, i = 0, len = this.length;
          while (i < len && p) {
            fn.call(thisp || this, p.data, i, this);
            p = p.next;
            i++;
          }
        },
        map: function(fn, thisp) {
          var n = new FastList();
          this.forEach(function(v, i, me) {
            n.push(fn.call(thisp || me, v, i, me));
          });
          return n;
        },
        filter: function(fn, thisp) {
          var n = new FastList();
          this.forEach(function(v, i, me) {
            if (fn.call(thisp || me, v, i, me))
              n.push(v);
          });
          return n;
        },
        reduce: function(fn, val, thisp) {
          var i = 0, p = this._head, len = this.length;
          if (!val) {
            i = 1;
            val = p && p.data;
            p = p && p.next;
          }
          while (i < len && p) {
            val = fn.call(thisp || this, val, p.data, this);
            i++;
            p = p.next;
          }
          return val;
        }
      };
      if ("undefined" !== typeof exports2)
        module2.exports = FastList;
      else if ("function" === typeof define && define.amd) {
        define("FastList", function() {
          return FastList;
        });
      } else
        (/* @__PURE__ */ function() {
          return this;
        }()).FastList = FastList;
    })();
  }
});

// node_modules/image-js/lib/image/operator/floodFill.js
var require_floodFill = __commonJS({
  "node_modules/image-js/lib/image/operator/floodFill.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = floodFill;
    var _fastList = _interopRequireDefault(require_fast_list());
    var _Image = _interopRequireDefault(require_Image());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function floodFill(options = {}) {
      const {
        x = 0,
        y = 0,
        inPlace = true
      } = options;
      const destination = inPlace ? this : _Image.default.createFrom(this);
      this.checkProcessable("floodFill", {
        bitDepth: 1
      });
      const bit = this.getBitXY(x, y);
      if (bit)
        return destination;
      const queue = new _fastList.default();
      queue.push(new Node(x, y));
      while (queue.length > 0) {
        const node = queue.shift();
        destination.setBitXY(node.x, node.y);
        for (let i = node.x + 1; i < this.width; i++) {
          if (!destination.getBitXY(i, node.y) && !this.getBitXY(i, node.y)) {
            destination.setBitXY(i, node.y);
            if (node.y + 1 < this.height && !this.getBitXY(i, node.y + 1)) {
              queue.push(new Node(i, node.y + 1));
            }
            if (node.y - 1 >= 0 && !this.getBitXY(i, node.y - 1)) {
              queue.push(new Node(i, node.y - 1));
            }
          } else {
            break;
          }
        }
        for (let i = node.x - 1; i >= 0; i++) {
          if (!destination.getBitXY(i, node.y) && !this.getBitXY(i, node.y)) {
            destination.setBitXY(i, node.y);
            if (node.y + 1 < this.height && !this.getBitXY(i, node.y + 1)) {
              queue.push(new Node(i, node.y + 1));
            }
            if (node.y - 1 >= 0 && !this.getBitXY(i, node.y - 1)) {
              queue.push(new Node(i, node.y - 1));
            }
          } else {
            break;
          }
        }
      }
      return destination;
    }
    function Node(x, y) {
      this.x = x;
      this.y = y;
    }
  }
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports2, module2) {
    function _extends() {
      return module2.exports = _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e];
          for (var r in t)
            ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        }
        return n;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _extends.apply(null, arguments);
    }
    module2.exports = _extends, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@swiftcarrot/color-fns/dist/index.cjs.js
var require_index_cjs = __commonJS({
  "node_modules/@swiftcarrot/color-fns/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var _extends = _interopDefault(require_extends());
    function hex2rgb(hex) {
      if (hex[0] === "#")
        hex = hex.substr(1);
      if (hex.length === 3) {
        return {
          r: parseInt(hex[0] + hex[0], 16),
          g: parseInt(hex[1] + hex[1], 16),
          b: parseInt(hex[2] + hex[2], 16)
        };
      }
      return {
        r: parseInt(hex.substr(0, 2), 16),
        g: parseInt(hex.substr(2, 2), 16),
        b: parseInt(hex.substr(4, 2), 16)
      };
    }
    function hsv2rgb(h, s, v) {
      s = s / 100;
      v = v / 100;
      var rgb2 = [];
      var c = v * s;
      var hh = h / 60;
      var x = c * (1 - Math.abs(hh % 2 - 1));
      var m = v - c;
      if (hh >= 0 && hh < 1) {
        rgb2 = [c, x, 0];
      } else if (hh >= 1 && hh < 2) {
        rgb2 = [x, c, 0];
      } else if (hh >= 2 && hh < 3) {
        rgb2 = [0, c, x];
      } else if (h >= 3 && hh < 4) {
        rgb2 = [0, x, c];
      } else if (h >= 4 && hh < 5) {
        rgb2 = [x, 0, c];
      } else if (h >= 5 && hh <= 6) {
        rgb2 = [c, 0, x];
      } else {
        rgb2 = [0, 0, 0];
      }
      return {
        r: Math.round(255 * (rgb2[0] + m)),
        g: Math.round(255 * (rgb2[1] + m)),
        b: Math.round(255 * (rgb2[2] + m))
      };
    }
    function convert(num) {
      var hex = num.toString(16);
      return hex.length === 1 ? "0" + hex : hex;
    }
    function rgb2hex(r, g, b) {
      return "#" + [convert(r), convert(g), convert(b)].join("");
    }
    function hsv2hex(h, s, v) {
      var rgb2 = hsv2rgb(h, s, v);
      return rgb2hex(rgb2.r, rgb2.g, rgb2.b);
    }
    function rgb2hsv(r, g, b) {
      var h, s, v;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var delta = max - min;
      if (delta === 0) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta % 6;
      } else if (g === max) {
        h = (b - r) / delta + 2;
      } else {
        h = (r - g) / delta + 4;
      }
      h = Math.round(h * 60);
      if (h < 0)
        h += 360;
      s = Math.round((max === 0 ? 0 : delta / max) * 100);
      v = Math.round(max / 255 * 100);
      return {
        h,
        s,
        v
      };
    }
    function rgba(r, g, b, a) {
      return "rgba(" + [r, g, b, a / 100].join(",") + ")";
    }
    function rgba2rgb(r, g, b, a) {
      a = a / 100;
      return {
        r: parseInt((1 - a) * 255 + a * r, 10),
        g: parseInt((1 - a) * 255 + a * g, 10),
        b: parseInt((1 - a) * 255 + a * b, 10)
      };
    }
    function rgba2hex(r, g, b, a) {
      var rgb2 = rgba2rgb(r, g, b, a);
      return rgb2hex(rgb2.r, rgb2.g, rgb2.b);
    }
    function hsl2hsv(h, s, l) {
      s *= (l < 50 ? l : 100 - l) / 100;
      return {
        h,
        s: 2 * s / (l + s) * 100,
        v: l + s
      };
    }
    function hsv2hsl(h, s, v) {
      var hh = (200 - s) * v / 100;
      return {
        h,
        s: s * v / (hh < 100 ? hh : 200 - hh),
        l: hh / 2
      };
    }
    function hsl2rgb(h, s, l) {
      var hsv = hsl2hsv(h, s, l);
      return hsv2rgb(hsv.h, hsv.s, hsv.v);
    }
    var colors = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 132, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 255, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      grey: [128, 128, 128],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 203],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      rebeccapurple: [102, 51, 153],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [119, 128, 144],
      slategrey: [119, 128, 144],
      snow: [255, 255, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 5]
    };
    function parse(str) {
      return named(str) || hex3(str) || hex6(str) || rgb(str) || rgba$1(str) || hsl(str) || hsla(str);
    }
    function named(str) {
      var c = colors[str.toLowerCase()];
      if (!c)
        return;
      return {
        r: c[0],
        g: c[1],
        b: c[2],
        a: 100
      };
    }
    function rgb(str) {
      var m = str.match(/rgb\(([^)]+)\)/);
      if (m) {
        var parts = m[1].split(/ *, */).map(Number);
        return {
          r: parts[0],
          g: parts[1],
          b: parts[2],
          a: 100
        };
      }
    }
    function rgba$1(str) {
      var m = str.match(/rgba\(([^)]+)\)/);
      if (m) {
        var parts = m[1].split(/ *, */).map(Number);
        return {
          r: parts[0],
          g: parts[1],
          b: parts[2],
          a: parts[3] * 100
        };
      }
    }
    function hex6(str) {
      if ("#" === str[0] && 7 === str.length) {
        return {
          r: parseInt(str.slice(1, 3), 16),
          g: parseInt(str.slice(3, 5), 16),
          b: parseInt(str.slice(5, 7), 16),
          a: 100
        };
      }
    }
    function hex3(str) {
      if ("#" === str[0] && 4 === str.length) {
        return {
          r: parseInt(str[1] + str[1], 16),
          g: parseInt(str[2] + str[2], 16),
          b: parseInt(str[3] + str[3], 16),
          a: 100
        };
      }
    }
    function hsl(str) {
      var m = str.match(/hsl\(([^)]+)\)/);
      if (m) {
        var parts = m[1].split(/ *, */);
        var h = parseInt(parts[0], 10);
        var s = parseInt(parts[1], 10);
        var l = parseInt(parts[2], 10);
        var _rgb = hsl2rgb(h, s, l);
        return _extends({}, _rgb, {
          a: 100
        });
      }
    }
    function hsla(str) {
      var m = str.match(/hsla\(([^)]+)\)/);
      if (m) {
        var parts = m[1].split(/ *, */);
        var h = parseInt(parts[0], 10);
        var s = parseInt(parts[1], 10);
        var l = parseInt(parts[2], 10);
        var a = parseInt(parseFloat(parts[3]) * 100, 10);
        var _rgb2 = hsl2rgb(h, s, l);
        return _extends({}, _rgb2, {
          a
        });
      }
    }
    function hex2hsv(hex) {
      var _hex2rgb = hex2rgb(hex), r = _hex2rgb.r, g = _hex2rgb.g, b = _hex2rgb.b;
      return rgb2hsv(r, g, b);
    }
    function hex2hsl(hex) {
      var _hex2hsv = hex2hsv(hex), h = _hex2hsv.h, s = _hex2hsv.s, v = _hex2hsv.v;
      return hsv2hsl(h, s, v);
    }
    function hex2alpha(aa) {
      return Math.round(parseInt("0x" + aa, 16) / 255 * 100);
    }
    exports2.cssColor = parse;
    exports2.hex2alpha = hex2alpha;
    exports2.hex2hsl = hex2hsl;
    exports2.hex2hsv = hex2hsv;
    exports2.hex2rgb = hex2rgb;
    exports2.hsl2hsv = hsl2hsv;
    exports2.hsl2rgb = hsl2rgb;
    exports2.hsv2hex = hsv2hex;
    exports2.hsv2hsl = hsv2hsl;
    exports2.hsv2rgb = hsv2rgb;
    exports2.rgb2hex = rgb2hex;
    exports2.rgb2hsv = rgb2hsv;
    exports2.rgba = rgba;
    exports2.rgba2hex = rgba2hex;
    exports2.rgba2rgb = rgba2rgb;
  }
});

// node_modules/image-js/lib/util/color.js
var require_color = __commonJS({
  "node_modules/image-js/lib/util/color.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.css2array = css2array;
    exports2.getColors = getColors;
    exports2.getDistinctColors = getDistinctColors;
    exports2.getRandomColor = getRandomColor;
    var _colorFns = require_index_cjs();
    function css2array(string) {
      let color = (0, _colorFns.cssColor)(string);
      return [color.r, color.g, color.b, Math.round(color.a * 255 / 100)];
    }
    function hue2rgb(p, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
    }
    function hsl2rgb(h, s, l) {
      let m1, m2, hue, r, g, b;
      s /= 100;
      l /= 100;
      if (s === 0) {
        r = g = b = l * 255;
      } else {
        if (l <= 0.5) {
          m2 = l * (s + 1);
        } else {
          m2 = l + s - l * s;
        }
        m1 = l * 2 - m2;
        hue = h / 360;
        r = hue2rgb(m1, m2, hue + 1 / 3);
        g = hue2rgb(m1, m2, hue);
        b = hue2rgb(m1, m2, hue - 1 / 3);
      }
      return {
        r,
        g,
        b
      };
    }
    function getDistinctColors(numColors) {
      let colors = new Array(numColors);
      let j = 0;
      for (let i = 0; i < 360; i += 360 / numColors) {
        j++;
        let color = hsl2rgb(i, 100, 30 + j % 4 * 15);
        colors[j - 1] = [Math.round(color.r * 255), Math.round(color.g * 255), Math.round(color.b * 255)];
      }
      return colors;
    }
    function getRandomColor() {
      return [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)];
    }
    function getColors(options) {
      let {
        color,
        colors,
        randomColors,
        // true / false
        numberColors = 50
      } = options;
      if (color && !Array.isArray(color)) {
        color = css2array(color);
      }
      if (color) {
        return [color];
      }
      if (colors) {
        colors = colors.map(function(color2) {
          if (!Array.isArray(color2)) {
            return css2array(color2);
          }
          return color2;
        });
        return colors;
      }
      if (randomColors) {
        colors = new Array(numberColors);
        for (let i = 0; i < numberColors; i++) {
          colors[i] = getRandomColor();
        }
      }
      return getDistinctColors(numberColors);
    }
  }
});

// node_modules/image-js/lib/image/operator/paintLabels.js
var require_paintLabels = __commonJS({
  "node_modules/image-js/lib/image/operator/paintLabels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintLabels;
    var _color = require_color();
    var _model = require_model();
    function paintLabels(labels, positions, options = {}) {
      let {
        color = "blue",
        colors,
        font = "12px Helvetica",
        rotate = 0
      } = options;
      this.checkProcessable("paintMasks", {
        channels: [3, 4],
        bitDepth: [8, 16],
        colorModel: _model.RGB
      });
      if (!Array.isArray(labels)) {
        throw Error("paintLabels: labels must be an array");
      }
      if (!Array.isArray(positions)) {
        throw Error("paintLabels: positions must be an array");
      }
      if (color && !Array.isArray(color)) {
        color = (0, _color.css2array)(color);
      }
      if (colors) {
        colors = colors.map(function(color2) {
          if (!Array.isArray(color2)) {
            return (0, _color.css2array)(color2);
          }
          return color2;
        });
      } else {
        colors = [color];
      }
      if (labels.length !== positions.length) {
        throw Error("paintLabels: positions and labels must be arrays from the same size");
      }
      if (!Array.isArray(font))
        font = [font];
      if (!Array.isArray(rotate))
        rotate = [rotate];
      let canvas = this.getCanvas();
      let ctx = canvas.getContext("2d");
      for (let i = 0; i < labels.length; i++) {
        ctx.save();
        let color2 = colors[i % colors.length];
        ctx.fillStyle = `rgba(${color2[0]},${color2[1]},${color2[2]},${color2[3] / this.maxValue})`;
        ctx.font = font[i % font.length];
        let position = positions[i];
        ctx.translate(position[0], position[1]);
        ctx.rotate(rotate[i % rotate.length] / 180 * Math.PI);
        ctx.fillText(labels[i], 0, 0);
        ctx.restore();
      }
      this.data = Uint8Array.from(ctx.getImageData(0, 0, this.width, this.height).data);
      return this;
    }
  }
});

// node_modules/image-js/lib/image/operator/paintMasks.js
var require_paintMasks = __commonJS({
  "node_modules/image-js/lib/image/operator/paintMasks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintMasks;
    var _color = require_color();
    var _model = require_model();
    function paintMasks(masks, options = {}) {
      let {
        alpha = 255,
        labels = [],
        labelsPosition = [],
        labelColor = "blue",
        labelFont = "12px Helvetica"
      } = options;
      this.checkProcessable("paintMasks", {
        channels: [3, 4],
        bitDepth: [8, 16],
        colorModel: _model.RGB
      });
      let colors = (0, _color.getColors)(Object.assign({}, options, {
        numberColors: masks.length
      }));
      if (!Array.isArray(masks)) {
        masks = [masks];
      }
      for (let i = 0; i < masks.length; i++) {
        let mask = masks[i];
        let color = colors[i % colors.length];
        for (let x = 0; x < mask.width; x++) {
          for (let y = 0; y < mask.height; y++) {
            if (mask.getBitXY(x, y)) {
              for (let component = 0; component < Math.min(this.components, color.length); component++) {
                if (alpha === 255) {
                  this.setValueXY(x + mask.position[0], y + mask.position[1], component, color[component]);
                } else {
                  let value = this.getValueXY(x + mask.position[0], y + mask.position[1], component);
                  value = Math.round((value * (255 - alpha) + color[component] * alpha) / 255);
                  this.setValueXY(x + mask.position[0], y + mask.position[1], component, value);
                }
              }
            }
          }
        }
      }
      if (Array.isArray(labels) && labels.length > 0) {
        let canvas = this.getCanvas();
        let ctx = canvas.getContext("2d");
        ctx.fillStyle = labelColor;
        ctx.font = labelFont;
        for (let i = 0; i < Math.min(masks.length, labels.length); i++) {
          let position = labelsPosition[i] ? labelsPosition[i] : masks[i].position;
          ctx.fillText(labels[i], position[0], position[1]);
        }
        this.data = Uint8Array.from(ctx.getImageData(0, 0, this.width, this.height).data);
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/util/zerosMatrix.js
var require_zerosMatrix = __commonJS({
  "node_modules/image-js/lib/util/zerosMatrix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = zerosMatrix;
    function zerosMatrix(height, width) {
      let matrix = new Array(height);
      for (let i = 0; i < height; i++) {
        matrix[i] = new Array(width).fill(0);
      }
      return matrix;
    }
  }
});

// node_modules/image-js/lib/util/Shape.js
var require_Shape = __commonJS({
  "node_modules/image-js/lib/util/Shape.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _Image = _interopRequireDefault(require_Image());
    var _kindNames = require_kindNames();
    var _zerosMatrix = _interopRequireDefault(require_zerosMatrix());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var cross = [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]];
    var smallCross = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];
    var Shape = class {
      constructor(options = {}) {
        let {
          kind = "cross",
          shape,
          size,
          width,
          height,
          filled = true
        } = options;
        if (size) {
          width = size;
          height = size;
        }
        if (shape) {
          switch (shape.toLowerCase()) {
            case "square":
            case "rectangle":
              this.matrix = rectangle(width, height, {
                filled
              });
              break;
            case "circle":
            case "ellipse":
              this.matrix = ellipse(width, height, {
                filled
              });
              break;
            case "triangle":
              this.matrix = triangle(width, height, {
                filled
              });
              break;
            default:
              throw new Error(`Shape: unexpected shape: ${shape}`);
          }
        } else if (kind) {
          switch (kind.toLowerCase()) {
            case "cross":
              this.matrix = cross;
              break;
            case "smallcross":
              this.matrix = smallCross;
              break;
            default:
              throw new Error(`Shape: unexpected kind: ${kind}`);
          }
        } else {
          throw new Error("Shape: expected a kind or a shape option");
        }
        this.height = this.matrix.length;
        this.width = this.matrix[0].length;
        this.halfHeight = this.height / 2 >> 0;
        this.halfWidth = this.width / 2 >> 0;
      }
      /**
       * Returns an array of [x,y] points
       * @return {Array<Array<number>>} - Array of [x,y] points
       */
      getPoints() {
        let matrix = this.matrix;
        let points = [];
        for (let y = 0; y < matrix.length; y++) {
          for (let x = 0; x < matrix[0].length; x++) {
            if (matrix[y][x]) {
              points.push([x - this.halfWidth, y - this.halfHeight]);
            }
          }
        }
        return points;
      }
      /**
       * Returns a Mask (1 bit Image) corresponding to this shape.
       * @return {Image}
       */
      getMask() {
        let img = new _Image.default(this.width, this.height, {
          kind: _kindNames.BINARY
        });
        for (let y = 0; y < this.matrix.length; y++) {
          for (let x = 0; x < this.matrix[0].length; x++) {
            if (this.matrix[y][x]) {
              img.setBitXY(x, y);
            }
          }
        }
        return img;
      }
    };
    exports2.default = Shape;
    function rectangle(width, height, options) {
      const matrix = (0, _zerosMatrix.default)(height, width);
      if (options.filled) {
        for (let y = 0; y < height; y++) {
          for (let x = 0; x < width; x++) {
            matrix[y][x] = 1;
          }
        }
      } else {
        for (let y of [0, height - 1]) {
          for (let x = 0; x < width; x++) {
            matrix[y][x] = 1;
          }
        }
        for (let y = 0; y < height; y++) {
          for (let x of [0, width - 1]) {
            matrix[y][x] = 1;
          }
        }
      }
      return matrix;
    }
    function ellipse(width, height, options) {
      const matrix = (0, _zerosMatrix.default)(height, width, options);
      let yEven = 1 - height % 2;
      let xEven = 1 - width % 2;
      let a = Math.floor((width - 1) / 2);
      let b = Math.floor((height - 1) / 2);
      let a2 = a * a;
      let b2 = b * b;
      if (options.filled) {
        for (let y = 0; y <= b; y++) {
          let shift = Math.floor(Math.sqrt(a2 - a2 * y * y / b2));
          for (let x = a - shift; x <= a; x++) {
            matrix[b - y][x] = 1;
            matrix[b + y + yEven][x] = 1;
            matrix[b - y][width - x - 1] = 1;
            matrix[b + y + yEven][width - x - 1] = 1;
          }
        }
      } else {
        for (let y = 0; y <= b; y++) {
          let shift = Math.floor(Math.sqrt(a2 - a2 * y * y / b2));
          let x = a - shift;
          matrix[b - y][x] = 1;
          matrix[b + y + yEven][x] = 1;
          matrix[b - y][width - x - 1] = 1;
          matrix[b + y + yEven][width - x - 1] = 1;
        }
        for (let x = 0; x <= a; x++) {
          let shift = Math.floor(Math.sqrt(b2 - b2 * x * x / a2));
          let y = b - shift;
          matrix[y][a - x] = 1;
          matrix[y][a + x + xEven] = 1;
          matrix[height - y - 1][a - x] = 1;
          matrix[height - y - 1][a + x + xEven] = 1;
        }
      }
      return matrix;
    }
    function triangle(width, height, options) {
      if (!options.filled) {
        throw new Error("Non filled triangle is not implemented");
      }
      const matrix = (0, _zerosMatrix.default)(height, width, options);
      for (let y = 0; y < height; y++) {
        let shift = Math.floor((1 - y / height) * width / 2);
        for (let x = shift; x < width - shift; x++) {
          matrix[y][x] = 1;
        }
      }
      return matrix;
    }
  }
});

// node_modules/image-js/lib/image/operator/paintPoints.js
var require_paintPoints = __commonJS({
  "node_modules/image-js/lib/image/operator/paintPoints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintPoints;
    var _Shape = _interopRequireDefault(require_Shape());
    var _color = require_color();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function paintPoints(points, options = {}) {
      let {
        shape
      } = options;
      this.checkProcessable("paintPoints", {
        bitDepth: [8, 16]
      });
      let colors = (0, _color.getColors)(Object.assign({}, options, {
        numberColors: points.length
      }));
      let shapePixels = new _Shape.default(shape).getPoints();
      let numberChannels = Math.min(this.channels, colors[0].length);
      for (let i = 0; i < points.length; i++) {
        let color = colors[i % colors.length];
        let xP = points[i][0];
        let yP = points[i][1];
        for (let j = 0; j < shapePixels.length; j++) {
          let xS = shapePixels[j][0];
          let yS = shapePixels[j][1];
          if (xP + xS >= 0 && yP + yS >= 0 && xP + xS < this.width && yP + yS < this.height) {
            let position = (xP + xS + (yP + yS) * this.width) * this.channels;
            for (let channel = 0; channel < numberChannels; channel++) {
              this.data[position + channel] = color[channel];
            }
          }
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/operator/paintPolyline.js
var require_paintPolyline = __commonJS({
  "node_modules/image-js/lib/image/operator/paintPolyline.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintPolyline;
    function paintPolyline(points, options = {}) {
      let {
        color = [this.maxValue, 0, 0],
        closed = false
      } = options;
      this.checkProcessable("paintPoints", {
        bitDepth: [1, 8, 16]
      });
      let numberChannels = Math.min(this.channels, color.length);
      for (let i = 0; i < points.length - 1 + closed; i++) {
        let from = points[i];
        let to = points[(i + 1) % points.length];
        let dx = to[0] - from[0];
        let dy = to[1] - from[1];
        let steps = Math.max(Math.abs(dx), Math.abs(dy));
        let xIncrement = dx / steps;
        let yIncrement = dy / steps;
        let x = from[0];
        let y = from[1];
        for (let j = 0; j <= steps; j++) {
          let xPoint = Math.round(x);
          let yPoint = Math.round(y);
          if (xPoint >= 0 && yPoint >= 0 && xPoint < this.width && yPoint < this.height) {
            if (this.bitDepth === 1) {
              this.setBitXY(xPoint, yPoint);
            } else {
              let position = (xPoint + yPoint * this.width) * this.channels;
              for (let channel = 0; channel < numberChannels; channel++) {
                this.data[position + channel] = color[channel];
              }
            }
          }
          x = x + xIncrement;
          y = y + yIncrement;
        }
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/operator/paintPolylines.js
var require_paintPolylines = __commonJS({
  "node_modules/image-js/lib/image/operator/paintPolylines.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintPolylines;
    var _color = require_color();
    function paintPolylines(polylines, options = {}) {
      let optionsCopy = Object.assign({}, options);
      this.checkProcessable("paintPolylines", {
        bitDepth: [8, 16]
      });
      let colors = (0, _color.getColors)(Object.assign({}, options, {
        numberColors: polylines.length
      }));
      for (let i = 0; i < polylines.length; i++) {
        optionsCopy.color = colors[i % colors.length];
        this.paintPolyline(polylines[i], optionsCopy);
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/operator/paintPolygon.js
var require_paintPolygon = __commonJS({
  "node_modules/image-js/lib/image/operator/paintPolygon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintPolygon;
    function paintPolygon(points, options = {}) {
      let {
        color = [this.maxValue, 0, 0],
        filled = false
      } = options;
      this.checkProcessable("paintPoints", {
        bitDepth: [1, 8, 16]
      });
      options.closed = true;
      let filteredPoints = deleteDouble(points);
      if (filled === false) {
        return this.paintPolyline(points, options);
      } else {
        let matrixBinary = Array(this.height);
        for (let i = 0; i < this.height; i++) {
          matrixBinary[i] = [];
          for (let j = 0; j < this.width; j++) {
            matrixBinary[i].push(0);
          }
        }
        for (let p = 0; p < filteredPoints.length; p++) {
          const line = lineBetweenTwoPoints(filteredPoints[p], filteredPoints[(p + 1) % filteredPoints.length]);
          for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
              if (isAtTheRightOfTheLine(x, y, line, this.height)) {
                matrixBinary[y][x] = matrixBinary[y][x] === 0 ? 1 : 0;
              }
            }
          }
        }
        for (let y = 0; y < this.height; y++) {
          for (let x = 0; x < this.width; x++) {
            if (matrixBinary[y][x] === 1) {
              if (this.bitDepth === 1) {
                this.setBitXY(x, y);
              } else {
                let numberChannels = Math.min(this.channels, color.length);
                let position = (x + y * this.width) * this.channels;
                for (let channel = 0; channel < numberChannels; channel++) {
                  this.data[position + channel] = color[channel];
                }
              }
            }
          }
        }
        return this.paintPolyline(points, options);
      }
    }
    function deleteDouble(points) {
      let finalPoints = [];
      for (let i = 0; i < points.length; i++) {
        if (points[i][0] === points[(i + 1) % points.length][0] && points[i][1] === points[(i + 1) % points.length][1]) {
          continue;
        } else if (points[i][0] === points[(i - 1 + points.length) % points.length][0] && points[i][1] === points[(i - 1 + points.length) % points.length][1]) {
          continue;
        } else if (points[(i + 1) % points.length][0] === points[(i - 1 + points.length) % points.length][0] && points[(i - 1 + points.length) % points.length][1] === points[(i + 1) % points.length][1]) {
          continue;
        } else {
          finalPoints.push(points[i]);
        }
      }
      return finalPoints;
    }
    function lineBetweenTwoPoints(p1, p2) {
      if (p1[0] === p2[0]) {
        return {
          a: 0,
          b: p1[0],
          vertical: true
        };
      } else {
        const coeffA = (p2[1] - p1[1]) / (p2[0] - p1[0]);
        const coeffB = p1[1] - coeffA * p1[0];
        return {
          a: coeffA,
          b: coeffB,
          vertical: false
        };
      }
    }
    function isAtTheRightOfTheLine(x, y, line, height) {
      if (line.vertical === true) {
        return line.b <= x;
      } else {
        if (line.a === 0) {
          return false;
        } else {
          const xline = (y - line.b) / line.a;
          return xline < x && xline >= 0 && xline <= height;
        }
      }
    }
  }
});

// node_modules/image-js/lib/image/operator/paintPolygons.js
var require_paintPolygons = __commonJS({
  "node_modules/image-js/lib/image/operator/paintPolygons.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = paintPolygons;
    var _color = require_color();
    function paintPolygons(polygons, options = {}) {
      let optionsCopy = Object.assign({}, options);
      this.checkProcessable("paintPolygons", {
        bitDepth: [8, 16]
      });
      let colors = (0, _color.getColors)(Object.assign({}, options, {
        numberColors: polygons.length
      }));
      for (let i = 0; i < polygons.length; i++) {
        optionsCopy.color = colors[i % colors.length];
        this.paintPolygon(polygons[i], optionsCopy);
      }
      return this;
    }
  }
});

// node_modules/image-js/lib/image/compute/histogram.js
var require_histogram3 = __commonJS({
  "node_modules/image-js/lib/image/compute/histogram.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getHistogram = getHistogram;
    exports2.getHistograms = getHistograms;
    var _isInteger = _interopRequireDefault(require_is_integer());
    var _newArray = _interopRequireDefault(require_new_array());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function getHistogram(options = {}) {
      let {
        maxSlots = 256,
        channel,
        useAlpha = true
      } = options;
      this.checkProcessable("getHistogram", {
        bitDepth: [1, 8, 16]
      });
      if (channel === void 0) {
        if (this.components > 1) {
          throw new RangeError("You need to define the channel for an image that contains more than one channel");
        }
        channel = 0;
      }
      return getChannelHistogram.call(this, channel, {
        useAlpha,
        maxSlots
      });
    }
    function getHistograms(options = {}) {
      const {
        maxSlots = 256,
        useAlpha = true
      } = options;
      this.checkProcessable("getHistograms", {
        bitDepth: [8, 16]
      });
      let results = new Array(useAlpha ? this.components : this.channels);
      for (let i = 0; i < results.length; i++) {
        results[i] = getChannelHistogram.call(this, i, {
          useAlpha,
          maxSlots
        });
      }
      return results;
    }
    function getChannelHistogram(channel, options) {
      let {
        useAlpha,
        maxSlots
      } = options;
      if (this.bitDepth === 1) {
        let blackWhiteCount = [0, 0];
        for (let i = 0; i < this.height; i++) {
          for (let j = 0; j < this.width; j++) {
            let value = this.getBitXY(i, j);
            if (value === 0) {
              blackWhiteCount[0] += 1;
            } else if (value === 1) {
              blackWhiteCount[1] += 1;
            }
          }
        }
        return blackWhiteCount;
      }
      let bitSlots = Math.log2(maxSlots);
      if (!(0, _isInteger.default)(bitSlots)) {
        throw new RangeError("maxSlots must be a power of 2, for example: 64, 256, 1024");
      }
      let bitShift = 0;
      if (this.bitDepth > bitSlots) {
        bitShift = this.bitDepth - bitSlots;
      }
      let data = this.data;
      let result = (0, _newArray.default)(Math.pow(2, Math.min(this.bitDepth, bitSlots)), 0);
      if (useAlpha && this.alpha) {
        let alphaChannelDiff = this.channels - channel - 1;
        for (let i = channel; i < data.length; i += this.channels) {
          result[data[i] >> bitShift] += data[i + alphaChannelDiff] / this.maxValue;
        }
      } else {
        for (let i = channel; i < data.length; i += this.channels) {
          result[data[i] >> bitShift]++;
        }
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/colorHistogram.js
var require_colorHistogram = __commonJS({
  "node_modules/image-js/lib/image/compute/colorHistogram.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getColorHistogram;
    var _newArray = _interopRequireDefault(require_new_array());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function getColorHistogram(options = {}) {
      let {
        useAlpha = true,
        nbSlots = 512
      } = options;
      this.checkProcessable("getColorHistogram", {
        bitDepth: [8, 16],
        components: [3]
      });
      let nbSlotsCheck = Math.log(nbSlots) / Math.log(8);
      if (nbSlotsCheck !== Math.floor(nbSlotsCheck)) {
        throw new RangeError("nbSlots must be a power of 8. Usually 8, 64, 512 or 4096");
      }
      let bitShift = this.bitDepth - nbSlotsCheck;
      let data = this.data;
      let result = (0, _newArray.default)(Math.pow(8, nbSlotsCheck), 0);
      let factor2 = Math.pow(2, nbSlotsCheck * 2);
      let factor1 = Math.pow(2, nbSlotsCheck);
      for (let i = 0; i < data.length; i += this.channels) {
        let slot = (data[i] >> bitShift) * factor2 + (data[i + 1] >> bitShift) * factor1 + (data[i + 2] >> bitShift);
        if (useAlpha && this.alpha) {
          result[slot] += data[i + this.channels - 1] / this.maxValue;
        } else {
          result[slot]++;
        }
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/min.js
var require_min2 = __commonJS({
  "node_modules/image-js/lib/image/compute/min.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = min;
    var _newArray = _interopRequireDefault(require_new_array());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function min() {
      this.checkProcessable("min", {
        bitDepth: [8, 16, 32]
      });
      let result = (0, _newArray.default)(this.channels, Infinity);
      for (let i = 0; i < this.data.length; i += this.channels) {
        for (let c = 0; c < this.channels; c++) {
          if (this.data[i + c] < result[c]) {
            result[c] = this.data[i + c];
          }
        }
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/max.js
var require_max2 = __commonJS({
  "node_modules/image-js/lib/image/compute/max.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = max;
    var _newArray = _interopRequireDefault(require_new_array());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function max() {
      this.checkProcessable("max", {
        bitDepth: [8, 16, 32]
      });
      let result = (0, _newArray.default)(this.channels, -Infinity);
      for (let i = 0; i < this.data.length; i += this.channels) {
        for (let c = 0; c < this.channels; c++) {
          if (this.data[i + c] > result[c]) {
            result[c] = this.data[i + c];
          }
        }
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/sum.js
var require_sum = __commonJS({
  "node_modules/image-js/lib/image/compute/sum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = sum;
    var _newArray = _interopRequireDefault(require_new_array());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function sum() {
      this.checkProcessable("sum", {
        bitDepth: [8, 16]
      });
      let result = (0, _newArray.default)(this.channels, 0);
      for (let i = 0; i < this.data.length; i += this.channels) {
        for (let c = 0; c < this.channels; c++) {
          result[c] += this.data[i + c];
        }
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/moment.js
var require_moment = __commonJS({
  "node_modules/image-js/lib/image/compute/moment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMoment;
    function getMoment(xPower = 0, yPower = 0) {
      this.checkProcessable("getMoment", {
        bitDepth: [1]
      });
      let m = 0;
      for (let x = 0; x < this.width; x++) {
        for (let y = 0; y < this.height; y++) {
          if (this.getBitXY(x, y) === 1) {
            m += x ** xPower * y ** yPower;
          }
        }
      }
      return m;
    }
  }
});

// node_modules/image-js/lib/image/compute/localMaxima.js
var require_localMaxima = __commonJS({
  "node_modules/image-js/lib/image/compute/localMaxima.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = localMaxima;
    function localMaxima(options = {}) {
      let {
        mask,
        region = 3,
        removeClosePoints = 0,
        invert = false,
        maxEquals = 2
      } = options;
      let image = this;
      this.checkProcessable("localMaxima", {
        bitDepth: [8, 16],
        components: 1
      });
      region *= 4;
      let maskExpectedValue = invert ? 0 : 1;
      let dx = [1, 0, -1, 0, 1, 1, -1, -1, 2, 0, -2, 0, 2, 2, -2, -2];
      let dy = [0, 1, 0, -1, 1, -1, 1, -1, 0, 2, 0, -2, 2, -2, 2, -2];
      let shift = region <= 8 ? 1 : 2;
      let points = [];
      for (let currentY = shift; currentY < image.height - shift; currentY++) {
        for (let currentX = shift; currentX < image.width - shift; currentX++) {
          if (mask && mask.getBitXY(currentX, currentY) !== maskExpectedValue) {
            continue;
          }
          let counter = 0;
          let nbEquals = 0;
          let currentValue = image.data[currentX + currentY * image.width];
          for (let dir = 0; dir < region; dir++) {
            if (invert) {
              if (image.data[currentX + dx[dir] + (currentY + dy[dir]) * image.width] > currentValue) {
                counter++;
              }
            } else {
              if (image.data[currentX + dx[dir] + (currentY + dy[dir]) * image.width] < currentValue) {
                counter++;
              }
            }
            if (image.data[currentX + dx[dir] + (currentY + dy[dir]) * image.width] === currentValue) {
              nbEquals++;
            }
          }
          if (counter + nbEquals === region && nbEquals <= maxEquals) {
            points.push([currentX, currentY]);
          }
        }
      }
      if (removeClosePoints > 0) {
        for (let i = 0; i < points.length; i++) {
          for (let j = i + 1; j < points.length; j++) {
            if (Math.sqrt(Math.pow(points[i][0] - points[j][0], 2) + Math.pow(points[i][1] - points[j][1], 2)) < removeClosePoints) {
              points[i][0] = points[i][0] + points[j][0] >> 1;
              points[i][1] = points[i][1] + points[j][1] >> 1;
              points.splice(j, 1);
              j--;
            }
          }
        }
      }
      return points;
    }
  }
});

// node_modules/image-js/lib/image/compute/mean.js
var require_mean2 = __commonJS({
  "node_modules/image-js/lib/image/compute/mean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = mean;
    var _histogram = require_histogram();
    function mean() {
      let histograms = this.getHistograms({
        maxSlots: this.maxValue + 1
      });
      let result = new Array(histograms.length);
      for (let c = 0; c < histograms.length; c++) {
        let histogram = histograms[c];
        result[c] = (0, _histogram.mean)(histogram);
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/median.js
var require_median2 = __commonJS({
  "node_modules/image-js/lib/image/compute/median.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = median;
    var _histogram = require_histogram();
    function median() {
      let histograms = this.getHistograms({
        maxSlots: this.maxValue + 1
      });
      let result = new Array(histograms.length);
      for (let c = 0; c < histograms.length; c++) {
        let histogram = histograms[c];
        result[c] = (0, _histogram.median)(histogram);
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/compute/points.js
var require_points = __commonJS({
  "node_modules/image-js/lib/image/compute/points.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = points;
    function points() {
      this.checkProcessable("points", {
        bitDepth: [1]
      });
      const pixels = [];
      for (let x = 0; x < this.width; x++) {
        for (let y = 0; y < this.height; y++) {
          if (this.getBitXY(x, y) === 1) {
            pixels.push([x, y]);
          }
        }
      }
      return pixels;
    }
  }
});

// node_modules/image-js/lib/image/compute/extendedPoints.js
var require_extendedPoints = __commonJS({
  "node_modules/image-js/lib/image/compute/extendedPoints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = extendedPoints;
    function extendedPoints() {
      this.checkProcessable("extendedPoints", {
        bitDepth: [1]
      });
      const pixels = [];
      for (let y = 0; y < this.height; y++) {
        for (let x = 0; x < this.width; x++) {
          if (this.getBitXY(x, y) === 1) {
            pixels.push([x, y]);
            if (this.getBitXY(x + 1, y) !== 1) {
              pixels.push([x + 1, y]);
              pixels.push([x + 1, y + 1]);
              if (this.getBitXY(x, y + 1) !== 1) {
                pixels.push([x, y + 1]);
              }
            } else {
              if (this.getBitXY(x, y + 1) !== 1) {
                pixels.push([x, y + 1]);
                pixels.push([x + 1, y + 1]);
              }
            }
            while (x < this.width - 2 && this.getBitXY(x + 1, y) === 1 && this.getBitXY(x + 2, y) === 1) {
              x++;
            }
          }
        }
      }
      return pixels;
    }
  }
});

// node_modules/image-js/lib/image/compute/relativePosition.js
var require_relativePosition = __commonJS({
  "node_modules/image-js/lib/image/compute/relativePosition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getRelativePosition;
    function getRelativePosition(targetImage, options = {}) {
      if (this === targetImage) {
        return [0, 0];
      }
      let position = [0, 0];
      let currentImage = this;
      while (currentImage) {
        if (currentImage === targetImage) {
          return position;
        }
        if (currentImage.position) {
          position[0] += currentImage.position[0];
          position[1] += currentImage.position[1];
        }
        currentImage = currentImage.parent;
      }
      if (options.defaultFurther)
        return position;
      return false;
    }
  }
});

// node_modules/image-js/lib/image/compute/countAlphaPixels.js
var require_countAlphaPixels = __commonJS({
  "node_modules/image-js/lib/image/compute/countAlphaPixels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = countAlphaPixels;
    function countAlphaPixels(options = {}) {
      let {
        alpha = 1
      } = options;
      this.checkProcessable("countAlphaPixels", {
        bitDepth: [8, 16],
        alpha: 1
      });
      let count = 0;
      if (alpha !== void 0) {
        for (let i = this.components; i < this.data.length; i += this.channels) {
          if (this.data[i] === alpha) {
            count++;
          }
        }
        return count;
      } else {
        return this.size;
      }
    }
  }
});

// node_modules/monotone-chain-convex-hull/lib/index.js
var require_lib24 = __commonJS({
  "node_modules/monotone-chain-convex-hull/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function monotoneChainConvexHull(points, options = {}) {
      const { sorted } = options;
      if (!sorted) {
        points = points.slice().sort(byXThenY);
      }
      const n = points.length;
      const result = new Array(n * 2);
      let k = 0;
      for (let i = 0; i < n; i++) {
        const point = points[i];
        while (k >= 2 && cw(result[k - 2], result[k - 1], point) <= 0) {
          k--;
        }
        result[k++] = point;
      }
      const t = k + 1;
      for (let i = n - 2; i >= 0; i--) {
        const point = points[i];
        while (k >= t && cw(result[k - 2], result[k - 1], point) <= 0) {
          k--;
        }
        result[k++] = point;
      }
      return result.slice(0, k - 1);
    }
    exports2.default = monotoneChainConvexHull;
    function cw(p1, p2, p3) {
      return (p2[1] - p1[1]) * (p3[0] - p1[0]) - (p2[0] - p1[0]) * (p3[1] - p1[1]);
    }
    function byXThenY(point1, point2) {
      if (point1[0] === point2[0]) {
        return point1[1] - point2[1];
      }
      return point1[0] - point2[0];
    }
  }
});

// node_modules/image-js/lib/image/compute/monotoneChainConvexHull.js
var require_monotoneChainConvexHull = __commonJS({
  "node_modules/image-js/lib/image/compute/monotoneChainConvexHull.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = monotoneChainConvexHull;
    var _monotoneChainConvexHull = _interopRequireDefault(require_lib24());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function monotoneChainConvexHull() {
      return (0, _monotoneChainConvexHull.default)(this.extendedPoints, {
        sorted: false
      });
    }
  }
});

// node_modules/image-js/lib/util/points.js
var require_points2 = __commonJS({
  "node_modules/image-js/lib/util/points.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.angle = angle;
    exports2.boundary = boundary;
    exports2.difference = difference;
    exports2.dot = dot;
    exports2.minMax = minMax;
    exports2.moveToZeroZero = moveToZeroZero;
    exports2.normalize = normalize;
    exports2.perimeter = perimeter;
    exports2.rotate = rotate;
    exports2.round = round;
    exports2.surface = surface;
    function round(points) {
      for (let i = 0; i < points.length; i++) {
        points[i][0] = Math.round(points[i][0]);
        points[i][1] = Math.round(points[i][1]);
      }
      return points;
    }
    function difference(p1, p2) {
      return [p1[0] - p2[0], p1[1] - p2[1]];
    }
    function normalize(p) {
      let length = Math.sqrt(p[0] ** 2 + p[1] ** 2);
      return [p[0] / length, p[1] / length];
    }
    function rotate(radians, srcPoints, destPoints) {
      if (destPoints === void 0)
        destPoints = new Array(srcPoints.length);
      let cos = Math.cos(radians);
      let sin = Math.sin(radians);
      for (let i = 0; i < destPoints.length; ++i) {
        destPoints[i] = [cos * srcPoints[i][0] - sin * srcPoints[i][1], sin * srcPoints[i][0] + cos * srcPoints[i][1]];
      }
      return destPoints;
    }
    function dot(p1, p2) {
      return p1[0] * p2[0] + p1[1] * p2[1];
    }
    function angle(origin, p1, p2) {
      let v1 = normalize(difference(p1, origin));
      let v2 = normalize(difference(p2, origin));
      let dotProduct = dot(v1, v2);
      return Math.acos(dotProduct);
    }
    function boundary(points) {
      let minMaxValues = minMax(points);
      let xMin = minMaxValues[0][0];
      let yMin = minMaxValues[0][1];
      let xMax = minMaxValues[1][0];
      let yMax = minMaxValues[1][1];
      return [[xMin, yMin], [xMax, yMin], [xMax, yMax], [xMin, yMax]];
    }
    function perimeter(vertices) {
      let total = 0;
      for (let i = 0; i < vertices.length; i++) {
        let fromX = vertices[i][0];
        let fromY = vertices[i][1];
        let toX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];
        let toY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];
        total += Math.sqrt((toX - fromX) ** 2 + (toY - fromY) ** 2);
      }
      return total;
    }
    function surface(vertices) {
      let total = 0;
      for (let i = 0; i < vertices.length; i++) {
        let addX = vertices[i][0];
        let addY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];
        let subX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];
        let subY = vertices[i][1];
        total += addX * addY * 0.5;
        total -= subX * subY * 0.5;
      }
      return Math.abs(total);
    }
    function minMax(points) {
      let xMin = Infinity;
      let yMin = Infinity;
      let xMax = -Infinity;
      let yMax = -Infinity;
      for (let i = 0; i < points.length; i++) {
        if (points[i][0] < xMin)
          xMin = points[i][0];
        if (points[i][0] > xMax)
          xMax = points[i][0];
        if (points[i][1] < yMin)
          yMin = points[i][1];
        if (points[i][1] > yMax)
          yMax = points[i][1];
      }
      return [[xMin, yMin], [xMax, yMax]];
    }
    function moveToZeroZero(srcPoints, destPoints) {
      if (destPoints === void 0) {
        destPoints = new Array(srcPoints.length).fill(0).map(() => []);
      }
      let minMaxValues = minMax(srcPoints);
      let xMin = minMaxValues[0][0];
      let yMin = minMaxValues[0][1];
      for (let i = 0; i < srcPoints.length; i++) {
        destPoints[i][0] = srcPoints[i][0] - xMin;
        destPoints[i][1] = srcPoints[i][1] - yMin;
      }
      return destPoints;
    }
  }
});

// node_modules/image-js/lib/image/compute/minimalBoundingRectangle.js
var require_minimalBoundingRectangle = __commonJS({
  "node_modules/image-js/lib/image/compute/minimalBoundingRectangle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minimalBoundingRectangle;
    var _points = require_points2();
    var _monotoneChainConvexHull = _interopRequireDefault(require_monotoneChainConvexHull());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function minimalBoundingRectangle(options = {}) {
      const {
        originalPoints = _monotoneChainConvexHull.default.call(this)
      } = options;
      if (originalPoints.length === 0) {
        return [];
      }
      if (originalPoints.length === 1) {
        return [originalPoints[0], originalPoints[0], originalPoints[0], originalPoints[0]];
      }
      const p = new Array(originalPoints.length);
      let minSurface = Infinity;
      let minSurfaceAngle = 0;
      let mbr;
      for (let i = 0; i < p.length; i++) {
        let angle = getAngle(originalPoints[i], originalPoints[(i + 1) % p.length]);
        (0, _points.rotate)(-angle, originalPoints, p);
        let aX = p[i][0];
        let aY = p[i][1];
        let bX = p[(i + 1) % p.length][0];
        let bY = p[(i + 1) % p.length][1];
        let tUndefined = true;
        let tMin = 0;
        let tMax = 0;
        let maxWidth = 0;
        for (let j = 0; j < p.length; j++) {
          let cX = p[j][0];
          let cY = p[j][1];
          let t = (cX - aX) / (bX - aX);
          if (tUndefined === true) {
            tUndefined = false;
            tMin = t;
            tMax = t;
          } else {
            if (t < tMin)
              tMin = t;
            if (t > tMax)
              tMax = t;
          }
          let width = (-(bX - aX) * cY + bX * aY - bY * aX) / (bX - aX);
          if (Math.abs(width) > Math.abs(maxWidth))
            maxWidth = width;
        }
        let pMin = [aX + tMin * (bX - aX), aY];
        let pMax = [aX + tMax * (bX - aX), aY];
        let currentSurface = Math.abs(maxWidth * (tMin - tMax) * (bX - aX));
        if (currentSurface < minSurface) {
          minSurfaceAngle = angle;
          minSurface = currentSurface;
          mbr = [pMin, pMax, [pMax[0], pMax[1] - maxWidth], [pMin[0], pMin[1] - maxWidth]];
        }
      }
      (0, _points.rotate)(minSurfaceAngle, mbr, mbr);
      return mbr;
    }
    function getAngle(p1, p2) {
      let diff = (0, _points.difference)(p2, p1);
      let vector = (0, _points.normalize)(diff);
      let angle = Math.acos(vector[0]);
      if (vector[1] < 0)
        return -angle;
      return angle;
    }
  }
});

// node_modules/image-js/lib/image/extend.js
var require_extend3 = __commonJS({
  "node_modules/image-js/lib/image/extend.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = extend;
    var _abs = _interopRequireDefault(require_abs());
    var _invert = _interopRequireDefault(require_invert());
    var _flipX = _interopRequireDefault(require_flipX());
    var _flipY = _interopRequireDefault(require_flipY());
    var _blurFilter = _interopRequireDefault(require_blurFilter());
    var _medianFilter = _interopRequireDefault(require_medianFilter());
    var _gaussianFilter = _interopRequireDefault(require_gaussianFilter());
    var _sobelFilter = _interopRequireDefault(require_sobelFilter());
    var _scharrFilter = _interopRequireDefault(require_scharrFilter());
    var _gradientFilter = _interopRequireDefault(require_gradientFilter());
    var _level = _interopRequireDefault(require_level());
    var _add = _interopRequireDefault(require_add());
    var _subtract = _interopRequireDefault(require_subtract());
    var _subtractImage = _interopRequireDefault(require_subtractImage());
    var _hypotenuse = _interopRequireDefault(require_hypotenuse());
    var _multiply = _interopRequireDefault(require_multiply());
    var _divide = _interopRequireDefault(require_divide());
    var _background = _interopRequireDefault(require_background());
    var _dilate = _interopRequireDefault(require_dilate());
    var _erode = _interopRequireDefault(require_erode());
    var _open = _interopRequireDefault(require_open());
    var _close = _interopRequireDefault(require_close());
    var _topHat = _interopRequireDefault(require_topHat());
    var _blackHat = _interopRequireDefault(require_blackHat());
    var _morphologicalGradient = _interopRequireDefault(require_morphologicalGradient());
    var _warping = _interopRequireDefault(require_warping());
    var _crop = _interopRequireDefault(require_crop());
    var _cropAlpha = _interopRequireDefault(require_cropAlpha());
    var _resize = _interopRequireDefault(require_resize());
    var _hsv = _interopRequireDefault(require_hsv());
    var _hsl = _interopRequireDefault(require_hsl());
    var _cmyk = _interopRequireDefault(require_cmyk());
    var _rgba = _interopRequireDefault(require_rgba8());
    var _grey = _interopRequireDefault(require_grey());
    var _mask = _interopRequireDefault(require_mask());
    var _pad = _interopRequireDefault(require_pad());
    var _colorDepth = _interopRequireDefault(require_colorDepth());
    var _rotate = require_rotate();
    var _insert = _interopRequireDefault(require_insert());
    var _setBorder = _interopRequireDefault(require_setBorder());
    var _split = _interopRequireDefault(require_split());
    var _getChannel = _interopRequireDefault(require_getChannel());
    var _combineChannels = _interopRequireDefault(require_combineChannels());
    var _setChannel = _interopRequireDefault(require_setChannel());
    var _getSimilarity = _interopRequireDefault(require_getSimilarity());
    var _getPixelsGrid = _interopRequireDefault(require_getPixelsGrid());
    var _getBestMatch = _interopRequireDefault(require_getBestMatch());
    var _getRow = _interopRequireDefault(require_getRow());
    var _getColumn = _interopRequireDefault(require_getColumn());
    var _getMatrix = _interopRequireDefault(require_getMatrix());
    var _setMatrix = _interopRequireDefault(require_setMatrix());
    var _getPixelsArray = _interopRequireDefault(require_getPixelsArray());
    var _getIntersection = _interopRequireDefault(require_getIntersection());
    var _getClosestCommonParent = _interopRequireDefault(require_getClosestCommonParent());
    var _getThreshold = _interopRequireDefault(require_getThreshold());
    var _cannyEdge = _interopRequireDefault(require_cannyEdge());
    var _convolution = _interopRequireDefault(require_convolution());
    var _extract = _interopRequireDefault(require_extract());
    var _floodFill = _interopRequireDefault(require_floodFill());
    var _paintLabels = _interopRequireDefault(require_paintLabels());
    var _paintMasks = _interopRequireDefault(require_paintMasks());
    var _paintPoints = _interopRequireDefault(require_paintPoints());
    var _paintPolyline = _interopRequireDefault(require_paintPolyline());
    var _paintPolylines = _interopRequireDefault(require_paintPolylines());
    var _paintPolygon = _interopRequireDefault(require_paintPolygon());
    var _paintPolygons = _interopRequireDefault(require_paintPolygons());
    var _histogram = require_histogram3();
    var _colorHistogram = _interopRequireDefault(require_colorHistogram());
    var _min = _interopRequireDefault(require_min2());
    var _max = _interopRequireDefault(require_max2());
    var _sum = _interopRequireDefault(require_sum());
    var _moment = _interopRequireDefault(require_moment());
    var _localMaxima = _interopRequireDefault(require_localMaxima());
    var _mean = _interopRequireDefault(require_mean2());
    var _median = _interopRequireDefault(require_median2());
    var _points = _interopRequireDefault(require_points());
    var _extendedPoints = _interopRequireDefault(require_extendedPoints());
    var _relativePosition = _interopRequireDefault(require_relativePosition());
    var _countAlphaPixels = _interopRequireDefault(require_countAlphaPixels());
    var _monotoneChainConvexHull = _interopRequireDefault(require_monotoneChainConvexHull());
    var _minimalBoundingRectangle = _interopRequireDefault(require_minimalBoundingRectangle());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function extend(Image3) {
      let inPlace = {
        inPlace: true
      };
      Image3.extendMethod("invert", _invert.default);
      Image3.extendMethod("abs", _abs.default);
      Image3.extendMethod("level", _level.default, inPlace);
      Image3.extendMethod("add", _add.default, inPlace);
      Image3.extendMethod("subtract", _subtract.default, inPlace);
      Image3.extendMethod("subtractImage", _subtractImage.default);
      Image3.extendMethod("multiply", _multiply.default, inPlace);
      Image3.extendMethod("divide", _divide.default, inPlace);
      Image3.extendMethod("hypotenuse", _hypotenuse.default);
      Image3.extendMethod("background", _background.default);
      Image3.extendMethod("flipX", _flipX.default);
      Image3.extendMethod("flipY", _flipY.default);
      Image3.extendMethod("blurFilter", _blurFilter.default);
      Image3.extendMethod("medianFilter", _medianFilter.default);
      Image3.extendMethod("gaussianFilter", _gaussianFilter.default);
      Image3.extendMethod("sobelFilter", _sobelFilter.default);
      Image3.extendMethod("gradientFilter", _gradientFilter.default);
      Image3.extendMethod("scharrFilter", _scharrFilter.default);
      Image3.extendMethod("dilate", _dilate.default);
      Image3.extendMethod("erode", _erode.default);
      Image3.extendMethod("open", _open.default);
      Image3.extendMethod("close", _close.default);
      Image3.extendMethod("topHat", _topHat.default);
      Image3.extendMethod("blackHat", _blackHat.default);
      Image3.extendMethod("morphologicalGradient", _morphologicalGradient.default);
      Image3.extendMethod("warpingFourPoints", _warping.default);
      Image3.extendMethod("crop", _crop.default);
      Image3.extendMethod("cropAlpha", _cropAlpha.default);
      Image3.extendMethod("resize", _resize.default).extendMethod("scale", _resize.default);
      Image3.extendMethod("hsv", _hsv.default);
      Image3.extendMethod("hsl", _hsl.default);
      Image3.extendMethod("cmyk", _cmyk.default);
      Image3.extendMethod("rgba8", _rgba.default);
      Image3.extendMethod("grey", _grey.default).extendMethod("gray", _grey.default);
      Image3.extendMethod("mask", _mask.default);
      Image3.extendMethod("pad", _pad.default);
      Image3.extendMethod("colorDepth", _colorDepth.default);
      Image3.extendMethod("setBorder", _setBorder.default, inPlace);
      Image3.extendMethod("rotate", _rotate.rotate);
      Image3.extendMethod("rotateLeft", _rotate.rotateLeft);
      Image3.extendMethod("rotateRight", _rotate.rotateRight);
      Image3.extendMethod("insert", _insert.default);
      Image3.extendMethod("getRow", _getRow.default);
      Image3.extendMethod("getColumn", _getColumn.default);
      Image3.extendMethod("getMatrix", _getMatrix.default);
      Image3.extendMethod("setMatrix", _setMatrix.default);
      Image3.extendMethod("getPixelsArray", _getPixelsArray.default);
      Image3.extendMethod("getIntersection", _getIntersection.default);
      Image3.extendMethod("getClosestCommonParent", _getClosestCommonParent.default);
      Image3.extendMethod("getThreshold", _getThreshold.default);
      Image3.extendMethod("split", _split.default);
      Image3.extendMethod("getChannel", _getChannel.default);
      Image3.extendMethod("combineChannels", _combineChannels.default);
      Image3.extendMethod("setChannel", _setChannel.default);
      Image3.extendMethod("getSimilarity", _getSimilarity.default);
      Image3.extendMethod("getPixelsGrid", _getPixelsGrid.default);
      Image3.extendMethod("getBestMatch", _getBestMatch.default);
      Image3.extendMethod("cannyEdge", _cannyEdge.default);
      Image3.extendMethod("convolution", _convolution.default);
      Image3.extendMethod("extract", _extract.default);
      Image3.extendMethod("floodFill", _floodFill.default);
      Image3.extendMethod("paintLabels", _paintLabels.default, inPlace);
      Image3.extendMethod("paintMasks", _paintMasks.default, inPlace);
      Image3.extendMethod("paintPoints", _paintPoints.default, inPlace);
      Image3.extendMethod("paintPolyline", _paintPolyline.default, inPlace);
      Image3.extendMethod("paintPolylines", _paintPolylines.default, inPlace);
      Image3.extendMethod("paintPolygon", _paintPolygon.default, inPlace);
      Image3.extendMethod("paintPolygons", _paintPolygons.default, inPlace);
      Image3.extendMethod("countAlphaPixels", _countAlphaPixels.default);
      Image3.extendMethod("monotoneChainConvexHull", _monotoneChainConvexHull.default);
      Image3.extendMethod("minimalBoundingRectangle", _minimalBoundingRectangle.default);
      Image3.extendMethod("getHistogram", _histogram.getHistogram).extendProperty("histogram", _histogram.getHistogram);
      Image3.extendMethod("getHistograms", _histogram.getHistograms).extendProperty("histograms", _histogram.getHistograms);
      Image3.extendMethod("getColorHistogram", _colorHistogram.default).extendProperty("colorHistogram", _colorHistogram.default);
      Image3.extendMethod("getMin", _min.default).extendProperty("min", _min.default);
      Image3.extendMethod("getMax", _max.default).extendProperty("max", _max.default);
      Image3.extendMethod("getSum", _sum.default).extendProperty("sum", _sum.default);
      Image3.extendMethod("getMoment", _moment.default).extendProperty("moment", _moment.default);
      Image3.extendMethod("getLocalMaxima", _localMaxima.default);
      Image3.extendMethod("getMedian", _median.default).extendProperty("median", _median.default);
      Image3.extendMethod("getMean", _mean.default).extendProperty("mean", _mean.default);
      Image3.extendMethod("getPoints", _points.default).extendProperty("points", _points.default);
      Image3.extendMethod("getExtendedPoints", _extendedPoints.default).extendProperty("extendedPoints", _extendedPoints.default);
      Image3.extendMethod("getRelativePosition", _relativePosition.default);
    }
  }
});

// node_modules/js-quantities/build/quantities.js
var require_quantities = __commonJS({
  "node_modules/js-quantities/build/quantities.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.Qty = factory());
    })(exports2, function() {
      "use strict";
      function isString(value) {
        return typeof value === "string" || value instanceof String;
      }
      var isFiniteImpl = Number.isFinite || window.isFinite;
      function isNumber(value) {
        return isFiniteImpl(value);
      }
      function identity(value) {
        return value;
      }
      function uniq(strings) {
        var seen = {};
        return strings.filter(function(item) {
          return seen.hasOwnProperty(item) ? false : seen[item] = true;
        });
      }
      function compareArray(array1, array2) {
        if (array2.length !== array1.length) {
          return false;
        }
        for (var i2 = 0; i2 < array1.length; i2++) {
          if (array2[i2].compareArray) {
            if (!array2[i2].compareArray(array1[i2])) {
              return false;
            }
          }
          if (array2[i2] !== array1[i2]) {
            return false;
          }
        }
        return true;
      }
      function assign(target, properties) {
        Object.keys(properties).forEach(function(key) {
          target[key] = properties[key];
        });
      }
      function mulSafe() {
        var result = 1, decimals = 0;
        for (var i2 = 0; i2 < arguments.length; i2++) {
          var arg = arguments[i2];
          decimals = decimals + getFractional(arg);
          result *= arg;
        }
        return decimals !== 0 ? round(result, decimals) : result;
      }
      function divSafe(num, den) {
        if (den === 0) {
          throw new Error("Divide by zero");
        }
        var factor = Math.pow(10, getFractional(den));
        var invDen = factor / (factor * den);
        return mulSafe(num, invDen);
      }
      function round(val, decimals) {
        return Math.round(val * Math.pow(10, decimals)) / Math.pow(10, decimals);
      }
      function getFractional(num) {
        if (!isFinite(num)) {
          return 0;
        }
        var count = 0;
        while (num % 1 !== 0) {
          num *= 10;
          count++;
        }
        return count;
      }
      function QtyError() {
        var err;
        if (!this) {
          err = Object.create(QtyError.prototype);
          QtyError.apply(err, arguments);
          return err;
        }
        err = Error.apply(this, arguments);
        this.name = "QtyError";
        this.message = err.message;
        this.stack = err.stack;
      }
      QtyError.prototype = Object.create(Error.prototype, { constructor: { value: QtyError } });
      function throwIncompatibleUnits(left, right) {
        throw new QtyError("Incompatible units: " + left + " and " + right);
      }
      var UNITS = {
        /* prefixes */
        "<googol>": [["googol"], 1e100, "prefix"],
        "<kibi>": [["Ki", "Kibi", "kibi"], Math.pow(2, 10), "prefix"],
        "<mebi>": [["Mi", "Mebi", "mebi"], Math.pow(2, 20), "prefix"],
        "<gibi>": [["Gi", "Gibi", "gibi"], Math.pow(2, 30), "prefix"],
        "<tebi>": [["Ti", "Tebi", "tebi"], Math.pow(2, 40), "prefix"],
        "<pebi>": [["Pi", "Pebi", "pebi"], Math.pow(2, 50), "prefix"],
        "<exi>": [["Ei", "Exi", "exi"], Math.pow(2, 60), "prefix"],
        "<zebi>": [["Zi", "Zebi", "zebi"], Math.pow(2, 70), "prefix"],
        "<yebi>": [["Yi", "Yebi", "yebi"], Math.pow(2, 80), "prefix"],
        "<yotta>": [["Y", "Yotta", "yotta"], 1e24, "prefix"],
        "<zetta>": [["Z", "Zetta", "zetta"], 1e21, "prefix"],
        "<exa>": [["E", "Exa", "exa"], 1e18, "prefix"],
        "<peta>": [["P", "Peta", "peta"], 1e15, "prefix"],
        "<tera>": [["T", "Tera", "tera"], 1e12, "prefix"],
        "<giga>": [["G", "Giga", "giga"], 1e9, "prefix"],
        "<mega>": [["M", "Mega", "mega"], 1e6, "prefix"],
        "<kilo>": [["k", "kilo"], 1e3, "prefix"],
        "<hecto>": [["h", "Hecto", "hecto"], 100, "prefix"],
        "<deca>": [["da", "Deca", "deca", "deka"], 10, "prefix"],
        "<deci>": [["d", "Deci", "deci"], 0.1, "prefix"],
        "<centi>": [["c", "Centi", "centi"], 0.01, "prefix"],
        "<milli>": [["m", "Milli", "milli"], 1e-3, "prefix"],
        "<micro>": [
          ["u", "\u03BC", "\xB5", "Micro", "mc", "micro"],
          1e-6,
          "prefix"
        ],
        "<nano>": [["n", "Nano", "nano"], 1e-9, "prefix"],
        "<pico>": [["p", "Pico", "pico"], 1e-12, "prefix"],
        "<femto>": [["f", "Femto", "femto"], 1e-15, "prefix"],
        "<atto>": [["a", "Atto", "atto"], 1e-18, "prefix"],
        "<zepto>": [["z", "Zepto", "zepto"], 1e-21, "prefix"],
        "<yocto>": [["y", "Yocto", "yocto"], 1e-24, "prefix"],
        "<1>": [["1", "<1>"], 1, ""],
        /* length units */
        "<meter>": [["m", "meter", "meters", "metre", "metres"], 1, "length", ["<meter>"]],
        "<inch>": [["in", "inch", "inches", '"'], 0.0254, "length", ["<meter>"]],
        "<foot>": [["ft", "foot", "feet", "'"], 0.3048, "length", ["<meter>"]],
        "<yard>": [["yd", "yard", "yards"], 0.9144, "length", ["<meter>"]],
        "<mile>": [["mi", "mile", "miles"], 1609.344, "length", ["<meter>"]],
        "<naut-mile>": [["nmi", "naut-mile"], 1852, "length", ["<meter>"]],
        "<league>": [["league", "leagues"], 4828, "length", ["<meter>"]],
        "<furlong>": [["furlong", "furlongs"], 201.2, "length", ["<meter>"]],
        "<rod>": [["rd", "rod", "rods"], 5.029, "length", ["<meter>"]],
        "<mil>": [["mil", "mils"], 254e-7, "length", ["<meter>"]],
        "<angstrom>": [["ang", "angstrom", "angstroms"], 1e-10, "length", ["<meter>"]],
        "<fathom>": [["fathom", "fathoms"], 1.829, "length", ["<meter>"]],
        "<pica>": [["pica", "picas"], 0.00423333333, "length", ["<meter>"]],
        "<point>": [["pt", "point", "points"], 352777778e-12, "length", ["<meter>"]],
        "<redshift>": [["z", "red-shift", "redshift"], 1302773e20, "length", ["<meter>"]],
        "<AU>": [["AU", "astronomical-unit"], 1495979e5, "length", ["<meter>"]],
        "<light-second>": [["ls", "light-second"], 299792500, "length", ["<meter>"]],
        "<light-minute>": [["lmin", "light-minute"], 1798755e4, "length", ["<meter>"]],
        "<light-year>": [["ly", "light-year"], 9460528e9, "length", ["<meter>"]],
        "<parsec>": [["pc", "parsec", "parsecs"], 3085678e10, "length", ["<meter>"]],
        "<datamile>": [["DM", "datamile"], 1828.8, "length", ["<meter>"]],
        /* mass */
        "<kilogram>": [["kg", "kilogram", "kilograms"], 1, "mass", ["<kilogram>"]],
        "<AMU>": [["u", "AMU", "amu"], 1660538921e-36, "mass", ["<kilogram>"]],
        "<dalton>": [["Da", "Dalton", "Daltons", "dalton", "daltons"], 1660538921e-36, "mass", ["<kilogram>"]],
        "<slug>": [["slug", "slugs"], 14.5939029, "mass", ["<kilogram>"]],
        "<short-ton>": [["tn", "ton", "short-ton"], 907.18474, "mass", ["<kilogram>"]],
        "<metric-ton>": [["t", "tonne", "metric-ton"], 1e3, "mass", ["<kilogram>"]],
        "<carat>": [["ct", "carat", "carats"], 2e-4, "mass", ["<kilogram>"]],
        "<pound>": [["lbs", "lb", "pound", "pounds", "#"], 0.45359237, "mass", ["<kilogram>"]],
        "<ounce>": [["oz", "ounce", "ounces"], 0.0283495231, "mass", ["<kilogram>"]],
        "<gram>": [["g", "gram", "grams", "gramme", "grammes"], 1e-3, "mass", ["<kilogram>"]],
        "<grain>": [["grain", "grains", "gr"], 6479891e-11, "mass", ["<kilogram>"]],
        "<dram>": [["dram", "drams", "dr"], 0.0017718452, "mass", ["<kilogram>"]],
        "<stone>": [["stone", "stones", "st"], 6.35029318, "mass", ["<kilogram>"]],
        /* area */
        "<hectare>": [["hectare"], 1e4, "area", ["<meter>", "<meter>"]],
        "<acre>": [["acre", "acres"], 4046.85642, "area", ["<meter>", "<meter>"]],
        "<sqft>": [["sqft"], 1, "area", ["<foot>", "<foot>"]],
        /* volume */
        "<liter>": [["l", "L", "liter", "liters", "litre", "litres"], 1e-3, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<gallon>": [["gal", "gallon", "gallons"], 0.0037854118, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<gallon-imp>": [["galimp", "gallon-imp", "gallons-imp"], 454609e-8, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<quart>": [["qt", "quart", "quarts"], 94635295e-11, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<pint>": [["pt", "pint", "pints"], 473176475e-12, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<pint-imp>": [["ptimp", "pint-imp", "pints-imp"], 56826125e-11, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<cup>": [["cu", "cup", "cups"], 236588238e-12, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<fluid-ounce>": [["floz", "fluid-ounce", "fluid-ounces"], 295735297e-13, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<fluid-ounce-imp>": [["flozimp", "floz-imp", "fluid-ounce-imp", "fluid-ounces-imp"], 284130625e-13, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<tablespoon>": [["tb", "tbsp", "tbs", "tablespoon", "tablespoons"], 147867648e-13, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<teaspoon>": [["tsp", "teaspoon", "teaspoons"], 492892161e-14, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<bushel>": [["bu", "bsh", "bushel", "bushels"], 0.035239072, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<oilbarrel>": [["bbl", "oilbarrel", "oilbarrels", "oil-barrel", "oil-barrels"], 0.158987294928, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<beerbarrel>": [["bl", "bl-us", "beerbarrel", "beerbarrels", "beer-barrel", "beer-barrels"], 0.1173477658, "volume", ["<meter>", "<meter>", "<meter>"]],
        "<beerbarrel-imp>": [["blimp", "bl-imp", "beerbarrel-imp", "beerbarrels-imp", "beer-barrel-imp", "beer-barrels-imp"], 0.16365924, "volume", ["<meter>", "<meter>", "<meter>"]],
        /* speed */
        "<kph>": [["kph"], 0.277777778, "speed", ["<meter>"], ["<second>"]],
        "<mph>": [["mph"], 0.44704, "speed", ["<meter>"], ["<second>"]],
        "<knot>": [["kt", "kn", "kts", "knot", "knots"], 0.514444444, "speed", ["<meter>"], ["<second>"]],
        "<fps>": [["fps"], 0.3048, "speed", ["<meter>"], ["<second>"]],
        /* acceleration */
        "<gee>": [["gee"], 9.80665, "acceleration", ["<meter>"], ["<second>", "<second>"]],
        "<Gal>": [["Gal"], 0.01, "acceleration", ["<meter>"], ["<second>", "<second>"]],
        /* temperature_difference */
        "<kelvin>": [["degK", "kelvin"], 1, "temperature", ["<kelvin>"]],
        "<celsius>": [["degC", "celsius", "celsius", "centigrade"], 1, "temperature", ["<kelvin>"]],
        "<fahrenheit>": [["degF", "fahrenheit"], 5 / 9, "temperature", ["<kelvin>"]],
        "<rankine>": [["degR", "rankine"], 5 / 9, "temperature", ["<kelvin>"]],
        "<temp-K>": [["tempK", "temp-K"], 1, "temperature", ["<temp-K>"]],
        "<temp-C>": [["tempC", "temp-C"], 1, "temperature", ["<temp-K>"]],
        "<temp-F>": [["tempF", "temp-F"], 5 / 9, "temperature", ["<temp-K>"]],
        "<temp-R>": [["tempR", "temp-R"], 5 / 9, "temperature", ["<temp-K>"]],
        /* time */
        "<second>": [["s", "sec", "secs", "second", "seconds"], 1, "time", ["<second>"]],
        "<minute>": [["min", "mins", "minute", "minutes"], 60, "time", ["<second>"]],
        "<hour>": [["h", "hr", "hrs", "hour", "hours"], 3600, "time", ["<second>"]],
        "<day>": [["d", "day", "days"], 3600 * 24, "time", ["<second>"]],
        "<week>": [["wk", "week", "weeks"], 7 * 3600 * 24, "time", ["<second>"]],
        "<fortnight>": [["fortnight", "fortnights"], 1209600, "time", ["<second>"]],
        "<year>": [["y", "yr", "year", "years", "annum"], 31556926, "time", ["<second>"]],
        "<decade>": [["decade", "decades"], 315569260, "time", ["<second>"]],
        "<century>": [["century", "centuries"], 3155692600, "time", ["<second>"]],
        /* pressure */
        "<pascal>": [["Pa", "pascal", "Pascal"], 1, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<bar>": [["bar", "bars"], 1e5, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<mmHg>": [["mmHg"], 133.322368, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<inHg>": [["inHg"], 3386.3881472, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<torr>": [["torr"], 133.322368, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<atm>": [["atm", "ATM", "atmosphere", "atmospheres"], 101325, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<psi>": [["psi"], 6894.76, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<cmh2o>": [["cmH2O", "cmh2o"], 98.0638, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        "<inh2o>": [["inH2O", "inh2o"], 249.082052, "pressure", ["<kilogram>"], ["<meter>", "<second>", "<second>"]],
        /* viscosity */
        "<poise>": [["P", "poise"], 0.1, "viscosity", ["<kilogram>"], ["<meter>", "<second>"]],
        "<stokes>": [["St", "stokes"], 1e-4, "viscosity", ["<meter>", "<meter>"], ["<second>"]],
        /* substance */
        "<mole>": [["mol", "mole"], 1, "substance", ["<mole>"]],
        /* molar_concentration */
        "<molar>": [["M", "molar"], 1e3, "molar_concentration", ["<mole>"], ["<meter>", "<meter>", "<meter>"]],
        "<wtpercent>": [["wt%", "wtpercent"], 10, "molar_concentration", ["<kilogram>"], ["<meter>", "<meter>", "<meter>"]],
        /* activity */
        "<katal>": [["kat", "katal", "Katal"], 1, "activity", ["<mole>"], ["<second>"]],
        "<unit>": [["U", "enzUnit", "unit"], 16667e-19, "activity", ["<mole>"], ["<second>"]],
        /* capacitance */
        "<farad>": [["F", "farad", "Farad"], 1, "capacitance", ["<second>", "<second>", "<second>", "<second>", "<ampere>", "<ampere>"], ["<meter>", "<meter>", "<kilogram>"]],
        /* charge */
        "<coulomb>": [["C", "coulomb", "Coulomb"], 1, "charge", ["<ampere>", "<second>"]],
        "<Ah>": [["Ah"], 3600, "charge", ["<ampere>", "<second>"]],
        /* current */
        "<ampere>": [["A", "Ampere", "ampere", "amp", "amps"], 1, "current", ["<ampere>"]],
        /* conductance */
        "<siemens>": [["S", "Siemens", "siemens"], 1, "conductance", ["<second>", "<second>", "<second>", "<ampere>", "<ampere>"], ["<kilogram>", "<meter>", "<meter>"]],
        /* inductance */
        "<henry>": [["H", "Henry", "henry"], 1, "inductance", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>", "<ampere>", "<ampere>"]],
        /* potential */
        "<volt>": [["V", "Volt", "volt", "volts"], 1, "potential", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>", "<second>", "<ampere>"]],
        /* resistance */
        "<ohm>": [
          [
            "Ohm",
            "ohm",
            "\u03A9",
            "\u2126"
            /*Ω as ohm sign*/
          ],
          1,
          "resistance",
          ["<meter>", "<meter>", "<kilogram>"],
          ["<second>", "<second>", "<second>", "<ampere>", "<ampere>"]
        ],
        /* magnetism */
        "<weber>": [["Wb", "weber", "webers"], 1, "magnetism", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>", "<ampere>"]],
        "<tesla>": [["T", "tesla", "teslas"], 1, "magnetism", ["<kilogram>"], ["<second>", "<second>", "<ampere>"]],
        "<gauss>": [["G", "gauss"], 1e-4, "magnetism", ["<kilogram>"], ["<second>", "<second>", "<ampere>"]],
        "<maxwell>": [["Mx", "maxwell", "maxwells"], 1e-8, "magnetism", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>", "<ampere>"]],
        "<oersted>": [["Oe", "oersted", "oersteds"], 250 / Math.PI, "magnetism", ["<ampere>"], ["<meter>"]],
        /* energy */
        "<joule>": [["J", "joule", "Joule", "joules", "Joules"], 1, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<erg>": [["erg", "ergs"], 1e-7, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<btu>": [["BTU", "btu", "BTUs"], 1055.056, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<calorie>": [["cal", "calorie", "calories"], 4.184, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<Calorie>": [["Cal", "Calorie", "Calories"], 4184, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<therm-US>": [["th", "therm", "therms", "Therm", "therm-US"], 105480400, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<Wh>": [["Wh"], 3600, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        "<electronvolt>": [["eV", "electronvolt", "electronvolts"], 1602176634e-28, "energy", ["<meter>", "<meter>", "<kilogram>"], ["<second>", "<second>"]],
        /* force */
        "<newton>": [["N", "Newton", "newton"], 1, "force", ["<kilogram>", "<meter>"], ["<second>", "<second>"]],
        "<dyne>": [["dyn", "dyne"], 1e-5, "force", ["<kilogram>", "<meter>"], ["<second>", "<second>"]],
        "<pound-force>": [["lbf", "pound-force"], 4.448222, "force", ["<kilogram>", "<meter>"], ["<second>", "<second>"]],
        /* frequency */
        "<hertz>": [["Hz", "hertz", "Hertz"], 1, "frequency", ["<1>"], ["<second>"]],
        /* angle */
        "<radian>": [["rad", "radian", "radians"], 1, "angle", ["<radian>"]],
        "<degree>": [["deg", "degree", "degrees"], Math.PI / 180, "angle", ["<radian>"]],
        "<arcminute>": [["arcmin", "arcminute", "arcminutes"], Math.PI / 10800, "angle", ["<radian>"]],
        "<arcsecond>": [["arcsec", "arcsecond", "arcseconds"], Math.PI / 648e3, "angle", ["<radian>"]],
        "<gradian>": [["gon", "grad", "gradian", "grads"], Math.PI / 200, "angle", ["<radian>"]],
        "<steradian>": [["sr", "steradian", "steradians"], 1, "solid_angle", ["<steradian>"]],
        /* rotation */
        "<rotation>": [["rotation"], 2 * Math.PI, "angle", ["<radian>"]],
        "<rpm>": [["rpm"], 2 * Math.PI / 60, "angular_velocity", ["<radian>"], ["<second>"]],
        /* information */
        "<byte>": [["B", "byte", "bytes"], 1, "information", ["<byte>"]],
        "<bit>": [["b", "bit", "bits"], 0.125, "information", ["<byte>"]],
        /* information rate */
        "<Bps>": [["Bps"], 1, "information_rate", ["<byte>"], ["<second>"]],
        "<bps>": [["bps"], 0.125, "information_rate", ["<byte>"], ["<second>"]],
        /* currency */
        "<dollar>": [["USD", "dollar"], 1, "currency", ["<dollar>"]],
        "<cents>": [["cents"], 0.01, "currency", ["<dollar>"]],
        /* luminosity */
        "<candela>": [["cd", "candela"], 1, "luminosity", ["<candela>"]],
        "<lumen>": [["lm", "lumen"], 1, "luminous_power", ["<candela>", "<steradian>"]],
        "<lux>": [["lux"], 1, "illuminance", ["<candela>", "<steradian>"], ["<meter>", "<meter>"]],
        /* power */
        "<watt>": [["W", "watt", "watts"], 1, "power", ["<kilogram>", "<meter>", "<meter>"], ["<second>", "<second>", "<second>"]],
        "<volt-ampere>": [["VA", "volt-ampere"], 1, "power", ["<kilogram>", "<meter>", "<meter>"], ["<second>", "<second>", "<second>"]],
        "<volt-ampere-reactive>": [["var", "Var", "VAr", "VAR", "volt-ampere-reactive"], 1, "power", ["<kilogram>", "<meter>", "<meter>"], ["<second>", "<second>", "<second>"]],
        "<horsepower>": [["hp", "horsepower"], 745.699872, "power", ["<kilogram>", "<meter>", "<meter>"], ["<second>", "<second>", "<second>"]],
        /* radiation */
        "<gray>": [["Gy", "gray", "grays"], 1, "radiation", ["<meter>", "<meter>"], ["<second>", "<second>"]],
        "<roentgen>": [["R", "roentgen"], 933e-5, "radiation", ["<meter>", "<meter>"], ["<second>", "<second>"]],
        "<sievert>": [["Sv", "sievert", "sieverts"], 1, "radiation", ["<meter>", "<meter>"], ["<second>", "<second>"]],
        "<becquerel>": [["Bq", "becquerel", "becquerels"], 1, "radiation", ["<1>"], ["<second>"]],
        "<curie>": [["Ci", "curie", "curies"], 37e9, "radiation", ["<1>"], ["<second>"]],
        /* rate */
        "<cpm>": [["cpm"], 1 / 60, "rate", ["<count>"], ["<second>"]],
        "<dpm>": [["dpm"], 1 / 60, "rate", ["<count>"], ["<second>"]],
        "<bpm>": [["bpm"], 1 / 60, "rate", ["<count>"], ["<second>"]],
        /* resolution / typography */
        "<dot>": [["dot", "dots"], 1, "resolution", ["<each>"]],
        "<pixel>": [["pixel", "px"], 1, "resolution", ["<each>"]],
        "<ppi>": [["ppi"], 1, "resolution", ["<pixel>"], ["<inch>"]],
        "<dpi>": [["dpi"], 1, "typography", ["<dot>"], ["<inch>"]],
        /* other */
        "<cell>": [["cells", "cell"], 1, "counting", ["<each>"]],
        "<each>": [["each"], 1, "counting", ["<each>"]],
        "<count>": [["count"], 1, "counting", ["<each>"]],
        "<base-pair>": [["bp", "base-pair"], 1, "counting", ["<each>"]],
        "<nucleotide>": [["nt", "nucleotide"], 1, "counting", ["<each>"]],
        "<molecule>": [["molecule", "molecules"], 1, "counting", ["<1>"]],
        "<dozen>": [["doz", "dz", "dozen"], 12, "prefix_only", ["<each>"]],
        "<percent>": [["%", "percent"], 0.01, "prefix_only", ["<1>"]],
        "<ppm>": [["ppm"], 1e-6, "prefix_only", ["<1>"]],
        "<ppb>": [["ppb"], 1e-9, "prefix_only", ["<1>"]],
        "<ppt>": [["ppt"], 1e-12, "prefix_only", ["<1>"]],
        "<ppq>": [["ppq"], 1e-15, "prefix_only", ["<1>"]],
        "<gross>": [["gr", "gross"], 144, "prefix_only", ["<dozen>", "<dozen>"]],
        "<decibel>": [["dB", "decibel", "decibels"], 1, "logarithmic", ["<decibel>"]]
      };
      var BASE_UNITS = ["<meter>", "<kilogram>", "<second>", "<mole>", "<ampere>", "<radian>", "<kelvin>", "<temp-K>", "<byte>", "<dollar>", "<candela>", "<each>", "<steradian>", "<decibel>"];
      var UNITY = "<1>";
      var UNITY_ARRAY = [UNITY];
      function validateUnitDefinition(unitDef2, definition2) {
        var scalar = definition2[1];
        var numerator = definition2[3] || [];
        var denominator = definition2[4] || [];
        if (!isNumber(scalar)) {
          throw new QtyError(unitDef2 + ": Invalid unit definition. 'scalar' must be a number");
        }
        numerator.forEach(function(unit) {
          if (UNITS[unit] === void 0) {
            throw new QtyError(unitDef2 + ": Invalid unit definition. Unit " + unit + " in 'numerator' is not recognized");
          }
        });
        denominator.forEach(function(unit) {
          if (UNITS[unit] === void 0) {
            throw new QtyError(unitDef2 + ": Invalid unit definition. Unit " + unit + " in 'denominator' is not recognized");
          }
        });
      }
      var PREFIX_VALUES = {};
      var PREFIX_MAP = {};
      var UNIT_VALUES = {};
      var UNIT_MAP = {};
      var OUTPUT_MAP = {};
      for (var unitDef in UNITS) {
        if (UNITS.hasOwnProperty(unitDef)) {
          var definition = UNITS[unitDef];
          if (definition[2] === "prefix") {
            PREFIX_VALUES[unitDef] = definition[1];
            for (var i = 0; i < definition[0].length; i++) {
              PREFIX_MAP[definition[0][i]] = unitDef;
            }
          } else {
            validateUnitDefinition(unitDef, definition);
            UNIT_VALUES[unitDef] = {
              scalar: definition[1],
              numerator: definition[3],
              denominator: definition[4]
            };
            for (var j = 0; j < definition[0].length; j++) {
              UNIT_MAP[definition[0][j]] = unitDef;
            }
          }
          OUTPUT_MAP[unitDef] = definition[0][0];
        }
      }
      function getUnits(kind) {
        var i2;
        var units = [];
        var unitKeys = Object.keys(UNITS);
        if (typeof kind === "undefined") {
          for (i2 = 0; i2 < unitKeys.length; i2++) {
            if (["", "prefix"].indexOf(UNITS[unitKeys[i2]][2]) === -1) {
              units.push(unitKeys[i2].substr(1, unitKeys[i2].length - 2));
            }
          }
        } else if (this.getKinds().indexOf(kind) === -1) {
          throw new QtyError("Kind not recognized");
        } else {
          for (i2 = 0; i2 < unitKeys.length; i2++) {
            if (UNITS[unitKeys[i2]][2] === kind) {
              units.push(unitKeys[i2].substr(1, unitKeys[i2].length - 2));
            }
          }
        }
        return units.sort(function(a, b) {
          if (a.toLowerCase() < b.toLowerCase()) {
            return -1;
          }
          if (a.toLowerCase() > b.toLowerCase()) {
            return 1;
          }
          return 0;
        });
      }
      function getAliases(unitName) {
        if (!UNIT_MAP[unitName]) {
          throw new QtyError("Unit not recognized");
        }
        return UNITS[UNIT_MAP[unitName]][0];
      }
      var SIGNATURE_VECTOR = ["length", "time", "temperature", "mass", "current", "substance", "luminosity", "currency", "information", "angle"];
      function unitSignature() {
        if (this.signature) {
          return this.signature;
        }
        var vector = unitSignatureVector.call(this);
        for (var i2 = 0; i2 < vector.length; i2++) {
          vector[i2] *= Math.pow(20, i2);
        }
        return vector.reduce(
          function(previous, current) {
            return previous + current;
          },
          0
        );
      }
      function unitSignatureVector() {
        if (!this.isBase()) {
          return unitSignatureVector.call(this.toBase());
        }
        var vector = new Array(SIGNATURE_VECTOR.length);
        for (var i2 = 0; i2 < vector.length; i2++) {
          vector[i2] = 0;
        }
        var r, n;
        for (var j2 = 0; j2 < this.numerator.length; j2++) {
          if (r = UNITS[this.numerator[j2]]) {
            n = SIGNATURE_VECTOR.indexOf(r[2]);
            if (n >= 0) {
              vector[n] = vector[n] + 1;
            }
          }
        }
        for (var k = 0; k < this.denominator.length; k++) {
          if (r = UNITS[this.denominator[k]]) {
            n = SIGNATURE_VECTOR.indexOf(r[2]);
            if (n >= 0) {
              vector[n] = vector[n] - 1;
            }
          }
        }
        return vector;
      }
      var SIGN = "[+-]";
      var INTEGER = "\\d+";
      var SIGNED_INTEGER = SIGN + "?" + INTEGER;
      var FRACTION = "\\." + INTEGER;
      var FLOAT = "(?:" + INTEGER + "(?:" + FRACTION + ")?)|(?:" + FRACTION + ")";
      var EXPONENT = "[Ee]" + SIGNED_INTEGER;
      var SCI_NUMBER = "(?:" + FLOAT + ")(?:" + EXPONENT + ")?";
      var SIGNED_NUMBER = SIGN + "?\\s*" + SCI_NUMBER;
      var QTY_STRING = "(" + SIGNED_NUMBER + ")?\\s*([^/]*)(?:/(.+))?";
      var QTY_STRING_REGEX = new RegExp("^" + QTY_STRING + "$");
      var POWER_OP = "\\^|\\*{2}";
      var SAFE_POWER = "[01234]";
      var TOP_REGEX = new RegExp("([^ \\*\\d]+?)(?:" + POWER_OP + ")?(-?" + SAFE_POWER + "(?![a-zA-Z]))");
      var BOTTOM_REGEX = new RegExp("([^ \\*\\d]+?)(?:" + POWER_OP + ")?(" + SAFE_POWER + "(?![a-zA-Z]))");
      function parse(val) {
        if (!isString(val)) {
          val = val.toString();
        }
        val = val.trim();
        var result = QTY_STRING_REGEX.exec(val);
        if (!result) {
          throw new QtyError(val + ": Quantity not recognized");
        }
        var scalarMatch = result[1];
        if (scalarMatch) {
          scalarMatch = scalarMatch.replace(/\s/g, "");
          this.scalar = parseFloat(scalarMatch);
        } else {
          this.scalar = 1;
        }
        var top = result[2];
        var bottom = result[3];
        var n, x, nx;
        while (result = TOP_REGEX.exec(top)) {
          n = parseFloat(result[2]);
          if (isNaN(n)) {
            throw new QtyError("Unit exponent is not a number");
          }
          if (n === 0 && !UNIT_TEST_REGEX.test(result[1])) {
            throw new QtyError("Unit not recognized");
          }
          x = result[1] + " ";
          nx = "";
          for (var i2 = 0; i2 < Math.abs(n); i2++) {
            nx += x;
          }
          if (n >= 0) {
            top = top.replace(result[0], nx);
          } else {
            bottom = bottom ? bottom + nx : nx;
            top = top.replace(result[0], "");
          }
        }
        while (result = BOTTOM_REGEX.exec(bottom)) {
          n = parseFloat(result[2]);
          if (isNaN(n)) {
            throw new QtyError("Unit exponent is not a number");
          }
          if (n === 0 && !UNIT_TEST_REGEX.test(result[1])) {
            throw new QtyError("Unit not recognized");
          }
          x = result[1] + " ";
          nx = "";
          for (var j2 = 0; j2 < n; j2++) {
            nx += x;
          }
          bottom = bottom.replace(result[0], nx);
        }
        if (top) {
          this.numerator = parseUnits(top.trim());
        }
        if (bottom) {
          this.denominator = parseUnits(bottom.trim());
        }
      }
      var PREFIX_REGEX = Object.keys(PREFIX_MAP).sort(function(a, b) {
        return b.length - a.length;
      }).join("|");
      var UNIT_REGEX = Object.keys(UNIT_MAP).sort(function(a, b) {
        return b.length - a.length;
      }).join("|");
      var BOUNDARY_REGEX = "\\b|$";
      var UNIT_MATCH = "(" + PREFIX_REGEX + ")??(" + UNIT_REGEX + ")(?:" + BOUNDARY_REGEX + ")";
      var UNIT_TEST_REGEX = new RegExp("^\\s*(" + UNIT_MATCH + "[\\s\\*]*)+$");
      var UNIT_MATCH_REGEX = new RegExp(UNIT_MATCH, "g");
      var parsedUnitsCache = {};
      function parseUnits(units) {
        var cached = parsedUnitsCache[units];
        if (cached) {
          return cached;
        }
        var unitMatch, normalizedUnits = [];
        if (!UNIT_TEST_REGEX.test(units)) {
          throw new QtyError("Unit not recognized");
        }
        while (unitMatch = UNIT_MATCH_REGEX.exec(units)) {
          normalizedUnits.push(unitMatch.slice(1));
        }
        normalizedUnits = normalizedUnits.map(function(item) {
          return PREFIX_MAP[item[0]] ? [PREFIX_MAP[item[0]], UNIT_MAP[item[1]]] : [UNIT_MAP[item[1]]];
        });
        normalizedUnits = normalizedUnits.reduce(function(a, b) {
          return a.concat(b);
        }, []);
        normalizedUnits = normalizedUnits.filter(function(item) {
          return item;
        });
        parsedUnitsCache[units] = normalizedUnits;
        return normalizedUnits;
      }
      function globalParse(value) {
        if (!isString(value)) {
          throw new QtyError("Argument should be a string");
        }
        try {
          return this(value);
        } catch (e) {
          return null;
        }
      }
      function isQty(value) {
        return value instanceof Qty;
      }
      function Qty(initValue, initUnits) {
        assertValidConstructorArgs.apply(null, arguments);
        if (!isQty(this)) {
          return new Qty(initValue, initUnits);
        }
        this.scalar = null;
        this.baseScalar = null;
        this.signature = null;
        this._conversionCache = {};
        this.numerator = UNITY_ARRAY;
        this.denominator = UNITY_ARRAY;
        if (isDefinitionObject(initValue)) {
          this.scalar = initValue.scalar;
          this.numerator = initValue.numerator && initValue.numerator.length !== 0 ? initValue.numerator : UNITY_ARRAY;
          this.denominator = initValue.denominator && initValue.denominator.length !== 0 ? initValue.denominator : UNITY_ARRAY;
        } else if (initUnits) {
          parse.call(this, initUnits);
          this.scalar = initValue;
        } else {
          parse.call(this, initValue);
        }
        if (this.denominator.join("*").indexOf("temp") >= 0) {
          throw new QtyError("Cannot divide with temperatures");
        }
        if (this.numerator.join("*").indexOf("temp") >= 0) {
          if (this.numerator.length > 1) {
            throw new QtyError("Cannot multiply by temperatures");
          }
          if (!compareArray(this.denominator, UNITY_ARRAY)) {
            throw new QtyError("Cannot divide with temperatures");
          }
        }
        this.initValue = initValue;
        updateBaseScalar.call(this);
        if (this.isTemperature() && this.baseScalar < 0) {
          throw new QtyError("Temperatures must not be less than absolute zero");
        }
      }
      Qty.prototype = {
        // Properly set up constructor
        constructor: Qty
      };
      function assertValidConstructorArgs(value, units) {
        if (units) {
          if (!(isNumber(value) && isString(units))) {
            throw new QtyError("Only number accepted as initialization value when units are explicitly provided");
          }
        } else {
          if (!(isString(value) || isNumber(value) || isQty(value) || isDefinitionObject(value))) {
            throw new QtyError("Only string, number or quantity accepted as single initialization value");
          }
        }
      }
      function isDefinitionObject(value) {
        return value && typeof value === "object" && value.hasOwnProperty("scalar");
      }
      function updateBaseScalar() {
        if (this.baseScalar) {
          return this.baseScalar;
        }
        if (this.isBase()) {
          this.baseScalar = this.scalar;
          this.signature = unitSignature.call(this);
        } else {
          var base = this.toBase();
          this.baseScalar = base.scalar;
          this.signature = base.signature;
        }
      }
      var KINDS = {
        "-312078": "elastance",
        "-312058": "resistance",
        "-312038": "inductance",
        "-152058": "potential",
        "-152040": "magnetism",
        "-152038": "magnetism",
        "-7997": "specific_volume",
        "-79": "snap",
        "-59": "jolt",
        "-39": "acceleration",
        "-38": "radiation",
        "-20": "frequency",
        "-19": "speed",
        "-18": "viscosity",
        "-17": "volumetric_flow",
        "-1": "wavenumber",
        "0": "unitless",
        "1": "length",
        "2": "area",
        "3": "volume",
        "20": "time",
        "400": "temperature",
        "7941": "yank",
        "7942": "power",
        "7959": "pressure",
        "7961": "force",
        "7962": "energy",
        "7979": "viscosity",
        "7981": "momentum",
        "7982": "angular_momentum",
        "7997": "density",
        "7998": "area_density",
        "8000": "mass",
        "152020": "radiation_exposure",
        "159999": "magnetism",
        "160000": "current",
        "160020": "charge",
        "312058": "conductance",
        "312078": "capacitance",
        "3199980": "activity",
        "3199997": "molar_concentration",
        "3200000": "substance",
        "63999998": "illuminance",
        "64000000": "luminous_power",
        "1280000000": "currency",
        "25599999980": "information_rate",
        "25600000000": "information",
        "511999999980": "angular_velocity",
        "512000000000": "angle"
      };
      function getKinds() {
        return uniq(Object.keys(KINDS).map(function(knownSignature) {
          return KINDS[knownSignature];
        }));
      }
      Qty.prototype.kind = function() {
        return KINDS[this.signature.toString()];
      };
      assign(Qty.prototype, {
        isDegrees: function() {
          return (this.signature === null || this.signature === 400) && this.numerator.length === 1 && compareArray(this.denominator, UNITY_ARRAY) && (this.numerator[0].match(/<temp-[CFRK]>/) || this.numerator[0].match(/<(kelvin|celsius|rankine|fahrenheit)>/));
        },
        isTemperature: function() {
          return this.isDegrees() && this.numerator[0].match(/<temp-[CFRK]>/);
        }
      });
      function subtractTemperatures(lhs, rhs) {
        var lhsUnits = lhs.units();
        var rhsConverted = rhs.to(lhsUnits);
        var dstDegrees = Qty(getDegreeUnits(lhsUnits));
        return Qty({ "scalar": lhs.scalar - rhsConverted.scalar, "numerator": dstDegrees.numerator, "denominator": dstDegrees.denominator });
      }
      function subtractTempDegrees(temp, deg) {
        var tempDegrees = deg.to(getDegreeUnits(temp.units()));
        return Qty({ "scalar": temp.scalar - tempDegrees.scalar, "numerator": temp.numerator, "denominator": temp.denominator });
      }
      function addTempDegrees(temp, deg) {
        var tempDegrees = deg.to(getDegreeUnits(temp.units()));
        return Qty({ "scalar": temp.scalar + tempDegrees.scalar, "numerator": temp.numerator, "denominator": temp.denominator });
      }
      function getDegreeUnits(units) {
        if (units === "tempK") {
          return "degK";
        } else if (units === "tempC") {
          return "degC";
        } else if (units === "tempF") {
          return "degF";
        } else if (units === "tempR") {
          return "degR";
        } else {
          throw new QtyError("Unknown type for temp conversion from: " + units);
        }
      }
      function toDegrees(src, dst) {
        var srcDegK = toDegK(src);
        var dstUnits = dst.units();
        var dstScalar;
        if (dstUnits === "degK") {
          dstScalar = srcDegK.scalar;
        } else if (dstUnits === "degC") {
          dstScalar = srcDegK.scalar;
        } else if (dstUnits === "degF") {
          dstScalar = srcDegK.scalar * 9 / 5;
        } else if (dstUnits === "degR") {
          dstScalar = srcDegK.scalar * 9 / 5;
        } else {
          throw new QtyError("Unknown type for degree conversion to: " + dstUnits);
        }
        return Qty({ "scalar": dstScalar, "numerator": dst.numerator, "denominator": dst.denominator });
      }
      function toDegK(qty) {
        var units = qty.units();
        var q;
        if (units.match(/(deg)[CFRK]/)) {
          q = qty.baseScalar;
        } else if (units === "tempK") {
          q = qty.scalar;
        } else if (units === "tempC") {
          q = qty.scalar;
        } else if (units === "tempF") {
          q = qty.scalar * 5 / 9;
        } else if (units === "tempR") {
          q = qty.scalar * 5 / 9;
        } else {
          throw new QtyError("Unknown type for temp conversion from: " + units);
        }
        return Qty({ "scalar": q, "numerator": ["<kelvin>"], "denominator": UNITY_ARRAY });
      }
      function toTemp(src, dst) {
        var dstUnits = dst.units();
        var dstScalar;
        if (dstUnits === "tempK") {
          dstScalar = src.baseScalar;
        } else if (dstUnits === "tempC") {
          dstScalar = src.baseScalar - 273.15;
        } else if (dstUnits === "tempF") {
          dstScalar = src.baseScalar * 9 / 5 - 459.67;
        } else if (dstUnits === "tempR") {
          dstScalar = src.baseScalar * 9 / 5;
        } else {
          throw new QtyError("Unknown type for temp conversion to: " + dstUnits);
        }
        return Qty({ "scalar": dstScalar, "numerator": dst.numerator, "denominator": dst.denominator });
      }
      function toTempK(qty) {
        var units = qty.units();
        var q;
        if (units.match(/(deg)[CFRK]/)) {
          q = qty.baseScalar;
        } else if (units === "tempK") {
          q = qty.scalar;
        } else if (units === "tempC") {
          q = qty.scalar + 273.15;
        } else if (units === "tempF") {
          q = (qty.scalar + 459.67) * 5 / 9;
        } else if (units === "tempR") {
          q = qty.scalar * 5 / 9;
        } else {
          throw new QtyError("Unknown type for temp conversion from: " + units);
        }
        return Qty({ "scalar": q, "numerator": ["<temp-K>"], "denominator": UNITY_ARRAY });
      }
      assign(Qty.prototype, {
        /**
         * Converts to other compatible units.
         * Instance's converted quantities are cached for faster subsequent calls.
         *
         * @param {(string|Qty)} other - Target units as string or retrieved from
         *                               other Qty instance (scalar is ignored)
         *
         * @returns {Qty} New converted Qty instance with target units
         *
         * @throws {QtyError} if target units are incompatible
         *
         * @example
         * var weight = Qty("25 kg");
         * weight.to("lb"); // => Qty("55.11556554621939 lbs");
         * weight.to(Qty("3 g")); // => Qty("25000 g"); // scalar of passed Qty is ignored
         */
        to: function(other) {
          var cached, target;
          if (other === void 0 || other === null) {
            return this;
          }
          if (!isString(other)) {
            return this.to(other.units());
          }
          cached = this._conversionCache[other];
          if (cached) {
            return cached;
          }
          target = Qty(other);
          if (target.units() === this.units()) {
            return this;
          }
          if (!this.isCompatible(target)) {
            if (this.isInverse(target)) {
              target = this.inverse().to(other);
            } else {
              throwIncompatibleUnits(this.units(), target.units());
            }
          } else {
            if (target.isTemperature()) {
              target = toTemp(this, target);
            } else if (target.isDegrees()) {
              target = toDegrees(this, target);
            } else {
              var q = divSafe(this.baseScalar, target.baseScalar);
              target = Qty({ "scalar": q, "numerator": target.numerator, "denominator": target.denominator });
            }
          }
          this._conversionCache[other] = target;
          return target;
        },
        // convert to base SI units
        // results of the conversion are cached so subsequent calls to this will be fast
        toBase: function() {
          if (this.isBase()) {
            return this;
          }
          if (this.isTemperature()) {
            return toTempK(this);
          }
          var cached = baseUnitCache[this.units()];
          if (!cached) {
            cached = toBaseUnits(this.numerator, this.denominator);
            baseUnitCache[this.units()] = cached;
          }
          return cached.mul(this.scalar);
        },
        // Converts the unit back to a float if it is unitless.  Otherwise raises an exception
        toFloat: function() {
          if (this.isUnitless()) {
            return this.scalar;
          }
          throw new QtyError("Can't convert to Float unless unitless.  Use Unit#scalar");
        },
        /**
         * Returns the nearest multiple of quantity passed as
         * precision
         *
         * @param {(Qty|string|number)} precQuantity - Quantity, string formated
         *   quantity or number as expected precision
         *
         * @returns {Qty} Nearest multiple of precQuantity
         *
         * @example
         * Qty('5.5 ft').toPrec('2 ft'); // returns 6 ft
         * Qty('0.8 cu').toPrec('0.25 cu'); // returns 0.75 cu
         * Qty('6.3782 m').toPrec('cm'); // returns 6.38 m
         * Qty('1.146 MPa').toPrec('0.1 bar'); // returns 1.15 MPa
         *
         */
        toPrec: function(precQuantity) {
          if (isString(precQuantity)) {
            precQuantity = Qty(precQuantity);
          }
          if (isNumber(precQuantity)) {
            precQuantity = Qty(precQuantity + " " + this.units());
          }
          if (!this.isUnitless()) {
            precQuantity = precQuantity.to(this.units());
          } else if (!precQuantity.isUnitless()) {
            throwIncompatibleUnits(this.units(), precQuantity.units());
          }
          if (precQuantity.scalar === 0) {
            throw new QtyError("Divide by zero");
          }
          var precRoundedResult = mulSafe(
            Math.round(this.scalar / precQuantity.scalar),
            precQuantity.scalar
          );
          return Qty(precRoundedResult + this.units());
        }
      });
      function swiftConverter(srcUnits, dstUnits) {
        var srcQty = Qty(srcUnits);
        var dstQty = Qty(dstUnits);
        if (srcQty.eq(dstQty)) {
          return identity;
        }
        var convert;
        if (!srcQty.isTemperature()) {
          convert = function(value) {
            return value * srcQty.baseScalar / dstQty.baseScalar;
          };
        } else {
          convert = function(value) {
            return srcQty.mul(value).to(dstQty).scalar;
          };
        }
        return function converter(value) {
          var i2, length, result;
          if (!Array.isArray(value)) {
            return convert(value);
          } else {
            length = value.length;
            result = [];
            for (i2 = 0; i2 < length; i2++) {
              result.push(convert(value[i2]));
            }
            return result;
          }
        };
      }
      var baseUnitCache = {};
      function toBaseUnits(numerator, denominator) {
        var num = [];
        var den = [];
        var q = 1;
        var unit;
        for (var i2 = 0; i2 < numerator.length; i2++) {
          unit = numerator[i2];
          if (PREFIX_VALUES[unit]) {
            q = mulSafe(q, PREFIX_VALUES[unit]);
          } else {
            if (UNIT_VALUES[unit]) {
              q *= UNIT_VALUES[unit].scalar;
              if (UNIT_VALUES[unit].numerator) {
                num.push(UNIT_VALUES[unit].numerator);
              }
              if (UNIT_VALUES[unit].denominator) {
                den.push(UNIT_VALUES[unit].denominator);
              }
            }
          }
        }
        for (var j2 = 0; j2 < denominator.length; j2++) {
          unit = denominator[j2];
          if (PREFIX_VALUES[unit]) {
            q /= PREFIX_VALUES[unit];
          } else {
            if (UNIT_VALUES[unit]) {
              q /= UNIT_VALUES[unit].scalar;
              if (UNIT_VALUES[unit].numerator) {
                den.push(UNIT_VALUES[unit].numerator);
              }
              if (UNIT_VALUES[unit].denominator) {
                num.push(UNIT_VALUES[unit].denominator);
              }
            }
          }
        }
        num = num.reduce(function(a, b) {
          return a.concat(b);
        }, []);
        den = den.reduce(function(a, b) {
          return a.concat(b);
        }, []);
        return Qty({ "scalar": q, "numerator": num, "denominator": den });
      }
      Qty.parse = globalParse;
      Qty.getUnits = getUnits;
      Qty.getAliases = getAliases;
      Qty.mulSafe = mulSafe;
      Qty.divSafe = divSafe;
      Qty.getKinds = getKinds;
      Qty.swiftConverter = swiftConverter;
      Qty.Error = QtyError;
      assign(Qty.prototype, {
        // Returns new instance with units of this
        add: function(other) {
          if (isString(other)) {
            other = Qty(other);
          }
          if (!this.isCompatible(other)) {
            throwIncompatibleUnits(this.units(), other.units());
          }
          if (this.isTemperature() && other.isTemperature()) {
            throw new QtyError("Cannot add two temperatures");
          } else if (this.isTemperature()) {
            return addTempDegrees(this, other);
          } else if (other.isTemperature()) {
            return addTempDegrees(other, this);
          }
          return Qty({ "scalar": this.scalar + other.to(this).scalar, "numerator": this.numerator, "denominator": this.denominator });
        },
        sub: function(other) {
          if (isString(other)) {
            other = Qty(other);
          }
          if (!this.isCompatible(other)) {
            throwIncompatibleUnits(this.units(), other.units());
          }
          if (this.isTemperature() && other.isTemperature()) {
            return subtractTemperatures(this, other);
          } else if (this.isTemperature()) {
            return subtractTempDegrees(this, other);
          } else if (other.isTemperature()) {
            throw new QtyError("Cannot subtract a temperature from a differential degree unit");
          }
          return Qty({ "scalar": this.scalar - other.to(this).scalar, "numerator": this.numerator, "denominator": this.denominator });
        },
        mul: function(other) {
          if (isNumber(other)) {
            return Qty({ "scalar": mulSafe(this.scalar, other), "numerator": this.numerator, "denominator": this.denominator });
          } else if (isString(other)) {
            other = Qty(other);
          }
          if ((this.isTemperature() || other.isTemperature()) && !(this.isUnitless() || other.isUnitless())) {
            throw new QtyError("Cannot multiply by temperatures");
          }
          var op1 = this;
          var op2 = other;
          if (op1.isCompatible(op2) && op1.signature !== 400) {
            op2 = op2.to(op1);
          }
          var numdenscale = cleanTerms(op1.numerator, op1.denominator, op2.numerator, op2.denominator);
          return Qty({ "scalar": mulSafe(op1.scalar, op2.scalar, numdenscale[2]), "numerator": numdenscale[0], "denominator": numdenscale[1] });
        },
        div: function(other) {
          if (isNumber(other)) {
            if (other === 0) {
              throw new QtyError("Divide by zero");
            }
            return Qty({ "scalar": this.scalar / other, "numerator": this.numerator, "denominator": this.denominator });
          } else if (isString(other)) {
            other = Qty(other);
          }
          if (other.scalar === 0) {
            throw new QtyError("Divide by zero");
          }
          if (other.isTemperature()) {
            throw new QtyError("Cannot divide with temperatures");
          } else if (this.isTemperature() && !other.isUnitless()) {
            throw new QtyError("Cannot divide with temperatures");
          }
          var op1 = this;
          var op2 = other;
          if (op1.isCompatible(op2) && op1.signature !== 400) {
            op2 = op2.to(op1);
          }
          var numdenscale = cleanTerms(op1.numerator, op1.denominator, op2.denominator, op2.numerator);
          return Qty({ "scalar": mulSafe(op1.scalar, numdenscale[2]) / op2.scalar, "numerator": numdenscale[0], "denominator": numdenscale[1] });
        },
        // Returns a Qty that is the inverse of this Qty,
        inverse: function() {
          if (this.isTemperature()) {
            throw new QtyError("Cannot divide with temperatures");
          }
          if (this.scalar === 0) {
            throw new QtyError("Divide by zero");
          }
          return Qty({ "scalar": 1 / this.scalar, "numerator": this.denominator, "denominator": this.numerator });
        }
      });
      function cleanTerms(num1, den1, num2, den2) {
        function notUnity(val) {
          return val !== UNITY;
        }
        num1 = num1.filter(notUnity);
        num2 = num2.filter(notUnity);
        den1 = den1.filter(notUnity);
        den2 = den2.filter(notUnity);
        var combined = {};
        function combineTerms(terms, direction) {
          var k;
          var prefix;
          var prefixValue;
          for (var i2 = 0; i2 < terms.length; i2++) {
            if (PREFIX_VALUES[terms[i2]]) {
              k = terms[i2 + 1];
              prefix = terms[i2];
              prefixValue = PREFIX_VALUES[prefix];
              i2++;
            } else {
              k = terms[i2];
              prefix = null;
              prefixValue = 1;
            }
            if (k && k !== UNITY) {
              if (combined[k]) {
                combined[k][0] += direction;
                var combinedPrefixValue = combined[k][2] ? PREFIX_VALUES[combined[k][2]] : 1;
                combined[k][direction === 1 ? 3 : 4] *= divSafe(prefixValue, combinedPrefixValue);
              } else {
                combined[k] = [direction, k, prefix, 1, 1];
              }
            }
          }
        }
        combineTerms(num1, 1);
        combineTerms(den1, -1);
        combineTerms(num2, 1);
        combineTerms(den2, -1);
        var num = [];
        var den = [];
        var scale = 1;
        for (var prop in combined) {
          if (combined.hasOwnProperty(prop)) {
            var item = combined[prop];
            var n;
            if (item[0] > 0) {
              for (n = 0; n < item[0]; n++) {
                num.push(item[2] === null ? item[1] : [item[2], item[1]]);
              }
            } else if (item[0] < 0) {
              for (n = 0; n < -item[0]; n++) {
                den.push(item[2] === null ? item[1] : [item[2], item[1]]);
              }
            }
            scale *= divSafe(item[3], item[4]);
          }
        }
        if (num.length === 0) {
          num = UNITY_ARRAY;
        }
        if (den.length === 0) {
          den = UNITY_ARRAY;
        }
        num = num.reduce(function(a, b) {
          return a.concat(b);
        }, []);
        den = den.reduce(function(a, b) {
          return a.concat(b);
        }, []);
        return [num, den, scale];
      }
      assign(Qty.prototype, {
        eq: function(other) {
          return this.compareTo(other) === 0;
        },
        lt: function(other) {
          return this.compareTo(other) === -1;
        },
        lte: function(other) {
          return this.eq(other) || this.lt(other);
        },
        gt: function(other) {
          return this.compareTo(other) === 1;
        },
        gte: function(other) {
          return this.eq(other) || this.gt(other);
        },
        // Compare two Qty objects. Throws an exception if they are not of compatible types.
        // Comparisons are done based on the value of the quantity in base SI units.
        //
        // NOTE: We cannot compare inverses as that breaks the general compareTo contract:
        //   if a.compareTo(b) < 0 then b.compareTo(a) > 0
        //   if a.compareTo(b) == 0 then b.compareTo(a) == 0
        //
        //   Since "10S" == ".1ohm" (10 > .1) and "10ohm" == ".1S" (10 > .1)
        //     Qty("10S").inverse().compareTo("10ohm") == -1
        //     Qty("10ohm").inverse().compareTo("10S") == -1
        //
        //   If including inverses in the sort is needed, I suggest writing: Qty.sort(qtyArray,units)
        compareTo: function(other) {
          if (isString(other)) {
            return this.compareTo(Qty(other));
          }
          if (!this.isCompatible(other)) {
            throwIncompatibleUnits(this.units(), other.units());
          }
          if (this.baseScalar < other.baseScalar) {
            return -1;
          } else if (this.baseScalar === other.baseScalar) {
            return 0;
          } else if (this.baseScalar > other.baseScalar) {
            return 1;
          }
        },
        // Return true if quantities and units match
        // Unit("100 cm").same(Unit("100 cm"))  # => true
        // Unit("100 cm").same(Unit("1 m"))     # => false
        same: function(other) {
          return this.scalar === other.scalar && this.units() === other.units();
        }
      });
      assign(Qty.prototype, {
        // returns true if no associated units
        // false, even if the units are "unitless" like 'radians, each, etc'
        isUnitless: function() {
          return [this.numerator, this.denominator].every(function(item) {
            return compareArray(item, UNITY_ARRAY);
          });
        },
        /*
        check to see if units are compatible, but not the scalar part
        this check is done by comparing signatures for performance reasons
        if passed a string, it will create a unit object with the string and then do the comparison
        this permits a syntax like:
        unit =~ "mm"
        if you want to do a regexp on the unit string do this ...
        unit.units =~ /regexp/
        */
        isCompatible: function(other) {
          if (isString(other)) {
            return this.isCompatible(Qty(other));
          }
          if (!isQty(other)) {
            return false;
          }
          if (other.signature !== void 0) {
            return this.signature === other.signature;
          } else {
            return false;
          }
        },
        /*
        check to see if units are inverse of each other, but not the scalar part
        this check is done by comparing signatures for performance reasons
        if passed a string, it will create a unit object with the string and then do the comparison
        this permits a syntax like:
        unit =~ "mm"
        if you want to do a regexp on the unit string do this ...
        unit.units =~ /regexp/
        */
        isInverse: function(other) {
          return this.inverse().isCompatible(other);
        },
        // Returns 'true' if the Unit is represented in base units
        isBase: function() {
          if (this._isBase !== void 0) {
            return this._isBase;
          }
          if (this.isDegrees() && this.numerator[0].match(/<(kelvin|temp-K)>/)) {
            this._isBase = true;
            return this._isBase;
          }
          this.numerator.concat(this.denominator).forEach(function(item) {
            if (item !== UNITY && BASE_UNITS.indexOf(item) === -1) {
              this._isBase = false;
            }
          }, this);
          if (this._isBase === false) {
            return this._isBase;
          }
          this._isBase = true;
          return this._isBase;
        }
      });
      function NestedMap() {
      }
      NestedMap.prototype.get = function(keys) {
        if (arguments.length > 1) {
          keys = Array.apply(null, arguments);
        }
        return keys.reduce(
          function(map, key, index) {
            if (map) {
              var childMap = map[key];
              if (index === keys.length - 1) {
                return childMap ? childMap.data : void 0;
              } else {
                return childMap;
              }
            }
          },
          this
        );
      };
      NestedMap.prototype.set = function(keys, value) {
        if (arguments.length > 2) {
          keys = Array.prototype.slice.call(arguments, 0, -1);
          value = arguments[arguments.length - 1];
        }
        return keys.reduce(function(map, key, index) {
          var childMap = map[key];
          if (childMap === void 0) {
            childMap = map[key] = {};
          }
          if (index === keys.length - 1) {
            childMap.data = value;
            return value;
          } else {
            return childMap;
          }
        }, this);
      };
      function defaultFormatter(scalar, units) {
        return (scalar + " " + units).trim();
      }
      Qty.formatter = defaultFormatter;
      assign(Qty.prototype, {
        // returns the 'unit' part of the Unit object without the scalar
        units: function() {
          if (this._units !== void 0) {
            return this._units;
          }
          var numIsUnity = compareArray(this.numerator, UNITY_ARRAY);
          var denIsUnity = compareArray(this.denominator, UNITY_ARRAY);
          if (numIsUnity && denIsUnity) {
            this._units = "";
            return this._units;
          }
          var numUnits = stringifyUnits(this.numerator);
          var denUnits = stringifyUnits(this.denominator);
          this._units = numUnits + (denIsUnity ? "" : "/" + denUnits);
          return this._units;
        },
        /**
         * Stringifies the quantity
         * Deprecation notice: only units parameter is supported.
         *
         * @param {(number|string|Qty)} targetUnitsOrMaxDecimalsOrPrec -
         *                              target units if string,
         *                              max number of decimals if number,
         *                              passed to #toPrec before converting if Qty
         *
         * @param {number=} maxDecimals - Maximum number of decimals of
         *                                formatted output
         *
         * @returns {string} reparseable quantity as string
         */
        toString: function(targetUnitsOrMaxDecimalsOrPrec, maxDecimals) {
          var targetUnits;
          if (isNumber(targetUnitsOrMaxDecimalsOrPrec)) {
            targetUnits = this.units();
            maxDecimals = targetUnitsOrMaxDecimalsOrPrec;
          } else if (isString(targetUnitsOrMaxDecimalsOrPrec)) {
            targetUnits = targetUnitsOrMaxDecimalsOrPrec;
          } else if (isQty(targetUnitsOrMaxDecimalsOrPrec)) {
            return this.toPrec(targetUnitsOrMaxDecimalsOrPrec).toString(maxDecimals);
          }
          var out = this.to(targetUnits);
          var outScalar = maxDecimals !== void 0 ? round(out.scalar, maxDecimals) : out.scalar;
          out = (outScalar + " " + out.units()).trim();
          return out;
        },
        /**
         * Format the quantity according to optional passed target units
         * and formatter
         *
         * @param {string} [targetUnits=current units] -
         *                 optional units to convert to before formatting
         *
         * @param {function} [formatter=Qty.formatter] -
         *                   delegates formatting to formatter callback.
         *                   formatter is called back with two parameters (scalar, units)
         *                   and should return formatted result.
         *                   If unspecified, formatting is delegated to default formatter
         *                   set to Qty.formatter
         *
         * @example
         * var roundingAndLocalizingFormatter = function(scalar, units) {
         *   // localize or limit scalar to n max decimals for instance
         *   // return formatted result
         * };
         * var qty = Qty('1.1234 m');
         * qty.format(); // same units, default formatter => "1.234 m"
         * qty.format("cm"); // converted to "cm", default formatter => "123.45 cm"
         * qty.format(roundingAndLocalizingFormatter); // same units, custom formatter => "1,2 m"
         * qty.format("cm", roundingAndLocalizingFormatter); // convert to "cm", custom formatter => "123,4 cm"
         *
         * @returns {string} quantity as string
         */
        format: function(targetUnits, formatter) {
          if (arguments.length === 1) {
            if (typeof targetUnits === "function") {
              formatter = targetUnits;
              targetUnits = void 0;
            }
          }
          formatter = formatter || Qty.formatter;
          var targetQty = this.to(targetUnits);
          return formatter.call(this, targetQty.scalar, targetQty.units());
        }
      });
      var stringifiedUnitsCache = new NestedMap();
      function stringifyUnits(units) {
        var stringified = stringifiedUnitsCache.get(units);
        if (stringified) {
          return stringified;
        }
        var isUnity = compareArray(units, UNITY_ARRAY);
        if (isUnity) {
          stringified = "1";
        } else {
          stringified = simplify(getOutputNames(units)).join("*");
        }
        stringifiedUnitsCache.set(units, stringified);
        return stringified;
      }
      function getOutputNames(units) {
        var unitNames = [], token, tokenNext;
        for (var i2 = 0; i2 < units.length; i2++) {
          token = units[i2];
          tokenNext = units[i2 + 1];
          if (PREFIX_VALUES[token]) {
            unitNames.push(OUTPUT_MAP[token] + OUTPUT_MAP[tokenNext]);
            i2++;
          } else {
            unitNames.push(OUTPUT_MAP[token]);
          }
        }
        return unitNames;
      }
      function simplify(units) {
        var unitCounts = units.reduce(function(acc, unit) {
          var unitCounter = acc[unit];
          if (!unitCounter) {
            acc.push(unitCounter = acc[unit] = [unit, 0]);
          }
          unitCounter[1]++;
          return acc;
        }, []);
        return unitCounts.map(function(unitCount) {
          return unitCount[0] + (unitCount[1] > 1 ? unitCount[1] : "");
        });
      }
      Qty.version = "1.8.0";
      return Qty;
    });
  }
});

// node_modules/image-js/lib/util/deepValue.js
var require_deepValue = __commonJS({
  "node_modules/image-js/lib/util/deepValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = deepValue;
    function deepValue(object, path = "") {
      let parts = path.split(".");
      for (let part of parts) {
        if (object[part] === void 0)
          return void 0;
        object = object[part];
      }
      return object;
    }
  }
});

// node_modules/two-product/two-product.js
var require_two_product = __commonJS({
  "node_modules/two-product/two-product.js"(exports2, module2) {
    "use strict";
    module2.exports = twoProduct;
    var SPLITTER = +(Math.pow(2, 27) + 1);
    function twoProduct(a, b, result) {
      var x = a * b;
      var c = SPLITTER * a;
      var abig = c - a;
      var ahi = c - abig;
      var alo = a - ahi;
      var d = SPLITTER * b;
      var bbig = d - b;
      var bhi = d - bbig;
      var blo = b - bhi;
      var err1 = x - ahi * bhi;
      var err2 = err1 - alo * bhi;
      var err3 = err2 - ahi * blo;
      var y = alo * blo - err3;
      if (result) {
        result[0] = y;
        result[1] = x;
        return result;
      }
      return [y, x];
    }
  }
});

// node_modules/robust-sum/robust-sum.js
var require_robust_sum = __commonJS({
  "node_modules/robust-sum/robust-sum.js"(exports2, module2) {
    "use strict";
    module2.exports = linearExpansionSum;
    function scalarScalar(a, b) {
      var x = a + b;
      var bv = x - a;
      var av = x - bv;
      var br = b - bv;
      var ar = a - av;
      var y = ar + br;
      if (y) {
        return [y, x];
      }
      return [x];
    }
    function linearExpansionSum(e, f) {
      var ne = e.length | 0;
      var nf = f.length | 0;
      if (ne === 1 && nf === 1) {
        return scalarScalar(e[0], f[0]);
      }
      var n = ne + nf;
      var g = new Array(n);
      var count = 0;
      var eptr = 0;
      var fptr = 0;
      var abs = Math.abs;
      var ei = e[eptr];
      var ea = abs(ei);
      var fi = f[fptr];
      var fa = abs(fi);
      var a, b;
      if (ea < fa) {
        b = ei;
        eptr += 1;
        if (eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        b = fi;
        fptr += 1;
        if (fptr < nf) {
          fi = f[fptr];
          fa = abs(fi);
        }
      }
      if (eptr < ne && ea < fa || fptr >= nf) {
        a = ei;
        eptr += 1;
        if (eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        a = fi;
        fptr += 1;
        if (fptr < nf) {
          fi = f[fptr];
          fa = abs(fi);
        }
      }
      var x = a + b;
      var bv = x - a;
      var y = b - bv;
      var q0 = y;
      var q1 = x;
      var _x, _bv, _av, _br, _ar;
      while (eptr < ne && fptr < nf) {
        if (ea < fa) {
          a = ei;
          eptr += 1;
          if (eptr < ne) {
            ei = e[eptr];
            ea = abs(ei);
          }
        } else {
          a = fi;
          fptr += 1;
          if (fptr < nf) {
            fi = f[fptr];
            fa = abs(fi);
          }
        }
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if (y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
      }
      while (eptr < ne) {
        a = ei;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if (y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        eptr += 1;
        if (eptr < ne) {
          ei = e[eptr];
        }
      }
      while (fptr < nf) {
        a = fi;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if (y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        fptr += 1;
        if (fptr < nf) {
          fi = f[fptr];
        }
      }
      if (q0) {
        g[count++] = q0;
      }
      if (q1) {
        g[count++] = q1;
      }
      if (!count) {
        g[count++] = 0;
      }
      g.length = count;
      return g;
    }
  }
});

// node_modules/two-sum/two-sum.js
var require_two_sum = __commonJS({
  "node_modules/two-sum/two-sum.js"(exports2, module2) {
    "use strict";
    module2.exports = fastTwoSum;
    function fastTwoSum(a, b, result) {
      var x = a + b;
      var bv = x - a;
      var av = x - bv;
      var br = b - bv;
      var ar = a - av;
      if (result) {
        result[0] = ar + br;
        result[1] = x;
        return result;
      }
      return [ar + br, x];
    }
  }
});

// node_modules/robust-scale/robust-scale.js
var require_robust_scale = __commonJS({
  "node_modules/robust-scale/robust-scale.js"(exports2, module2) {
    "use strict";
    var twoProduct = require_two_product();
    var twoSum = require_two_sum();
    module2.exports = scaleLinearExpansion;
    function scaleLinearExpansion(e, scale) {
      var n = e.length;
      if (n === 1) {
        var ts = twoProduct(e[0], scale);
        if (ts[0]) {
          return ts;
        }
        return [ts[1]];
      }
      var g = new Array(2 * n);
      var q = [0.1, 0.1];
      var t = [0.1, 0.1];
      var count = 0;
      twoProduct(e[0], scale, q);
      if (q[0]) {
        g[count++] = q[0];
      }
      for (var i = 1; i < n; ++i) {
        twoProduct(e[i], scale, t);
        var pq = q[1];
        twoSum(pq, t[0], q);
        if (q[0]) {
          g[count++] = q[0];
        }
        var a = t[1];
        var b = q[1];
        var x = a + b;
        var bv = x - a;
        var y = b - bv;
        q[1] = x;
        if (y) {
          g[count++] = y;
        }
      }
      if (q[1]) {
        g[count++] = q[1];
      }
      if (count === 0) {
        g[count++] = 0;
      }
      g.length = count;
      return g;
    }
  }
});

// node_modules/robust-subtract/robust-diff.js
var require_robust_diff = __commonJS({
  "node_modules/robust-subtract/robust-diff.js"(exports2, module2) {
    "use strict";
    module2.exports = robustSubtract;
    function scalarScalar(a, b) {
      var x = a + b;
      var bv = x - a;
      var av = x - bv;
      var br = b - bv;
      var ar = a - av;
      var y = ar + br;
      if (y) {
        return [y, x];
      }
      return [x];
    }
    function robustSubtract(e, f) {
      var ne = e.length | 0;
      var nf = f.length | 0;
      if (ne === 1 && nf === 1) {
        return scalarScalar(e[0], -f[0]);
      }
      var n = ne + nf;
      var g = new Array(n);
      var count = 0;
      var eptr = 0;
      var fptr = 0;
      var abs = Math.abs;
      var ei = e[eptr];
      var ea = abs(ei);
      var fi = -f[fptr];
      var fa = abs(fi);
      var a, b;
      if (ea < fa) {
        b = ei;
        eptr += 1;
        if (eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        b = fi;
        fptr += 1;
        if (fptr < nf) {
          fi = -f[fptr];
          fa = abs(fi);
        }
      }
      if (eptr < ne && ea < fa || fptr >= nf) {
        a = ei;
        eptr += 1;
        if (eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        a = fi;
        fptr += 1;
        if (fptr < nf) {
          fi = -f[fptr];
          fa = abs(fi);
        }
      }
      var x = a + b;
      var bv = x - a;
      var y = b - bv;
      var q0 = y;
      var q1 = x;
      var _x, _bv, _av, _br, _ar;
      while (eptr < ne && fptr < nf) {
        if (ea < fa) {
          a = ei;
          eptr += 1;
          if (eptr < ne) {
            ei = e[eptr];
            ea = abs(ei);
          }
        } else {
          a = fi;
          fptr += 1;
          if (fptr < nf) {
            fi = -f[fptr];
            fa = abs(fi);
          }
        }
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if (y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
      }
      while (eptr < ne) {
        a = ei;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if (y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        eptr += 1;
        if (eptr < ne) {
          ei = e[eptr];
        }
      }
      while (fptr < nf) {
        a = fi;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if (y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        fptr += 1;
        if (fptr < nf) {
          fi = -f[fptr];
        }
      }
      if (q0) {
        g[count++] = q0;
      }
      if (q1) {
        g[count++] = q1;
      }
      if (!count) {
        g[count++] = 0;
      }
      g.length = count;
      return g;
    }
  }
});

// node_modules/robust-orientation/orientation.js
var require_orientation = __commonJS({
  "node_modules/robust-orientation/orientation.js"(exports2, module2) {
    "use strict";
    var twoProduct = require_two_product();
    var robustSum = require_robust_sum();
    var robustScale = require_robust_scale();
    var robustSubtract = require_robust_diff();
    var NUM_EXPAND = 5;
    var EPSILON = 11102230246251565e-32;
    var ERRBOUND3 = (3 + 16 * EPSILON) * EPSILON;
    var ERRBOUND4 = (7 + 56 * EPSILON) * EPSILON;
    function orientation_3(sum, prod, scale, sub) {
      return function orientation3Exact2(m0, m1, m2) {
        var p = sum(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])));
        var n = sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0]));
        var d = sub(p, n);
        return d[d.length - 1];
      };
    }
    function orientation_4(sum, prod, scale, sub) {
      return function orientation4Exact2(m0, m1, m2, m3) {
        var p = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))));
        var n = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))));
        var d = sub(p, n);
        return d[d.length - 1];
      };
    }
    function orientation_5(sum, prod, scale, sub) {
      return function orientation5Exact(m0, m1, m2, m3, m4) {
        var p = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m1[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), -m2[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m3[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), -m4[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m1[3])))), sum(sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m3[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), -m4[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), m0[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m1[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m3[3])))));
        var n = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m2[3])), sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), m3[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m4[3]))), sum(sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), -m1[3])), sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m4[3]))));
        var d = sub(p, n);
        return d[d.length - 1];
      };
    }
    function orientation(n) {
      var fn = n === 3 ? orientation_3 : n === 4 ? orientation_4 : orientation_5;
      return fn(robustSum, twoProduct, robustScale, robustSubtract);
    }
    var orientation3Exact = orientation(3);
    var orientation4Exact = orientation(4);
    var CACHED = [
      function orientation0() {
        return 0;
      },
      function orientation1() {
        return 0;
      },
      function orientation2(a, b) {
        return b[0] - a[0];
      },
      function orientation3(a, b, c) {
        var l = (a[1] - c[1]) * (b[0] - c[0]);
        var r = (a[0] - c[0]) * (b[1] - c[1]);
        var det = l - r;
        var s;
        if (l > 0) {
          if (r <= 0) {
            return det;
          } else {
            s = l + r;
          }
        } else if (l < 0) {
          if (r >= 0) {
            return det;
          } else {
            s = -(l + r);
          }
        } else {
          return det;
        }
        var tol = ERRBOUND3 * s;
        if (det >= tol || det <= -tol) {
          return det;
        }
        return orientation3Exact(a, b, c);
      },
      function orientation4(a, b, c, d) {
        var adx = a[0] - d[0];
        var bdx = b[0] - d[0];
        var cdx = c[0] - d[0];
        var ady = a[1] - d[1];
        var bdy = b[1] - d[1];
        var cdy = c[1] - d[1];
        var adz = a[2] - d[2];
        var bdz = b[2] - d[2];
        var cdz = c[2] - d[2];
        var bdxcdy = bdx * cdy;
        var cdxbdy = cdx * bdy;
        var cdxady = cdx * ady;
        var adxcdy = adx * cdy;
        var adxbdy = adx * bdy;
        var bdxady = bdx * ady;
        var det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady);
        var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);
        var tol = ERRBOUND4 * permanent;
        if (det > tol || -det > tol) {
          return det;
        }
        return orientation4Exact(a, b, c, d);
      }
    ];
    function slowOrient(args) {
      var proc2 = CACHED[args.length];
      if (!proc2) {
        proc2 = CACHED[args.length] = orientation(args.length);
      }
      return proc2.apply(void 0, args);
    }
    function proc(slow, o0, o1, o2, o3, o4, o5) {
      return function getOrientation(a0, a1, a2, a3, a4) {
        switch (arguments.length) {
          case 0:
          case 1:
            return 0;
          case 2:
            return o2(a0, a1);
          case 3:
            return o3(a0, a1, a2);
          case 4:
            return o4(a0, a1, a2, a3);
          case 5:
            return o5(a0, a1, a2, a3, a4);
        }
        var s = new Array(arguments.length);
        for (var i = 0; i < arguments.length; ++i) {
          s[i] = arguments[i];
        }
        return slow(s);
      };
    }
    function generateOrientationProc() {
      while (CACHED.length <= NUM_EXPAND) {
        CACHED.push(orientation(CACHED.length));
      }
      module2.exports = proc.apply(void 0, [slowOrient].concat(CACHED));
      for (var i = 0; i <= NUM_EXPAND; ++i) {
        module2.exports[i] = CACHED[i];
      }
    }
    generateOrientationProc();
  }
});

// node_modules/robust-point-in-polygon/robust-pnp.js
var require_robust_pnp = __commonJS({
  "node_modules/robust-point-in-polygon/robust-pnp.js"(exports2, module2) {
    module2.exports = robustPointInPolygon;
    var orient = require_orientation();
    function robustPointInPolygon(vs, point) {
      var x = point[0];
      var y = point[1];
      var n = vs.length;
      var inside = 1;
      var lim = n;
      for (var i = 0, j = n - 1; i < lim; j = i++) {
        var a = vs[i];
        var b = vs[j];
        var yi = a[1];
        var yj = b[1];
        if (yj < yi) {
          if (yj < y && y < yi) {
            var s = orient(a, b, point);
            if (s === 0) {
              return 0;
            } else {
              inside ^= 0 < s | 0;
            }
          } else if (y === yi) {
            var c = vs[(i + 1) % n];
            var yk = c[1];
            if (yi < yk) {
              var s = orient(a, b, point);
              if (s === 0) {
                return 0;
              } else {
                inside ^= 0 < s | 0;
              }
            }
          }
        } else if (yi < yj) {
          if (yi < y && y < yj) {
            var s = orient(a, b, point);
            if (s === 0) {
              return 0;
            } else {
              inside ^= s < 0 | 0;
            }
          } else if (y === yi) {
            var c = vs[(i + 1) % n];
            var yk = c[1];
            if (yk < yi) {
              var s = orient(a, b, point);
              if (s === 0) {
                return 0;
              } else {
                inside ^= s < 0 | 0;
              }
            }
          }
        } else if (y === yi) {
          var x0 = Math.min(a[0], b[0]);
          var x1 = Math.max(a[0], b[0]);
          if (i === 0) {
            while (j > 0) {
              var k = (j + n - 1) % n;
              var p = vs[k];
              if (p[1] !== y) {
                break;
              }
              var px = p[0];
              x0 = Math.min(x0, px);
              x1 = Math.max(x1, px);
              j = k;
            }
            if (j === 0) {
              if (x0 <= x && x <= x1) {
                return 0;
              }
              return 1;
            }
            lim = j + 1;
          }
          var y0 = vs[(j + n - 1) % n][1];
          while (i + 1 < lim) {
            var p = vs[i + 1];
            if (p[1] !== y) {
              break;
            }
            var px = p[0];
            x0 = Math.min(x0, px);
            x1 = Math.max(x1, px);
            i += 1;
          }
          if (x0 <= x && x <= x1) {
            return 0;
          }
          var y1 = vs[(i + 1) % n][1];
          if (x < x0 && y0 < y !== y1 < y) {
            inside ^= 1;
          }
        }
      }
      return 2 * inside - 1;
    }
  }
});

// node_modules/image-js/lib/image/roi/feretDiameters.js
var require_feretDiameters = __commonJS({
  "node_modules/image-js/lib/image/roi/feretDiameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = feretDiameters;
    var _points = require_points2();
    var _monotoneChainConvexHull = _interopRequireDefault(require_monotoneChainConvexHull());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function feretDiameters(options = {}) {
      const {
        originalPoints = _monotoneChainConvexHull.default.call(this)
      } = options;
      if (originalPoints.length === 0) {
        return {
          min: 0,
          max: 0,
          minLine: [],
          maxLine: [],
          aspectRatio: 1
        };
      }
      if (originalPoints.length === 1) {
        return {
          min: 1,
          max: 1,
          minLine: [originalPoints[0], originalPoints[0]],
          maxLine: [originalPoints[0], originalPoints[0]],
          aspectRatio: 1
        };
      }
      const temporaryPoints = new Array(originalPoints.length);
      let minWidth = Infinity;
      let minWidthAngle = 0;
      let minLine = [];
      for (let i = 0; i < originalPoints.length; i++) {
        let angle = getAngle(originalPoints[i], originalPoints[(i + 1) % originalPoints.length]);
        (0, _points.rotate)(-angle, originalPoints, temporaryPoints);
        let currentWidth = 0;
        let currentMinLine = [];
        for (let j = 0; j < originalPoints.length; j++) {
          let absWidth = Math.abs(temporaryPoints[i][1] - temporaryPoints[j][1]);
          if (absWidth > currentWidth) {
            currentWidth = absWidth;
            currentMinLine = [];
            currentMinLine.push([temporaryPoints[j][0], temporaryPoints[i][1]], [temporaryPoints[j][0], temporaryPoints[j][1]]);
          }
        }
        if (currentWidth < minWidth) {
          minWidth = currentWidth;
          minWidthAngle = angle;
          minLine = currentMinLine;
        }
      }
      (0, _points.rotate)(minWidthAngle, minLine, minLine);
      let maxWidth = 0;
      let maxLine = [];
      let maxSquaredWidth = 0;
      for (let i = 0; i < originalPoints.length - 1; i++) {
        for (let j = i + 1; j < originalPoints.length; j++) {
          let currentSquaredWidth = (originalPoints[i][0] - originalPoints[j][0]) ** 2 + (originalPoints[i][1] - originalPoints[j][1]) ** 2;
          if (currentSquaredWidth > maxSquaredWidth) {
            maxSquaredWidth = currentSquaredWidth;
            maxWidth = Math.sqrt(currentSquaredWidth);
            maxLine = [originalPoints[i], originalPoints[j]];
          }
        }
      }
      return {
        min: minWidth,
        minLine,
        max: maxWidth,
        maxLine,
        aspectRatio: minWidth / maxWidth
      };
    }
    function getAngle(p1, p2) {
      let diff = (0, _points.difference)(p2, p1);
      let vector = (0, _points.normalize)(diff);
      let angle = Math.acos(vector[0]);
      if (vector[1] < 0)
        return -angle;
      return angle;
    }
  }
});

// node_modules/image-js/lib/image/roi/Roi.js
var require_Roi = __commonJS({
  "node_modules/image-js/lib/image/roi/Roi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _monotoneChainConvexHull = _interopRequireDefault(require_lib24());
    var _robustPointInPolygon = _interopRequireDefault(require_robust_pnp());
    var _Shape = _interopRequireDefault(require_Shape());
    var _points = require_points2();
    var _Image = _interopRequireDefault(require_Image());
    var _minimalBoundingRectangle = _interopRequireDefault(require_minimalBoundingRectangle());
    var KindNames = _interopRequireWildcard(require_kindNames());
    var _feretDiameters = _interopRequireDefault(require_feretDiameters());
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var Roi = class {
      constructor(map, id) {
        this.map = map;
        this.id = id;
        this.minX = Number.POSITIVE_INFINITY;
        this.maxX = Number.NEGATIVE_INFINITY;
        this.minY = Number.POSITIVE_INFINITY;
        this.maxY = Number.NEGATIVE_INFINITY;
        this.meanX = 0;
        this.meanY = 0;
        this.surface = 0;
        this.computed = {};
      }
      /**
       * Returns a binary image (mask) for the corresponding ROI
       * @param {object} [options]
       * @param {number} [options.scale=1] - Scaling factor to apply to the mask
       * @param {string} [options.kind='normal'] - 'contour', 'box', 'filled', 'center', 'hull' or 'normal'
       * @return {Image} - Returns a mask (1 bit Image)
       */
      getMask(options = {}) {
        const {
          scale = 1,
          kind = ""
        } = options;
        let mask;
        switch (kind) {
          case "contour":
            mask = this.contourMask;
            break;
          case "box":
            mask = this.boxMask;
            break;
          case "filled":
            mask = this.filledMask;
            break;
          case "center":
            mask = this.centerMask;
            break;
          case "mbr":
            mask = this.mbrFilledMask;
            break;
          case "hull":
            mask = this.convexHullFilledMask;
            break;
          case "hullContour":
            mask = this.convexHullMask;
            break;
          case "mbrContour":
            mask = this.mbrMask;
            break;
          case "feret":
            mask = this.feretMask;
            break;
          default:
            mask = this.mask;
        }
        if (scale < 1) {
          mask = mask.resize({
            factor: scale
          });
          mask.parent = this.mask.parent;
          mask.position[0] += this.minX;
          mask.position[1] += this.minY;
        }
        return mask;
      }
      get mean() {
        throw new Error("Roi mean not implemented yet");
      }
      get center() {
        if (!this.computed.center) {
          this.computed.center = [this.width / 2 >> 0, this.height / 2 >> 0];
        }
        return this.computed.center;
      }
      get ratio() {
        return this.width / this.height;
      }
      get width() {
        return this.maxX - this.minX + 1;
      }
      get height() {
        return this.maxY - this.minY + 1;
      }
      _computExternalIDs() {
        let borders = this.borderIDs;
        let lengths = this.borderLengths;
        this.computed.externalIDs = [];
        this.computed.externalLengths = [];
        let internals = this.internalIDs;
        for (let i = 0; i < borders.length; i++) {
          if (!internals.includes(borders[i])) {
            this.computed.externalIDs.push(borders[i]);
            this.computed.externalLengths.push(lengths[i]);
          }
        }
      }
      get externalIDs() {
        if (this.computed.externalIDs) {
          return this.computed.externalIDs;
        }
        this._computExternalIDs();
        return this.computed.externalIDs;
      }
      get externalLengths() {
        if (this.computed.externalLengths) {
          return this.computed.externalLengths;
        }
        this._computExternalIDs();
        return this.computed.externalLengths;
      }
      _computeBorderIDs() {
        let borders = getBorders(this);
        this.computed.borderIDs = borders.ids;
        this.computed.borderLengths = borders.lengths;
      }
      /**
         Retrieve all the IDs (array of number) of the regions that are in contact with this
         specific region. It may be external or internal
         */
      get borderIDs() {
        if (this.computed.borderIDs) {
          return this.computed.borderIDs;
        }
        this._computeBorderIDs();
        return this.computed.borderIDs;
      }
      /**
         Retrieve all the length (array of number) of the contacts with this
         specific region. It may be external or internal
         */
      get borderLengths() {
        if (this.computed.borderLengths) {
          return this.computed.borderLengths;
        }
        this._computeBorderIDs();
        return this.computed.borderLengths;
      }
      /**
         Retrieve all the IDs or the Roi touching the box surrouding the region
          It should really be an array to solve complex cases related to border effect
          Like the image
         <pre>
         0000
         1111
         0000
         1111
         </pre>
          The first row of 1 will be surrouned by 2 differents zones
          Or even worse
         <pre>
         010
         111
         010
         </pre>
         The cross will be surrouned by 4 differents zones
          However in most of the cases it will be an array of one element
         */
      get boxIDs() {
        if (!this.computed.boxIDs) {
          this.computed.boxIDs = getBoxIDs(this);
        }
        return this.computed.boxIDs;
      }
      get internalIDs() {
        if (!this.computed.internalIDs) {
          this.computed.internalIDs = getInternalIDs(this);
        }
        return this.computed.internalIDs;
      }
      /**
         Number of pixels of the Roi that touch the rectangle
         This is useful for the calculation of the border
         because we will ignore those special pixels of the rectangle
         border that don't have neighbours all around them.
         */
      get box() {
        if (!this.computed.box) {
          this.computed.box = getBox(this);
        }
        return this.computed.box;
      }
      /**
         Calculates the number of pixels that are in the external border of the Roi
         Contour are all the pixels that touch an external "zone".
         All the pixels that touch the box are part of the border and
         are calculated in the getBoxPixels procedure
         */
      get external() {
        if (!this.computed.external) {
          this.computed.external = getExternal(this);
        }
        return this.computed.external;
      }
      /**
         Calculates information about holes
         */
      get holesInfo() {
        if (!this.computed.holesInfo) {
          this.computed.holesInfo = getHolesInfo(this);
        }
        return this.computed.holesInfo;
      }
      /**
         Calculates the number of pixels that are involved in border
         Border are all the pixels that touch another "zone". It could be external
         or internal. If there is a hole in the zone it will be counted as a border.
         All the pixels that touch the box are part of the border and
         are calculated in the getBoxPixels procedure
         */
      get border() {
        if (!this.computed.border) {
          this.computed.border = getBorder(this);
        }
        return this.computed.border;
      }
      /**
        Returns a binary image (mask) containing only the border of the mask
      */
      get contourMask() {
        if (!this.computed.contourMask) {
          let img = new _Image.default(this.width, this.height, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          for (let x = 0; x < this.width; x++) {
            for (let y = 0; y < this.height; y++) {
              if (this.map.data[x + this.minX + (y + this.minY) * this.map.width] === this.id) {
                if (x > 0 && x < this.width - 1 && y > 0 && y < this.height - 1) {
                  if (this.map.data[x - 1 + this.minX + (y + this.minY) * this.map.width] !== this.id || this.map.data[x + 1 + this.minX + (y + this.minY) * this.map.width] !== this.id || this.map.data[x + this.minX + (y - 1 + this.minY) * this.map.width] !== this.id || this.map.data[x + this.minX + (y + 1 + this.minY) * this.map.width] !== this.id) {
                    img.setBitXY(x, y);
                  }
                } else {
                  img.setBitXY(x, y);
                }
              }
            }
          }
          this.computed.contourMask = img;
        }
        return this.computed.contourMask;
      }
      get boxMask() {
        if (!this.computed.boxMask) {
          let img = new _Image.default(this.width, this.height, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          for (let x = 0; x < this.width; x++) {
            img.setBitXY(x, 0);
            img.setBitXY(x, this.height - 1);
          }
          for (let y = 0; y < this.height; y++) {
            img.setBitXY(0, y);
            img.setBitXY(this.width - 1, y);
          }
          this.computed.boxMask = img;
        }
        return this.computed.boxMask;
      }
      /**
         Returns a binary image containing the mask
         */
      get mask() {
        if (!this.computed.mask) {
          let img = new _Image.default(this.width, this.height, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          for (let x = 0; x < this.width; x++) {
            for (let y = 0; y < this.height; y++) {
              if (this.map.data[x + this.minX + (y + this.minY) * this.map.width] === this.id) {
                img.setBitXY(x, y);
              }
            }
          }
          this.computed.mask = img;
        }
        return this.computed.mask;
      }
      get filledMask() {
        if (!this.computed.filledMask) {
          let img = new _Image.default(this.width, this.height, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          for (let x = 0; x < this.width; x++) {
            for (let y = 0; y < this.height; y++) {
              let target = x + this.minX + (y + this.minY) * this.map.width;
              if (this.internalIDs.includes(this.map.data[target])) {
                img.setBitXY(x, y);
              }
            }
          }
          this.computed.filledMask = img;
        }
        return this.computed.filledMask;
      }
      get centerMask() {
        if (!this.computed.centerMask) {
          let img = new _Shape.default({
            kind: "smallCross"
          }).getMask();
          img.parent = this.map.parent;
          img.position = [this.minX + this.center[0] - 1, this.minY + this.center[1] - 1];
          this.computed.centerMask = img;
        }
        return this.computed.centerMask;
      }
      get convexHull() {
        if (!this.computed.convexHull) {
          const calculationPoints = [];
          for (let x = 0; x < this.width; x++) {
            for (let y = 0; y < this.height; y++) {
              if (this.map.data[x + this.minX + (y + this.minY) * this.map.width] === this.id) {
                if (x > 0 && x < this.width - 1 && y > 0 && y < this.height - 1) {
                  if (this.map.data[x - 1 + this.minX + (y + this.minY) * this.map.width] !== this.id || this.map.data[x + 1 + this.minX + (y + this.minY) * this.map.width] !== this.id || this.map.data[x + this.minX + (y - 1 + this.minY) * this.map.width] !== this.id || this.map.data[x + this.minX + (y + 1 + this.minY) * this.map.width] !== this.id) {
                    calculationPoints.push([x, y]);
                    calculationPoints.push([x + 1, y]);
                    calculationPoints.push([x, y + 1]);
                    calculationPoints.push([x + 1, y + 1]);
                  }
                } else {
                  calculationPoints.push([x, y]);
                  calculationPoints.push([x + 1, y]);
                  calculationPoints.push([x, y + 1]);
                  calculationPoints.push([x + 1, y + 1]);
                }
              }
            }
          }
          const convexHull = (0, _monotoneChainConvexHull.default)(calculationPoints);
          this.computed.convexHull = {
            polyline: convexHull,
            surface: (0, _points.surface)(convexHull),
            perimeter: (0, _points.perimeter)(convexHull)
          };
        }
        return this.computed.convexHull;
      }
      get convexHullMask() {
        if (!this.computed.convexHullMask) {
          const convexHull = this.convexHull;
          const img = new _Image.default(this.width + 1, this.height + 1, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          img.paintPolyline(convexHull.polyline, {
            closed: true
          });
          this.computed.convexHullMask = img;
        }
        return this.computed.convexHullMask;
      }
      get convexHullFilledMask() {
        if (!this.computed.convexHullFilledMask) {
          const convexHull = this.convexHull;
          const img = new _Image.default(this.width, this.height, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          for (let x = 0; x < this.width; x++) {
            for (let y = 0; y < this.height; y++) {
              if ((0, _robustPointInPolygon.default)(convexHull.polyline, [x, y]) !== 1) {
                img.setBitXY(x, y);
              }
            }
          }
          this.computed.convexHullFilledMask = img;
        }
        return this.computed.convexHullFilledMask;
      }
      get mbr() {
        if (!this.computed.mbr) {
          let mbr = (0, _minimalBoundingRectangle.default)({
            originalPoints: this.convexHull.polyline
          });
          if (mbr.length === 0) {
            this.computed.mbr = {
              width: 0,
              height: 0,
              surface: 0,
              perimeter: 0,
              rectangle: mbr
            };
          } else {
            let first = mbr[0];
            let second = mbr[1];
            let third = mbr[2];
            let width = Math.sqrt((first[0] - second[0]) ** 2 + (first[1] - second[1]) ** 2);
            let height = Math.sqrt((third[0] - second[0]) ** 2 + (third[1] - second[1]) ** 2);
            this.computed.mbr = {
              width,
              height,
              elongation: 1 - width / height,
              aspectRatio: width / height,
              surface: width * height,
              perimeter: (width + height) * 2,
              rectangle: mbr
            };
          }
        }
        return this.computed.mbr;
      }
      get fillRatio() {
        return this.surface / (this.surface + this.holesInfo.surface);
      }
      get feretDiameters() {
        if (!this.computed.feretDiameters) {
          this.computed.feretDiameters = (0, _feretDiameters.default)({
            originalPoints: this.convexHull.polyline
          });
        }
        return this.computed.feretDiameters;
      }
      /**
       * Diameter of a circle of equal projection area
       */
      get eqpc() {
        if (!this.computed.eqpc) {
          this.computed.eqpc = 2 * Math.sqrt(this.surface / Math.PI);
        }
        return this.computed.eqpc;
      }
      /**
       * Get the category in which each external pixel belongs
       */
      get perimeterInfo() {
        if (!this.computed.perimeterInfo) {
          this.computed.perimeterInfo = getPerimeterInfo(this);
        }
        return this.computed.perimeterInfo;
      }
      /**
       * Return the perimeter of the ROI
       */
      get perimeter() {
        let info = this.perimeterInfo;
        let delta = 2 - Math.sqrt(2);
        return info.one + info.two * 2 + info.three * 3 + info.four * 4 - delta * (info.two + info.three * 2 + info.four);
      }
      /**
       * Diameter of a circle of equal perimeter
       */
      get ped() {
        if (!this.computed.ped) {
          this.computed.ped = this.perimeter / Math.PI;
        }
        return this.computed.ped;
      }
      get feretMask() {
        if (!this.computed.feretMask) {
          const image = new _Image.default(this.width + 1, this.height + 1, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          image.paintPolyline(this.feretDiameters.minLine);
          image.paintPolyline(this.feretDiameters.maxLine);
          this.computed.feretMask = image;
        }
        return this.computed.feretMask;
      }
      get mbrMask() {
        if (!this.computed.mbrMask) {
          let rectangle = (0, _points.round)(this.mbr.rectangle);
          if (rectangle.length > 0) {
            const minMax = (0, _points.minMax)(rectangle);
            const img = new _Image.default(minMax[1][0] - minMax[0][0] + 1, minMax[1][1] - minMax[0][1] + 1, {
              kind: KindNames.BINARY,
              position: [this.minX + minMax[0][0], this.minY + minMax[0][1]],
              parent: this.map.parent
            });
            rectangle = (0, _points.moveToZeroZero)(rectangle);
            img.paintPolyline(rectangle, {
              closed: true
            });
            this.computed.mbrMask = img;
          } else {
            this.computed.mbrMask = new _Image.default(1, 1, {
              kind: KindNames.BINARY,
              position: [this.minX, this.minY],
              parent: this.map.parent
            });
          }
        }
        return this.computed.mbrMask;
      }
      get mbrFilledMask() {
        if (!this.computed.mbrFilledMask) {
          const img = new _Image.default(this.width, this.height, {
            kind: KindNames.BINARY,
            position: [this.minX, this.minY],
            parent: this.map.parent
          });
          const mbr = this.mask.minimalBoundingRectangle();
          for (let x = 0; x < this.width; x++) {
            for (let y = 0; y < this.height; y++) {
              if ((0, _robustPointInPolygon.default)(mbr, [x, y]) !== 1) {
                img.setBitXY(x, y);
              }
            }
          }
          this.computed.mbrFilledMask = img;
        }
        return this.computed.mbrFilledMask;
      }
      get points() {
        if (!this.computed.points) {
          let points = [];
          for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
              let target = (y + this.minY) * this.map.width + x + this.minX;
              if (this.map.data[target] === this.id) {
                points.push([x, y]);
              }
            }
          }
          this.computed.points = points;
        }
        return this.computed.points;
      }
      get maxLengthPoints() {
        if (!this.computed.maxLengthPoints) {
          let maxLength = 0;
          let maxLengthPoints;
          const points = this.points;
          for (let i = 0; i < points.length; i++) {
            for (let j = i + 1; j < points.length; j++) {
              let currentML = Math.pow(points[i][0] - points[j][0], 2) + Math.pow(points[i][1] - points[j][1], 2);
              if (currentML >= maxLength) {
                maxLength = currentML;
                maxLengthPoints = [points[i], points[j]];
              }
            }
          }
          this.computed.maxLengthPoints = maxLengthPoints;
        }
        return this.computed.maxLengthPoints;
      }
      /**
            Calculates the maximum length between two pixels of the Roi.
         */
      get maxLength() {
        if (!this.computed.maxLength) {
          let maxLength = Math.sqrt(Math.pow(this.maxLengthPoints[0][0] - this.maxLengthPoints[1][0], 2) + Math.pow(this.maxLengthPoints[0][1] - this.maxLengthPoints[1][1], 2));
          this.computed.maxLength = maxLength;
        }
        return this.computed.maxLength;
      }
      get roundness() {
        return 4 * this.surface / (Math.PI * this.feretDiameters.max ** 2);
      }
      get sphericity() {
        return 2 * Math.sqrt(this.surface * Math.PI) / this.perimeter;
      }
      get solidity() {
        return this.surface / this.convexHull.surface;
      }
      get angle() {
        if (!this.computed.angle) {
          let points = this.maxLengthPoints;
          let angle = -Math.atan2(points[0][1] - points[1][1], points[0][0] - points[1][0]) * 180 / Math.PI;
          this.computed.angle = angle;
        }
        return this.computed.angle;
      }
      toJSON() {
        return {
          id: this.id,
          minX: this.minX,
          maxX: this.maxX,
          minY: this.minY,
          maxY: this.maxY,
          meanX: this.meanX,
          meanY: this.meanY,
          height: this.height,
          width: this.width,
          surface: this.surface,
          mbrWidth: this.mbr.width,
          mbrHeight: this.mbr.height,
          mbrSurface: this.mbr.surface,
          eqpc: this.eqpc,
          ped: this.ped,
          feretDiameterMin: this.feretDiameters.min,
          feretDiameterMax: this.feretDiameters.max,
          aspectRatio: this.feretDiameters.aspectRatio,
          fillRatio: this.fillRatio,
          sphericity: this.sphericity,
          roundness: this.roundness,
          solidity: this.solidity,
          perimeter: this.perimeter
        };
      }
    };
    exports2.default = Roi;
    function getBorders(roi) {
      let roiMap = roi.map;
      let data = roiMap.data;
      let surroudingIDs = /* @__PURE__ */ new Set();
      let surroundingBorders = /* @__PURE__ */ new Map();
      let visitedData = /* @__PURE__ */ new Set();
      let dx = [1, 0, -1, 0];
      let dy = [0, 1, 0, -1];
      for (let x = roi.minX; x <= roi.maxX; x++) {
        for (let y = roi.minY; y <= roi.maxY; y++) {
          let target = x + y * roiMap.width;
          if (data[target] === roi.id) {
            for (let dir = 0; dir < 4; dir++) {
              let newX = x + dx[dir];
              let newY = y + dy[dir];
              if (newX >= 0 && newY >= 0 && newX < roiMap.width && newY < roiMap.height) {
                let neighbour = newX + newY * roiMap.width;
                if (data[neighbour] !== roi.id && !visitedData.has(neighbour)) {
                  visitedData.add(neighbour);
                  surroudingIDs.add(data[neighbour]);
                  let surroundingBorder = surroundingBorders.get(data[neighbour]);
                  if (!surroundingBorder) {
                    surroundingBorders.set(data[neighbour], 1);
                  } else {
                    surroundingBorders.set(data[neighbour], ++surroundingBorder);
                  }
                }
              }
            }
          }
        }
      }
      let ids = Array.from(surroudingIDs);
      let borderLengths = ids.map(function(id) {
        return surroundingBorders.get(id);
      });
      return {
        ids,
        lengths: borderLengths
      };
    }
    function getBoxIDs(roi) {
      let surroundingIDs = /* @__PURE__ */ new Set();
      let roiMap = roi.map;
      let data = roiMap.data;
      for (let y of [0, roi.height - 1]) {
        for (let x = 0; x < roi.width; x++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (x - roi.minX > 0 && data[target] === roi.id && data[target - 1] !== roi.id) {
            let value = data[target - 1];
            surroundingIDs.add(value);
          }
          if (roiMap.width - x - roi.minX > 1 && data[target] === roi.id && data[target + 1] !== roi.id) {
            let value = data[target + 1];
            surroundingIDs.add(value);
          }
        }
      }
      for (let x of [0, roi.width - 1]) {
        for (let y = 0; y < roi.height; y++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (y - roi.minY > 0 && data[target] === roi.id && data[target - roiMap.width] !== roi.id) {
            let value = data[target - roiMap.width];
            surroundingIDs.add(value);
          }
          if (roiMap.height - y - roi.minY > 1 && data[target] === roi.id && data[target + roiMap.width] !== roi.id) {
            let value = data[target + roiMap.width];
            surroundingIDs.add(value);
          }
        }
      }
      return Array.from(surroundingIDs);
    }
    function getBox(roi) {
      let total = 0;
      let roiMap = roi.map;
      let data = roiMap.data;
      let topBottom = [0];
      if (roi.height > 1) {
        topBottom[1] = roi.height - 1;
      }
      for (let y of topBottom) {
        for (let x = 1; x < roi.width - 1; x++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (data[target] === roi.id) {
            total++;
          }
        }
      }
      let leftRight = [0];
      if (roi.width > 1) {
        leftRight[1] = roi.width - 1;
      }
      for (let x of leftRight) {
        for (let y = 0; y < roi.height; y++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (data[target] === roi.id) {
            total++;
          }
        }
      }
      return total;
    }
    function getBorder(roi) {
      let total = 0;
      let roiMap = roi.map;
      let data = roiMap.data;
      for (let x = 1; x < roi.width - 1; x++) {
        for (let y = 1; y < roi.height - 1; y++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (data[target] === roi.id) {
            if (data[target - 1] !== roi.id || data[target + 1] !== roi.id || data[target - roiMap.width] !== roi.id || data[target + roiMap.width] !== roi.id) {
              total++;
            }
          }
        }
      }
      return total + roi.box;
    }
    function getPerimeterInfo(roi) {
      let roiMap = roi.map;
      let data = roiMap.data;
      let one = 0;
      let two = 0;
      let three = 0;
      let four = 0;
      for (let x = 0; x < roi.width; x++) {
        for (let y = 0; y < roi.height; y++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (data[target] === roi.id) {
            let nbAround = 0;
            if (x === 0) {
              nbAround++;
            } else if (roi.externalIDs.includes(data[target - 1])) {
              nbAround++;
            }
            if (x === roi.width - 1) {
              nbAround++;
            } else if (roi.externalIDs.includes(data[target + 1])) {
              nbAround++;
            }
            if (y === 0) {
              nbAround++;
            } else if (roi.externalIDs.includes(data[target - roiMap.width])) {
              nbAround++;
            }
            if (y === roi.height - 1) {
              nbAround++;
            } else if (roi.externalIDs.includes(data[target + roiMap.width])) {
              nbAround++;
            }
            switch (nbAround) {
              case 1:
                one++;
                break;
              case 2:
                two++;
                break;
              case 3:
                three++;
                break;
              case 4:
                four++;
                break;
              default:
            }
          }
        }
      }
      return {
        one,
        two,
        three,
        four
      };
    }
    function getExternal(roi) {
      let total = 0;
      let roiMap = roi.map;
      let data = roiMap.data;
      for (let x = 1; x < roi.width - 1; x++) {
        for (let y = 1; y < roi.height - 1; y++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (data[target] === roi.id) {
            if (roi.externalIDs.includes(data[target - 1]) || roi.externalIDs.includes(data[target + 1]) || roi.externalIDs.includes(data[target - roiMap.width]) || roi.externalIDs.includes(data[target + roiMap.width])) {
              total++;
            }
          }
        }
      }
      return total + roi.box;
    }
    function getHolesInfo(roi) {
      let surface = 0;
      let width = roi.map.width;
      let data = roi.map.data;
      for (let x = 1; x < roi.width - 1; x++) {
        for (let y = 1; y < roi.height - 1; y++) {
          let target = (y + roi.minY) * width + x + roi.minX;
          if (roi.internalIDs.includes(data[target]) && data[target] !== roi.id) {
            surface++;
          }
        }
      }
      return {
        number: roi.internalIDs.length - 1,
        surface
      };
    }
    function getInternalIDs(roi) {
      let internal = [roi.id];
      let roiMap = roi.map;
      let data = roiMap.data;
      if (roi.height > 2) {
        for (let x = 0; x < roi.width; x++) {
          let target = roi.minY * roiMap.width + x + roi.minX;
          if (internal.includes(data[target])) {
            let id = data[target + roiMap.width];
            if (!internal.includes(id) && !roi.boxIDs.includes(id)) {
              internal.push(id);
            }
          }
        }
      }
      let array = new Array(4);
      for (let x = 1; x < roi.width - 1; x++) {
        for (let y = 1; y < roi.height - 1; y++) {
          let target = (y + roi.minY) * roiMap.width + x + roi.minX;
          if (internal.includes(data[target])) {
            array[0] = data[target - 1];
            array[1] = data[target + 1];
            array[2] = data[target - roiMap.width];
            array[3] = data[target + roiMap.width];
            for (let i = 0; i < 4; i++) {
              let id = array[i];
              if (!internal.includes(id) && !roi.boxIDs.includes(id)) {
                internal.push(id);
              }
            }
          }
        }
      }
      return internal;
    }
  }
});

// node_modules/image-js/lib/image/roi/RoiLayer.js
var require_RoiLayer = __commonJS({
  "node_modules/image-js/lib/image/roi/RoiLayer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _Roi = _interopRequireDefault(require_Roi());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var RoiLayer = class {
      constructor(roiMap, options) {
        this.roiMap = roiMap;
        this.options = options;
        this.roi = this.createRoi();
      }
      /**
       * Roi are created from a roiMap
       * The roiMap contains mainty an array of identifiers that define
       * for each data to which Roi it belongs
       * @memberof RoiManager
       * @instance
       * @return {Roi[]}
       */
      createRoi() {
        let data = this.roiMap.data;
        let mapIDs = {};
        this.roiMap.positive = 0;
        this.roiMap.negative = 0;
        for (let i = 0; i < data.length; i++) {
          if (data[i] && !mapIDs[data[i]]) {
            mapIDs[data[i]] = true;
            if (data[i] > 0) {
              this.roiMap.positive++;
            } else {
              this.roiMap.negative++;
            }
          }
        }
        let rois = {};
        for (let mapID in mapIDs) {
          rois[mapID] = new _Roi.default(this.roiMap, mapID * 1);
        }
        let width = this.roiMap.width;
        let height = this.roiMap.height;
        for (let y = 0; y < height; y++) {
          for (let x = 0; x < width; x++) {
            let target = y * width + x;
            if (data[target] !== 0) {
              const mapID = data[target];
              const roi = rois[mapID];
              if (x < roi.minX) {
                roi.minX = x;
              }
              if (x > roi.maxX) {
                roi.maxX = x;
              }
              if (y < roi.minY) {
                roi.minY = y;
              }
              if (y > roi.maxY) {
                roi.maxY = y;
              }
              roi.meanX += x;
              roi.meanY += y;
              roi.surface++;
            }
          }
        }
        let roiArray = [];
        for (let mapID in mapIDs) {
          rois[mapID].meanX /= rois[mapID].surface;
          rois[mapID].meanY /= rois[mapID].surface;
          roiArray.push(rois[mapID]);
        }
        return roiArray;
      }
    };
    exports2.default = RoiLayer;
  }
});

// node_modules/image-js/lib/image/roi/util/commonBorderLength.js
var require_commonBorderLength = __commonJS({
  "node_modules/image-js/lib/image/roi/util/commonBorderLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = commonBorderLength;
    function commonBorderLength(roiMap) {
      let data = roiMap.data;
      let dx = [1, 0, -1, 0];
      let dy = [0, 1, 0, -1];
      let minMax = roiMap.minMax;
      let shift = -minMax.min;
      let max = minMax.max + shift;
      let borderInfo = [];
      for (let i = 0; i <= max; i++) {
        borderInfo.push(/* @__PURE__ */ Object.create(null));
      }
      for (let x = 0; x < roiMap.width; x++) {
        for (let y = 0; y < roiMap.height; y++) {
          let target = x + y * roiMap.width;
          let currentRoiID = data[target];
          if (currentRoiID !== 0) {
            let used = /* @__PURE__ */ Object.create(null);
            let isBorder = false;
            for (let dir = 0; dir < 4; dir++) {
              let newX = x + dx[dir];
              let newY = y + dy[dir];
              if (newX >= 0 && newY >= 0 && newX < roiMap.width && newY < roiMap.height) {
                let neighbourRoiID = data[newX + newY * roiMap.width];
                if (currentRoiID !== neighbourRoiID) {
                  isBorder = true;
                  if (neighbourRoiID !== 0 && used[neighbourRoiID] === void 0) {
                    used[neighbourRoiID] = true;
                    if (!borderInfo[neighbourRoiID + shift][currentRoiID]) {
                      borderInfo[neighbourRoiID + shift][currentRoiID] = 1;
                    } else {
                      borderInfo[neighbourRoiID + shift][currentRoiID]++;
                    }
                  }
                }
              } else {
                isBorder = true;
              }
            }
            if (isBorder) {
              if (!borderInfo[currentRoiID + shift][currentRoiID]) {
                borderInfo[currentRoiID + shift][currentRoiID] = 1;
              } else {
                borderInfo[currentRoiID + shift][currentRoiID]++;
              }
            }
          }
        }
      }
      let result = {};
      for (let i = 0; i < borderInfo.length; i++) {
        if (Object.keys(borderInfo[i]).length > 0) {
          result[i - shift] = borderInfo[i];
        }
      }
      return result;
    }
  }
});

// node_modules/image-js/lib/image/roi/util/mergeRoi.js
var require_mergeRoi = __commonJS({
  "node_modules/image-js/lib/image/roi/util/mergeRoi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = mergeRoi;
    function mergeRoi(options = {}) {
      const {
        algorithm = "commonBorderLength",
        minCommonBorderLength = 5,
        maxCommonBorderLength = 100,
        minCommonBorderRatio = 0.3,
        maxCommonBorderRatio = 1
      } = options;
      let checkFunction = function(currentInfo, currentID, neighbourID) {
        return currentInfo[neighbourID] >= minCommonBorderLength && currentInfo[neighbourID] <= maxCommonBorderLength;
      };
      if (typeof algorithm === "function") {
        checkFunction = algorithm;
      }
      if (algorithm.toLowerCase() === "commonborderratio") {
        checkFunction = function(currentInfo, currentID, neighbourID) {
          let ratio = Math.min(currentInfo[neighbourID] / currentInfo[currentID], 1);
          return ratio >= minCommonBorderRatio && ratio <= maxCommonBorderRatio;
        };
      }
      const roiMap = this;
      const borderLengths = roiMap.commonBorderLength;
      let newMap = {};
      let oldToNew = {};
      for (let currentID of Object.keys(borderLengths)) {
        let currentInfo = borderLengths[currentID];
        let neighbourIDs = Object.keys(currentInfo);
        for (let neighbourID of neighbourIDs) {
          if (neighbourID !== currentID) {
            if (checkFunction(currentInfo, currentID, neighbourID)) {
              let newNeighbourID = neighbourID;
              if (oldToNew[neighbourID])
                newNeighbourID = oldToNew[neighbourID];
              let newCurrentID = currentID;
              if (oldToNew[currentID])
                newCurrentID = oldToNew[currentID];
              if (Number(newNeighbourID) !== newCurrentID) {
                let smallerID = Math.min(newNeighbourID, newCurrentID);
                let largerID = Math.max(newNeighbourID, newCurrentID);
                if (!newMap[smallerID]) {
                  newMap[smallerID] = {};
                }
                newMap[smallerID][largerID] = true;
                oldToNew[largerID] = smallerID;
                if (newMap[largerID]) {
                  for (let id of Object.keys(newMap[largerID])) {
                    newMap[smallerID][id] = true;
                    oldToNew[id] = smallerID;
                  }
                  delete newMap[largerID];
                }
              }
            }
          }
        }
      }
      let minMax = roiMap.minMax;
      let shift = -minMax.min;
      let max = minMax.max + shift;
      let oldToNewArray = new Array(max + 1).fill(0);
      for (let key of Object.keys(oldToNew)) {
        oldToNewArray[Number(key) + shift] = oldToNew[key];
      }
      let data = roiMap.data;
      for (let i = 0; i < data.length; i++) {
        let currentValue = data[i];
        if (currentValue !== 0) {
          let newValue = oldToNewArray[currentValue + shift];
          if (newValue !== 0) {
            data[i] = newValue;
          }
        }
      }
      roiMap.computed = {};
      return roiMap;
    }
  }
});

// node_modules/image-js/lib/image/roi/RoiMap.js
var require_RoiMap = __commonJS({
  "node_modules/image-js/lib/image/roi/RoiMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _commonBorderLength = _interopRequireDefault(require_commonBorderLength());
    var _mergeRoi = _interopRequireDefault(require_mergeRoi());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var RoiMap = class {
      constructor(parent, data) {
        this.parent = parent;
        this.width = parent.width;
        this.height = parent.height;
        this.data = data;
        this.negative = 0;
        this.positive = 0;
      }
      get total() {
        return this.negative + this.positive;
      }
      get minMax() {
        let min = Number.MAX_SAFE_INTEGER;
        let max = Number.MIN_SAFE_INTEGER;
        for (let i = 0; i < this.data.length; i++) {
          if (this.data[i] < min)
            min = this.data[i];
          if (this.data[i] > max)
            max = this.data[i];
        }
        return {
          min,
          max
        };
      }
      get commonBorderLength() {
        return (0, _commonBorderLength.default)(this);
      }
      mergeRoi(options = {}) {
        return _mergeRoi.default.call(this, options);
      }
      mergeRois(rois) {
        const first = rois[0];
        const others = rois.slice(1);
        for (let i = 0; i < this.data.length; i++) {
          if (others.includes(this.data[i])) {
            this.data[i] = first;
          }
        }
      }
      rowsInfo() {
        let rowsInfo = new Array(this.height);
        let currentRow = 0;
        for (let i = 0; i < this.data.length; i += this.width) {
          let info = {
            row: currentRow,
            positivePixel: 0,
            negativePixel: 0,
            zeroPixel: 0,
            positiveRoi: 0,
            negativeRoi: 0,
            medianChange: 0
          };
          rowsInfo[currentRow++] = info;
          let positives = {};
          let negatives = {};
          let changes = [];
          let previous = this.data[i];
          let current = 0;
          for (let j = i; j < i + this.width; j++) {
            let value = this.data[j];
            if (previous !== value) {
              previous = value;
              changes.push(current);
              current = 0;
            }
            current++;
            if (value > 0) {
              info.positivePixel++;
              if (!positives[value]) {
                positives[value] = true;
              }
            } else if (value < 0) {
              info.negativePixel++;
              if (!negatives[value]) {
                negatives[value] = true;
              }
            } else {
              info.zeroPixel++;
            }
          }
          changes.push(current);
          info.medianChange = changes.sort((a, b) => a - b)[Math.floor(changes.length / 2)];
          info.positiveRoiIDs = Object.keys(positives);
          info.negativeRoiIDs = Object.keys(negatives);
          info.positiveRoi = info.positiveRoiIDs.length;
          info.negativeRoi = info.negativeRoiIDs.length;
        }
        return rowsInfo;
      }
      colsInfo() {
        let colsInfo = new Array(this.width);
        let currentCol = 0;
        for (let i = 0; i < this.width; i++) {
          let info = {
            col: currentCol,
            positivePixel: 0,
            negativePixel: 0,
            zeroPixel: 0,
            positiveRoi: 0,
            negativeRoi: 0,
            medianChange: 0
          };
          colsInfo[currentCol++] = info;
          let positives = {};
          let negatives = {};
          let changes = [];
          let previous = this.data[i];
          let current = 0;
          for (let j = i; j < i + this.data.length; j += this.width) {
            let value = this.data[j];
            if (previous !== value) {
              previous = value;
              changes.push(current);
              current = 0;
            }
            current++;
            if (value > 0) {
              info.positivePixel++;
              if (!positives[value]) {
                positives[value] = true;
              }
            } else if (value < 0) {
              info.negativePixel++;
              if (!negatives[value]) {
                negatives[value] = true;
              }
            } else {
              info.zeroPixel++;
            }
          }
          changes.push(current);
          info.medianChange = changes.sort((a, b) => a - b)[Math.floor(changes.length / 2)];
          info.positiveRoiIDs = Object.keys(positives);
          info.negativeRoiIDs = Object.keys(negatives);
          info.positiveRoi = info.positiveRoiIDs.length;
          info.negativeRoi = info.negativeRoiIDs.length;
        }
        return colsInfo;
      }
    };
    exports2.default = RoiMap;
  }
});

// node_modules/image-js/lib/image/roi/creator/fromMask.js
var require_fromMask = __commonJS({
  "node_modules/image-js/lib/image/roi/creator/fromMask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromMask;
    var _RoiMap = _interopRequireDefault(require_RoiMap());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function fromMask(mask, options = {}) {
      const {
        allowCorners = false
      } = options;
      const MAX_ARRAY = 65535;
      let data = new Int16Array(mask.size);
      let positiveID = 0;
      let negativeID = 0;
      let xToProcess = new Uint16Array(MAX_ARRAY + 1);
      let yToProcess = new Uint16Array(MAX_ARRAY + 1);
      for (let x = 0; x < mask.width; x++) {
        for (let y = 0; y < mask.height; y++) {
          if (data[y * mask.width + x] === 0) {
            analyseSurface(x, y);
          }
        }
      }
      function analyseSurface(x, y) {
        let from = 0;
        let to = 0;
        let targetState = mask.getBitXY(x, y);
        let id = targetState ? ++positiveID : --negativeID;
        if (positiveID > 32767 || negativeID < -32768) {
          throw new Error("Too many regions of interest");
        }
        xToProcess[0] = x;
        yToProcess[0] = y;
        while (from <= to) {
          let currentX = xToProcess[from & MAX_ARRAY];
          let currentY = yToProcess[from & MAX_ARRAY];
          data[currentY * mask.width + currentX] = id;
          if (currentX > 0 && data[currentY * mask.width + currentX - 1] === 0 && mask.getBitXY(currentX - 1, currentY) === targetState) {
            to++;
            xToProcess[to & MAX_ARRAY] = currentX - 1;
            yToProcess[to & MAX_ARRAY] = currentY;
            data[currentY * mask.width + currentX - 1] = -32768;
          }
          if (currentY > 0 && data[(currentY - 1) * mask.width + currentX] === 0 && mask.getBitXY(currentX, currentY - 1) === targetState) {
            to++;
            xToProcess[to & MAX_ARRAY] = currentX;
            yToProcess[to & MAX_ARRAY] = currentY - 1;
            data[(currentY - 1) * mask.width + currentX] = -32768;
          }
          if (currentX < mask.width - 1 && data[currentY * mask.width + currentX + 1] === 0 && mask.getBitXY(currentX + 1, currentY) === targetState) {
            to++;
            xToProcess[to & MAX_ARRAY] = currentX + 1;
            yToProcess[to & MAX_ARRAY] = currentY;
            data[currentY * mask.width + currentX + 1] = -32768;
          }
          if (currentY < mask.height - 1 && data[(currentY + 1) * mask.width + currentX] === 0 && mask.getBitXY(currentX, currentY + 1) === targetState) {
            to++;
            xToProcess[to & MAX_ARRAY] = currentX;
            yToProcess[to & MAX_ARRAY] = currentY + 1;
            data[(currentY + 1) * mask.width + currentX] = -32768;
          }
          if (allowCorners) {
            if (currentX > 0 && currentY > 0 && data[(currentY - 1) * mask.width + currentX - 1] === 0 && mask.getBitXY(currentX - 1, currentY - 1) === targetState) {
              to++;
              xToProcess[to & MAX_ARRAY] = currentX - 1;
              yToProcess[to & MAX_ARRAY] = currentY - 1;
              data[(currentY - 1) * mask.width + currentX - 1] = -32768;
            }
            if (currentX < mask.width - 1 && currentY > 0 && data[(currentY - 1) * mask.width + currentX + 1] === 0 && mask.getBitXY(currentX + 1, currentY - 1) === targetState) {
              to++;
              xToProcess[to & MAX_ARRAY] = currentX + 1;
              yToProcess[to & MAX_ARRAY] = currentY - 1;
              data[(currentY - 1) * mask.width + currentX + 1] = -32768;
            }
            if (currentX > 0 && currentY < mask.height - 1 && data[(currentY + 1) * mask.width + currentX - 1] === 0 && mask.getBitXY(currentX - 1, currentY + 1) === targetState) {
              to++;
              xToProcess[to & MAX_ARRAY] = currentX - 1;
              yToProcess[to & MAX_ARRAY] = currentY + 1;
              data[(currentY + 1) * mask.width + currentX - 1] = -32768;
            }
            if (currentX < mask.width - 1 && currentY < mask.height - 1 && data[(currentY + 1) * mask.width + currentX + 1] === 0 && mask.getBitXY(currentX + 1, currentY + 1) === targetState) {
              to++;
              xToProcess[to & MAX_ARRAY] = currentX + 1;
              yToProcess[to & MAX_ARRAY] = currentY + 1;
              data[(currentY + 1) * mask.width + currentX + 1] = -32768;
            }
          }
          from++;
          if (to - from > MAX_ARRAY) {
            throw new Error("analyseMask can not finish, the array to manage internal data is not big enough.You could improve mask by changing MAX_ARRAY");
          }
        }
      }
      return new _RoiMap.default(mask, data);
    }
  }
});

// node_modules/ml-disjoint-set/src/DisjointSet.js
var require_DisjointSet = __commonJS({
  "node_modules/ml-disjoint-set/src/DisjointSet.js"(exports2, module2) {
    "use strict";
    var DisjointSet = class {
      constructor() {
        this.nodes = /* @__PURE__ */ new Map();
      }
      /**
       * Adds an element as a new set
       * @param {*} value
       * @return {DisjointSetNode} Object holding the element
       */
      add(value) {
        var node = this.nodes.get(value);
        if (!node) {
          node = new DisjointSetNode(value);
          this.nodes.set(value, node);
        }
        return node;
      }
      /**
       * Merges the sets that contain x and y
       * @param {DisjointSetNode} x
       * @param {DisjointSetNode} y
       */
      union(x, y) {
        const rootX = this.find(x);
        const rootY = this.find(y);
        if (rootX === rootY) {
          return;
        }
        if (rootX.rank < rootY.rank) {
          rootX.parent = rootY;
        } else if (rootX.rank > rootY.rank) {
          rootY.parent = rootX;
        } else {
          rootY.parent = rootX;
          rootX.rank++;
        }
      }
      /**
       * Finds and returns the root node of the set that contains node
       * @param {DisjointSetNode} node
       * @return {DisjointSetNode}
       */
      find(node) {
        var rootX = node;
        while (rootX.parent !== null) {
          rootX = rootX.parent;
        }
        var toUpdateX = node;
        while (toUpdateX.parent !== null) {
          var toUpdateParent = toUpdateX;
          toUpdateX = toUpdateX.parent;
          toUpdateParent.parent = rootX;
        }
        return rootX;
      }
      /**
       * Returns true if x and y belong to the same set
       * @param {DisjointSetNode} x
       * @param {DisjointSetNode} y
       */
      connected(x, y) {
        return this.find(x) === this.find(y);
      }
    };
    module2.exports = DisjointSet;
    function DisjointSetNode(value) {
      this.value = value;
      this.parent = null;
      this.rank = 0;
    }
  }
});

// node_modules/image-js/lib/image/roi/creator/fromMaskConnectedComponentLabelingAlgorithm.js
var require_fromMaskConnectedComponentLabelingAlgorithm = __commonJS({
  "node_modules/image-js/lib/image/roi/creator/fromMaskConnectedComponentLabelingAlgorithm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromMaskConnectedComponentLabelingAlgorithm;
    var _mlDisjointSet = _interopRequireDefault(require_DisjointSet());
    var _RoiMap = _interopRequireDefault(require_RoiMap());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var direction4X = [-1, 0];
    var direction4Y = [0, -1];
    var neighbours4 = [null, null];
    var direction8X = [-1, -1, 0, 1];
    var direction8Y = [0, -1, -1, -1];
    var neighbours8 = [null, null, null, null];
    function fromMaskConnectedComponentLabelingAlgorithm(mask, options = {}) {
      const {
        allowCorners = false
      } = options;
      let neighbours = 4;
      if (allowCorners) {
        neighbours = 8;
      }
      let directionX;
      let directionY;
      let neighboursList;
      if (neighbours === 8) {
        directionX = direction8X;
        directionY = direction8Y;
        neighboursList = neighbours8;
      } else if (neighbours === 4) {
        directionX = direction4X;
        directionY = direction4Y;
        neighboursList = neighbours4;
      } else {
        throw new RangeError(`unsupported neighbours count: ${neighbours}`);
      }
      const size = mask.size;
      const width = mask.width;
      const height = mask.height;
      const labels = new Array(size);
      const data = new Uint32Array(size);
      const linked = new _mlDisjointSet.default();
      let currentLabel = 1;
      for (let j = 0; j < height; j++) {
        for (let i = 0; i < width; i++) {
          const index = i + j * width;
          if (mask.getBit(index)) {
            let smallestNeighbour = null;
            for (let k = 0; k < neighboursList.length; k++) {
              const ii = i + directionX[k];
              const jj = j + directionY[k];
              if (ii >= 0 && jj >= 0 && ii < width && jj < height) {
                const index2 = ii + jj * width;
                let neighbour = labels[index2];
                if (!neighbour) {
                  neighboursList[k] = null;
                } else {
                  neighboursList[k] = neighbour;
                  if (!smallestNeighbour || neighboursList[k].value < smallestNeighbour.value) {
                    smallestNeighbour = neighboursList[k];
                  }
                }
              }
            }
            if (!smallestNeighbour) {
              labels[index] = linked.add(currentLabel++);
            } else {
              labels[index] = smallestNeighbour;
              for (let k = 0; k < neighboursList.length; k++) {
                if (neighboursList[k] && neighboursList[k] !== smallestNeighbour) {
                  linked.union(smallestNeighbour, neighboursList[k]);
                }
              }
            }
          }
        }
      }
      for (let j = 0; j < height; j++) {
        for (let i = 0; i < width; i++) {
          const index = i + j * width;
          if (mask.getBit(index)) {
            data[index] = linked.find(labels[index]).value;
          }
        }
      }
      return new _RoiMap.default(mask, data);
    }
  }
});

// node_modules/image-js/lib/image/roi/creator/fromMaxima.js
var require_fromMaxima = __commonJS({
  "node_modules/image-js/lib/image/roi/creator/fromMaxima.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromMaxima;
    var _RoiMap = _interopRequireDefault(require_RoiMap());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function fromMaxima(options = {}) {
      let {
        allowCorner = true,
        onlyTop = false,
        invert = false
      } = options;
      let image = this;
      image.checkProcessable("fromMaxima", {
        components: [1]
      });
      const PROCESS_TOP = 1;
      const PROCESS_NORMAL = 2;
      let positiveID = 0;
      let negativeID = 0;
      let data = new Int16Array(image.size);
      let processed = new Int8Array(image.size);
      let variations = new Float32Array(image.size);
      let MAX_ARRAY = 1048575;
      let xToProcess = new Uint16Array(MAX_ARRAY + 1);
      let yToProcess = new Uint16Array(MAX_ARRAY + 1);
      let from = 0;
      let to = 0;
      let xToProcessTop = new Uint16Array(MAX_ARRAY + 1);
      let yToProcessTop = new Uint16Array(MAX_ARRAY + 1);
      let fromTop = 0;
      let toTop = 0;
      appendMaxima(image, {
        maxima: !invert
      });
      while (from < to) {
        let currentX = xToProcess[from & MAX_ARRAY];
        let currentY = yToProcess[from & MAX_ARRAY];
        process2(currentX, currentY, PROCESS_NORMAL);
        from++;
      }
      return new _RoiMap.default(image, data);
      function appendMaxima({
        maxima = true
      }) {
        for (let y = 1; y < image.height - 1; y++) {
          for (let x = 1; x < image.width - 1; x++) {
            let index = x + y * image.width;
            if (processed[index] === 0) {
              let currentValue = maxima ? image.data[index] : -image.data[x + y * image.width];
              if (image.data[y * image.width + x - 1] > currentValue) {
                continue;
              }
              if (image.data[y * image.width + x + 1] > currentValue) {
                continue;
              }
              if (image.data[(y - 1) * image.width + x] > currentValue) {
                continue;
              }
              if (image.data[(y + 1) * image.width + x] > currentValue) {
                continue;
              }
              if (allowCorner) {
                if (image.data[(y - 1) * image.width + x - 1] > currentValue) {
                  continue;
                }
                if (image.data[(y - 1) * image.width + x + 1] > currentValue) {
                  continue;
                }
                if (image.data[(y + 1) * image.width + x - 1] > currentValue) {
                  continue;
                }
                if (image.data[(y + 1) * image.width + x + 1] > currentValue) {
                  continue;
                }
              }
              data[index] = maxima ? ++positiveID : --negativeID;
              let valid = processTop(x, y, PROCESS_TOP);
              if (!valid) {
                if (maxima) {
                  --positiveID;
                } else {
                  ++negativeID;
                }
              }
            }
          }
        }
      }
      function processTop(xToProcess2, yToProcess2) {
        let currentTo = to;
        fromTop = 0;
        toTop = 1;
        xToProcessTop[0] = xToProcess2;
        yToProcessTop[0] = yToProcess2;
        let valid = true;
        while (fromTop < toTop) {
          let currentX = xToProcessTop[fromTop & MAX_ARRAY];
          let currentY = yToProcessTop[fromTop & MAX_ARRAY];
          valid &= process2(currentX, currentY, PROCESS_TOP);
          fromTop++;
        }
        if (!valid) {
          for (let i = 0; i < toTop; i++) {
            let currentX = xToProcessTop[i & MAX_ARRAY];
            let currentY = yToProcessTop[i & MAX_ARRAY];
            let index = currentY * image.width + currentX;
            data[index] = 0;
          }
          to = currentTo;
        }
        return valid;
      }
      function process2(xCenter, yCenter, type) {
        let currentID = data[yCenter * image.width + xCenter];
        let currentValue = image.data[yCenter * image.width + xCenter];
        for (let y = yCenter - 1; y <= yCenter + 1; y++) {
          for (let x = xCenter - 1; x <= xCenter + 1; x++) {
            let index = y * image.width + x;
            if (processed[index] === 0) {
              processed[index] = 1;
              variations[index] = image.data[index] - currentValue;
              switch (type) {
                case PROCESS_TOP:
                  if (variations[index] === 0) {
                    if (x === 0 || y === 0 || x === image.width - 1 || y === image.height - 1) {
                      return false;
                    }
                    data[index] = currentID;
                    xToProcessTop[toTop & MAX_ARRAY] = x;
                    yToProcessTop[toTop & MAX_ARRAY] = y;
                    toTop++;
                  } else if (variations[index] > 0) {
                    return false;
                  } else {
                    if (!onlyTop) {
                      data[index] = currentID;
                      xToProcess[to & MAX_ARRAY] = x;
                      yToProcess[to & MAX_ARRAY] = y;
                      to++;
                    }
                  }
                  break;
                case PROCESS_NORMAL:
                  if (variations[index] <= 0) {
                    data[index] = currentID;
                    xToProcess[to & MAX_ARRAY] = x;
                    yToProcess[to & MAX_ARRAY] = y;
                    to++;
                  }
                  break;
                default:
                  throw new Error("unreachable");
              }
            }
          }
        }
        return true;
      }
    }
  }
});

// node_modules/image-js/lib/image/roi/creator/fromPoints.js
var require_fromPoints = __commonJS({
  "node_modules/image-js/lib/image/roi/creator/fromPoints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromPoints;
    var _Shape = _interopRequireDefault(require_Shape());
    var _RoiMap = _interopRequireDefault(require_RoiMap());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function fromPoints(pointsToPaint, options = {}) {
      let shape = new _Shape.default(options);
      let data = new Int16Array(this.size);
      let positiveID = 0;
      let shapePoints = shape.getPoints();
      for (let i = 0; i < pointsToPaint.length; i++) {
        positiveID++;
        let xP = pointsToPaint[i][0];
        let yP = pointsToPaint[i][1];
        for (let j = 0; j < shapePoints.length; j++) {
          let xS = shapePoints[j][0];
          let yS = shapePoints[j][1];
          if (xP + xS >= 0 && yP + yS >= 0 && xP + xS < this.width && yP + yS < this.height) {
            data[xP + xS + (yP + yS) * this.width] = positiveID;
          }
        }
      }
      return new _RoiMap.default(this, data);
    }
  }
});

// node_modules/js-priority-queue/priority-queue.js
var require_priority_queue = __commonJS({
  "node_modules/js-priority-queue/priority-queue.js"(exports2, module2) {
    (function(f) {
      if (typeof exports2 === "object" && typeof module2 !== "undefined") {
        module2.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.PriorityQueue = f();
      }
    })(function() {
      var define2, module3, exports3;
      return function e(t, n, r) {
        function s(o2, u) {
          if (!n[o2]) {
            if (!t[o2]) {
              var a = typeof require == "function" && require;
              if (!u && a)
                return a(o2, true);
              if (i)
                return i(o2, true);
              var f = new Error("Cannot find module '" + o2 + "'");
              throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o2] = { exports: {} };
            t[o2][0].call(l.exports, function(e2) {
              var n2 = t[o2][1][e2];
              return s(n2 ? n2 : e2);
            }, l, l.exports, e, t, n, r);
          }
          return n[o2].exports;
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s;
      }({ 1: [function(_dereq_, module4, exports4) {
        var AbstractPriorityQueue, ArrayStrategy, BHeapStrategy, BinaryHeapStrategy, PriorityQueue, extend = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        AbstractPriorityQueue = _dereq_("./PriorityQueue/AbstractPriorityQueue");
        ArrayStrategy = _dereq_("./PriorityQueue/ArrayStrategy");
        BinaryHeapStrategy = _dereq_("./PriorityQueue/BinaryHeapStrategy");
        BHeapStrategy = _dereq_("./PriorityQueue/BHeapStrategy");
        PriorityQueue = function(superClass) {
          extend(PriorityQueue2, superClass);
          function PriorityQueue2(options) {
            options || (options = {});
            options.strategy || (options.strategy = BinaryHeapStrategy);
            options.comparator || (options.comparator = function(a, b) {
              return (a || 0) - (b || 0);
            });
            PriorityQueue2.__super__.constructor.call(this, options);
          }
          return PriorityQueue2;
        }(AbstractPriorityQueue);
        PriorityQueue.ArrayStrategy = ArrayStrategy;
        PriorityQueue.BinaryHeapStrategy = BinaryHeapStrategy;
        PriorityQueue.BHeapStrategy = BHeapStrategy;
        module4.exports = PriorityQueue;
      }, { "./PriorityQueue/AbstractPriorityQueue": 2, "./PriorityQueue/ArrayStrategy": 3, "./PriorityQueue/BHeapStrategy": 4, "./PriorityQueue/BinaryHeapStrategy": 5 }], 2: [function(_dereq_, module4, exports4) {
        var AbstractPriorityQueue;
        module4.exports = AbstractPriorityQueue = function() {
          function AbstractPriorityQueue2(options) {
            var ref;
            if ((options != null ? options.strategy : void 0) == null) {
              throw "Must pass options.strategy, a strategy";
            }
            if ((options != null ? options.comparator : void 0) == null) {
              throw "Must pass options.comparator, a comparator";
            }
            this.priv = new options.strategy(options);
            this.length = (options != null ? (ref = options.initialValues) != null ? ref.length : void 0 : void 0) || 0;
          }
          AbstractPriorityQueue2.prototype.queue = function(value) {
            this.length++;
            this.priv.queue(value);
            return void 0;
          };
          AbstractPriorityQueue2.prototype.dequeue = function(value) {
            if (!this.length) {
              throw "Empty queue";
            }
            this.length--;
            return this.priv.dequeue();
          };
          AbstractPriorityQueue2.prototype.peek = function(value) {
            if (!this.length) {
              throw "Empty queue";
            }
            return this.priv.peek();
          };
          AbstractPriorityQueue2.prototype.clear = function() {
            this.length = 0;
            return this.priv.clear();
          };
          return AbstractPriorityQueue2;
        }();
      }, {}], 3: [function(_dereq_, module4, exports4) {
        var ArrayStrategy, binarySearchForIndexReversed;
        binarySearchForIndexReversed = function(array, value, comparator) {
          var high, low, mid;
          low = 0;
          high = array.length;
          while (low < high) {
            mid = low + high >>> 1;
            if (comparator(array[mid], value) >= 0) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return low;
        };
        module4.exports = ArrayStrategy = function() {
          function ArrayStrategy2(options) {
            var ref;
            this.options = options;
            this.comparator = this.options.comparator;
            this.data = ((ref = this.options.initialValues) != null ? ref.slice(0) : void 0) || [];
            this.data.sort(this.comparator).reverse();
          }
          ArrayStrategy2.prototype.queue = function(value) {
            var pos;
            pos = binarySearchForIndexReversed(this.data, value, this.comparator);
            this.data.splice(pos, 0, value);
            return void 0;
          };
          ArrayStrategy2.prototype.dequeue = function() {
            return this.data.pop();
          };
          ArrayStrategy2.prototype.peek = function() {
            return this.data[this.data.length - 1];
          };
          ArrayStrategy2.prototype.clear = function() {
            this.data.length = 0;
            return void 0;
          };
          return ArrayStrategy2;
        }();
      }, {}], 4: [function(_dereq_, module4, exports4) {
        var BHeapStrategy;
        module4.exports = BHeapStrategy = function() {
          function BHeapStrategy2(options) {
            var arr, i, j, k, len, ref, ref1, shift, value;
            this.comparator = (options != null ? options.comparator : void 0) || function(a, b) {
              return a - b;
            };
            this.pageSize = (options != null ? options.pageSize : void 0) || 512;
            this.length = 0;
            shift = 0;
            while (1 << shift < this.pageSize) {
              shift += 1;
            }
            if (1 << shift !== this.pageSize) {
              throw "pageSize must be a power of two";
            }
            this._shift = shift;
            this._emptyMemoryPageTemplate = arr = [];
            for (i = j = 0, ref = this.pageSize; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              arr.push(null);
            }
            this._memory = [];
            this._mask = this.pageSize - 1;
            if (options.initialValues) {
              ref1 = options.initialValues;
              for (k = 0, len = ref1.length; k < len; k++) {
                value = ref1[k];
                this.queue(value);
              }
            }
          }
          BHeapStrategy2.prototype.queue = function(value) {
            this.length += 1;
            this._write(this.length, value);
            this._bubbleUp(this.length, value);
            return void 0;
          };
          BHeapStrategy2.prototype.dequeue = function() {
            var ret, val;
            ret = this._read(1);
            val = this._read(this.length);
            this.length -= 1;
            if (this.length > 0) {
              this._write(1, val);
              this._bubbleDown(1, val);
            }
            return ret;
          };
          BHeapStrategy2.prototype.peek = function() {
            return this._read(1);
          };
          BHeapStrategy2.prototype.clear = function() {
            this.length = 0;
            this._memory.length = 0;
            return void 0;
          };
          BHeapStrategy2.prototype._write = function(index, value) {
            var page;
            page = index >> this._shift;
            while (page >= this._memory.length) {
              this._memory.push(this._emptyMemoryPageTemplate.slice(0));
            }
            return this._memory[page][index & this._mask] = value;
          };
          BHeapStrategy2.prototype._read = function(index) {
            return this._memory[index >> this._shift][index & this._mask];
          };
          BHeapStrategy2.prototype._bubbleUp = function(index, value) {
            var compare, indexInPage, parentIndex, parentValue;
            compare = this.comparator;
            while (index > 1) {
              indexInPage = index & this._mask;
              if (index < this.pageSize || indexInPage > 3) {
                parentIndex = index & ~this._mask | indexInPage >> 1;
              } else if (indexInPage < 2) {
                parentIndex = index - this.pageSize >> this._shift;
                parentIndex += parentIndex & ~(this._mask >> 1);
                parentIndex |= this.pageSize >> 1;
              } else {
                parentIndex = index - 2;
              }
              parentValue = this._read(parentIndex);
              if (compare(parentValue, value) < 0) {
                break;
              }
              this._write(parentIndex, value);
              this._write(index, parentValue);
              index = parentIndex;
            }
            return void 0;
          };
          BHeapStrategy2.prototype._bubbleDown = function(index, value) {
            var childIndex1, childIndex2, childValue1, childValue2, compare;
            compare = this.comparator;
            while (index < this.length) {
              if (index > this._mask && !(index & this._mask - 1)) {
                childIndex1 = childIndex2 = index + 2;
              } else if (index & this.pageSize >> 1) {
                childIndex1 = (index & ~this._mask) >> 1;
                childIndex1 |= index & this._mask >> 1;
                childIndex1 = childIndex1 + 1 << this._shift;
                childIndex2 = childIndex1 + 1;
              } else {
                childIndex1 = index + (index & this._mask);
                childIndex2 = childIndex1 + 1;
              }
              if (childIndex1 !== childIndex2 && childIndex2 <= this.length) {
                childValue1 = this._read(childIndex1);
                childValue2 = this._read(childIndex2);
                if (compare(childValue1, value) < 0 && compare(childValue1, childValue2) <= 0) {
                  this._write(childIndex1, value);
                  this._write(index, childValue1);
                  index = childIndex1;
                } else if (compare(childValue2, value) < 0) {
                  this._write(childIndex2, value);
                  this._write(index, childValue2);
                  index = childIndex2;
                } else {
                  break;
                }
              } else if (childIndex1 <= this.length) {
                childValue1 = this._read(childIndex1);
                if (compare(childValue1, value) < 0) {
                  this._write(childIndex1, value);
                  this._write(index, childValue1);
                  index = childIndex1;
                } else {
                  break;
                }
              } else {
                break;
              }
            }
            return void 0;
          };
          return BHeapStrategy2;
        }();
      }, {}], 5: [function(_dereq_, module4, exports4) {
        var BinaryHeapStrategy;
        module4.exports = BinaryHeapStrategy = function() {
          function BinaryHeapStrategy2(options) {
            var ref;
            this.comparator = (options != null ? options.comparator : void 0) || function(a, b) {
              return a - b;
            };
            this.length = 0;
            this.data = ((ref = options.initialValues) != null ? ref.slice(0) : void 0) || [];
            this._heapify();
          }
          BinaryHeapStrategy2.prototype._heapify = function() {
            var i, j, ref;
            if (this.data.length > 0) {
              for (i = j = 1, ref = this.data.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
                this._bubbleUp(i);
              }
            }
            return void 0;
          };
          BinaryHeapStrategy2.prototype.queue = function(value) {
            this.data.push(value);
            this._bubbleUp(this.data.length - 1);
            return void 0;
          };
          BinaryHeapStrategy2.prototype.dequeue = function() {
            var last, ret;
            ret = this.data[0];
            last = this.data.pop();
            if (this.data.length > 0) {
              this.data[0] = last;
              this._bubbleDown(0);
            }
            return ret;
          };
          BinaryHeapStrategy2.prototype.peek = function() {
            return this.data[0];
          };
          BinaryHeapStrategy2.prototype.clear = function() {
            this.length = 0;
            this.data.length = 0;
            return void 0;
          };
          BinaryHeapStrategy2.prototype._bubbleUp = function(pos) {
            var parent, x;
            while (pos > 0) {
              parent = pos - 1 >>> 1;
              if (this.comparator(this.data[pos], this.data[parent]) < 0) {
                x = this.data[parent];
                this.data[parent] = this.data[pos];
                this.data[pos] = x;
                pos = parent;
              } else {
                break;
              }
            }
            return void 0;
          };
          BinaryHeapStrategy2.prototype._bubbleDown = function(pos) {
            var last, left, minIndex, right, x;
            last = this.data.length - 1;
            while (true) {
              left = (pos << 1) + 1;
              right = left + 1;
              minIndex = pos;
              if (left <= last && this.comparator(this.data[left], this.data[minIndex]) < 0) {
                minIndex = left;
              }
              if (right <= last && this.comparator(this.data[right], this.data[minIndex]) < 0) {
                minIndex = right;
              }
              if (minIndex !== pos) {
                x = this.data[minIndex];
                this.data[minIndex] = this.data[pos];
                this.data[pos] = x;
                pos = minIndex;
              } else {
                break;
              }
            }
            return void 0;
          };
          return BinaryHeapStrategy2;
        }();
      }, {}] }, {}, [1])(1);
    });
  }
});

// node_modules/image-js/lib/util/dxdy.js
var require_dxdy = __commonJS({
  "node_modules/image-js/lib/util/dxdy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.dys = exports2.dxs = void 0;
    var dxs = exports2.dxs = [1, 0, -1, 0, 1, 1, -1, -1];
    var dys = exports2.dys = [0, 1, 0, -1, 1, -1, 1, -1];
  }
});

// node_modules/image-js/lib/image/roi/creator/fromWaterShed.js
var require_fromWaterShed = __commonJS({
  "node_modules/image-js/lib/image/roi/creator/fromWaterShed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromWaterShed;
    var _jsPriorityQueue = _interopRequireDefault(require_priority_queue());
    var _dxdy = require_dxdy();
    var _RoiMap = _interopRequireDefault(require_RoiMap());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function fromWaterShed(options = {}) {
      let {
        points,
        mask,
        image,
        fillMaxValue = this.maxValue,
        invert = false
      } = options;
      let currentImage = image || this;
      currentImage.checkProcessable("fromWaterShed", {
        bitDepth: [8, 16],
        components: 1
      });
      invert = !invert;
      if (!points) {
        points = currentImage.getLocalMaxima({
          invert,
          mask
        });
      }
      let maskExpectedValue = invert ? 0 : 1;
      let data = new Int16Array(currentImage.size);
      let width = currentImage.width;
      let height = currentImage.height;
      let toProcess = new _jsPriorityQueue.default({
        comparator: (a, b) => a[2] - b[2],
        strategy: _jsPriorityQueue.default.BinaryHeapStrategy
      });
      for (let i = 0; i < points.length; i++) {
        let index = points[i][0] + points[i][1] * width;
        data[index] = i + 1;
        let intensity = currentImage.data[index];
        if (invert && intensity <= fillMaxValue || !invert && intensity >= fillMaxValue) {
          toProcess.queue([points[i][0], points[i][1], intensity]);
        }
      }
      while (toProcess.length > 0) {
        let currentPoint = toProcess.dequeue();
        let currentValueIndex = currentPoint[0] + currentPoint[1] * width;
        for (let dir = 0; dir < 4; dir++) {
          let newX = currentPoint[0] + _dxdy.dxs[dir];
          let newY = currentPoint[1] + _dxdy.dys[dir];
          if (newX >= 0 && newY >= 0 && newX < width && newY < height) {
            let currentNeighbourIndex = newX + newY * width;
            if (!mask || mask.getBit(currentNeighbourIndex) === maskExpectedValue) {
              let intensity = currentImage.data[currentNeighbourIndex];
              if (invert && intensity <= fillMaxValue || !invert && intensity >= fillMaxValue) {
                if (data[currentNeighbourIndex] === 0) {
                  data[currentNeighbourIndex] = data[currentValueIndex];
                  toProcess.queue([currentPoint[0] + _dxdy.dxs[dir], currentPoint[1] + _dxdy.dys[dir], intensity]);
                }
              }
            }
          }
        }
      }
      return new _RoiMap.default(currentImage, data);
    }
  }
});

// node_modules/image-js/lib/image/roi/manager.js
var require_manager = __commonJS({
  "node_modules/image-js/lib/image/roi/manager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _jsQuantities = _interopRequireDefault(require_quantities());
    var _deepValue = _interopRequireDefault(require_deepValue());
    var _Image = _interopRequireDefault(require_Image());
    var _RoiLayer = _interopRequireDefault(require_RoiLayer());
    var _RoiMap = _interopRequireDefault(require_RoiMap());
    var _fromMask = _interopRequireDefault(require_fromMask());
    var _fromMaskConnectedComponentLabelingAlgorithm = _interopRequireDefault(require_fromMaskConnectedComponentLabelingAlgorithm());
    var _fromMaxima = _interopRequireDefault(require_fromMaxima());
    var _fromPoints = _interopRequireDefault(require_fromPoints());
    var _fromWaterShed = _interopRequireDefault(require_fromWaterShed());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var RoiManager = class {
      constructor(image, options = {}) {
        this._image = image;
        this._options = options;
        if (!this._options.label) {
          this._options.label = "default";
        }
        this._layers = {};
        this._painted = null;
      }
      // docs is in the corresponding file
      fromMaxima(options = {}) {
        let opt = Object.assign({}, this._options, options);
        let roiMap = _fromMaxima.default.call(this._image, options);
        this._layers[opt.label] = new _RoiLayer.default(roiMap, opt);
      }
      // docs is in the corresponding file
      fromPoints(points, options = {}) {
        let opt = Object.assign({}, this._options, options);
        let roiMap = _fromPoints.default.call(this._image, points, options);
        this._layers[opt.label] = new _RoiLayer.default(roiMap, opt);
        return this;
      }
      /**
       * @param {number[]} map
       * @param {object} [options]
       * @return {this}
       */
      putMap(map, options = {}) {
        let roiMap = new _RoiMap.default(this._image, map);
        let opt = Object.assign({}, this._options, options);
        this._layers[opt.label] = new _RoiLayer.default(roiMap, opt);
        return this;
      }
      // docs is in the corresponding file
      fromWaterShed(options = {}) {
        let opt = Object.assign({}, this._options, options);
        let roiMap = _fromWaterShed.default.call(this._image, options);
        this._layers[opt.label] = new _RoiLayer.default(roiMap, opt);
      }
      // docs is in the corresponding file
      fromMask(mask, options = {}) {
        let opt = Object.assign({}, this._options, options);
        let roiMap = _fromMask.default.call(this._image, mask, options);
        this._layers[opt.label] = new _RoiLayer.default(roiMap, opt);
        return this;
      }
      fromMaskConnectedComponentLabelingAlgorithm(mask, options = {}) {
        let opt = Object.assign({}, this._options, options);
        let roiMap = _fromMaskConnectedComponentLabelingAlgorithm.default.call(this._image, mask, options);
        this._layers[opt.label] = new _RoiLayer.default(roiMap, opt);
        return this;
      }
      /**
       *
       * @param {object} [options]
       * @return {RoiMap}
       */
      getMap(options = {}) {
        let opt = Object.assign({}, this._options, options);
        this._assertLayerWithLabel(opt.label);
        return this._layers[opt.label].roiMap;
      }
      /**
       * Return statistics about rows
       * @param {object} [options]
       * @return {object[]}
       */
      rowsInfo(options = {}) {
        return this.getMap(options).rowsInfo();
      }
      /**
       * Return statistics about columns
       * @param {object} [options]
       * @return {object[]}
       */
      colsInfo(options = {}) {
        return this.getMap(options).rowsInfo();
      }
      /**
       * Return the IDs of the Regions Of Interest (Roi) as an array of number
       * @param {object} [options]
       * @return {number[]}
       */
      getRoiIds(options = {}) {
        let rois = this.getRois(options);
        if (rois) {
          let ids = new Array(rois.length);
          for (let i = 0; i < rois.length; i++) {
            ids[i] = rois[i].id;
          }
          return ids;
        }
        throw new Error("ROIs not found");
      }
      /**
       * Allows to select ROI based on size, label and sign.
       * @param {object} [options={}]
       * @param {string} [options.label='default'] Label of the layer containing the ROI
       * @param {boolean} [options.positive=true] Select the positive region of interest
       * @param {boolean} [options.negative=true] Select he negative region of interest
       * @param {number} [options.minSurface=0]
       * @param {number} [options.maxSurface=Number.POSITIVE_INFINITY]
       * @param {number} [options.minWidth=0]
       * @param {number} [options.minHeight=Number.POSITIVE_INFINITY]
       * @param {number} [options.maxWidth=0]
       * @param {number} [options.maxHeight=Number.POSITIVE_INFINITY]
       * @param {number} [options.minRatio=0] Ratio width / height
       * @param {number} [options.maxRatio=Number.POSITIVE_INFINITY]
       * @return {Roi[]}
       */
      getRois(options = {}) {
        let {
          label = this._options.label,
          positive = true,
          negative = true,
          minSurface = 0,
          maxSurface = Number.POSITIVE_INFINITY,
          minWidth = 0,
          maxWidth = Number.POSITIVE_INFINITY,
          minHeight = 0,
          maxHeight = Number.POSITIVE_INFINITY,
          minRatio = 0,
          maxRatio = Number.POSITIVE_INFINITY
        } = options;
        if (!this._layers[label]) {
          throw new Error(`this Roi layer (${label}) does not exist`);
        }
        const allRois = this._layers[label].roi;
        const rois = [];
        for (const roi of allRois) {
          if ((roi.id < 0 && negative || roi.id > 0 && positive) && roi.surface >= minSurface && roi.surface <= maxSurface && roi.width >= minWidth && roi.width <= maxWidth && roi.height >= minHeight && roi.height <= maxHeight && roi.ratio >= minRatio && roi.ratio <= maxRatio) {
            rois.push(roi);
          }
        }
        return rois;
      }
      /**
       * Get an ROI by its id.
       * @param {number} roiId
       * @param {object} [options={}]
       * @param {string} [options.label='default'] Label of the layer containing the ROI
       * @return {Roi}
       */
      getRoi(roiId, options = {}) {
        const {
          label = this._options.label
        } = options;
        if (!this._layers[label]) {
          throw new Error(`this Roi layer (${label}) does not exist`);
        }
        const roi = this._layers[label].roi.find((roi2) => roi2.id === roiId);
        if (!roi) {
          throw new Error(`found no Roi with id ${roiId}`);
        }
        return roi;
      }
      /**
       * Returns an array of masks
       * See {@link Roi.getMask} for the options
       * @param {object} [options]
       * @return {Image[]} Retuns an array of masks (1 bit Image)
       */
      getMasks(options = {}) {
        let rois = this.getRois(options);
        let masks = new Array(rois.length);
        for (let i = 0; i < rois.length; i++) {
          masks[i] = rois[i].getMask(options);
        }
        return masks;
      }
      /**
       * Returns an array of masks
       * See {@link Roi.getAnalysisMasks} for the options
       * @param {object} [options]
       * @return {Image[]} Retuns an array of masks (1 bit Image)
       */
      getAnalysisMasks(options = {}) {
        const {
          analysisProperty
        } = options;
        let maskProperty = `${analysisProperty}Mask`;
        let rois = this.getRois(options);
        if (rois.length === 0 || !rois[0][maskProperty])
          return [];
        return rois.map((roi) => roi[maskProperty]);
      }
      /**
       *
       * @param {object} [options]
       * @return {number[]}
       */
      getData(options = {}) {
        let opt = Object.assign({}, this._options, options);
        this._assertLayerWithLabel(opt.label);
        return this._layers[opt.label].roiMap.data;
      }
      /**
       * Paint the ROI on a copy of the image and return this image.
       * For painting options {@link Image.paintMasks}
       * For ROI selection options, see {@link RoiManager.getMasks}
       * @param {object} [options] - all the options to select ROIs
       * @param {string} [options.labelProperty] - Paint a mask property on the image.
       *                                  May be any property of the ROI like
       *                                  for example id, surface, width, height, meanX, meanY.
       * @param {number} [options.pixelSize] Size of a pixel in SI
       * @param {string} [options.unit="pixel"] Unit in which to display the values
       * @return {Image} - The painted RGBA 8 bits image
       */
      paint(options = {}) {
        let {
          labelProperty,
          analysisProperty
        } = options;
        if (!this._painted) {
          this._painted = this._image.rgba8();
        }
        let masks = this.getMasks(options);
        if (labelProperty) {
          const rois = this.getRois(options);
          options.labels = rois.map((roi) => (0, _deepValue.default)(roi, labelProperty));
          const max = Math.max(...options.labels);
          let isSurface = false;
          let isDistance = false;
          if (labelProperty.includes("surface")) {
            isSurface = true;
          } else if (/(?:perimeter|min|max|external|width|height|length)/.test(labelProperty)) {
            isDistance = true;
          }
          if (isFinite(max)) {
            let unitLabel = "";
            if (options.unit !== "pixel" && options.pixelSize && (isDistance || isSurface)) {
              unitLabel = isSurface ? `${options.unit}^2` : options.unit;
              let siLabel = isSurface ? "m^2" : "m";
              let factor = isSurface ? options.pixelSize ** 2 : options.pixelSize;
              const convert = _jsQuantities.default.swiftConverter(siLabel, unitLabel);
              options.labels = options.labels.map((value) => {
                return convert(factor * value);
              });
            }
            if (max > 50) {
              options.labels = options.labels.map((number) => Math.round(number) + unitLabel);
            } else if (max > 10) {
              options.labels = options.labels.map((number) => number.toFixed(1) + unitLabel);
            } else {
              options.labels = options.labels.map((number) => number.toFixed(2) + unitLabel);
            }
          }
          options.labelsPosition = rois.map((roi) => [roi.meanX, roi.meanY]);
        }
        this._painted.paintMasks(masks, options);
        if (analysisProperty) {
          let analysisMasks = this.getAnalysisMasks(options);
          this._painted.paintMasks(analysisMasks, {
            color: options.analysisColor,
            alpha: options.analysisAlpha
          });
        }
        return this._painted;
      }
      // return a mask corresponding to all the selected masks
      getMask(options = {}) {
        let mask = new _Image.default(this._image.width, this._image.height, {
          kind: "BINARY"
        });
        let masks = this.getMasks(options);
        for (let i = 0; i < masks.length; i++) {
          let roi = masks[i];
          for (let x = 0; x < roi.width; x++) {
            for (let y = 0; y < roi.height; y++) {
              if (roi.getBitXY(x, y)) {
                mask.setBitXY(x + roi.position[0], y + roi.position[1]);
              }
            }
          }
        }
        return mask;
      }
      /**
       * Reset the changes to the current painted iamge to the image that was
       * used during the creation of the RoiManager except if a new image is
       * specified as parameter;
       * @param {object} [options]
       * @param {Image} [options.image] A new iamge that you would like to sue for painting over
       */
      resetPainted(options = {}) {
        const {
          image
        } = options;
        if (image) {
          this._painted = this.image.rgba8();
        } else {
          this._painted = this._image.rgba8();
        }
      }
      /**
       * In place modification of the roiMap that joins regions of interest
       * @param {object} [options]
       * @param {string|function(object,number,number)} [options.algorithm='commonBorderLength'] algorithm used to decide which ROIs are merged.
       *      Current implemented algorithms are 'commonBorderLength' that use the parameters
       *      'minCommonBorderLength' and 'maxCommonBorderLength' as well as 'commonBorderRatio' that uses
       *      the parameters 'minCommonBorderRatio' and 'maxCommonBorderRatio'.
       * @param {number} [options.minCommonBorderLength=5] minimal common number of pixels for merging
       * @param {number} [options.maxCommonBorderLength=100] maximal common number of pixels for merging
       * @param {number} [options.minCommonBorderRatio=0.3] minimal common border ratio for merging
       * @param {number} [options.maxCommonBorderRatio=1] maximal common border ratio for merging
       * @return {this}
       */
      mergeRoi(options = {}) {
        const roiMap = this.getMap(options);
        roiMap.mergeRoi(options);
        this.putMap(roiMap.data, options);
        return this;
      }
      /**
       * Merge multiple rois into one.
       * All rois in the provided array will be merged into the first one.
       * @param {Array<number>} roiIds - A list of Roi ids to merge
       * @param {object} [options]
       */
      mergeRois(roiIds, options = {}) {
        if (!Array.isArray(roiIds) || roiIds.some((id) => !Number.isInteger(id))) {
          throw new Error("Roi ids must be an array of integers");
        }
        if (roiIds.length < 2) {
          throw new Error("Roi ids must have at least two elements");
        }
        if (new Set(roiIds).size !== roiIds.length) {
          throw new Error("Roi ids must be all different");
        }
        roiIds.forEach((roiId) => this.getRoi(roiId));
        const roiMap = this.getMap(options);
        roiMap.mergeRois(roiIds);
        this.putMap(roiMap.data, options);
        return this;
      }
      /**
       * Finds all corresponding ROIs for all ROIs in the manager
       * @param {number[]} roiMap
       * @param {object} [options]
       * @return {Array} array of objects returned in correspondingRoisInformation
       */
      findCorrespondingRoi(roiMap, options = {}) {
        let allRois = this.getRois(options);
        let allRelated = [];
        for (let i = 0; i < allRois.length; i++) {
          let currentRoi = allRois[i];
          let x = currentRoi.minX;
          let y = currentRoi.minY;
          let allPoints = currentRoi.points;
          let roiSign = Math.sign(currentRoi.id);
          let currentRelated = correspondingRoisInformation(x, y, allPoints, roiMap, roiSign);
          allRelated.push(currentRelated);
        }
        return allRelated;
      }
      _assertLayerWithLabel(label) {
        if (!this._layers[label]) {
          throw new Error(`no layer with label ${label}`);
        }
      }
    };
    exports2.default = RoiManager;
    function correspondingRoisInformation(x, y, points, roiMap, roiSign) {
      let correspondingRois = {
        id: [],
        surface: [],
        roiSurfaceCovered: [],
        same: 0,
        opposite: 0,
        total: 0
      };
      for (let i = 0; i < points.length; i++) {
        let currentPoint = points[i];
        let currentX = currentPoint[0];
        let currentY = currentPoint[1];
        let correspondingRoiMapIndex = currentX + x + (currentY + y) * roiMap.width;
        let value = roiMap.data[correspondingRoiMapIndex];
        if (value > 0 || value < 0) {
          if (correspondingRois.id.includes(value)) {
            correspondingRois.surface[correspondingRois.id.indexOf(value)] += 1;
          } else {
            correspondingRois.id.push(value);
            correspondingRois.surface.push(1);
          }
        }
      }
      for (let i = 0; i < correspondingRois.id.length; i++) {
        let currentSign = Math.sign(correspondingRois.id[i]);
        if (currentSign === roiSign) {
          correspondingRois.same += correspondingRois.surface[i];
        } else {
          correspondingRois.opposite += correspondingRois.surface[i];
        }
        correspondingRois.roiSurfaceCovered[i] = correspondingRois.surface[i] / points.length;
      }
      correspondingRois.total = correspondingRois.opposite + correspondingRois.same;
      return correspondingRois;
    }
  }
});

// node_modules/image-js/lib/image/Image.js
var require_Image = __commonJS({
  "node_modules/image-js/lib/image/Image.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _bitMethods = _interopRequireDefault(require_bitMethods());
    var _checkProcessable = _interopRequireDefault(require_checkProcessable());
    var _export = _interopRequireDefault(require_export());
    var _extend = require_extend();
    var _getRGBAData = _interopRequireDefault(require_getRGBAData());
    var _kind = require_kind();
    var _kindNames = require_kindNames();
    var _load = _interopRequireDefault(require_load());
    var _valueMethods = _interopRequireDefault(require_valueMethods());
    var _extend2 = _interopRequireDefault(require_extend3());
    var _getImageParameters = _interopRequireDefault(require_getImageParameters());
    var _manager = _interopRequireDefault(require_manager());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var objectToString = Object.prototype.toString;
    var Image3 = class _Image {
      constructor(width, height, data, options) {
        if (arguments.length === 1) {
          options = width;
          ({
            width,
            height,
            data
          } = options);
        } else if (data && !data.length) {
          options = data;
          ({
            data
          } = options);
        }
        if (width === void 0)
          width = 1;
        if (height === void 0)
          height = 1;
        if (options === void 0)
          options = {};
        if (typeof options !== "object" || options === null) {
          throw new TypeError("options must be an object");
        }
        if (!Number.isInteger(width) || width <= 0) {
          throw new RangeError("width must be a positive integer");
        }
        if (!Number.isInteger(height) || height <= 0) {
          throw new RangeError("height must be a positive integer");
        }
        const {
          kind = _kindNames.RGBA
        } = options;
        if (typeof kind !== "string") {
          throw new TypeError("kind must be a string");
        }
        const theKind = (0, _kind.getKind)(kind);
        const kindDefinition = Object.assign({}, options);
        for (const prop in theKind) {
          if (kindDefinition[prop] === void 0) {
            kindDefinition[prop] = theKind[prop];
          }
        }
        (0, _kind.verifyKindDefinition)(kindDefinition);
        const {
          components,
          bitDepth,
          colorModel
        } = kindDefinition;
        const alpha = kindDefinition.alpha + 0;
        const size = width * height;
        const channels = components + alpha;
        const maxValue = bitDepth === 32 ? Number.MAX_VALUE : 2 ** bitDepth - 1;
        if (data === void 0) {
          data = (0, _kind.createPixelArray)(size, components, alpha, channels, bitDepth, maxValue);
        } else {
          const expectedLength = (0, _kind.getTheoreticalPixelArraySize)(size, channels, bitDepth);
          if (data.length !== expectedLength) {
            throw new RangeError(`incorrect data size: ${data.length}. Should be ${expectedLength}`);
          }
        }
        this.width = width;
        this.height = height;
        this.data = data;
        this.size = size;
        this.components = components;
        this.alpha = alpha;
        this.bitDepth = bitDepth;
        this.maxValue = maxValue;
        this.colorModel = colorModel;
        this.channels = channels;
        this.meta = options.meta || {};
        Object.defineProperty(this, "parent", {
          enumerable: false,
          writable: true,
          configurable: true,
          value: options.parent || null
        });
        this.position = options.position || [0, 0];
        this.computed = null;
        this.sizes = [this.width, this.height];
        this.multiplierX = this.channels;
        this.multiplierY = this.channels * this.width;
        this.isClamped = this.bitDepth < 32;
        this.borderSizes = [0, 0];
      }
      get [Symbol.toStringTag]() {
        return "IJSImage";
      }
      static isImage(object) {
        return objectToString.call(object) === "[object IJSImage]";
      }
      /**
       * Creates an image from an HTML Canvas object
       * @param {Canvas} canvas
       * @return {Image}
       */
      static fromCanvas(canvas) {
        const ctx = canvas.getContext("2d");
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        return new _Image(imageData.width, imageData.height, imageData.data);
      }
      /**
       * Create a new Image based on the characteristics of another one.
       * @param {Image} other
       * @param {object} [options] - Override options to change some parameters
       * @return {Image}
       * @example
       * const newImage = Image.createFrom(image, { width: 100 });
       */
      static createFrom(other, options) {
        const newOptions = (0, _getImageParameters.default)(other);
        Object.assign(newOptions, {
          parent: other,
          position: [0, 0]
        }, options);
        return new _Image(newOptions);
      }
      /**
       * Create a new manager for regions of interest based on the current image.
       * @param {object} [options]
       * @return {RoiManager}
       */
      getRoiManager(options) {
        return new _manager.default(this, options);
      }
      /**
       * Create a copy a the current image, including its data.
       * @instance
       * @return {Image}
       */
      clone() {
        const newData = this.data.slice();
        return new _Image(this.width, this.height, newData, this);
      }
      apply(filter) {
        for (let y = 0; y < this.height; y++) {
          for (let x = 0; x < this.width; x++) {
            let index = (y * this.width + x) * this.channels;
            filter.call(this, index);
          }
        }
      }
    };
    exports2.default = Image3;
    (0, _valueMethods.default)(Image3);
    (0, _bitMethods.default)(Image3);
    (0, _export.default)(Image3);
    Image3.prototype.checkProcessable = _checkProcessable.default;
    Image3.prototype.getRGBAData = _getRGBAData.default;
    Image3.load = _load.default;
    Image3.extendMethod = _extend.extendMethod;
    Image3.extendProperty = _extend.extendProperty;
    (0, _extend2.default)(Image3);
  }
});

// node_modules/image-js/lib/kernel/laplacianOfGaussian.js
var require_laplacianOfGaussian = __commonJS({
  "node_modules/image-js/lib/kernel/laplacianOfGaussian.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.laplacianOfGaussian = laplacianOfGaussian;
    function laplacianOfGaussian(sigma, nPoints, factor) {
      let kernel = new Array(nPoints);
      let i, j, x2, y2;
      if (!factor) {
        factor = 100;
      }
      factor *= -1;
      let center = (nPoints - 1) / 2;
      let sigma2 = 2 * sigma * sigma;
      for (i = 0; i < nPoints; i++) {
        kernel[i] = new Array(nPoints);
        y2 = (i - center) * (i - center);
        for (j = 0; j < nPoints; j++) {
          x2 = (j - center) * (j - center);
          kernel[i][j] = Math.round(factor * (1 - (x2 + y2) / sigma2) * Math.exp(-(x2 + y2) / sigma2));
        }
      }
      return kernel;
    }
  }
});

// node_modules/image-js/lib/kernel/kernel.js
var require_kernel3 = __commonJS({
  "node_modules/image-js/lib/kernel/kernel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      laplacianOfGaussian: true
    };
    Object.defineProperty(exports2, "laplacianOfGaussian", {
      enumerable: true,
      get: function() {
        return _laplacianOfGaussian.laplacianOfGaussian;
      }
    });
    var _kernels = require_kernels();
    Object.keys(_kernels).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports2 && exports2[key] === _kernels[key])
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _kernels[key];
        }
      });
    });
    var _laplacianOfGaussian = require_laplacianOfGaussian();
  }
});

// node_modules/image-js/lib/worker/worker.js
var require_worker = __commonJS({
  "node_modules/image-js/lib/worker/worker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = exports2.default = void 0;
  }
});

// node_modules/image-js/lib/index.js
var require_lib25 = __commonJS({
  "node_modules/image-js/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "Image", {
      enumerable: true,
      get: function() {
        return _Image.default;
      }
    });
    exports2.Kernel = void 0;
    Object.defineProperty(exports2, "Shape", {
      enumerable: true,
      get: function() {
        return _Shape.default;
      }
    });
    Object.defineProperty(exports2, "Stack", {
      enumerable: true,
      get: function() {
        return _Stack.default;
      }
    });
    exports2.Static = void 0;
    Object.defineProperty(exports2, "Worker", {
      enumerable: true,
      get: function() {
        return _worker.default;
      }
    });
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _Image.default;
      }
    });
    var _Image = _interopRequireDefault(require_Image());
    var _greyAlgorithms = require_greyAlgorithms();
    var _thresholdAlgorithms = require_thresholdAlgorithms();
    var Kernel = _interopRequireWildcard(require_kernel3());
    exports2.Kernel = Kernel;
    var _Stack = _interopRequireDefault(require_Stack());
    var _Shape = _interopRequireDefault(require_Shape());
    var _worker = _interopRequireDefault(require_worker());
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var Static = exports2.Static = {
      grey: _greyAlgorithms.names,
      threshold: _thresholdAlgorithms.names
    };
  }
});

// src/index.js
var { ethers } = require_lib2();
var { Image: Image2 } = require_lib25();
var rollup_server = process.env.ROLLUP_HTTP_SERVER_URL;
console.log("HTTP rollup_server url is " + rollup_server);
async function detectEdges(inputPath, outputPath) {
  try {
    const image = await Image2.load(inputPath);
    const gray = image.grey();
    const kernelX = [
      [-1, 0, 1],
      [-2, 0, 2],
      [-1, 0, 1]
    ];
    const kernelY = [
      [-1, -2, -1],
      [0, 0, 0],
      [1, 2, 1]
    ];
    const sobelX = gray.convolution(kernelX);
    const sobelY = gray.convolution(kernelY);
    const edgeImage = sobelX.hypotenuse(sobelY);
    await edgeImage.save(outputPath);
    console.log(`Edge detection complete. Saved as ${outputPath}`);
  } catch (error) {
    console.error("Error processing image:", error);
  }
}
async function handle_advance(data) {
  console.log("Received advance request data " + JSON.stringify(data));
  detectEdges("image.jpeg", "edges.jpeg");
  return "accept";
}
async function handle_inspect(data) {
  console.log("Received inspect request data " + JSON.stringify(data));
  return "accept";
}
var handlers = {
  advance_state: handle_advance,
  inspect_state: handle_inspect
};
var finish = { status: "accept" };
(async () => {
  while (true) {
    const finish_req = await fetch(rollup_server + "/finish", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ status: "accept" })
    });
    console.log("Received finish status " + finish_req.status);
    if (finish_req.status == 202) {
      console.log("No pending rollup request, trying again");
    } else {
      const rollup_req = await finish_req.json();
      var handler = handlers[rollup_req["request_type"]];
      finish["status"] = await handler(rollup_req["data"]);
    }
  }
})();
/*! Bundled license information:

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.commonjs/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)
*/
